<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BilibiliNameRegexPattern" xml:space="preserve">
    <value>((哔哩)\2|[Bb]\s{0,3}站|[Bb]i(li)bi\3)</value>
  </data>
  <data name="BootingFailedDueToHttp" xml:space="preserve">
    <value>机器人启动失败，原因为 HTTP 导致的框架直接执行错误。请检查账号是否可以正常通过 Mirai 登录。</value>
  </data>
  <data name="BootingFailedDueToMirai" xml:space="preserve">
    <value>机器人启动失败，原因为 Mirai 尚未启动导致的执行错误。请检查 Mirai 的 Module Loader 是否正确启动。</value>
  </data>
  <data name="BootingSuccessMessage" xml:space="preserve">
    <value>机器人启动成功！退出请按任意键……</value>
  </data>
  <data name="ColorBlack" xml:space="preserve">
    <value>黑</value>
  </data>
  <data name="ColorBlue" xml:space="preserve">
    <value>蓝</value>
  </data>
  <data name="ColorDarkGreen" xml:space="preserve">
    <value>深绿</value>
  </data>
  <data name="ColorDarkYellow" xml:space="preserve">
    <value>深黄</value>
  </data>
  <data name="ColorGray" xml:space="preserve">
    <value>灰</value>
  </data>
  <data name="ColorGreen" xml:space="preserve">
    <value>绿</value>
  </data>
  <data name="ColorKind_Als1" xml:space="preserve">
    <value>*1</value>
  </data>
  <data name="ColorKind_Als2" xml:space="preserve">
    <value>*2</value>
  </data>
  <data name="ColorKind_Als3" xml:space="preserve">
    <value>*3</value>
  </data>
  <data name="ColorKind_Als4" xml:space="preserve">
    <value>*4</value>
  </data>
  <data name="ColorKind_Als5" xml:space="preserve">
    <value>*5</value>
  </data>
  <data name="ColorKind_Assignment" xml:space="preserve">
    <value>=</value>
  </data>
  <data name="ColorKind_Aux1" xml:space="preserve">
    <value>@1</value>
  </data>
  <data name="ColorKind_Aux2" xml:space="preserve">
    <value>@2</value>
  </data>
  <data name="ColorKind_Aux3" xml:space="preserve">
    <value>@3</value>
  </data>
  <data name="ColorKind_Cannibalism" xml:space="preserve">
    <value>自噬</value>
  </data>
  <data name="ColorKind_Elimination" xml:space="preserve">
    <value>!</value>
  </data>
  <data name="ColorKind_Endofin" xml:space="preserve">
    <value>内鱼鳍</value>
  </data>
  <data name="ColorKind_Exofin" xml:space="preserve">
    <value>鳍</value>
  </data>
  <data name="ColorKind_Normal" xml:space="preserve">
    <value>普通</value>
  </data>
  <data name="ColorOrange1" xml:space="preserve">
    <value>橙</value>
  </data>
  <data name="ColorOrange2" xml:space="preserve">
    <value>橘</value>
  </data>
  <data name="ColorPink" xml:space="preserve">
    <value>粉红</value>
  </data>
  <data name="ColorPurple" xml:space="preserve">
    <value>紫</value>
  </data>
  <data name="ColorRed" xml:space="preserve">
    <value>红</value>
  </data>
  <data name="ColorSkyblue" xml:space="preserve">
    <value>天蓝</value>
  </data>
  <data name="ColorYellow" xml:space="preserve">
    <value>黄</value>
  </data>
  <data name="ExpString" xml:space="preserve">
    <value>积分</value>
  </data>
  <data name="SampleMemberJoinedMessage" xml:space="preserve">
    <value>欢迎新成员~ 这里是 B 站 up 主 SunnieShine 的数独交流群~</value>
  </data>
  <data name="SampleReplyMessage" xml:space="preserve">
    <value>Hello, world!</value>
  </data>
  <data name="_Command_CheckIn" xml:space="preserve">
    <value>签到</value>
  </data>
  <data name="_Command_CheckInIntro" xml:space="preserve">
    <value>签到说明</value>
  </data>
  <data name="_Command_Clear" xml:space="preserve">
    <value>清</value>
  </data>
  <data name="_Command_ComplexLookupScore" xml:space="preserve">
    <value>详细查询</value>
  </data>
  <data name="_Command_Delete" xml:space="preserve">
    <value>删</value>
  </data>
  <data name="_Command_Draw" xml:space="preserve">
    <value>绘图</value>
  </data>
  <data name="_Command_DrawSub" xml:space="preserve">
    <value>涂</value>
  </data>
  <data name="_Command_End" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="_Command_Help" xml:space="preserve">
    <value>帮助</value>
  </data>
  <data name="_Command_LookupScore" xml:space="preserve">
    <value>查询</value>
  </data>
  <data name="_Command_Ranking" xml:space="preserve">
    <value>排名</value>
  </data>
  <data name="_Command_Set" xml:space="preserve">
    <value>填</value>
  </data>
  <data name="_Command_UpdateScore" xml:space="preserve">
    <value>加分</value>
  </data>
  <data name="_HelpMessage" xml:space="preserve">
    <value>欢迎使用机器人！该机器人提供如下功能：
【基本功能】
・签到：签到可以获得经验值；
・签到说明：查看“签到”指令的详细说明；
・查询：查询当前用户的积分数据；
・帮助：查看帮助文字；
・绘图：启动绘图功能。
【管理员限定】
・详细查询 &lt;用户&gt;：查询指定用户的积分；
・排名：查询所有记录了的该群成员的积分，并排名。
【群主限定】
・加分 &lt;用户&gt;，&lt;分数&gt;：这是什么呢？
---
所有指令请都带上感叹号，例如“！查询”。</value>
  </data>
  <data name="_MessageFormat_CheckInFailedDueToMultipleInSameDay" xml:space="preserve">
    <value>签到失败~ 你今天已经签过到了，明天再来试试吧~</value>
  </data>
  <data name="_MessageFormat_CheckInSuccessful" xml:space="preserve">
    <value>签到成功！恭喜你获得 {0} 积分。一天只能签到一次哦~</value>
  </data>
  <data name="_MessageFormat_CheckInSuccessfulAndContinuous" xml:space="preserve">
    <value>签到成功！已连续签到 {0} 天~ 恭喜你获得 {1} 积分。一天只能签到一次哦~</value>
  </data>
  <data name="_MessageFormat_DrawStartMessage" xml:space="preserve">
    <value>绘图说明📖
绘图支持如下指令：
・涂 &lt;单元格|候选数|区域&gt;，&lt;颜色&gt;：给它们进行涂色；
・清 &lt;单元格|候选数|区域&gt;：清除它们已有的涂色；
・填 &lt;单元格&gt;，&lt;数&gt;：往单元格填入数字；
・删 &lt;单元格&gt;，&lt;数&gt;：往单元格删除候选数；
・退出：退出该功能。
【颜色表达式】
机器人支持识别一些简化后的表达式：
・%#1-15：使用自带的 15 种配色涂色；
・%@1-3：三种辅助配色；
・%=：用于候选数，表示填数结论；
・%!：用于候选数，表示删数结论；
・%*1-5：使用 Hodoku 对 ALS 的 5 种配色；
・%#RRGGBB：RGB 配色代码；
・%#AARRGGBB：ARGB 配色代码。</value>
  </data>
  <data name="_MessageFormat_EndOkay" xml:space="preserve">
    <value>退出成功。现可继续使用其他功能~</value>
  </data>
  <data name="_MessageFormat_LookupNameOrIdAmbiguous" xml:space="preserve">
    <value>待搜索用户名称或 QQ 号码匹配到多个用户。请修改搜索条件或提醒用户更换名称并重试。</value>
  </data>
  <data name="_MessageFormat_LookupNameOrIdInvalid" xml:space="preserve">
    <value>待搜索用户名称或 QQ 号码错误，请检查。</value>
  </data>
  <data name="_MessageFormat_PermissionRequired" xml:space="preserve">
    <value>该功能需要更高权限者使用~</value>
  </data>
  <data name="_MessageFormat_RankingListIsEmpty" xml:space="preserve">
    <value>用户尚未加入进来~ 排名里没有人~</value>
  </data>
  <data name="_MessageFormat_RankingResult" xml:space="preserve">
    <value>用户排名：</value>
  </data>
  <data name="_MessageFormat_RejectJoiningGroup" xml:space="preserve">
    <value>机器人拒绝添加您到本群之中。请联系此群的管理员。</value>
  </data>
  <data name="_MessageFormat_ScoreAppending" xml:space="preserve">
    <value>恭喜群友 {0} 获得 {1} 积分！</value>
  </data>
  <data name="_MessageFormat_UserScoreIs" xml:space="preserve">
    <value>用户 {0}（{2}）当前积分为 {1}。</value>
  </data>
  <data name="_MessageFormat_UserScoreNotFound" xml:space="preserve">
    <value>用户 {0}（{1}）尚未使用过机器人，本地没有数据。</value>
  </data>
  <data name="_Token_ClosedBrace" xml:space="preserve">
    <value>）</value>
  </data>
  <data name="_Token_Colon" xml:space="preserve">
    <value>：</value>
  </data>
  <data name="_Token_Comma" xml:space="preserve">
    <value>，</value>
  </data>
  <data name="_Token_OpenBrace" xml:space="preserve">
    <value>（</value>
  </data>
</root>