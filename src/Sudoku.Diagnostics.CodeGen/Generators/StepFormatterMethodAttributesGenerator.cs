namespace Sudoku.Diagnostics.CodeGen.Generators;

/// <summary>
/// Defines a source generator that generates the source code of attributes applied to formatter methods in step types.
/// </summary>
[Generator(LanguageNames.CSharp)]
public sealed class StepFormatterMethodAttributesGenerator : IIncrementalGenerator
{
	/// <inheritdoc/>
	public void Initialize(IncrementalGeneratorInitializationContext context)
		=> context.RegisterSourceOutput(
			context.SyntaxProvider
				.CreateSyntaxProvider(
					static (node, _)
						=> node is RecordDeclarationSyntax
						{
							ClassOrStructKeyword: not { RawKind: (int)SyntaxKind.StructKeyword },
							Modifiers: var modifiers and not [],
							BaseList.Types: not []
						} && modifiers.Any(SyntaxKind.PartialKeyword),
					static (gsc, ct)
						=> gsc is { Node: RecordDeclarationSyntax node, SemanticModel: { } semanticModel }
							? semanticModel.GetDeclaredSymbol(node, ct)
							: null
				)
				.Combine(context.CompilationProvider)
				.Where(static pair => pair is (not null, { Assembly.Name: Projects.SudokuCore })),
			static (spc, pair) =>
			{
				if (pair is not ({ BaseType: var baseType } typeSymbol, { Assembly: var assemblySymbol } compilation))
				{
					return;
				}

				var stepType = compilation.GetTypeByMetadataName("Sudoku.Solving.Step")!;
				bool isStep = false;
				for (var temp = stepType; temp is not null; temp = temp.BaseType)
				{
					if (SymbolEqualityComparer.Default.Equals(temp, stepType))
					{
						isStep = true;
						break;
					}
				}
				if (!isStep)
				{
					return;
				}

				var targetAttributeType = compilation.GetTypeByMetadataName("Sudoku.Text.ResourceTextFormatterAttribute")!;
				string code = string.Join(
					"\r\n\r\n\t",
					from method in typeSymbol.GetMembers().OfType<IMethodSymbol>()
					where method is { ReturnType.SpecialType: SpecialType.System_String }
					let attributes = method.GetAttributes()
					where attributes.Any(a => SymbolEqualityComparer.Default.Equals(a.AttributeClass, targetAttributeType))
					select $"""
						private partial string {method.Name}();
					"""
				);

				spc.AddSource(
					$"{typeSymbol.Name}.g.{Shortcuts.StepFormatterMethodAttributes}.cs",
					$$"""
					// <auto-generated />

					namespace Sudoku.Solving.Manual.Steps;

					partial record {{typeSymbol.Name}}
					{
						{{code}}
					}
					"""
				);
			}
		);
}
