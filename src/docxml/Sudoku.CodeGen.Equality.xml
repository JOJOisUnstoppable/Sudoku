<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.CodeGen.Equality</name>
    </assembly>
    <members>
        <member name="T:Sudoku.CodeGen.Equality.Annotations.AutoEqualityAttribute">
            <summary>
            Indicates an attribute to mark a type, to indicate the type will be generated a default method
            called <c>Equals</c>.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.Equality.Annotations.AutoEqualityAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified members.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.CodeGen.Equality.Annotations.AutoEqualityAttribute.FieldOrPropertyList">
            <summary>
            Indicates the field of property list.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGen.Equality.AutoEqualsMethodGenerator">
            <summary>
            Indicates the generator that generates the methods about the equality checking. All methods below
            will be generated:
            <list type="bullet">
            <item><c>bool Equals(object? obj)</c></item>
            <item><c>bool Equals(T comparer)</c></item>
            <item><c>bool ==(T left, T right)</c></item>
            <item><c>bool !=(T left, T right)</c></item>
            </list>
            </summary>
            <remarks>
            Please note that if the type is a <see langword="ref struct"/>, the first one won't be generated
            because this method is useless in the by-ref-like types.
            </remarks>
        </member>
        <member name="M:Sudoku.CodeGen.Equality.AutoEqualsMethodGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGen.Equality.AutoEqualsMethodGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGen.Equality.AutoEqualsMethodGenerator.GetMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Try to get all possible fields or properties in the specified <see langword="class"/> type.
            </summary>
            <param name="symbol">The specified class symbol.</param>
            <param name="handleRecursively">
            A <see cref="T:System.Boolean"/> value indicating whether the method will handle the type recursively.</param>
            <returns>The result list that contains all member symbols.</returns>
        </member>
        <member name="T:Sudoku.CodeGen.Equality.AutoEqualsMethodGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGen.Equality.AutoEqualsMethodGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.Equality.AutoEqualsMethodGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGen.Equality.Extensions.ISymbolEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ISymbol"/>
        </member>
        <member name="M:Sudoku.CodeGen.Equality.Extensions.ISymbolEx.Marks``1(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            To determine whether the symbol has marked the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of that attribute.</typeparam>
            <param name="this">The symbol to check.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.CodeGen.Equality.Extensions.SyntaxReferenceEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>
        </member>
        <member name="M:Sudoku.CodeGen.Equality.Extensions.SyntaxReferenceEx.Deconstruct(Microsoft.CodeAnalysis.SyntaxReference,Microsoft.CodeAnalysis.Text.TextSpan@,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Deconstruct the <see cref="T:Microsoft.CodeAnalysis.SyntaxReference"/> instance to the current <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>
            and the <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="this">The current syntax reference instance.</param>
            <param name="textSpan">The text span.</param>
            <param name="syntaxNode">The syntax node.</param>
        </member>
        <member name="T:Sudoku.CodeGen.Equality.FormatOptions">
            <summary>
            Indicates the output format options.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGen.Equality.FormatOptions.TypeFormat">
            <summary>
            Indicates the type format.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGen.Equality.FormatOptions.PropertyTypeFormat">
            <summary>
            Indicates the property format.
            </summary>
        </member>
    </members>
</doc>
