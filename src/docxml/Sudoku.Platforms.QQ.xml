<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Platforms.QQ</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Platforms.QQ.AppLifecycle.AnsweringContext">
            <summary>
            The answering context.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.AnsweringContext.AnsweredUsers">
            <summary>
            The answered users.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.AnsweringContext.CurrentRoundAnsweredValues">
            <summary>
            The answered raw values in a loop-scoped round.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.AnsweringContext.IsCancelled">
            <summary>
            Indicates whether the user has emitted cancelled command.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext">
            <summary>
            Defines a context that represents a detail data in a group used by a bot running.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.IsMuted">
            <summary>
            Indicates whether the bot has been muted by other users in the same group that can mute bot.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.ExecutingCommand">
            <summary>
            The command currently executing.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.AnsweringContext">
            <inheritdoc cref="T:Sudoku.Platforms.QQ.AppLifecycle.AnsweringContext"/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.DrawingContext">
            <inheritdoc cref="T:Sudoku.Platforms.QQ.AppLifecycle.DrawingContext"/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.Configuration">
            <inheritdoc cref="T:Sudoku.Platforms.QQ.Configurations.UserDefinedConfigurations"/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.GetContext(System.String)">
            <summary>
            Try to fetch <see cref="T:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext"/> instance of the specified group.
            </summary>
            <param name="group">The group.</param>
            <returns>The <see cref="T:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext"/> result if found.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.GetContext(Mirai.Net.Data.Shared.Group)">
            <inheritdoc cref="M:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.GetContext(System.String)"/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.AppLifecycle.DrawingContext">
            <summary>
            The drawing context.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.DrawingContext.Puzzle">
            <summary>
            The grid to be operated with.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.AppLifecycle.DrawingContext.Painter">
            <summary>
            The painter.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.AppLifecycle.EnvironmentData">
            <summary>
            Provides with environment data.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.AppLifecycle.EnvironmentData.Rng">
            <summary>
            The random number generator.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.AppLifecycle.EnvironmentData.Generator">
            <summary>
            The generator.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.AppLifecycle.EnvironmentData.Solver">
            <summary>
            The solver.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.AppLifecycle.EnvironmentData.GridAutoFiller">
            <summary>
            Indicates the auto filler.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.AppLifecycle.EnvironmentData.RunningContexts">
            <summary>
            The internal running context.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.CheckInCommand">
            <summary>
            Indicates the check-in command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.CheckInCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.CheckInCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.CheckInCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.ClearCommand">
            <summary>
            Indicates the clear command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.ClearCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.ClearCommand.EnvironmentCommand">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.ClearCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.ClearCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.Command">
            <summary>
            Defines a command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.Command.CommandName">
            <summary>
            Indicates the command name that will be used as comparison.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.Command.EnvironmentCommand">
            <summary>
            Indicates the environment command that the current command relies on.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.Command.Prefixes">
            <summary>
            Indicates the prefix.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.Command.ComparisonMode">
            <summary>
            Indicates the comparison mode that will be used as check commands.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.Command.ExecuteAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <summary>
            Execute the command.
            </summary>
            <param name="args">The arguments.</param>
            <param name="e">The event arguments.</param>
            <returns>
            Returns a task instance that returns a <see cref="T:System.Boolean"/> value indicating whether the operation executed successfully.
            </returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.Command.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <summary>
            The internal method to handle with arguments <paramref name="args"/>, using <paramref name="e"/> to send messages.
            </summary>
            <param name="args">
            The arguments that is passed from QQ client. This argument will be pre-handled by the core method
            <see cref="M:Sudoku.Platforms.QQ.Commands.Command.ExecuteAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)"/>. The target value of this argument will be different
            with different settings of property <see cref="P:Sudoku.Platforms.QQ.Commands.Command.ComparisonMode"/>, if the property is:
            <list type="table">
            <item>
            <term><see cref="F:Sudoku.Platforms.QQ.Commands.CommandComparison.Strict"/></term>
            <description>The argument <paramref name="args"/> will be strictly equal to command name <see cref="P:Sudoku.Platforms.QQ.Commands.Command.CommandName"/>.</description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Platforms.QQ.Commands.CommandComparison.Prefix"/></term>
            <description>
            <para>The message received from QQ client will start with the command name <see cref="P:Sudoku.Platforms.QQ.Commands.Command.CommandName"/>.</para>
            <para>
            For example, if the command name is <c>a</c>, the message can be "<c>!a arg1 arg2 arg3</c>".
            Then the core method will cut the command name, keeping arguments <c>arg1</c>, <c>arg2</c> and <c>arg3</c>
            in the target arguments, passing into <paramref name="args"/> like "<c>arg1 arg2 arg3</c>", then you can use method
            <see cref="M:System.String.Split(System.Char[])"/> to get all values like:
            <code><![CDATA[
            var arguments = args.Split(' ');
            ]]></code>
            </para>
            </description>
            </item>
            </list>
            Other kinds of values are not supported.
            </param>
            <param name="e">
            The group message receiver instance. This instance can send message to the target user (i.e. mention somebody <c>@sb</c>),
            or just send a normal message to the target QQ group without mentioning anybody. You can send message using extension method
            <see cref="M:Mirai.Net.Utils.Scaffolds.MiraiScaffold.SendMessageAsync(Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver,Mirai.Net.Data.Messages.MessageChain)"/>:
            <code><![CDATA[
            await e.SendMessageAsync(targetMessage);
            ]]></code>
            </param>
            <returns></returns>
            <seealso cref="M:Sudoku.Platforms.QQ.Commands.Command.ExecuteAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)"/>
            <seealso cref="P:Sudoku.Platforms.QQ.Commands.Command.ComparisonMode"/>
            <seealso cref="P:Sudoku.Platforms.QQ.Commands.Command.CommandName"/>
            <seealso cref="M:System.String.Split(System.Char[])"/>
            <seealso cref="M:Mirai.Net.Utils.Scaffolds.MiraiScaffold.SendMessageAsync(Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver,Mirai.Net.Data.Messages.MessageChain)"/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.CommandAttribute">
            <summary>
            Declares the command and its permission.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.CommandAttribute.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Platforms.QQ.Commands.CommandAttribute"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.CommandAttribute.#ctor(Mirai.Net.Data.Shared.Permissions[])">
            <summary>
            Initializes a <see cref="T:Sudoku.Platforms.QQ.Commands.CommandAttribute"/> instance.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.CommandAttribute.AllowedPermissions">
            <summary>
            Indicates the permission.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.CommandComparison">
            <summary>
            Represents a comparison type that compares for two commands, using key value (<see cref="T:System.String"/> values).
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.CommandComparison.Strict">
            <summary>
            Indicates the comparison type is struct. Two commands should compare their <see cref="T:System.String"/> value.
            They are same if and only if they holds a same <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.CommandComparison.Prefix">
            <summary>
            Indicates the comparison type is comparing as prefixes. If the target <see cref="T:System.String"/> starts with the specified value,
            the comparison will be determined as <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.CommonCommandPrefixes">
            <summary>
            Extracts the prefix array provided, used by commands.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.CommonCommandPrefixes.HashTag">
            <summary>
            The hashtag symbol.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.CommonCommandPrefixes.Bang">
            <summary>
            The bang symbol.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.ComplexLookupScoreCommand">
            <summary>
            Indicates the complex lookup score command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.ComplexLookupScoreCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.ComplexLookupScoreCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.ComplexLookupScoreCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.DeleteDigitCommand">
            <summary>
            Indicates the delete command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DeleteDigitCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DeleteDigitCommand.EnvironmentCommand">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DeleteDigitCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.DeleteDigitCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.DrawCommand">
            <summary>
            Indicates draw command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawCommand.EnvironmentCommand">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.DrawCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.DrawEndCommand">
            <summary>
            Indicates the draw end command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawEndCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawEndCommand.EnvironmentCommand">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawEndCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.DrawEndCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.DrawStartCommand">
            <summary>
            Indicates the draw start command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawStartCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.DrawStartCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.DrawStartCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.GamingCancellingCommand">
            <summary>
            Defines a gaming cancelling command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.GamingCancellingCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.GamingCancellingCommand.EnvironmentCommand">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.GamingCancellingCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.GamingCancellingCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.HelpCommand">
            <summary>
            Indicates the help command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.HelpCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.HelpCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.HelpCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.ICommandDataProvider">
            <summary>
            Extracts a type that creates data used by commands.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.ICommandDataProvider.GetIdentifier(System.String)">
            <summary>
            Try to fetch the identifier name via the color name.
            </summary>
            <param name="name">The name of the color.</param>
            <returns>The identifier instance.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.ICommandDataProvider.GetCoordinate(System.String)">
            <summary>
            Try to fetch the coordinate value.
            </summary>
            <param name="rawCoordinate">The coordinate string value.</param>
            <returns>
            Returns a value that can be <see cref="T:Sudoku.Concepts.CellMap"/>, <see cref="T:Sudoku.Concepts.Candidates"/> and <see cref="T:System.Int32"/> value, where:
            <list type="table">
            <item>
            <term><see cref="T:Sudoku.Concepts.CellMap"/></term>
            <description>The cells parsed if the string value can be parsed as <see cref="T:Sudoku.Concepts.CellMap"/>.</description>
            </item>
            <item>
            <term><see cref="T:Sudoku.Concepts.Candidates"/></term>
            <description>The candidates parsed if the string value can be parsed as <see cref="T:Sudoku.Concepts.Candidates"/>.</description>
            </item>
            <item>
            <term><see cref="T:System.Int32"/></term>
            <description>The house parsed if the string value can be parsed as house index.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.ICommandDataProvider.GetCell(System.String)">
            <summary>
            Try to fetch the coordinate value.
            </summary>
            <param name="rawCoordinate">The coordinate string value.</param>
            <returns>The cell index parsed. If failed to be parsed, <see langword="null"/> will be returned.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.ICommandDataProvider.GetGamingTimeLimit(System.Int32[],Sudoku.Runtime.AnalysisServices.DifficultyLevel)">
            <summary>
            Gets the time limit for a single gaming.
            </summary>
            <param name="targetCells">
            The target cells. The valid length must be 2, 3, 5 or 7; otherwise, a <see cref="T:System.NotSupportedException"/> instance will be thrown.
            </param>
            <param name="difficultyLevel">The difficulty level of the puzzle.</param>
            <returns>The time limit.</returns>
            <exception cref="T:System.NotSupportedException">Throws when the specified argument value is not supported.</exception>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.Constants">
            <target name="class" when="constant">
				<summary>
					Provides with constants and read-only values used by code in the current file.
				</summary>
			</target>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.Constants.KnownColors">
            <summary>
            The table of known colors.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.Constants.KnownKinds">
            <summary>
            The table of known kinds.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.LookupScoreCommand">
            <summary>
            The lookup score command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.LookupScoreCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.LookupScoreCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.LookupScoreCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.PingCommand">
            <summary>
            Defines a ping command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.PingCommand.Prefixes">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.PingCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.PingCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.PingCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.PuzzleLibraryExtractCommand">
            <summary>
            Defines a puzzle library extract command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.PuzzleLibraryExtractCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.PuzzleLibraryExtractCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.PuzzleLibraryExtractCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.RankingCommand">
            <summary>
            Indicates the ranking command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.RankingCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.RankingCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.RankingCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.SetConfigCommand">
            <summary>
            Defines a set config command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.SetConfigCommand.Prefixes">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.SetConfigCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.SetConfigCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.SetConfigCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.Extensions">
            <target name="class" when="extension">
				<summary>
					Provides with file-local extension methods.
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.Extensions.ToPascalCasing(System.String)">
            <summary>
            Converts the raw name like <c>prop-name-is-like-this</c> to pascal-casing one: <c>PropNameIsLikeThis</c>.
            </summary>
            <param name="this">The string identifier.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.SetDigitCommand">
            <summary>
            Indicates the set digit command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.SetDigitCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.SetDigitCommand.EnvironmentCommand">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.SetDigitCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.SetDigitCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.StartGamingCommand">
            <summary>
            Define a start gaming command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.StartGamingCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.StartGamingCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.StartGamingCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.GeneratedGridData">
            <summary>
            The generated grid data.
            </summary>
            <param name="Puzzle">Indicates the puzzle.</param>
            <param name="SolutionData">Indicates all solution data that you should answer.</param>
            <param name="TimeLimit">The whole time limit of a single gaming.</param>
            <param name="ExperiencePoint">Indicates how many experience point you can earn in the current round if answered correctly.</param>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.GeneratedGridData.#ctor(Sudoku.Concepts.Grid@,System.ValueTuple{System.Int32,System.Int32}[],System.TimeSpan,System.Int32)">
            <summary>
            The generated grid data.
            </summary>
            <param name="Puzzle">Indicates the puzzle.</param>
            <param name="SolutionData">Indicates all solution data that you should answer.</param>
            <param name="TimeLimit">The whole time limit of a single gaming.</param>
            <param name="ExperiencePoint">Indicates how many experience point you can earn in the current round if answered correctly.</param>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.GeneratedGridData.Puzzle">
            <summary>Indicates the puzzle.</summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.GeneratedGridData.SolutionData">
            <summary>Indicates all solution data that you should answer.</summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.GeneratedGridData.TimeLimit">
            <summary>The whole time limit of a single gaming.</summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.GeneratedGridData.ExperiencePoint">
            <summary>Indicates how many experience point you can earn in the current round if answered correctly.</summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.Constants">
            <target name="class" when="constant">
				<summary>
					Provides with constants and read-only values used by code in the current file.
				</summary>
			</target>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.Constants.TwoCells">
            <summary>
            Indicates the cell indices that the puzzle will be extracted.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.Constants.ThreeCells">
            <summary>
            Indicates the cell indices that the puzzle will be extracted.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.Constants.FiveCells">
            <summary>
            Indicates the cell indices that the puzzle will be extracted.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Commands.Constants.SevenCells">
            <summary>
            Indicates the cell indices that the puzzle will be extracted.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.Extensions">
            <target name="class" when="extension">
				<summary>
					Provides with file-local extension methods.
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.Extensions.ToChineseTimeSpanString(System.TimeSpan)">
            <summary>
            Converts the current <see cref="T:System.TimeSpan"/> instance into a Chinese text string that represents the current instance.
            </summary>
            <param name="this">The <see cref="T:System.TimeSpan"/> instance.</param>
            <returns>The target string.</returns>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Commands.UpdateScoreCommand">
            <summary>
            Indicates the update score command.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.UpdateScoreCommand.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Commands.UpdateScoreCommand.ComparisonMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Commands.UpdateScoreCommand.ExecuteCoreAsync(System.String,Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Configurations.UserDefinedConfigurations">
            <summary>
            Defines a type that stores a user-defined configurations.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Configurations.UserDefinedConfigurations.RankingDisplayUsersCount">
            <summary>
            Indicates how many members will be displayed onto the ranking page. The more members to display, the longer the output text will be.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.IO.InternalReadWrite">
            <summary>
            Represents a type that interacts with local files. All methods in this type are synchronized methods.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.IO.InternalReadWrite.Read(System.String,Sudoku.Platforms.QQ.Models.UserData)">
            <summary>
            Reads the specified user's local file, and returns <see cref="T:Sudoku.Platforms.QQ.Models.UserData"/> instance.
            </summary>
            <param name="userId">The user QQ number.</param>
            <param name="default">The default value returned.</param>
            <returns>
            The converted data. The result value of <see langword="await"/> expression has a same nullability
            with argument <paramref name="default"/>, which means if <paramref name="default"/> is <see langword="null"/>,
            the expression <c>await InternalReadWrite.ReadValueAsync(...)</c> will also be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.IO.InternalReadWrite.ReadLibraries(System.String)">
            <summary>
            Gets the puzzle library for the target group specified as its group ID.
            </summary>
            <param name="groupId">The group ID.</param>
            <returns>The puzzle library data.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.IO.InternalReadWrite.ReadLibrary(System.String,System.String)">
            <summary>
            Gets the puzzle library for the target group specified as its group ID, and the specified library name.
            </summary>
            <param name="groupId">The group ID.</param>
            <param name="libraryName">The library name.</param>
            <returns>The puzzle library data.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.IO.InternalReadWrite.Write(Sudoku.Platforms.QQ.Models.UserData)">
            <summary>
            Writes the specified user's data to the local file.
            </summary>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:Sudoku.Platforms.QQ.IO.InternalReadWrite.GenerateCachedPicturePath(System.Func{Sudoku.Drawing.ISudokuPainter})">
            <summary>
            Generate a picture using the specified sudoku painter creator, storing it to the cached folder and return its file path.
            This method also saves the picture into the local path.
            </summary>
            <param name="painterCreator">The painter creator method.</param>
            <returns>The target path of the picture.</returns>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Models.PuzzleLibraryData">
            <summary>
            Indicates a puzzle library.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.PuzzleLibraryData.Name">
            <summary>
            Indicates the name of the library.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.PuzzleLibraryData.PuzzleFilePath">
            <summary>
            Indicates the puzzles in the library.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Models.UserData">
            <summary>
            Defines a user data.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.UserData.QQ">
            <summary>
            The user's QQ number.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.UserData.Score">
            <summary>
            Indicates the user's score.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.UserData.ComboCheckedIn">
            <summary>
            Indicates the number of continuous days that the user has checked in.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.UserData.LastCheckIn">
            <summary>
            Indicates the last time checked in of the current user.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Models.UserPuzzleAnswerData">
            <summary>
            Defines a user answer data.
            </summary>
            <param name="User">The user who gives the conclusion.</param>
            <param name="Conclusions">The answer conclusion digit value (-1 is for unknown value, 1 to 9 is for the target digit filled).</param>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Models.UserPuzzleAnswerData.#ctor(Mirai.Net.Data.Shared.Member,System.Int32[])">
            <summary>
            Defines a user answer data.
            </summary>
            <param name="User">The user who gives the conclusion.</param>
            <param name="Conclusions">The answer conclusion digit value (-1 is for unknown value, 1 to 9 is for the target digit filled).</param>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.UserPuzzleAnswerData.User">
            <summary>The user who gives the conclusion.</summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Models.UserPuzzleAnswerData.Conclusions">
            <summary>The answer conclusion digit value (-1 is for unknown value, 1 to 9 is for the target digit filled).</summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Operation.DailyPuzzleOperation">
            <summary>
            Defines a daily puzzle generating operation.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.DailyPuzzleOperation.#ctor">
            <summary>
            Defines a daily puzzle generating operation.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Operation.DailyPuzzleOperation.Generator">
            <summary>
            Defines a default puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Operation.DailyPuzzleOperation.Solver">
            <summary>
            Defines a default puzzle solver.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.DailyPuzzleOperation.ExecuteAsync">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.DailyPuzzleOperation.SendPictureAsync(System.String,System.String,System.String)">
            <summary>
            Sends a picture using the specified text and grid code.
            </summary>
            <param name="groupId">The group QQ number.</param>
            <param name="grid">The grid code.</param>
            <param name="footerText">The footer text.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Operation.OperationBase">
            <summary>
            Defines a base type of the operation.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.OperationBase.ExecuteAsync">
            <summary>
            Try to execute the task.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Operation.PeriodicOperation">
            <summary>
            Defines a periodic operation.
            </summary>
            <param name="TriggeringTime">
            Indicates the <see cref="T:System.TimeOnly"/> instance that describes the time that the operation will be triggered daily.
            </param>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.PeriodicOperation.#ctor(System.TimeOnly)">
            <summary>
            Defines a periodic operation.
            </summary>
            <param name="TriggeringTime">
            Indicates the <see cref="T:System.TimeOnly"/> instance that describes the time that the operation will be triggered daily.
            </param>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Operation.PeriodicOperation.TriggeringTime">
            <summary>
            Indicates the <see cref="T:System.TimeOnly"/> instance that describes the time that the operation will be triggered daily.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool">
            <summary>
            Defines a scheduled service that can stores a list of <see cref="T:Sudoku.Platforms.QQ.Operation.PeriodicOperation"/> instances.
            </summary>
            <seealso cref="T:Sudoku.Platforms.QQ.Operation.PeriodicOperation"/>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool._sharedInstance">
            <summary>
            The internal singleton field.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool._timers">
            <summary>
            The task timers.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool.Shared">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool.Enqueue(System.TimeOnly,System.Action)">
            <summary>
            Try to enqueue a new scheduled task.
            </summary>
            <param name="time">The time that the operation will be executed at.</param>
            <param name="action">The task.</param>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool.Enqueue(Sudoku.Platforms.QQ.Operation.PeriodicOperation)">
            <summary>
            Try to enqueue a new scheduled task.
            </summary>
            <param name="operation">The periodic operation instance.</param>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Operation.PeriodicOperationPool.EnqueueRange(System.Collections.Generic.IEnumerable{Sudoku.Platforms.QQ.Operation.PeriodicOperation})">
            <summary>
            Try to enqueue a list of new scheduled tasks.
            </summary>
            <param name="operations">The periodic operation instances.</param>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Patterns">
            <summary>
            Extracts a type that stores regular expression patterns.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Patterns.BilibiliPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Match the string "哔哩".<br/>
                        ○ Match the same text as matched by the 2nd capture group.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Bb].<br/>
                        ○ Match with 2 alternative expressions, atomically.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a whitespace character atomically at most 3 times.<br/>
                                ○ Match '站'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match 'i'.<br/>
                                ○ 3rd capture group.<br/>
                                    ○ Match the string "li".<br/>
                                ○ Match the string "bi".<br/>
                                ○ Match the same text as matched by the 3rd capture group.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Patterns.ColorIdPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match '#'.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match a character in the set [1-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a character in the set [0-5].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Patterns.ColorHexValuePattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match '#'.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 6 times.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ Match a character in the set [A-Fa-f\d] exactly 2 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Patterns.ChineseHouseIndexPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match a character in the set [\u5217\u5BAB\u884C].<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match a character in the set [1-9].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Patterns.SimpleTimeSpanPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Optional (greedy).<br/>
                ○ "h" capture group.<br/>
                    ○ 1st capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-3].<br/>
                    ○ Match a character in the set [Hh].<br/>
            ○ Optional (greedy).<br/>
                ○ "m" capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-5].<br/>
                                ○ Match a Unicode digit.<br/>
                    ○ Match a character in the set [Mm].<br/>
            ○ Optional (greedy).<br/>
                ○ "s" capture group.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-5].<br/>
                                ○ Match a Unicode digit.<br/>
                    ○ Match a character in the set [Ss].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Scoring.Distribution">
            <summary>
            Defines a type of distribution.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Scoring.Distribution.Constant">
            <summary>
            Indicates the distribution type is constant distribution.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Scoring.Distribution.Exponent">
            <summary>
            Indicates the distribution type is exponent distribution.
            </summary>
        </member>
        <member name="F:Sudoku.Platforms.QQ.Scoring.Distribution.Normal">
            <summary>
            Indicates the distribution type is normal distribution. Via this distribution type you can get a list of numbers
            which contains more middle numbers and less border numbers.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Scoring.Scorer">
            <summary>
            Represents a type that handles and creates the data that are used for grading and scoring.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Scoring.Scorer.GetGrade(System.Int32)">
            <summary>
            Gets the grade via the specified score value.
            </summary>
            <param name="score">The score.</param>
            <returns>The grade.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the grade value is too large.</exception>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Scoring.Scorer.GetWeekendFactor">
            <summary>
            Gets the factor that describes whether today is weekend.
            </summary>
            <returns>The factor value. If today is weekend, 2; otherwise 1.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Scoring.Scorer.GenerateValueEarned(System.Int32)">
            <summary>
            Generates a value that describes the experience point that the current user can be earned.
            </summary>
            <param name="continuousDaysCount">The number of continuous days that the user has already been checking-in.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Scoring.Scorer.GenerateOriginalValueEarned(Sudoku.Platforms.QQ.Scoring.Distribution)">
            <summary>
            Generates a value that describes the experience point that the current user can be earned.
            </summary>
            <param name="distribution">The distribution.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Scoring.Scorer.GetScoreEarnedInEachGaming(System.Int32[],Sudoku.Runtime.AnalysisServices.DifficultyLevel)">
            <summary>
            Gets the experience point that can be earned by a player in a single gaming.
            </summary>
            <param name="targetCells">The target cells.</param>
            <param name="difficultyLevel">The difficulty level of the puzzle.</param>
            <returns>The experience point.</returns>
            <exception cref="T:System.NotSupportedException">Throws when the specified difficulty level or target cells count is not supported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the specified difficulty level is invalid.</exception>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Scoring.Scorer.GetDeduct(System.Int32)">
            <summary>
            Get deduct via the specified times per gaming.
            </summary>
            <param name="times">The times the user has answered with wrong result.</param>
            <returns>The deduct.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument <paramref name="times"/> is below 0.</exception>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Scoring.Scorer.GetEarnedScoringDisplayingString(System.Int32)">
            <summary>
            Get display string for scores.
            </summary>
            <param name="base">The base score value to be displayed.</param>
            <returns>The score to be displayed.</returns>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Strings.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.AdminQQ">
            <summary>
              Looks up a localized string similar to 747507738.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.BotSettingsFolderName">
            <summary>
              Looks up a localized string similar to BotData.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.CachedPictureFolderName">
            <summary>
              Looks up a localized string similar to TempPictures.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.LibraryFolderName">
            <summary>
              Looks up a localized string similar to Puzzles.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.SudokuGroupQQ">
            <summary>
              Looks up a localized string similar to 924849321.
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Strings.Resources.UserSettingsFolderName">
            <summary>
              Looks up a localized string similar to Users.
            </summary>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Text.GroupMessageReceiverExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver"/>.
            </summary>
            <seealso cref="T:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver"/>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Text.GroupMessageReceiverExtensions.SendMessageAsync(Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver,Sudoku.Platforms.QQ.Text.MessageConcatenator)">
            <summary>
            Sends a message using <see cref="T:Sudoku.Platforms.QQ.Text.MessageConcatenator"/> type to concatenate multiple <see cref="T:Mirai.Net.Data.Messages.MessageBase"/> instances into one.
            </summary>
            <param name="this">The <see cref="T:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver"/> instance.</param>
            <param name="messageCantenator">
            <para>The message cantenator instance.</para>
            <para>
            Although this argument is of type <see cref="T:Sudoku.Platforms.QQ.Text.MessageConcatenator"/> instance,
            you can also pass an interpolated string into here - it will be automatically converted into the target value.
            </para>
            </param>
            <returns>The task that handles the operation.</returns>
            <remarks>
            For example, using raw string literal to combine multiple <see cref="T:Mirai.Net.Data.Messages.MessageBase"/> instances; all characters as literal ones
            will be ignored:
            <code><![CDATA[
            await e.SendMessageAsync(
                $"""
                {new AtMessage(id)}
                {" "}
                {"You won!"}
                """
            );
            ]]></code>
            This is equivalent to
            <code><![CDATA[
            await e.SendMessageAsync(new AtMessage(id) + new PlainMessage(" ") + new PlainMessage("You won!"));
            ]]></code>
            You can also use plain cantenation:
            <code><![CDATA[
            await e.SendMessageAsync($"{new AtMessage(id)}{" "}{"You won!"}");
            ]]></code>
            Using this method can emit some calculation to optimize the performance.
            </remarks>
        </member>
        <member name="T:Sudoku.Platforms.QQ.Text.MessageConcatenator">
            <summary>
            Defines a message concatenator instance.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Text.MessageConcatenator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a <see cref="T:Sudoku.Platforms.QQ.Text.MessageConcatenator"/> instance. <b><i>Unused arguments. Keep those not removing them.</i></b>
            </summary>
        </member>
        <member name="P:Sudoku.Platforms.QQ.Text.MessageConcatenator.MessageBlocks">
            <summary>
            The message blocks.
            </summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Text.MessageConcatenator.AppendLiteral(System.String)">
            <summary><b><i>
            Unused method. Keep this method empty.
            </i></b></summary>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Text.MessageConcatenator.AppendFormatted(System.String)">
            <summary>
            Appends a new text.
            </summary>
            <param name="textMessage">The plain text message.</param>
        </member>
        <member name="M:Sudoku.Platforms.QQ.Text.MessageConcatenator.AppendFormatted``1(``0)">
            <summary>
            Appends a new formatted message.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message instance.</param>
        </member>
        <member name="T:Sudoku.Resources.MergedResourcesFetcher">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Resources.MergedResources"/>.
            </summary>
            <seealso cref="T:Sudoku.Resources.MergedResources"/>
        </member>
        <member name="M:Sudoku.Resources.MergedResourcesFetcher.CommandName(Sudoku.Resources.MergedResources,System.String)">
            <summary>
            Try to fetch the command name.
            </summary>
            <param name="this">The resource fetcher.</param>
            <param name="command">The internal name of the command as the key, with the prefix "<c>_Command_</c>" removed.</param>
            <returns>The target command in the resource dictionary.</returns>
        </member>
        <member name="M:Sudoku.Resources.MergedResourcesFetcher.Token(Sudoku.Resources.MergedResources,System.String)">
            <summary>
            Try to fetch the token.
            </summary>
            <param name="this">The resource fetcher.</param>
            <param name="token">The internal name o the token, with the prefix "<c>_Token_</c>" removed.</param>
            <returns>The target token in the resource dictionary.</returns>
        </member>
        <member name="T:Sudoku.CommandLine.ModuleInitializer">
            <target name="type">
				<summary>
					<para>
						Provides with the type that contains a module initializer method, called automatically by the CLR
						(Common Language Runtime) to initialize some values.
					</para>
					<para>
						<i>
							The type is called by the compiler and the CLR (Common Language Runtime),
							which means you cannot use any members in this type manually.
						</i>
					</para>
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.CommandLine.ModuleInitializer.Initialize">
            <target name="method">
				<summary>
					Called by the runtime automatically while booting on this solution to initialize the values,
					data members or any other things that can or should be initialized here.
				</summary>
				<remarks>
					The concept <b>module</b> is different with <b>assembly</b>.
					The solution can contain multiple assemblies, while each assembly can contain multiple modules.
					However, due to the design of Visual Studio project file system, each assembly will only contain
					one module by default.
				</remarks>
			</target>
        </member>
        <member name="T:Mirai.Net.Data.Shared.GroupExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Mirai.Net.Data.Shared.Group"/>.
            </summary>
            <seealso cref="T:Mirai.Net.Data.Shared.Group"/>
        </member>
        <member name="M:Mirai.Net.Data.Shared.GroupExtensions.GetMemberAsync(Mirai.Net.Data.Shared.Group,System.String)">
            <summary>
            Gets the member whose QQ or name is specified one.
            </summary>
            <param name="this">The group.</param>
            <param name="nameOrId">The QQ number or target member's name.</param>
            <returns>The target member returned. If none found, <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Mirai.Net.Data.Shared.GroupExtensions.GetMemberFromQQAsync(Mirai.Net.Data.Shared.Group,System.String)">
            <summary>
            Gets the member whose QQ number is the specified one.
            </summary>
            <param name="this">The group.</param>
            <param name="qq">The QQ number.</param>
            <returns>The target member returned. If none found, <see langword="null"/>.</returns>
        </member>
        <member name="T:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiverExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver"/>.
            </summary>
            <seealso cref="T:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver"/>
        </member>
        <member name="M:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiverExtensions.SendPictureThenDeleteAsync(Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver,System.Func{Sudoku.Drawing.ISudokuPainter})">
            <summary>
            Sends the picture message, and then delete the local file.
            </summary>
            <param name="this">The group message receiver.</param>
            <param name="painterCreator">
            <inheritdoc cref="M:Sudoku.Platforms.QQ.IO.InternalReadWrite.GenerateCachedPicturePath(System.Func{Sudoku.Drawing.ISudokuPainter})" path="/param[@name='painterCreator']"/>
            </param>
            <returns>A task that handles the operation.</returns>
        </member>
        <member name="T:Mirai.Net.Data.Messages.MessageChainExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Mirai.Net.Data.Messages.MessageChain"/>.
            </summary>
            <seealso cref="T:Mirai.Net.Data.Messages.MessageChain"/>
        </member>
        <member name="M:Mirai.Net.Data.Messages.MessageChainExtensions.Deconstruct(Mirai.Net.Data.Messages.MessageChain,System.String@,System.String@,System.String[]@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
						public static void Deconstruct(out string name, out int age)
						{
						    name = Name;
						    age = Age;
						}
						</code>
						The following code will be legal.
						<code>
						// Use explicitly typed variables to get a deconstruction.
						(string name, int age) = student;

						// Or use the type inferring to omit the type of each variable having been deconstructed.
						var (name, age) = student;

						// Of course, you can also use the invocation to get values.
						student.Deconstruct(out string name, out int age);
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
						if (student is (name: var name, age: &gt;= 18))
						{
						    Console.WriteLine(name);
						}
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:Mirai.Net.Sessions.MiraiBotSubscribingExtensions">
            <summary>
            Provides with extenions methods on subscribing events for a <see cref="T:Mirai.Net.Sessions.MiraiBot"/> instance.
            </summary>
        </member>
        <member name="F:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.MuteSyncRoot">
            <summary>
            The object provided with methods to control <see cref="P:Sudoku.Platforms.QQ.AppLifecycle.BotRunningContext.IsMuted"/> to be synchronized.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeBotOnlined(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Bot.OnlineEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Bot.OnlineEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeBotOfflined(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Bot.OfflineEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Bot.OfflineEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeJoined(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Group.JoinedEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Group.JoinedEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeLeft(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Group.LeftEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Group.LeftEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeKicked(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Group.KickedEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Group.KickedEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeGroupMessageReceived(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Messages.Receivers.GroupMessageReceiver"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeMemberJoined(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Group.MemberJoinedEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Group.MemberJoinedEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeNewMemberRequested(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Request.NewMemberRequestedEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Request.NewMemberRequestedEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeNewInvitationRequested(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Request.NewInvitationRequestedEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Request.NewInvitationRequestedEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeMuted(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Group.MutedEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Group.MutedEvent"/>.
            </summary>
        </member>
        <member name="M:Mirai.Net.Sessions.MiraiBotSubscribingExtensions.SubscribeUnmuted(Mirai.Net.Sessions.MiraiBot,System.Action{Mirai.Net.Data.Events.Concretes.Group.UnmutedEvent})">
            <summary>
            Subscribes for event <see cref="T:Mirai.Net.Data.Events.Concretes.Group.UnmutedEvent"/>.
            </summary>
        </member>
        <member name="T:OneOf.OneOfExtensions">
            <summary>
            Provides extension methods on <see cref="N:OneOf"/> types.
            </summary>
            <seealso cref="N:OneOf"/>
        </member>
        <member name="M:OneOf.OneOfExtensions.Deconstruct``2(OneOf.OneOf{``0,``1},System.Boolean@,System.Boolean@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
						public static void Deconstruct(out string name, out int age)
						{
						    name = Name;
						    age = Age;
						}
						</code>
						The following code will be legal.
						<code>
						// Use explicitly typed variables to get a deconstruction.
						(string name, int age) = student;

						// Or use the type inferring to omit the type of each variable having been deconstructed.
						var (name, age) = student;

						// Of course, you can also use the invocation to get values.
						student.Deconstruct(out string name, out int age);
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
						if (student is (name: var name, age: &gt;= 18))
						{
						    Console.WriteLine(name);
						}
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:OneOf.OneOfExtensions.Deconstruct``3(OneOf.OneOf{``0,``1,``2},System.Boolean@,System.Boolean@,System.Boolean@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
						public static void Deconstruct(out string name, out int age)
						{
						    name = Name;
						    age = Age;
						}
						</code>
						The following code will be legal.
						<code>
						// Use explicitly typed variables to get a deconstruction.
						(string name, int age) = student;

						// Or use the type inferring to omit the type of each variable having been deconstructed.
						var (name, age) = student;

						// Of course, you can also use the invocation to get values.
						student.Deconstruct(out string name, out int age);
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
						if (student is (name: var name, age: &gt;= 18))
						{
						    Console.WriteLine(name);
						}
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:OneOf.OneOfExtensions.Deconstruct``4(OneOf.OneOf{``0,``1,``2,``3},System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
						public static void Deconstruct(out string name, out int age)
						{
						    name = Name;
						    age = Age;
						}
						</code>
						The following code will be legal.
						<code>
						// Use explicitly typed variables to get a deconstruction.
						(string name, int age) = student;

						// Or use the type inferring to omit the type of each variable having been deconstructed.
						var (name, age) = student;

						// Of course, you can also use the invocation to get values.
						student.Deconstruct(out string name, out int age);
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
						if (student is (name: var name, age: &gt;= 18))
						{
						    Console.WriteLine(name);
						}
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BilibiliPattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the BilibiliPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.BilibiliPattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BilibiliPattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BilibiliPattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BilibiliPattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BilibiliPattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BilibiliPattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BilibiliPattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BilibiliPattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorIdPattern_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ColorIdPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ColorIdPattern_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorIdPattern_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorIdPattern_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorIdPattern_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorIdPattern_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorIdPattern_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorIdPattern_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorIdPattern_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ColorHexValuePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorHexValuePattern_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ChineseHouseIndexPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseHouseIndexPattern_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SimpleTimeSpanPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SimpleTimeSpanPattern_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
    </members>
</doc>
