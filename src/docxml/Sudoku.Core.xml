<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Core</name>
    </assembly>
    <members>
        <member name="T:Sudoku.AssemblyFailedToLoadException">
            <summary>
            Indicates an exception that throws when the module initializer failed to fetch the resource data,
            which causes the assembly can't be loaded successfully.
            </summary>
        </member>
        <member name="M:Sudoku.AssemblyFailedToLoadException.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.AssemblyFailedToLoadException"/> instance with the specified assembly name
            and the file path.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Sudoku.AssemblyFailedToLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.AssemblyFailedToLoadException.AssemblyName">
            <summary>
            Indicates the assembly name.
            </summary>
        </member>
        <member name="P:Sudoku.AssemblyFailedToLoadException.FilePath">
            <summary>
            Indicates the file path.
            </summary>
        </member>
        <member name="P:Sudoku.AssemblyFailedToLoadException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.AssemblyFailedToLoadException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.AssemblyFailedToLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Constants">
            <summary>
            Encapsulates the class that stores all constants used in the whole project.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.InvalidFirstSet">
            <summary>
            Indicates the invalid return value of <see cref="M:System.Numerics.BitOperations.PopCount(System.UInt32)"/>.
            </summary>
            <seealso cref="M:System.Numerics.BitOperations.PopCount(System.UInt32)"/>
        </member>
        <member name="F:Sudoku.Constants.InvalidFirstSetLong">
            <summary>
            Indicates the invalid return value of <see cref="M:System.Numerics.BitOperations.PopCount(System.UInt64)"/>.
            </summary>
            <seealso cref="M:System.Numerics.BitOperations.PopCount(System.UInt64)"/>
        </member>
        <member name="T:Sudoku.Constants.RegularExpressions">
            <summary>
            The class that stores all regular expressions used in this solution.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.CommentLine">
            <summary>
            Indicates a comment line.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridCandidates">
            <summary>
            Indicates each candidates group in the PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ExtendedSusserEliminations">
            <summary>
            Indicates the eliminations in the extended susser format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.SimpleTable">
            <summary>
            Indicates the normal sudoku grid table (with only blank cells and numbers).
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Susser">
            <summary>
            Indicates the susser format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ShortenSusser">
            <summary>
            Indicates the shorten susser format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.OpenSudoku">
            <summary>
            Indicates the open sudoku format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.DigitOrEmptyCell">
            <summary>
            Indicates the regular expression of a digit or empty cell placeholder.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridUnit_Old">
            <summary>
            Indicates the unit in the basic PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridUnit">
            <summary>
            Indicates the unit in the extended PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ThreeDigitsCandidate">
            <summary>
            Indicates the candidate unit that used in the elimination list.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridCandidatesUnit">
            <summary>
            Indicates the candidate list unit in the PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Cell">
            <summary>
            Indicates a cell string.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.CellOrCellList">
            <summary>
            Indicates the cell list string.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Region">
            <summary>
            Indicates the region string.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Candidate">
            <summary>
            Indicates a candidate string.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.CandidateListShortForm">
            <summary>
            Indicates the candidate list string that matches the triplet form candidate list.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.CandidateListPrepositionalForm">
            <summary>
            Indicates the candidate list string that matches the prepositional form candidate list.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.CandidateListPostpositionalForm">
            <summary>
            Indicates the candidate list string that matches the postpositional form candidate list.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.CandidateOrCandidateList">
            <summary>
            Indicates a candidate list string.
            </summary>
            <remarks>
            The regular expression can match the following formats:
            <list type="table">
            <item>
            <term><c>312</c></term>
            <description>The digit 3 in the cell row 1 column 2 (i.e. <c>r1c2</c>).</description>
            </item>
            <item>
            <term><c>{r1c1, r9c4}(13)</c></term>
            <description>The digit 1 and 3 in the cell <c>r1c1</c> and <c>r9c4</c>.</description>
            </item>
            <item>
            <term><c>13{r1c1, r9c3}</c></term>
            <description>The digit 1 and 3 in the cell <c>r1c1</c> and <c>r9c3</c>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Conclusion">
            <summary>
            Indicates the regular expression to match a conclusion.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ConjugatePair">
            <summary>
            Indicates the regular expression to match a conjugate pair.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Digit">
            <summary>
            Indicates the regular expression to match a digit.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Tab">
            <summary>
            Indicates the regular expression to match a tab character.
            </summary>
        </member>
        <member name="T:Sudoku.Constants.Tables">
            <summary>
            The tables for grid processing.
            </summary>
            <remarks><i>
            All fields will be initialized in the static constructor, which is declared in the source generator.
            </i></remarks>
        </member>
        <member name="F:Sudoku.Constants.Tables.RegionFirst">
            <summary>
            Indicates the first cell offset for each region.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Tables.Peers">
            <summary>
            <para>Indicates a table for each cell's peers.</para>
            </summary>
            <example>
            '<c>Peers[0]</c>': the array of peers for the cell 0 (row 1 column 1).
            </example>
        </member>
        <member name="F:Sudoku.Constants.Tables.RegionCells">
            <summary>
            <para>
            The map of all cell offsets in its specified region.
            The indices is between 0 and 26, where:
            <list type="table">
            <item>
            <term><c>0..9</c></term>
            <description>Block 1 to 9.</description>
            </item>
            <item>
            <term><c>9..18</c></term>
            <description>Row 1 to 9.</description>
            </item>
            <item>
            <term><c>18..27</c></term>
            <description>Column 1 to 9.</description>
            </item>
            </list>
            </para>
            </summary>
            <example>
            '<c>RegionTable[0]</c>': all cell offsets in the region 0 (block 1).
            </example>
        </member>
        <member name="F:Sudoku.Constants.Tables.RegionMaps">
            <summary>
            Indicates all grid maps that a grid contains.
            </summary>
            <example>
            '<c>RegionMaps[0]</c>': The map containing all cells in the block 1.
            </example>
        </member>
        <member name="F:Sudoku.Constants.Tables.PeerMaps">
            <summary>
            Indicates the peer maps using <see cref="F:Sudoku.Constants.Tables.Peers"/> table.
            </summary>
            <seealso cref="F:Sudoku.Constants.Tables.Peers"/>
        </member>
        <member name="F:Sudoku.Constants.Tables.IntersectionMaps">
            <summary>
            <para>
            Indicates all maps that forms the each intersection. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | C C C | A A A | A A A |
            | B B B | . . . | . . . |
            | B B B | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            </para>
            <para>
            In addition, in this data structure, a <b>CoverSet</b> is a block and a <b>BaseSet</b> is a line.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Tables.IntersectionBlockTable">
            <summary>
            <para>The table of all blocks to iterate for each blocks.</para>
            <para>
            This field is only used for providing the data for another field <see cref="F:Sudoku.Constants.Tables.IntersectionMaps"/>.
            </para>
            </summary>
            <seealso cref="F:Sudoku.Constants.Tables.IntersectionMaps"/>
        </member>
        <member name="F:Sudoku.Constants.Tables.Combinatorials">
            <summary>
            Indicates the combinatorial numbers from <c>C(1, 1)</c> to <c>C(30, 30)</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Constants.Tables.#cctor">
            <summary>
            Initializes all constants for this type.
            </summary>
            <remarks><i>
            The interactive logic is implemented by source generator, so you can't modify the inner logic.
            </i></remarks>
        </member>
        <member name="T:Sudoku.Constants.Tables.ValueTupleComparer">
            <summary>
            The inner comparer of <see cref="T:System.ValueTuple`2"/> used for
            the field <see cref="F:Sudoku.Constants.Tables.IntersectionMaps"/>.
            </summary>
            <seealso cref="F:Sudoku.Constants.Tables.IntersectionMaps"/>
        </member>
        <member name="M:Sudoku.Constants.Tables.ValueTupleComparer.Equals(System.ValueTuple{System.Byte,System.Byte},System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Constants.Tables.ValueTupleComparer.GetHashCode(System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.BitSubsetsGenerator">
            <summary>
            Encapsulates a bit combination generator.
            </summary>
            <remarks>
            You can use this struct like this:
            <code><![CDATA[
            foreach (short mask in new BitSubsetsGenerator(9, 3))
            {
                // Do something to use the mask.
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:Sudoku.Data.BitSubsetsGenerator._enumerator">
            <summary>
            The inner enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="T:Sudoku.Data.BitSubsetsGenerator.Enumerator">
            <summary>
            Indicates the enumerator of the current instance.
            </summary>
        </member>
        <member name="F:Sudoku.Data.BitSubsetsGenerator.Enumerator._mask">
            <summary>
            The mask.
            </summary>
        </member>
        <member name="F:Sudoku.Data.BitSubsetsGenerator.Enumerator._isLast">
            <summary>
            Indicates whether that the value is the last one.
            </summary>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="P:Sudoku.Data.BitSubsetsGenerator.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.Candidates">
            <summary>
            Encapsulates a map that contains 729 positions to represent a candidate.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates.Shifting">
            <summary>
            Indicates the size of each unit.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates.Len">
            <summary>
            Indicates the number of all segments.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates.FullCount">
            <summary>
            Indicates the length of the collection that all bits are set <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates.Empty">
            <summary>
            <para>Indicates an empty instance (all bits are 0).</para>
            <para>
            I strongly recommend you <b>should</b> use this instance instead of default constructor
            <see cref="M:Sudoku.Data.Candidates.#ctor"/>.
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.Candidates.#ctor"/>
        </member>
        <member name="F:Sudoku.Data.Candidates._0">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._1">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._2">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._3">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._4">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._5">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._6">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._7">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._8">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._9">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._10">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Candidates._11">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(Sudoku.Data.Candidates@)">
            <summary>
             Initializes an instance with another one.
            </summary>
            <param name="another">The another instance.</param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified candidate and its peers.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Int32*,System.Int32)">
            <summary>
            Initializes an instance with the candidate list specified as a pointer.
            </summary>
            <param name="candidates">The pointer points to an array of elements.</param>
            <param name="length">The length of the array.</param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Int32,System.Boolean)">
            <summary>
            Indicates an instance with the peer candidates of the specified candidate and a <see cref="T:System.Boolean"/>
            value indicating whether the map will process itself with <see langword="true"/> value.
            </summary>
            <param name="candidate">The candidate.</param>
            <param name="setItself">
            Indicates whether the map will process itself with <see langword="true"/> value.
            </param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Int32[])">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Int64[])">
            <summary>
            Initializes an instance with the binary array.
            </summary>
            <param name="binary">The array.</param>
            <exception cref="T:System.ArgumentException">Throws when the length is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Int64*,System.Int32)">
            <summary>
            Initializes an instance with the pointer to the binary array and the length.
            </summary>
            <param name="binary">The pointer to the binary array.</param>
            <param name="length">The length.</param>
            <exception cref="T:System.ArgumentException">Throws when the length is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Initializes an instance with the specified <see cref="T:Sudoku.Data.Cells"/> and the number
            representing.
            </summary>
            <param name="map">The map.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.Candidates.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Copies the values into the collection.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Candidates.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Candidates.Count">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Candidates.PeerIntersection">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Candidates.Offsets">
            <summary>
            Indicates all indices of set bits.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Candidates.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.CopyTo(System.Int32*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.CopyTo(System.Span{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Contains(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.GetSubviewMask(System.Int32,System.Int32)">
            <summary>
            Get the subview mask of this map.
            </summary>
            <param name="region">The region.</param>
            <param name="digit">The digit.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.Candidates.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Candidates.ToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Reduce(System.Int32)">
            <summary>
            Get the final <see cref="T:Sudoku.Data.Cells"/> to get all cells that the corresponding indices
            are set <see langword="true"/>.
            </summary>
            <param name="digit">The digit.</param>
            <returns>The map of all cells chosen.</returns>
        </member>
        <member name="M:Sudoku.Data.Candidates.ToSpan">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.ToReadOnlySpan">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Add(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.AddAnyway(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Remove(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.AddRange(System.ReadOnlySpan{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.InternalAdd(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Parse(System.String,Sudoku.Data.CandidatesParsingOptions)">
            <summary>
            Parse a <see cref="T:System.String"/> and convert to the <see cref="T:Sudoku.Data.Candidates"/> instance.
            </summary>
            <param name="str">The string text.</param>
            <param name="options">The options to parse.</param>
            <returns>The result instance.</returns>
            <exception cref="T:System.ArgumentException">Throws when <paramref name="options"/> is invalid.</exception>
            <exception cref="T:System.FormatException">Throws when the specified text is invalid to parse.</exception>
        </member>
        <member name="M:Sudoku.Data.Candidates.TryParse(System.String,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_OnesComplement(Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_GreaterThan(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_LessThan(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_BitwiseAnd(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_BitwiseOr(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_ExclusiveOr(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Subtraction(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Subtraction(Sudoku.Data.Candidates,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Addition(Sudoku.Data.Candidates,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Modulus(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Division(Sudoku.Data.Candidates@,System.Int32)">
            <summary>
            Simplified calls <see cref="M:Sudoku.Data.Candidates.Reduce(System.Int32)"/>.
            </summary>
            <param name="candidates">The candidates.</param>
            <param name="digit">The digit.</param>
            <returns>The cells.</returns>
            <seealso cref="M:Sudoku.Data.Candidates.Reduce(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Implicit(System.Int32[])~Sudoku.Data.Candidates">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Implicit(System.Span{System.Int32}@)~Sudoku.Data.Candidates">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Implicit(System.ReadOnlySpan{System.Int32}@)~Sudoku.Data.Candidates">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Explicit(Sudoku.Data.Candidates@)~System.Int32[]">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Explicit(Sudoku.Data.Candidates@)~System.Span{System.Int32}">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Explicit(Sudoku.Data.Candidates@)~System.ReadOnlySpan{System.Int32}">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Candidates.JsonConverter">
            <summary>
            Defines a JSON converter that allows the current instance being serialized.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Candidates.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified part contains the invalid data (such as the wrong type) while reading.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Candidates.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.Candidates,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Candidates.Equals(Sudoku.Data.Candidates@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Equality(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Candidates.op_Inequality(Sudoku.Data.Candidates@,Sudoku.Data.Candidates@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Candidates.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Candidates.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Data.CandidatesParsingOptions">
            <summary>
            Encapsulates an option that is specified to parse the <see cref="T:Sudoku.Data.Candidates"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Data.Candidates"/>
        </member>
        <member name="F:Sudoku.Data.CandidatesParsingOptions.None">
            <summary>
            Indicates the empty option.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CandidatesParsingOptions.ShortForm">
            <summary>
            Indicates the short form, such as <c>312</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CandidatesParsingOptions.BracketForm">
            <summary>
            Indicates the bracket form, such as <c>{ r1c1, r3c3 }(12)</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CandidatesParsingOptions.PrepositionalForm">
            <summary>
            Indicates the prepositional form, such as <c>12{ r1c1, r3c3 }</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CandidatesParsingOptions.All">
            <summary>
            Indicates all forms.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Cells">
            <summary>
            Encapsulates a binary series of cell status table.
            </summary>
            <remarks>
            The instance stores two <see cref="T:System.Int64"/> values, consisting of 81 bits,
            where <see langword="true"/> bit (1) is for the cell having that digit,
            and the <see langword="false"/> bit (0) is for the cell not containing
            the digit.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.Cells.Empty">
            <summary>
            <para>Indicates an empty instance (all bits are 0).</para>
            <para>
            I strongly recommend you <b>should</b> use this instance instead of default constructor
            <see cref="M:Sudoku.Data.Cells.#ctor"/> and <see langword="default"/>(<see cref="T:Sudoku.Data.Cells"/>).
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.Cells.#ctor"/>
        </member>
        <member name="F:Sudoku.Data.Cells.CellOrCellListRegex">
            <summary>
            Indicates the regular expression for matching a cell or cell-list.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells.Shifting">
            <summary>
            The value used for shifting.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells.BlockOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells.RowOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells.ColumnOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells.Limit">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells.Factorizes">
            <summary>
            Indicates the number list of all possible factorize results from 0 to 10.
            The value may be used while getting subsets of the current instance to optimize the performance.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells._high">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.Cells._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.Cells._low"/> represents the lower 41 bits.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Cells._low">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.Cells._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.Cells._low"/> represents the lower 41 bits.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified cell offset
            (Sets itself and all peers).
            </summary>
            <param name="cell">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Int32*,System.Int32)">
            <summary>
            Initializes an instance with the candidate list specified as a pointer.
            </summary>
            <param name="cells">The pointer points to an array of elements.</param>
            <param name="length">The length of the array.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Int32[])">
            <summary>
            Same behavior of the constructor as <see cref="M:Sudoku.Data.Cells.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>:
            Initializes an instance with the specified array of cells.
            </summary>
            <param name="cells">All cells.</param>
            <remarks>
            This constructor is defined after another constructor with
            <see cref="T:System.ReadOnlySpan`1"/> had defined. Although this constructor
            doesn't initialize something (use the other one instead),
            while initializing with the type <see cref="T:System.Int32"/>[], the compiler
            gives me an error without this constructor (ambiguity of two
            constructors). However, unfortunately, <see cref="T:System.ReadOnlySpan`1"/>
            doesn't implemented the interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
            <seealso cref="M:Sudoku.Data.Cells.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Index)">
            <summary>
            Initializes an instance with the cell offset specified as an <see cref="T:System.Index"/>
            (Sets itself and all peers).
            </summary>
            <param name="cellIndex">The cell offset specified as an <see cref="T:System.Index"/>.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(Sudoku.Data.Cells@)">
            <summary>
            Initializes an instance with the specified instance.
            </summary>
            <param name="another">Another instance.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Span{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="cells">cell offsets.</param>
            <remarks>
            <para>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            won't be set <see langword="true"/>.
            </para>
            <para>
            In some case, you can use object initializer instead.
            You can use the code
            <code><![CDATA[var map = new Cells { 0, 3, 5 };]]></code>
            instead of the code
            <code><![CDATA[var map = new Cells(stackalloc[] { 0, 3, 5 });]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="cells">cell offsets.</param>
            <remarks>
            <para>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            won't be set <see langword="true"/>.
            </para>
            <para>
            In some case, you can use object initializer instead.
            You can use the code
            <code><![CDATA[var map = new Cells { 0, 3, 5 };]]></code>
            instead of the code
            <code><![CDATA[var map = new Cells(stackalloc[] { 0, 3, 5 });]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="cells">cell offsets.</param>
            <remarks>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            won't be set <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Range)">
            <summary>
            Initializes an instance with the specified range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes an instance with two binary values.
            </summary>
            <param name="high">Higher 40 bits.</param>
            <param name="low">Lower 41 bits.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with three binary values.
            </summary>
            <param name="high">Higher 27 bits.</param>
            <param name="mid">Medium 27 bits.</param>
            <param name="low">Lower 27 bits.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified cell offset.
            This will set all bits of all peers of this cell. Another
            <see cref="T:System.Boolean"/> value indicates whether this initialization
            will set the bit of itself.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="setItself">
            A <see cref="T:System.Boolean"/> value indicating whether this initialization
            will set the bit of itself.
            </param>
            <remarks>
            If you want to use this constructor, please use <see cref="F:Sudoku.Constants.Tables.PeerMaps"/> instead.
            </remarks>
            <seealso cref="F:Sudoku.Constants.Tables.PeerMaps"/>
        </member>
        <member name="P:Sudoku.Data.Cells.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Cells.InOneRegion">
            <summary>
            Same as <see cref="M:Sudoku.Data.Cells.AllSetsAreInOneRegion(System.Int32@)"/>, but only contains
            the <see cref="T:System.Boolean"/> result.
            </summary>
            <seealso cref="M:Sudoku.Data.Cells.AllSetsAreInOneRegion(System.Int32@)"/>
        </member>
        <member name="P:Sudoku.Data.Cells.BlockMask">
            <summary>
            Indicates the mask of block that all cells in this collection spanned.
            </summary>
            <remarks>
            For example, if the cells are <c>{ 0, 1, 27, 28 }</c>, all spanned blocks are 0 and 3, so the return
            mask is <c>0b000001001</c> (i.e. 9).
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Cells.RowMask">
            <summary>
            Indicates the mask of row that all cells in this collection spanned.
            </summary>
            <remarks>
            For example, if the cells are <c>{ 0, 1, 27, 28 }</c>, all spanned rows are 0 and 3, so the return
            mask is <c>0b000001001</c> (i.e. 9).
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Cells.ColumnMask">
            <summary>
            Indicates the mask of column that all cells in this collection spanned.
            </summary>
            <remarks>
            For example, if the cells are <c>{ 0, 1, 27, 28 }</c>, all spanned columns are 0 and 1, so the return
            mask is <c>0b000000011</c> (i.e. 3).
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Cells.CoveredLine">
            <summary>
            Indicates the covered line.
            </summary>
            <remarks>
            When the covered region can't be found, it'll return <see cref="F:Sudoku.Constants.InvalidFirstSet"/>
            (i.e. 32) always.
            </remarks>
            <seealso cref="F:Sudoku.Constants.InvalidFirstSet"/>
        </member>
        <member name="P:Sudoku.Data.Cells.Count">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Cells.CoveredRegions">
            <summary>
            Indicates all regions covered. This property is used to check all regions that all cells
            of this instance covered. For example, if the cells are <c>{ 0, 1 }</c>, the property
            <see cref="P:Sudoku.Data.Cells.CoveredRegions"/> will return the region 0 (block 1) and region 9 (row 1);
            however, if cells spanned two regions or more (e.g. cells <c>{ 0, 1, 27 }</c>),
            this property won't contain any regions.
            </summary>
            <remarks>
            The return value will be an <see cref="T:System.Int32"/> value indicating each regions.
            Bits set 1 are covered regions.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Cells.Regions">
            <summary>
            All regions that the map spanned. This property is used to check all regions that all cells of
            this instance spanned. For example, if the cells are <c>{ 0, 1 }</c>, the property
            <see cref="P:Sudoku.Data.Cells.Regions"/> will return the region 0 (block 1), region 9 (row 1), region 18 (column 1)
            and the region 19 (column 2).
            </summary>
        </member>
        <member name="P:Sudoku.Data.Cells.PeerIntersection">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Cells.Offsets">
            <summary>
            Indicates the cell offsets in this collection.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Cells.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.CopyTo(System.Int32*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.CopyTo(System.Span{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.AllSetsAreInOneRegion(System.Int32@)">
            <summary>
            Indicates whether all cells in this instance are in one region.
            </summary>
            <param name="region">
            The region covered. If the return value
            is false, this value will be the constant -1.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <remarks>
            If you don't want to use the <see langword="out"/> parameter value, please
            use the property <see cref="P:Sudoku.Data.Cells.InOneRegion"/> to improve the performance.
            </remarks>
            <seealso cref="P:Sudoku.Data.Cells.InOneRegion"/>
        </member>
        <member name="M:Sudoku.Data.Cells.Contains(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.GetSubviewMask(System.Int32)">
            <summary>
            Get the subview mask of this map.
            </summary>
            <param name="region">The region.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Cells.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Cells.ToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.PeerIntersectionLimitsWith(Sudoku.Data.Cells@)">
            <summary>
            To gets the cells that is in the cells that both <see langword="this"/>
            and <paramref name="limit"/> sees (i.e. peer intersection of <c><![CDATA[this & limit]]></c>),
            and gets the result map that is in the map above, and only lies in <paramref name="limit"/>.
            </summary>
            <param name="limit">
            The map to limit the result peer intersection.
            </param>
            <returns>The result map.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.ToSpan">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.ToReadOnlySpan">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.Expand(System.Int32)">
            <summary>
            Expands the current instance, using the specified digit.
            </summary>
            <param name="digit">The digit.</param>
            <returns>The candidate list.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.CreateMask(System.Int32,System.Int32)">
            <summary>
            Being called by <see cref="P:Sudoku.Data.Cells.RowMask"/>, <see cref="P:Sudoku.Data.Cells.ColumnMask"/> and <see cref="P:Sudoku.Data.Cells.BlockMask"/>.
            </summary>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>The region mask.</returns>
            <seealso cref="P:Sudoku.Data.Cells.RowMask"/>
            <seealso cref="P:Sudoku.Data.Cells.ColumnMask"/>
            <seealso cref="P:Sudoku.Data.Cells.BlockMask"/>
        </member>
        <member name="M:Sudoku.Data.Cells.Add(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.Add(System.String)">
            <summary>
            Set the specified cell as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell to add, represented as a <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.AddAnyway(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.AddRange(System.ReadOnlySpan{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.Remove(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.InternalAdd(System.Int32,System.Boolean)">
            <summary>
            The internal operation for adding an offset into the current collection.
            </summary>
            <param name="offset">The cell to add into.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.TryParse(System.String,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_OnesComplement(Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_GreaterThan(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_LessThan(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Addition(Sudoku.Data.Cells,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Subtraction(Sudoku.Data.Cells,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Subtraction(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_BitwiseAnd(Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Gets the subsets of the current collection via the specified size
            indicating the number of elements of the each subset.
            </summary>
            <param name="cell">Indicates the base template cells.</param>
            <param name="subsetSize">The size to get.</param>
            <returns>All possible subsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.op_BitwiseAnd(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_BitwiseOr(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_ExclusiveOr(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Modulus(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Multiply(Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Expands via the specified digit.
            </summary>
            <param name="base">The base map.</param>
            <param name="digit">The digit.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Division(Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Get the subview mask of this map.
            </summary>
            <param name="map">The map.</param>
            <param name="region">The region.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Implicit(System.Int32[])~Sudoku.Data.Cells">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Implicit(System.Span{System.Int32}@)~Sudoku.Data.Cells">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Implicit(System.ReadOnlySpan{System.Int32}@)~Sudoku.Data.Cells">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Explicit(System.Range)~Sudoku.Data.Cells">
            <summary>
            Explicit cast from <see cref="T:System.Range"/> to <see cref="T:Sudoku.Data.Cells"/>.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Explicit(Sudoku.Data.Cells@)~System.Range">
            <summary>
            Explicit cast from <see cref="T:Sudoku.Data.Cells"/> to <see cref="T:System.Range"/>.
            </summary>
            <param name="offsets">The offsets.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the result slice is discontinuous.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Explicit(Sudoku.Data.Cells@)~System.Int32[]">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Explicit(Sudoku.Data.Cells@)~System.Span{System.Int32}">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Explicit(Sudoku.Data.Cells@)~System.ReadOnlySpan{System.Int32}">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Cells.JsonConverter">
            <summary>
            Defines a JSON converter that allows the current instance being serialized.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Cells.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Throws when the specified data is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.Cells.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.Cells,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Cells.Deconstruct(System.Int64@,System.Int64@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Cells.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Cells.Equals(Sudoku.Data.Cells@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Equality(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.op_Inequality(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Cells.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Sudoku.Data.CellStatus">
            <summary>
            Represents a cell status.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Undefined">
            <summary>
            Indicates the cell status is invalid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Empty">
            <summary>
            Indicates that the cell is empty.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Modifiable">
            <summary>
            Indicates that the cell has already filled a value,
            but the value doesn't exist when the puzzle begins.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Given">
            <summary>
            Indicates that the cell has already filled a value,
            and the value does exist when the puzzle begins. In
            other words, the value is a given (or a hint, clue, etc.).
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.All">
            <summary>
            Indicates all cases of cell statuses.
            </summary>
            <remarks>
            You had better use this field on cases when processing
            the bitwise operations in a <see cref="T:Sudoku.Data.SudokuGrid"/>.
            This field should not be used to process cell status comparison.
            </remarks>
            <seealso cref="M:Sudoku.Data.SudokuGrid.GetStatus(System.Int32)"/>
        </member>
        <member name="T:Sudoku.Data.ChainLink">
            <summary>
            Encapsulates a link used for drawing.
            </summary>
            <param name="StartCandidate">Indicates the start candidate.</param>
            <param name="EndCandidate">Indicates the end candidate.</param>
            <param name="LinkType">Indicates the link type.</param>
        </member>
        <member name="M:Sudoku.Data.ChainLink.#ctor(System.Int32,System.Int32,Sudoku.Data.ChainLinkType)">
            <summary>
            Encapsulates a link used for drawing.
            </summary>
            <param name="StartCandidate">Indicates the start candidate.</param>
            <param name="EndCandidate">Indicates the end candidate.</param>
            <param name="LinkType">Indicates the link type.</param>
        </member>
        <member name="P:Sudoku.Data.ChainLink.StartCell">
            <summary>
            Indicates the start cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainLink.StartDigit">
            <summary>
            Indicates the start digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainLink.EndCell">
            <summary>
            Indicates the end cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainLink.EndDigit">
            <summary>
            Indicates the end digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainLink.EigenValue">
            <summary>
            Indicates the eigen value.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ChainLink.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Data.ChainLink.JsonConverter">
            <summary>
            Defines a JSON converter that allows the current instance being serialized.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainLink.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ChainLink.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Throws when the specified data is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.ChainLink.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.ChainLink,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ChainLink.Equals(Sudoku.Data.ChainLink@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.ChainLink.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.ChainLink.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@,Sudoku.Data.ChainLinkType@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="T:Sudoku.Data.ChainLinkType">
            <summary>
            Defines a type of a link that constructed by 2 <see cref="T:Sudoku.Data.ChainNode"/>s.
            </summary>
            <param name="TypeKind">
            The <see cref="T:System.Byte"/> value as the eigenvalue of the type. All possible values are:
            <list type="table">
            <item>
            <term>0</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Default"/>.</description>
            </item>
            <item>
            <term>1</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Weak"/>.</description>
            </item>
            <item>
            <term>2</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Strong"/>.</description>
            </item>
            <item>
            <term>3</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Line"/>.</description>
            </item>
            </list>
            </param>
            <completionlist cref="T:Sudoku.Data.ChainLinkTypes"/>
        </member>
        <member name="M:Sudoku.Data.ChainLinkType.#ctor(System.Byte)">
            <summary>
            Defines a type of a link that constructed by 2 <see cref="T:Sudoku.Data.ChainNode"/>s.
            </summary>
            <param name="TypeKind">
            The <see cref="T:System.Byte"/> value as the eigenvalue of the type. All possible values are:
            <list type="table">
            <item>
            <term>0</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Default"/>.</description>
            </item>
            <item>
            <term>1</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Weak"/>.</description>
            </item>
            <item>
            <term>2</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Strong"/>.</description>
            </item>
            <item>
            <term>3</term>
            <description>The link is <see cref="F:Sudoku.Data.ChainLinkTypes.Line"/>.</description>
            </item>
            </list>
            </param>
            <completionlist cref="T:Sudoku.Data.ChainLinkTypes"/>
        </member>
        <member name="M:Sudoku.Data.ChainLinkType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ChainLinkType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ChainLinkType.GetNotation">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ChainLinkType.System#IValueEquatable{Sudoku#Data#ChainLinkType}#Equals(Sudoku.Data.ChainLinkType@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ChainLinkType.op_Explicit(System.Byte)~Sudoku.Data.ChainLinkType">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ChainLinkType.op_Explicit(Sudoku.Data.ChainLinkType)~System.Byte">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.ChainLinkTypes">
            <summary>
            Defines the <see langword="static"/> data for <see cref="T:Sudoku.Data.ChainLinkType"/> instances.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ChainLinkTypes.Default">
            <summary>
            Indicates the default link.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ChainLinkTypes.Weak">
            <summary>
            Indicates the weak link.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ChainLinkTypes.Strong">
            <summary>
            Indicates the strong link.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ChainLinkTypes.Line">
            <summary>
            Indicates the line link.
            </summary>
        </member>
        <member name="T:Sudoku.Data.ChainNode">
            <summary>
            Defines a chain node, with basic information about the node. At the same time you can get the root node
            of the chain, using the current node as the tail node.
            </summary>
            <remarks>
            The data structure uses an <see cref="T:System.Int32"/> value to represent an instance. The bit usage details is as below:
            <code><![CDATA[
            |  (4)  |  (3)  |  (2)  |  (1)  |
            |-------|-------|-------|-------|
            32     24      16       8       0
            ]]></code>
            Where:
            <list type="table">
            <item>
            <term>Part <c>(1)</c>, bits 0..8</term>
            <description>The mask of the digit used. The value only uses 4 bits.</description>
            </item>
            <item>
            <term>Part <c>(2)</c>, bits 8..16</term>
            <description>The mask of the cell used. The value only uses 7 bits.</description>
            </item>
            <item>
            <term>Part <c>(3)</c>, bits 16..24</term>
            <description>
            The mask of the on/off status indicating whether the node is currently on. The value only uses 1 bit.
            </description>
            </item>
            <item>
            <term>Part <c>(4)</c>, bits 24..32</term>
            <description>The mask of the number of parent nodes stored. The value only uses 3 bits.</description>
            </item>
            </list>
            </remarks>
            <param name="Mask">Indicates the mask that handles and stores the basic information of the current node.</param>
        </member>
        <member name="M:Sudoku.Data.ChainNode.#ctor(System.Int32)">
            <summary>
            Defines a chain node, with basic information about the node. At the same time you can get the root node
            of the chain, using the current node as the tail node.
            </summary>
            <remarks>
            The data structure uses an <see cref="T:System.Int32"/> value to represent an instance. The bit usage details is as below:
            <code><![CDATA[
            |  (4)  |  (3)  |  (2)  |  (1)  |
            |-------|-------|-------|-------|
            32     24      16       8       0
            ]]></code>
            Where:
            <list type="table">
            <item>
            <term>Part <c>(1)</c>, bits 0..8</term>
            <description>The mask of the digit used. The value only uses 4 bits.</description>
            </item>
            <item>
            <term>Part <c>(2)</c>, bits 8..16</term>
            <description>The mask of the cell used. The value only uses 7 bits.</description>
            </item>
            <item>
            <term>Part <c>(3)</c>, bits 16..24</term>
            <description>
            The mask of the on/off status indicating whether the node is currently on. The value only uses 1 bit.
            </description>
            </item>
            <item>
            <term>Part <c>(4)</c>, bits 24..32</term>
            <description>The mask of the number of parent nodes stored. The value only uses 3 bits.</description>
            </item>
            </list>
            </remarks>
            <param name="Mask">Indicates the mask that handles and stores the basic information of the current node.</param>
        </member>
        <member name="F:Sudoku.Data.ChainNode.Undefined">
            <summary>
            Indicates the undefined instance that is used for providing with a value that only used in an invalid case.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ChainNode._rawParents">
            <summary>
            Indicates the parents.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ChainNode.#ctor(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.ChainNode"/> instance using the specified cell, digit and the status
            value as a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="cell">The cell used.</param>
            <param name="digit">The digit used.</param>
            <param name="isOn">A <see cref="T:System.Boolean"/> result indicating whether the node is on.</param>
        </member>
        <member name="M:Sudoku.Data.ChainNode.#ctor(System.Byte,System.Byte,System.Boolean,Sudoku.Data.ChainNode@)">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.ChainNode"/> instance using the specified cell, digit,
            the status value as a <see cref="T:System.Boolean"/> value, and a parent node.
            </summary>
            <param name="cell">The cell used.</param>
            <param name="digit">The digit used.</param>
            <param name="isOn">A <see cref="T:System.Boolean"/> result indicating whether the node is on.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="M:Sudoku.Data.ChainNode.#ctor(System.Byte,System.Byte,System.Boolean,Sudoku.Data.ChainNode[])">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.ChainNode"/> instance using the specified cell, digit,
            the status value as a <see cref="T:System.Boolean"/> value, and the parent nodes.
            </summary>
            <param name="cell">The cell used.</param>
            <param name="digit">The digit used.</param>
            <param name="isOn">A <see cref="T:System.Boolean"/> result indicating whether the node is on.</param>
            <param name="parents">The parent nodes.</param>
        </member>
        <member name="P:Sudoku.Data.ChainNode.Parents">
            <summary>
            Gets the possible useful parents.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainNode.IsOn">
            <summary>
            Indicates whether the node is at the <b>on</b> status.
            </summary>
            <remarks>
            The possible <b>status</b>es of the node are <b>on</b> and <b>off</b>, where:
            <list type="table">
            <listheader>
            <term>Status</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term>On</term>
            <description>
            The digit is true in the cell, which means the digit should be filled in this cell.
            </description>
            </item>
            <item>
            <term>Off</term>
            <description>
            The digit is false in the cell, which means the digit should be eliminated from this cell.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Data.ChainNode.Cell">
            <summary>
            Indicates the cell used.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainNode.Digit">
            <summary>
            Indicates the digit used.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainNode.ParentsCount">
            <summary>
            Indicates the total number of parent nodes.
            </summary>
            <!--<value>The number of cells to assign.</value>-->
            <!--<returns>The number of parents.</returns>-->
        </member>
        <member name="P:Sudoku.Data.ChainNode.AncestorsCount">
            <summary>
            Indicates the total number of the ancestors.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainNode.Candidate">
            <summary>
            Indicates the candidate used.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ChainNode.Root">
            <summary>
            <para>Indicates the root of the current chain.</para>
            <para>
            If the property <see cref="P:Sudoku.Data.ChainNode.Parents"/> isn't <see langword="null"/>,
            then the property will search for the parent node and check its parent node recursively
            (i.e. checks the grandparents, great-grandparents, etc.).
            </para>
            </summary>
            <returns>Returns the root of the chain.</returns>
            <seealso cref="P:Sudoku.Data.ChainNode.Parents"/>
            <seealso cref="P:Sudoku.Data.ChainNode.ParentsCount"/>
        </member>
        <member name="P:Sudoku.Data.ChainNode.WholeChain">
            <summary>
            Indicates the nodes that the current node lies in.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ChainNode.IsParentOf(Sudoku.Data.ChainNode)">
            <summary>
            Determine whether the node is the parent of the specified node.
            </summary>
            <param name="node">The chain node.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.ChainNode.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.ChainNode.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.ChainNode.AddParent(Sudoku.Data.ChainNode)">
            <summary>
            Append a chain node into the collection, as one of the parent nodes.
            </summary>
            <param name="chain">The chain node to be added.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the inner parent nodes collection is full.
            </exception>
        </member>
        <member name="M:Sudoku.Data.ChainNode.ConstructMask(System.Byte,System.Byte,System.Boolean,System.Byte)">
            <summary>
            Constructs the mask.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="isOn">The on/off status.</param>
            <param name="parentsCount">The number of parents.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.ChainNode.Deconstruct(System.Byte@,System.Byte@,System.Boolean@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ChainNode.Equals(Sudoku.Data.ChainNode@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.ChainNode.Deconstruct(System.Int16@,System.Boolean@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Collections.ChainLinkCollection">
            <summary>
            Provides a collection that contains the chain links.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.ChainLinkCollection._collection">
            <summary>
            The internal collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.#ctor(System.Span{Sudoku.Data.ChainLink}@)">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.#ctor(System.Collections.Generic.IEnumerable{Sudoku.Data.ChainLink})">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.Equals(Sudoku.Data.Collections.ChainLinkCollection@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.op_Equality(Sudoku.Data.Collections.ChainLinkCollection@,Sudoku.Data.Collections.ChainLinkCollection@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.op_Inequality(Sudoku.Data.Collections.ChainLinkCollection@,Sudoku.Data.Collections.ChainLinkCollection@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.ChainLinkCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.Collections.ConclusionCollection">
            <summary>
            Provides a collection that contains the conclusions.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.ConclusionCollection._collection">
            <summary>
            The internal collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(System.ReadOnlySpan{Sudoku.Data.Conclusion}@)">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@)">
            <summary>
            Initializes an instance with the specified collection. 
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.ConclusionCollection.Cells">
            <summary>
            Indicates all cells used in this conclusions list.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Collections.ConclusionCollection.Digits">
            <summary>
            Indicates all digits used in this conclusions list, represented as a mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.ToString(System.Boolean,System.String)">
            <summary>
            Converts the current instance to <see cref="T:System.String"/> with the specified separator.
            </summary>
            <param name="shouldSort">Indicates whether the specified collection should be sorted first.</param>
            <param name="separator">The separator.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.Equals(Sudoku.Data.Collections.ConclusionCollection@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.op_Equality(Sudoku.Data.Collections.ConclusionCollection@,Sudoku.Data.Collections.ConclusionCollection@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.op_Inequality(Sudoku.Data.Collections.ConclusionCollection@,Sudoku.Data.Collections.ConclusionCollection@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.Collections.DigitCollection">
            <summary>
            Indicates a collection that contains the several digits.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.DigitCollection._mask">
            <summary>
            Indicates the inner mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Int16)">
            <summary>
            Initializes the collection using a mask.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Initializes an instance with the specified digits.
            </summary>
            <param name="digits">The digits.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified digits.
            </summary>
            <param name="digits">The digits.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.DigitCollection.Count">
            <summary>
            Get the number of digits in the collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Contains(System.Int32)">
            <summary>
            Indicates whether the specified collection contains the digit.
            </summary>
            <param name="digit">The digit.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the specified format string.
            </summary>
            <param name="format">The format. If available, the parameter can be <see langword="null"/>.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_OnesComplement(Sudoku.Data.Collections.DigitCollection)">
            <summary>
            Make all <see langword="true"/> bits to be set <see langword="false"/>,
            and make all <see langword="false"/> bits to be set <see langword="true"/>.
            </summary>
            <param name="collection">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_BitwiseAnd(Sudoku.Data.Collections.DigitCollection,Sudoku.Data.Collections.DigitCollection)">
            <summary>
            Apply the intersection from two <see cref="T:Sudoku.Data.Collections.DigitCollection"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_BitwiseOr(Sudoku.Data.Collections.DigitCollection,Sudoku.Data.Collections.DigitCollection)">
            <summary>
            Apply the union of two <see cref="T:Sudoku.Data.Collections.DigitCollection"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_ExclusiveOr(Sudoku.Data.Collections.DigitCollection,Sudoku.Data.Collections.DigitCollection)">
            <summary>
            Apply the exclusive union of two <see cref="T:Sudoku.Data.Collections.DigitCollection"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.Collections.LinkCollection">
            <summary>
            Provides a collection that contains the chain links.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.LinkCollection._collection">
            <summary>
            The internal collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.#ctor(System.Span{Sudoku.Data.Link}@)">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.#ctor(System.Collections.Generic.IEnumerable{Sudoku.Data.Link})">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.Equals(Sudoku.Data.Collections.LinkCollection@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.op_Equality(Sudoku.Data.Collections.LinkCollection@,Sudoku.Data.Collections.LinkCollection@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.op_Inequality(Sudoku.Data.Collections.LinkCollection@,Sudoku.Data.Collections.LinkCollection@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.Collections.RegionCollection">
            <summary>
            Indicates a region collection.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.RegionCollection._mask">
            <summary>
            The inner mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.Int32)">
            <summary>
            Initializes an empty collection and add one region into the list.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Initializes an instance with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.RegionCollection.Count">
            <summary>
            Indicates the number of regions that contain in this collection.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Collections.RegionCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating whether the bit of the corresponding specified region
            is set <see langword="true"/>.
            </summary>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.ToSimpleString">
            <summary>
            To string but only output the labels ('r', 'c' or 'b').
            </summary>
            <returns>The labels.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetLabel(System.Int32)">
            <summary>
            Get the label of each region.
            </summary>
            <param name="index">The index.</param>
            <returns>The label.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.Equals(Sudoku.Data.Collections.RegionCollection@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.op_Equality(Sudoku.Data.Collections.RegionCollection@,Sudoku.Data.Collections.RegionCollection@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.op_Inequality(Sudoku.Data.Collections.RegionCollection@,Sudoku.Data.Collections.RegionCollection@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.Conclusion">
            <summary>
            Encapsulates a conclusion representation while solving in logic.
            </summary>
            <param name="Mask">
            Indicates the mask that holds the information for the cell, digit and the conclusion type.
            The bits distribution is like:
            <code><![CDATA[
            16      8       0
            |-------|-------|
            |     |---------|
            |/////|   used  |
            ]]></code>
            </param>
            <remarks>
            Two <see cref="T:Sudoku.Data.Conclusion"/>s can be compared with each other. If one of those two is an elimination
            (i.e. holds the value <see cref="F:Sudoku.Data.ConclusionType.Elimination"/> as the type), the instance
            will be greater; if those two hold same conclusion type, but one of those two holds
            the global index of the candidate position is greater, it is greater.
            </remarks>
            <seealso cref="F:Sudoku.Data.ConclusionType.Elimination"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.#ctor(System.Int32)">
            <summary>
            Encapsulates a conclusion representation while solving in logic.
            </summary>
            <param name="Mask">
            Indicates the mask that holds the information for the cell, digit and the conclusion type.
            The bits distribution is like:
            <code><![CDATA[
            16      8       0
            |-------|-------|
            |     |---------|
            |/////|   used  |
            ]]></code>
            </param>
            <remarks>
            Two <see cref="T:Sudoku.Data.Conclusion"/>s can be compared with each other. If one of those two is an elimination
            (i.e. holds the value <see cref="F:Sudoku.Data.ConclusionType.Elimination"/> as the type), the instance
            will be greater; if those two hold same conclusion type, but one of those two holds
            the global index of the candidate position is greater, it is greater.
            </remarks>
            <seealso cref="F:Sudoku.Data.ConclusionType.Elimination"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.#ctor(Sudoku.Data.ConclusionType,System.Int32)">
            <summary>
            Initializes an instance with a conclusion type and a candidate offset.
            </summary>
            <param name="type">The conclusion type.</param>
            <param name="candidate">The candidate offset.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.#ctor(Sudoku.Data.ConclusionType,System.Int32,System.Int32)">
            <summary>
            Initializes the <see cref="T:Sudoku.Data.Conclusion"/> instance via the specified cell, digit and the conclusion type.
            </summary>
            <param name="type">The conclusion type.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Data.Conclusion.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.Candidate">
            <summary>
            Indicates the candidate.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.ConclusionType">
            <summary>
            The conclusion type to control the action of applying.
            If the type is <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>,
            this conclusion will be set value (Set a digit into a cell);
            otherwise, a candidate will be removed.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Conclusion.ApplyTo(Sudoku.Data.Grid@)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.ApplyTo(Sudoku.Data.SudokuGrid@)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Equals(Sudoku.Data.Conclusion)">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.CompareTo(Sudoku.Data.Conclusion)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.System#IValueEquatable{Sudoku#Data#Conclusion}#Equals(Sudoku.Data.Conclusion@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.System#IValueComparable{Sudoku#Data#Conclusion}#CompareTo(Sudoku.Data.Conclusion@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_LessThan(Sudoku.Data.Conclusion,Sudoku.Data.Conclusion)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_LessThanOrEqual(Sudoku.Data.Conclusion,Sudoku.Data.Conclusion)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_GreaterThan(Sudoku.Data.Conclusion,Sudoku.Data.Conclusion)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_GreaterThanOrEqual(Sudoku.Data.Conclusion,Sudoku.Data.Conclusion)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Conclusion.JsonConverter">
            <summary>
            Defines a JSON converter that allows the current instance being serialized.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Throws when the specified data is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.Conclusion.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.Conclusion,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Equals(Sudoku.Data.Conclusion@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Deconstruct(Sudoku.Data.ConclusionType@,System.Int32@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Deconstruct(Sudoku.Data.ConclusionType@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="T:Sudoku.Data.ConclusionType">
            <summary>
            Provides a conclusion type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ConclusionType.Assignment">
            <summary>
            Indicates the conclusion is a value filling into a cell.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ConclusionType.Elimination">
            <summary>
            Indicates the conclusion is a candidate being remove from a cell.
            </summary>
        </member>
        <member name="T:Sudoku.Data.ConjugatePair">
            <summary>
            Encapsulates a conjugate pair.
            </summary>
            <remarks>
            <b>Conjugate pair</b> is a candidate pair (two candidates),
            these two candidates is in the same region where all cells has only
            two position can fill this candidate.
            </remarks>
            <param name="From">Indicates the cell that is the start cell.</param>
            <param name="To">Indicates the cell that is end cell.</param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="Map">Indicates the pair of maps used.</param>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.#ctor(System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@)">
            <summary>
            Encapsulates a conjugate pair.
            </summary>
            <remarks>
            <b>Conjugate pair</b> is a candidate pair (two candidates),
            these two candidates is in the same region where all cells has only
            two position can fill this candidate.
            </remarks>
            <param name="From">Indicates the cell that is the start cell.</param>
            <param name="To">Indicates the cell that is end cell.</param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="Map">Indicates the pair of maps used.</param>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.ConjugatePair"/> instance with from and to cell offset and a digit.
            </summary>
            <param name="from">The from cell.</param>
            <param name="to">The to cell.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.#ctor(Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.ConjugatePair"/> instance with the map and the digit.
            The map should contains two cells, the first one is the start one, and the second one is the end one.
            </summary>
            <param name="map">The map.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.Line">
            <summary>
            Indicates the line that two cells lie in.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.Regions">
            <summary>
            Indicates the region that two cells lie in.
            </summary>
            <remarks><inheritdoc cref="P:Sudoku.Data.Cells.CoveredRegions"/></remarks>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Data.ConjugatePair.JsonConverter">
            <summary>
            Defines a JSON converter that allows the current instance being serialized.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified value is invalid to parse.
            </exception>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.ConjugatePair,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.Equals(Sudoku.Data.ConjugatePair@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Sudoku.Data.Grid">
            <summary>
            Represents a sudoku grid that uses the mask list to construct the data structure.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Grid.CandidateCollectionEnumerator">
            <summary>
            Defines the default enumerator that iterates the <see cref="T:Sudoku.Data.Grid"/>
            through the candidates in the current <see cref="T:Sudoku.Data.Grid"/> instance.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.CandidateCollectionEnumerator._start">
            <summary>
            The pointer to the start value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.CandidateCollectionEnumerator._currentPointer">
            <summary>
            The current pointer.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.CandidateCollectionEnumerator._currentMask">
            <summary>
            Indicates the current mask.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.CandidateCollectionEnumerator._currentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.CandidateCollectionEnumerator.#ctor(System.Int16*)">
            <summary>
            Initializes an instance with the specified pointer to an array to iterate.
            </summary>
            <param name="arr">The pointer to an array.</param>
            <remarks>
            Note here we should point at the one-unit-lengthed memory before the array start.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Grid.CandidateCollectionEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.CandidateCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <list type="table">
            <listheader>
            <term>Return value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see langword="true"/></term>
            <description>If the enumerator was successfully advanced to the next element.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>If the enumerator has passed the end of the collection.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Sudoku.Data.Grid.CandidateCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.CandidateCollectionEnumerator.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.Data.Grid.CandidateCollectionEnumerator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Grid.CandidateCollectionEnumerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Grid.CandidateCollectionEnumerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="F:Sudoku.Data.Grid.DefaultMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.DefaultMask"/>
        </member>
        <member name="F:Sudoku.Data.Grid.MaxCandidatesMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.MaxCandidatesMask"/>
        </member>
        <member name="F:Sudoku.Data.Grid.EmptyMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.EmptyMask"/>
        </member>
        <member name="F:Sudoku.Data.Grid.ModifiableMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.ModifiableMask"/>
        </member>
        <member name="F:Sudoku.Data.Grid.GivenMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.GivenMask"/>
        </member>
        <member name="F:Sudoku.Data.Grid.Length">
            <summary>
            Indicates the size of each grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.RegionCellsCount">
            <summary>
            Indicates the size of each region.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.EmptyString">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.EmptyString"/>
        </member>
        <member name="F:Sudoku.Data.Grid.ValueChanged">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.ValueChanged"/>
        </member>
        <member name="F:Sudoku.Data.Grid.RefreshingCandidates">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.RefreshingCandidates"/>
        </member>
        <member name="F:Sudoku.Data.Grid.Undefined">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.Undefined"/>
        </member>
        <member name="F:Sudoku.Data.Grid.Empty">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.Empty"/>
        </member>
        <member name="F:Sudoku.Data.Grid.Solver">
            <summary>
            Indicates the solver that uses the bitwise algorithm to solve a puzzle as fast as possible.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid._values">
            <summary>
            Indicates the inner array that stores the masks of the sudoku grid, which
            stores the in-time sudoku grid inner information.
            </summary>
            <remarks>
            The field uses the mask table of length 81 to indicate the status and all possible candidates
            holding for each cell. Each mask uses a <see cref="T:System.Int16"/> value, but only uses 11 of 16 bits.
            <code>
            |xxx|--|--------|
            |-------|-------|
            16      8       0
            </code>
            Here the first-nine bits indicate whether the digit 1-9 is possible candidate in the current cell respectively,
            and the higher 3 bits indicate the cell status. The possible cell status are:
            <list type="table">
            <listheader>
            <term>Status name (Value corresponding to <see cref="T:Sudoku.Data.CellStatus"/> enumeration)</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Empty cell (i.e. <see cref="F:Sudoku.Data.CellStatus.Empty"/>)</term>
            <description>The cell is currently empty, and wait for being filled.</description>
            </item>
            <item>
            <term>Modifiable cell (i.e. <see cref="F:Sudoku.Data.CellStatus.Modifiable"/>)</term>
            <description>The cell is filled by a digit, but the digit isn't the given by the initial grid.</description>
            </item>
            <item>
            <term>Given cell (i.e. <see cref="F:Sudoku.Data.CellStatus.Given"/>)</term>
            <description>The cell is filled by a digit, which is given by the initial grid and can't be modified.</description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Sudoku.Data.CellStatus"/>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.Grid"/> instance using the <see cref="F:Sudoku.Data.Grid.Empty"/> instance to initialize.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor(System.Int32[])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor(System.Int32[],Sudoku.Data.GridCreatingOption)">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <param name="creatingOption">The grid creating option.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor(System.Int16[])">
             <summary>
             Initializes an instance with the specified mask array.
             </summary>
             <param name="masks">The masks.</param>
             <remarks>
             In order to decrease the memory allocation, you can use the system buffer,
             whose corresponding code will be implemented like this:
             <code><![CDATA[
             // Rents the buffer memory.
             short[] buffer = ArrayPool<short>.Shared.Rent(81);
             
             // Initialize the memory in order to be used later.
             fixed (short* pBuffer = buffer, pGrid = this)
             {
                 Unsafe.CopyBlock(pBuffer, pGrid, sizeof(short) * 81);
             }
            
             // Gets the result sudoku grid instance.
             try
             {
                 var targetGrid = new Grid(buffer); // Now the result grid is created here.
            
                 // Do something to use 'targetGrid'.
             }
             finally
             {
                 // Returns the buffer memory to system.
                 ArrayPool<short>.Shared.Return(buffer, false);
             }
             ]]></code>
             In this way we can get the sudoku grid without any allocations.
             </remarks>
             <exception cref="T:System.ArgumentException">Throws when <see cref="P:System.Array.Length"/> is not 81.</exception>
        </member>
        <member name="M:Sudoku.Data.Grid.#cctor">
            <summary>
            Indicates the <see langword="static"/> constructor of type <see cref="T:Sudoku.Data.Grid"/>. This construtcor will
            initialize some <see langword="static readonly"/> data members of this type that can't use
            a simple expression to describe the initial value.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Grid.IsSolved">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.IsValid">
            <summary>
            Indicates whether the puzzle is valid, which means the puzzle contains a unique solution.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Grid.IsUndefined">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.IsDebuggerUndefined">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.CandidatesCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.GivensCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.ModifiablesCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.EmptiesCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.NullRegions">
            <summary>
            <para>Indicates which regions are null regions.</para>
            <para>A <b>Null Region</b> is a region whose hold cells are all empty cells.</para>
            <para>
            The property returns an <see cref="T:System.Int32"/> value as a mask that contains all possible regions.
            For example, if the row 5, column 5 and block 5 (1-9) are null regions, the property will return
            the result <see cref="T:System.Int32"/> value, <c>000010000_000010000_000010000</c> as binary.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Data.Grid.GivenCells">
            <summary>
            Gets the cell template that only contains the given cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Grid.ModifiableCells">
            <summary>
            Gets the cell template that only contains the modifiable cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Grid.EmptyCells">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.BivalueCells">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.CandidatesMap">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.DigitsMap">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.ValuesMap">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.ResetGrid">
            <summary>
            Gets the grid where all modifiable cells are empty cells (i.e. the initial one).
            </summary>
        </member>
        <member name="P:Sudoku.Data.Grid.Solution">
            <summary>
            Indicates the solution of the grid. If failed to solve (for example,
            the puzzle contains multiple solutions), the property will return <see cref="F:Sudoku.Data.Grid.Undefined"/>.
            </summary>
            <see cref="F:Sudoku.Data.Grid.Undefined"/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#DefaultMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#MaxCandidatesMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#EmptyMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#ModifiableMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#GivenMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#EmptyString">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#ValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#RefreshingCandidates">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#Undefined">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Sudoku#Data#IGrid{Sudoku#Data#Grid}#Empty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.SimplyValidate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Exists(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Exists(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetMask(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetCandidates(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetPinnableReference">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToMaskString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetStatus(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current grid that begins at a specified cell as the index.
            </summary>
            <param name="startCell">The cell as the index at which to begin the slice.</param>
            <returns>
            A grid segment that consists of all elements of the current grid from <paramref name="startCell"/>
            to the end of the grid.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Grid.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current grid starting at a specified cell as the index for a specified length.
            </summary>
            <param name="startCell">The cell as the index at which to begin this slice.</param>
            <param name="length">The desired length for the slice.</param>
            <returns>
            A grid segment that consists of <paramref name="length"/> elements from the current grid
            starting at <paramref name="startCell"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Grid.Where()">
            <summary>
            Filters the cells that only satisfy the specified condition.
            </summary>
            <param name="predicate">The condition to filter cells.</param>
            <returns>
            The <see cref="T:Sudoku.Data.GridSegment"/> instance that holds the specified cells
            having satisfied the specified condition.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Grid.EnumerateCandidates">
            <summary>
            Try to enumerate all possible candidates in the current grid.
            </summary>
            <returns>
            An enumerator that allows us using <see langword="foreach"/> statement
            to iterate all possible candidates in the current grid.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Grid.EnumerateMasks">
            <summary>
            Try to enumerate the mask table of the current grid.
            </summary>
            <returns>
            An enumerator that allows us using <see langword="foreach"/> statement
            to iterate all masks in the current grid. The mask list must contain 81 masks.
            </returns>
            <remarks>
            Please note that the iterator will iterate all masks by reference, which means
            you can apply <see langword="ref"/> and <see langword="ref readonly"/> modifier
            onto the iteration variable:
            <code>
            foreach (ref readonly short mask in grid)
            {
                // Do something.
            }
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Grid.ToSudokuGrid">
            <summary>
            Convertes the current instance to a <see cref="T:Sudoku.Data.SudokuGrid"/>.
            </summary>
            <returns>The sudoku grid result.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.Reset">
            <summary>
            Reset the sudoku grid, to set all modifiable values to empty ones.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.Fix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Unfix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.SetMask(System.Int32,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetMap()">
            <summary>
            Called by properties <see cref="P:Sudoku.Data.Grid.CandidatesMap"/>, <see cref="P:Sudoku.Data.Grid.DigitsMap"/> and <see cref="P:Sudoku.Data.Grid.ValuesMap"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The map of digits.</returns>
            <seealso cref="P:Sudoku.Data.Grid.CandidatesMap"/>
            <seealso cref="P:Sudoku.Data.Grid.DigitsMap"/>
            <seealso cref="P:Sudoku.Data.Grid.ValuesMap"/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetCells()">
            <summary>
            Called by properties <see cref="P:Sudoku.Data.Grid.EmptyCells"/> and <see cref="P:Sudoku.Data.Grid.BivalueCells"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The cells.</returns>
            <seealso cref="P:Sudoku.Data.Grid.EmptyCells"/>
            <seealso cref="P:Sudoku.Data.Grid.BivalueCells"/>
        </member>
        <member name="M:Sudoku.Data.Grid.Equals(Sudoku.Data.Grid@,Sudoku.Data.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.Char*)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String,Sudoku.Data.GridParsingOption)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.TryParse(System.String,Sudoku.Data.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.TryParse(System.String,Sudoku.Data.GridParsingOption,Sudoku.Data.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.op_BitwiseAnd(Sudoku.Data.Grid@,Sudoku.Data.Cells@)">
            <summary>
            Gets the grid segment that uses the specified grid as the template,
            and a <see cref="T:Sudoku.Data.Cells"/> instance as the pattern.
            </summary>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="T:Sudoku.Data.Grid.JsonConverter">
            <summary>
            Defines a JSON converter that allows the current instance being serialized.
            </summary>
            <seealso cref="T:Sudoku.Data.Grid"/>
        </member>
        <member name="P:Sudoku.Data.Grid.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Throws when the specified data is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.Grid.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.Grid,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Grid.MaskCollectionEnumerator">
            <summary>
            Defines the default enumerator that iterates the <see cref="T:Sudoku.Data.Grid"/>
            through the masks in the current <see cref="T:Sudoku.Data.Grid"/> instance.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.MaskCollectionEnumerator._start">
            <summary>
            The pointer to the start value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.MaskCollectionEnumerator._currentPointer">
            <summary>
            The current pointer.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.MaskCollectionEnumerator._currentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.MaskCollectionEnumerator.#ctor(System.Int16*)">
            <summary>
            Initializes an instance with the specified pointer to an array to iterate.
            </summary>
            <param name="arr">The pointer to an array.</param>
            <remarks>
            Note here we should point at the one-unit-lengthed memory before the array start.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Grid.MaskCollectionEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.MaskCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <list type="table">
            <listheader>
            <term>Return value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see langword="true"/></term>
            <description>If the enumerator was successfully advanced to the next element.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>If the enumerator has passed the end of the collection.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Sudoku.Data.Grid.MaskCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.MaskCollectionEnumerator.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.Data.Grid.MaskCollectionEnumerator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Grid.MaskCollectionEnumerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Grid.MaskCollectionEnumerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Grid.Deconstruct(Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells[]@,Sudoku.Data.Cells[]@,Sudoku.Data.Cells[]@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Equals(Sudoku.Data.Grid@)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)" />
        </member>
        <member name="M:Sudoku.Data.Grid.op_Equality(Sudoku.Data.Grid@,Sudoku.Data.Grid@)">
            <summary>
            Determine whether two instances hold a same value.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.op_Inequality(Sudoku.Data.Grid@,Sudoku.Data.Grid@)">
            <summary>
            Determine whether two instances don't hold a same value.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Data.GridCreatingOption">
            <summary>
            Indicates the grid creating option.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridCreatingOption.None">
            <summary>
            Indicates the option is none.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridCreatingOption.MinusOne">
            <summary>
            Indicates each value should minus one before creation.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridFormatter">
            <summary>
            Provides a formatter that gathers the main information for a <see cref="T:Sudoku.Data.Grid"/> instance,
            and convert it to a <see cref="T:System.String"/> value as the result.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormatter._flags">
            <summary>
            Indicates the inner mask that stores the flags.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with a <see cref="T:System.Boolean"/> value
            indicating multi-line.
            </summary>
            <param name="multiline">
            The multi-line identifier. If the value is <see langword="true"/>, the output will
            be multi-line.
            </param>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.#ctor(System.Int16)">
            <summary>
            Initializes a <see cref="T:System.Runtime.Serialization.Formatter"/> instance using the specified mask storing all possible flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.#ctor(System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize an instance with the specified information.
            </summary>
            <param name="placeholder">The placeholder.</param>
            <param name="multiline">Indicates whether the formatter will use multiple lines mode.</param>
            <param name="withModifiables">Indicates whether the formatter will output modifiables.</param>
            <param name="withCandidates">
            Indicates whether the formatter will output candidates list.
            </param>
            <param name="treatValueAsGiven">
            Indicates whether the formatter will treat values as givens always.
            </param>
            <param name="subtleGridLines">
            Indicates whether the formatter will process outline corner of the multiline grid.
            </param>
            <param name="hodokuCompatible">
            Indicates whether the formatter will use hodoku library mode to output.
            </param>
            <param name="sukaku">Indicates whether the formatter will output as sukaku.</param>
            <param name="excel">Indicates whether the formatter will output as excel.</param>
            <param name="openSudoku">
            Indicates whether the formatter will output as open sudoku format.
            </param>
            <param name="shortenSusser">
            Indicates whether the formatter will shorten the susser format.
            </param>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Placeholder">
            <summary>
            The place holder.
            </summary>
            <returns>The result placeholder text.</returns>
            <value>The value to assign. The value must be 46 (<c>'.'</c>) or 48 (<c>'0'</c>).</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Multiline">
            <summary>
            Indicates whether the output should be multi-line.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.WithModifiables">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
            <returns>The output should be with modifiable values.</returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in '<c>:candidate list</c>'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
            <returns>The output should be with candidates.</returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c><![CDATA[<digit>]]></c>' instead
            of '<c>*digit*</c>'.
            </summary>
            <returns>The output will treat modifiable values as given ones.</returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> result indicating whether need to handle all grid outlines while outputting.
            </returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> result indicating whether the output will be compatible
            with Hodoku library format.
            </returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Sukaku">
            <summary>
            Indicates the output will be sukaku format (all single-valued digit will
            be all treated as candidates).
            </summary>
            <returns>
            The output will be sukaku format (all single-valued digit will
            be all treated as candidates).
            </returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Excel">
            <summary>
            Indicates the output will be Excel format.
            </summary>
            <returns>The output will be Excel format.</returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.OpenSudoku">
            <summary>
            Indicates whether the current output mode is aiming to open sudoku format.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> result indicating whether the current output mode
            is aiming to open sudoku format.
            </returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.ShortenSusser">
            <summary>
            Indicates whether the current output mode will shorten the susser format.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/> result indicating whether the current output mode
            will shorten the susser format.
            </returns>
            <value>A <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToString(Sudoku.Data.Grid@)">
            <summary>
            Represents a string value indicating this instance.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToString(Sudoku.Data.Grid@,System.String)">
            <summary>
            Represents a string value indicating this instance, with the specified format string.
            </summary>
            <param name="grid">The grid.</param>
            <param name="format">The string format.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.Create(System.String)">
            <summary>
            Create a <see cref="T:System.Runtime.Serialization.Formatter"/> according to the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The grid formatter.</returns>
            <exception cref="T:System.FormatException">Throws when the format string is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.Create(Sudoku.Data.GridFormattingOptions)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridFormatter"/> according to the specified grid output options.
            </summary>
            <param name="gridOutputOption">The grid output options.</param>
            <returns>The grid formatter.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToExcelString(Sudoku.Data.Grid@)">
            <summary>
            To Excel format string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToOpenSudokuString(Sudoku.Data.Grid@)">
            <summary>
            To open sudoku format string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
            <exception cref="T:Sudoku.InvalidPuzzleException">Throws when the specified grid is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToHodokuLibraryFormatString(Sudoku.Data.Grid@)">
            <summary>
            To string with Hodoku library format compatible string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToSukakuString(Sudoku.Data.Grid@)">
            <summary>
            To string with the sukaku format.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the puzzle is an invalid sukaku puzzle (at least one cell is given or modifiable).
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToSingleLineStringCore(Sudoku.Data.Grid@)">
            <summary>
            To single line string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToMultiLineStringCore(Sudoku.Data.Grid@)">
            <summary>
            To multi-line string with candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToMultiLineSimpleGridCore(Sudoku.Data.Grid@)">
            <summary>
            To multi-line normal grid string without any candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Data.GridFormatter.MatchLengthComparer">
            <summary>
            Indicates the inner equality comparer to determine the equality of length
            of 2 <see cref="T:System.Text.RegularExpressions.Match"/>es to compare.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.GridFormattingOptions">
            <summary>
            Provides a grid format option.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.None">
            <summary>
            Indicates the default settings (a single-line string text).
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.WithModifiers">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in '<c>:candidate list</c>'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c><![CDATA[<digit>]]></c>'
            instead of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            Visit the page
            <i>
            <see href="https://sunnieshine.github.io/Sudoku/types/structs/How-To-Use-Struct-SudokuGrid">
            How to use the structure SudokuGrid
            </see>
            </i>
            for more information.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.DotPlaceholder">
            <summary>
            Indicates the placeholder must be '.' instead of '0'.
            If the value is <see langword="true"/>, the placeholder will be '.';
            otherwise, '0'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.Multiline">
            <summary>
            Indicates the output should be multi-line.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.Sukaku">
            <summary>
            Indicates the output will be sukaku format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.Excel">
            <summary>
            Indicates the output will be Excel format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.OpenSudoku">
            <summary>
            Indicates the open sudoku format.
            </summary>
            <remarks>
            This format will use a triplet to describe a cell. If the cell has already been filled with
            a value, it will be output at the first digit of that triplet. For example,
            the triplet <c>900</c> means the cell is filled with the digit 9. In addition,
            if the cell is empty, the triplet is always <c>001</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.Shorten">
            <summary>
            Indicates the shorten susser format.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridParser">
            <summary>
            Encapsulates a grid parser that can parse a string value and convert it
            into a valid <see cref="T:Sudoku.Data.Grid"/> instance as the result.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParser.ParseFunctions">
            <summary>
            The list of all methods to parse.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridParser.#ctor(System.String)">
            <summary>
            Initializes an instance with parsing data.
            </summary>
            <param name="parsingValue">The string to parse.</param>
        </member>
        <member name="M:Sudoku.Data.GridParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance with parsing data and a bool value
            indicating whether the parsing operation should use compatible mode.
            </summary>
            <param name="parsingValue">The string to parse.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check
            PM grid. See <see cref="P:Sudoku.Data.GridParser.CompatibleFirst"/> to learn more.
            </param>
            <seealso cref="P:Sudoku.Data.GridParser.CompatibleFirst"/>
        </member>
        <member name="M:Sudoku.Data.GridParser.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance with parsing data and a bool value
            indicating whether the parsing operation should use compatible mode.
            </summary>
            <param name="parsingValue">The string to parse.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check
            PM grid. See <see cref="P:Sudoku.Data.GridParser.CompatibleFirst"/> to learn more.
            </param>
            <param name="shortenSusser">Indicates the parser will shorten the susser format result.</param>
            <seealso cref="P:Sudoku.Data.GridParser.CompatibleFirst"/>
        </member>
        <member name="P:Sudoku.Data.GridParser.ParsingValue">
            <summary>
            The string value to parse.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridParser.CompatibleFirst">
            <summary>
            Indicates whether the parser will change the execution order of PM grid.
            If the value is <see langword="true"/>, the parser will check compatible one
            first, and then check recommended parsing plan ('<c><![CDATA[<d>]]></c>' and '<c>*d*</c>').
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridParser.ShortenSusserFormat">
            <summary>
            Indicates whether the parser will use shorten mode to parse a susser format grid.
            If the value is <see langword="true"/>, the parser will omit the continuous empty notation
            <c>.</c>s or <c>0</c>s to a <c>*</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridParser.Parse">
            <summary>
            To parse the value.
            </summary>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.Parse(Sudoku.Data.GridParsingOption)">
            <summary>
            To parse the value with a specified grid parsing type.
            </summary>
            <param name="gridParsingOption">A specified parsing type.</param>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSimpleMultilineGrid(Sudoku.Data.GridParser@)">
            <summary>
            Parse the value using multi-line simple grid (without any candidates).
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingExcel(Sudoku.Data.GridParser@)">
            <summary>
            Parse the Excel format.
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingOpenSudoku(Sudoku.Data.GridParser@)">
            <summary>
            Parse the open sudoku format grid.
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingPencilMarked(Sudoku.Data.GridParser@)">
            <summary>
            Parse the PM grid.
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSimpleTable(Sudoku.Data.GridParser@)">
            <summary>
            Parse the simple table format string (Sudoku explainer format).
            </summary>
            <param name="parser">The parser.</param>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSusser(Sudoku.Data.GridParser@,System.Boolean)">
            <summary>
            Parse the susser format string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="shortenSusser">Indicates whether the parser will shorten the susser format.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSukaku(Sudoku.Data.GridParser@,System.Boolean)">
            <summary>
            Parse the sukaku format string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="compatibleFirst">
            Indicates whether the algorithm uses compatibility mode to check and parse sudoku grid.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.GridParser.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.GridParser.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.GridParsingOption">
            <summary>
            Represents a grid parsing type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Susser">
            <summary>
            <para>
            Indicates the susser format, which means all grid values
            will be displayed in one line with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            </para>
            <para>
            1) <c>080630040200085009090000081000300800000020000006001000970000030400850007010094050</c>
            </para>
            <para>
            2) <c>4+80002+306+31000+9004000+4030109+38+24+675+1+75+1+39+8+46+2+2640708+3902090000010000002080+36+20007:713 723 533 633 537 575 176 576 577 579 583 784 586 587 496 997</c>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.ShortenSusser">
            <summary>
            <para>
            Indicates the shorten susser format, which means all grid values
            will be displayed in one line with empty cell character <c>'0'</c> or <c>'.'</c>.
            Different with the option <see cref="F:Sudoku.Data.GridParsingOption.Susser"/>, this option will continue
            shortening the code. The option will omit the continuous empty cells to a <c>*</c>
            in a single line. For example, the code
            <code>
            080630040200085009090000081000300800000020000006001000970000030400850007010094050
            </code>
            will be displayed as
            <code>
            08063*40,2*85009,09*81,*300800,*2*,006001*,97*30,40085*7,01*94050
            </code>
            via this option. We use the colon <c>,</c> to separate each line of 9 numbers,
            and then omit the most continuous empty cells to a <c>*</c>.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.PencilMarked">
            <summary>
            <para>
            Indicates the pencil marked grid (PM grid), which means all
            grid candidates will be displayed using a table.
            </para>
            <para>
            For example:
            <code><![CDATA[
            +-------------------+-----------------+--------------------+
            | <8>   12459  249  | *6*  <7>   259  | 1245    245   *3*  |
            | 1457  1245   <6>  | 58   125   <3>  | 124578  2458  <9>  |
            | 1579  <3>    279  | <4>  1259  2589 | 12578   *6*   78   |
            +-------------------+-----------------+--------------------+
            | *2*   <7>    *3*  | <1>  <8>   45   | 456     <9>   46   |
            | <6>   458    48   | <2>  59    459  | <3>     *7*   *1*  |
            | 1459  1459   49   | *3*  *6*   <7>  | 458     458   <2>  |
            +-------------------+-----------------+--------------------+
            | <3>   2489   <1>  | 578  25    <6>  | 24789   248   478  |
            | 79    <6>    2789 | 78   <4>   *1*  | 289     *3*   <5>  |
            | 47    248    <5>  | <9>  *3*   28   | 2678    <1>   4678 |
            +-------------------+-----------------+--------------------+
            ]]></code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Table">
            <summary>
            <para>
            Indicates the table format, which means all grid values
            will be displayed using a table with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            <code><![CDATA[
            .----------.----------.----------.
            |  .  4  6 |  . +1  . |  3 +7 +5 |
            | +3 +8  1 | +5  4  7 | +2 +9 +6 |
            |  .  .  5 |  .  3  . | +1 +4  8 |
            :----------+----------+----------:
            |  8  .  4 |  . +5  . | +7  6  . |
            |  .  9  . |  .  2  . | +8  5 +4 |
            |  .  5  . |  .  .  . |  9  .  3 |
            :----------+----------+----------:
            |  5  .  . |  .  8  . |  6  . +9 |
            | +4  .  8 |  1  9  . |  5  .  . |
            |  .  .  9 |  .  . +5 |  4  8  . |
            '----------'----------'----------'
            ]]></code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.SimpleTable">
            <summary>
            <para>
            Sudoku explainer format (9 characters in a row, and 9 rows).
            </para>
            <para>
            For example:
            <code><![CDATA[
            080630040
            200085009
            090000081
            000300800
            000020000
            006001000
            970000030
            400850007
            010094050
            ]]></code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Sukaku">
             <summary>
             <para>
             Sukaku sudoku format (only contains the digits and the whitespace).
             </para>
             <para>
             For example:
             <code><![CDATA[
            '  23456789  23456789  23456789 123456789 123456789  23456789 123456789  23456789  23456789
            '  23456789 123456789 123456789  23456789  23456789  23456789  23456789  23456789  23456789
            '  23456789  23456789  23456789  23456789 123456789  23456789 123456789  23456789 123456789
            ' 123456789  23456789  23456789 123456789 123456789  23456789  23456789  23456789 123456789
            '  23456789  23456789  23456789  23456789 123456789  23456789 123456789  23456789  23456789
            ' 123456789  23456789  23456789 123456789 123456789  23456789 123456789  23456789 123456789
            '  23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789
            '  23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789
            '  23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789
             ]]></code>
             </para>
             </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.SukakuSingleLine">
            <summary>
            <para>Sukaku single line format, which uses '0' to be a placeholder.</para>
            <para>
            For example:
            <code><![CDATA[023406789123456700003050780120050789003006009123456009100056089023456080123000789003456789023006700023006700120056780100006789120400780000406789103000080020450000003406089020056709120050080100000700120056780120000709123056000123050080000450089123050709100456089003400780100450009003400009120400009123056709003000700023406000000406009123006000000056709003406700120050009103056089103456709003056009120456009123456780023400000103406709003056789020406700100050009020400000100006789020006789020456780123056080120400700000406789120400080023456789003006080020456789103450709123400009123400080023406700123406709103400080123456009120456789023406709023450080100406080103056009100400009123000789100400709100406780123050700000050080023406009]]></code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Excel">
            <summary>
            <para>
            Excel sudoku format (only contains the digits and the tab character).
            </para>
            <para>
            For example:
            <code><![CDATA[
            1			7	8	9	4	5	6
            4	5	6	1	2	3	7	8	9
            7	8	9	4	5	6	1	2	
            9	1	2	6		8	3	4	
            3	4	5				6	7	8
            	7	8	3		5	9	1	2
            	9	1	5	6	7	2	3	4
            2	3	4	8	9	1	5	6	7
            5	6	7	2	3	4			1
            ]]></code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.OpenSudoku">
            <summary>
            <para>
            Open sudoku format.
            </para>
            <para>
            For example:
            <code><![CDATA[0|0|1|1|0|0|0|0|1|4|0|0|0|0|1|0|0|1|0|0|1|0|0|1|9|0|0|8|0|0|0|0|1|0|0|1|0|0|1|0|0|1|7|0|0|2|0|0|0|0|1|0|0|1|0|0|1|0|0|1|7|0|0|0|0|1|3|0|0|0|0|1|0|0|1|4|0|0|0|0|1|0|0|1|0|0|1|9|0|0|2|0|0|6|0|0|0|0|1|0|0|1|8|0|0|0|0|1|0|0|1|7|0|0|0|0|1|0|0|1|0|0|1|3|0|0|0|0|1|0|0|1|4|0|0|5|0|0|0|0|1|6|0|0|0|0|1|0|0|1|0|0|1|3|0|0|0|0|1|1|0|0|0|0|1|0|0|1|1|0|0|7|0|0|0|0|1|8|0|0|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|4|0|0|0|0|1|0|0|1|0|0|1|0|0|1|6|0|0|0|0|1|0|0|1|3|0|0|0|0|1|9|0|0|0|0|1|0|0|1|7|0|0]]></code>
            </para>
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridSegment">
            <summary>
            Provides a segment that holds a list of candidate states for a certain set of cells.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridSegment._values">
            <summary>
            Indicates the list of masks used.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridSegment._gridCode">
            <summary>
            Indicates the code that represents for the grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridSegment.#ctor(Sudoku.Data.Grid@,Sudoku.Data.Cells@)">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.GridSegment"/> instance via a <see cref="T:Sudoku.Data.Grid"/> as the base mask information,
            and a <see cref="P:Sudoku.Data.GridSegment.Cells"/> collection to hold the details which cells will be used.
            </summary>
            <param name="grid">The grid.</param>
            <param name="pattern">Indicates the cells used.</param>
        </member>
        <member name="P:Sudoku.Data.GridSegment.Cells">
            <summary>
            Indicates which cells the segment covers.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridSegment.Item(System.Int32,Sudoku.Data.GridSegmentIndexerMode)">
            <summary>
            Gets the mask that is located to the specified index.
            </summary>
            <param name="index">The index value to get.</param>
            <param name="mode">
            The mode you want to find that is applied to the index as the behavior of this indexer.
            The default value is <see cref="F:Sudoku.Data.GridSegmentIndexerMode.ByCellIndex"/>.
            </param>
            <returns>
            The pair as the result. The pair contains the cell and the mask of the current candidate.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Throws when the <paramref name="index"/> is out of range via the specified indexing mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Throws when the collection doesn't contain the mask at the specified index
            via the specified indexing mode.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="mode"/> is invalid.
            The argument <paramref name="mode"/> must be <see cref="F:Sudoku.Data.GridSegmentIndexerMode.ByCellIndex"/>
            or <see cref="F:Sudoku.Data.GridSegmentIndexerMode.ByArrayIndex"/>.
            </exception>
            <seealso cref="F:Sudoku.Data.GridSegmentIndexerMode.ByCellIndex"/>
        </member>
        <member name="M:Sudoku.Data.GridSegment.GetPinnableReference">
            <summary>
            Returns the reference of the mask that is the first position of the segment to iterate.
            </summary>
            <returns>The reference of the mask.</returns>
        </member>
        <member name="M:Sudoku.Data.GridSegment.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridSegment.Equals(Sudoku.Data.GridSegment)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridSegment.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridSegment.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.GridSegment.System#IValueEquatable{Sudoku#Data#GridSegment}#Equals(Sudoku.Data.GridSegment@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridSegment.op_Equality(Sudoku.Data.GridSegment,Sudoku.Data.GridSegment)">
            <inheritdoc cref="M:System.IEqualityOperators`2.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Data.GridSegment.op_Inequality(Sudoku.Data.GridSegment,Sudoku.Data.GridSegment)">
            <inheritdoc cref="M:System.IEqualityOperators`2.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Sudoku.Data.GridSegmentIndexerMode">
            <summary>
            Defines a way to find the element at the specified index in <see cref="T:Sudoku.Data.GridSegment"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridSegmentIndexerMode.ByCellIndex">
            <summary>
            Indicates the indexing way is to index by cell index.
            In this mode, you should specify the value from 0 to 81, and the indexer will throw exceptions
            when the specified cell doesn't contain in the collection.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridSegmentIndexerMode.ByArrayIndex">
            <summary>
            Indicates the indexing way is to index by array index.
            In this mode, you should specify the value from 0 to length of the elements in the segment.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridTransformations">
            <summary>
            Provides methods for <see cref="T:Sudoku.Data.Grid"/> instances on transformations.
            </summary>
            <seealso cref="T:Sudoku.Data.Grid"/>
        </member>
        <member name="F:Sudoku.Data.GridTransformations.ClockwiseTable">
            <summary>
            The table of clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridTransformations.CounterclockwiseTable">
            <summary>
            The table of counter-clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridTransformations.PiRotateTable">
            <summary>
            The table of pi-rotation.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorLeftRight(Sudoku.Data.Grid@)">
            <summary>
            Mirror left-right the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorTopBottom(Sudoku.Data.Grid@)">
            <summary>
            Mirror top-bottom the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorDiagonal(Sudoku.Data.Grid@)">
            <summary>
            Mirror diagonal the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.Transpose(Sudoku.Data.Grid@)">
            <summary>
            Transpose the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorAntidiagonal(Sudoku.Data.Grid@)">
            <summary>
            Mirror anti-diagonal the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.RotateClockwise(Sudoku.Data.Grid@)">
            <summary>
            Rotate the grid clockwise.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.RotateCounterclockwise(Sudoku.Data.Grid@)">
            <summary>
            Rotate the grid counterclockwise.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.RotatePi(Sudoku.Data.Grid@)">
            <summary>
            Rotate the grid <c><see cref="F:System.Math.PI"/></c> degrees.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.SwapTwoRegions(Sudoku.Data.Grid@,System.Int32,System.Int32)">
            <summary>
            Swap to regions.
            </summary>
            <param name="this">The grid.</param>
            <param name="region1">The region 1.</param>
            <param name="region2">The region 2.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when two specified region argument is not in valid range (0..27)
            or two regions are not in same region type.
            </exception>
        </member>
        <member name="T:Sudoku.Data.ICellsOrCandidates`1">
            <summary>
            Provides with a basic collection that is a <see cref="T:Sudoku.Data.Cells"/> or a <see cref="T:Sudoku.Data.Candidates"/> collection.
            </summary>
            <typeparam name="T">
            The type. The type should always be <see cref="T:Sudoku.Data.Cells"/> or <see cref="T:Sudoku.Data.Candidates"/>.
            </typeparam>
            <seealso cref="T:Sudoku.Data.Cells"/>
            <seealso cref="T:Sudoku.Data.Candidates"/>
        </member>
        <member name="P:Sudoku.Data.ICellsOrCandidates`1.IsEmpty">
            <summary>
            Indicates whether the collection is empty.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ICellsOrCandidates`1.Count">
            <summary>
            Indicates the number of the values stored in this collection.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ICellsOrCandidates`1.PeerIntersection">
            <summary>
            Indicates the <typeparamref name="T"/> of intersections.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ICellsOrCandidates`1.Item(System.Int32)">
            <summary>
            Get the offset at the specified position index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The offset at the specified position index. If the value is invalid, the return value will be <c>-1</c>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.CopyTo(System.Int32*,System.Int32)">
            <summary>
            Copies the current instance to the target array specified as an <see cref="T:System.Int32"/>*.
            </summary>
            <param name="arr">The pointer that points to an array of type <see cref="T:System.Int32"/>.</param>
            <param name="length">The length of that array.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the capacity isn't enough to store all values.
            </exception>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.CopyTo(System.Span{System.Int32}@)">
            <summary>
            Copies the current instance to the target <see cref="T:System.Span`1"/> instance.
            </summary>
            <param name="span">
            The target <see cref="T:System.Span`1"/> instance.
            </param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.Contains(System.Int32)">
            <summary>
            Determine whether the map contains the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.ToArray">
            <summary>
            Get all offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.Add(System.Int32)">
            <summary>
            Set the specified offset as <see langword="true"/> or <see langword="false"/> value.
            </summary>
            <param name="offset">
            The offset. This value can be positive and negative. If 
            negative, the offset will be assigned <see langword="false"/>
            into the corresponding bit position of its absolute value.
            </param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.AddAnyway(System.Int32)">
            <summary>
            Set the specified offset as <see langword="true"/> value.
            </summary>
            <param name="offset">The offset.</param>
            <remarks>
            Different with <see cref="M:Sudoku.Data.ICellsOrCandidates`1.Add(System.Int32)"/>, the method will process negative values,
            but this won't.
            </remarks>
            <seealso cref="M:Sudoku.Data.ICellsOrCandidates`1.Add(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.AddRange(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Set the specified offsets as <see langword="true"/> value.
            </summary>
            <param name="offsets">The offsets to add.</param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Set the specified offsets as <see langword="true"/> value.
            </summary>
            <param name="offsets">The offsets to add.</param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.Remove(System.Int32)">
            <summary>
            Set the specified offset as <see langword="false"/> value.
            </summary>
            <param name="offset">The offset.</param>
            <remarks>
            Different with <see cref="M:Sudoku.Data.ICellsOrCandidates`1.Add(System.Int32)"/>, this method <b>can't</b> receive the negative value as the parameter.
            </remarks>
            <seealso cref="M:Sudoku.Data.ICellsOrCandidates`1.Add(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.Clear">
            <summary>
            Clear all bits.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.ToSpan">
            <summary>
            Converts the current instance to a <see cref="T:System.Span`1"/> of type <see cref="T:System.Int32"/>.
            </summary>
            <returns>The <see cref="T:System.Span`1"/> of <see cref="T:System.Int32"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.ToReadOnlySpan">
            <summary>
            Converts the current instance to a <see cref="T:System.ReadOnlySpan`1"/> of type <see cref="T:System.Int32"/>.
            </summary>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Int32"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_OnesComplement(`0@)">
            <summary>
            Reverse status for all offsets, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="offsets">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_GreaterThan(`0@,`0@)">
            <summary>
            The syntactic sugar for <c>!(<paramref name="left"/> - <paramref name="right"/>).IsEmpty</c>.
            </summary>
            <param name="left">The subtrahend.</param>
            <param name="right">The subtractor.</param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_LessThan(`0@,`0@)">
            <summary>
            The syntactic sugar for <c>(<paramref name="left"/> - <paramref name="right"/>).IsEmpty</c>.
            </summary>
            <param name="left">The subtrahend.</param>
            <param name="right">The subtractor.</param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Subtraction(`0@,`0@)">
            <summary>
            Get a <typeparamref name="T"/> that contains all <paramref name="left"/> instance
            but not in <paramref name="right"/> instance.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Addition(`0,System.Int32)">
            <summary>
            <para>
            Adds the specified <paramref name="offset"/> to the <paramref name="collection"/>,
            and returns the added result.
            </para>
            <para>
            The operator is same as the expression <c>new(collection) { cell }</c>, but with optimization.
            </para>
            </summary>
            <param name="collection">The collection.</param>
            <param name="offset">The offset to be removed.</param>
            <returns>The result collection.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Subtraction(`0,System.Int32)">
            <summary>
            <para>
            Removes the specified <paramref name="offset"/> from the <paramref name="collection"/>,
            and returns the removed result.
            </para>
            <para>
            The operator is same as the expression <c>new(collection) { ~cell }</c>, but with optimization.
            </para>
            </summary>
            <param name="collection">The collection.</param>
            <param name="offset">The offset to be removed.</param>
            <returns>The result collection.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_BitwiseAnd(`0@,`0@)">
            <summary>
            Get all cells that two <typeparamref name="T"/> instances both contain.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_BitwiseOr(`0@,`0@)">
            <summary>
            Get all cells from two <typeparamref name="T"/> instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_ExclusiveOr(`0@,`0@)">
            <summary>
            Get all cells that only appears once in two <typeparamref name="T"/> instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The symmetrical difference result.</returns>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Modulus(`0@,`0@)">
            <summary>
            Simply calls <c><![CDATA[(a & b).PeerIntersection & b]]></c>.
            The operator is used for searching for and checking eliminations.
            </summary>
            <param name="base">The base map.</param>
            <param name="template">The template map that the base map to check and cover.</param>
            <returns>The result map.</returns>
            <seealso cref="P:Sudoku.Data.ICellsOrCandidates`1.PeerIntersection"/>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Implicit(System.Int32[])~`0">
            <summary>
            Implicit cast from <see cref="T:System.Int32"/>[] to <typeparamref name="T"/>.
            </summary>
            <param name="offsets">The offsets.</param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Implicit(System.Span{System.Int32}@)~`0">
            <summary>
            Implicit cast from <see cref="T:System.Span`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="offsets">The offsets.</param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Implicit(System.ReadOnlySpan{System.Int32}@)~`0">
            <summary>
            Implicit cast from <see cref="T:System.ReadOnlySpan`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="offsets">The offsets.</param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Explicit(`0@)~System.Int32[]">
            <summary>
            Explicit cast from <typeparamref name="T"/> to <see cref="T:System.Int32"/>[].
            </summary>
            <param name="offsets">The offsets.</param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Explicit(`0@)~System.Span{System.Int32}">
            <summary>
            Explicit cast from <typeparamref name="T"/> to <see cref="T:System.Span`1"/>.
            </summary>
            <param name="offsets">The offsets.</param>
        </member>
        <member name="M:Sudoku.Data.ICellsOrCandidates`1.op_Explicit(`0@)~System.ReadOnlySpan{System.Int32}">
            <summary>
            Explicit cast from <typeparamref name="T"/> to <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="offsets">The offsets.</param>
        </member>
        <member name="T:Sudoku.Data.IChainLinkType`1">
            <summary>
            Defines a basic constraint that applied onto a <see cref="T:Sudoku.Data.ChainLinkType"/>.
            </summary>
            <typeparam name="T">The type. The type is always <see cref="T:Sudoku.Data.ChainLinkType"/>.</typeparam>
        </member>
        <member name="P:Sudoku.Data.IChainLinkType`1.TypeKind">
            <summary>
            The type kind.
            </summary>
        </member>
        <member name="M:Sudoku.Data.IChainLinkType`1.GetNotation">
            <summary>
            Gets the notation of the chain link that combines 2 <see cref="T:Sudoku.Data.ChainNode"/>s.
            </summary>
            <returns>The notation <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="M:Sudoku.Data.IChainLinkType`1.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.IChainLinkType`1.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.IChainLinkType`1.op_Explicit(System.Byte)~`0">
            <summary>
            Explicit cast from <see cref="T:System.Byte"/> to <typeparamref name="T"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sudoku.Data.IChainLinkType`1.op_Explicit(`0)~System.Byte">
            <summary>
            Explicit cast from <typeparamref name="T"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="linkType">The link type.</param>
        </member>
        <member name="T:Sudoku.Data.IGrid`1">
            <summary>
            Defines a data structure that describes a sudoku grid.
            </summary>
            <typeparam name="T">The type to implement this interface.</typeparam>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.DefaultMask">
            <summary>
            Indicates the default mask of a cell (an empty cell, with all 9 candidates left).
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.MaxCandidatesMask">
            <summary>
            Indicates the maximum candidate mask that used.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.EmptyMask">
            <summary>
            Indicates the empty mask, modifiable mask and given mask.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.ModifiableMask">
            <summary>
            Indicates the modifiable mask.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.GivenMask">
            <summary>
            Indicates the given mask.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.EmptyString">
            <summary>
            Indicates the empty grid string.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.ValueChanged">
            <summary>
            Indicates the event triggered when the value is changed.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.RefreshingCandidates">
            <summary>
            Indicates the event triggered when should re-compute candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.Undefined">
            <summary>
            Indicates the default grid that all values are initialized 0, which is same as
            <typeparamref name="T"/>().
            </summary>
            <remarks>
            We recommend you should use this static field instead of the default constructor
            to reduce object creation.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.Empty">
            <summary>
            The empty grid that is valid during implementation or running the program
            (all values are <see cref="P:Sudoku.Data.IGrid`1.DefaultMask"/>, i.e. empty cells).
            </summary>
            <remarks>
            This field is initialized by the static constructor of this structure.
            </remarks>
            <seealso cref="P:Sudoku.Data.IGrid`1.DefaultMask"/>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.IsSolved">
            <summary>
            Indicates the grid has already solved. If the value is <see langword="true"/>,
            the grid is solved; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.IsUndefined">
            <summary>
            Indicates whether the grid is <see cref="P:Sudoku.Data.IGrid`1.Undefined"/>, which means the grid
            holds totally same value with <see cref="P:Sudoku.Data.IGrid`1.Undefined"/>.
            </summary>
            <seealso cref="P:Sudoku.Data.IGrid`1.Undefined"/>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.IsEmpty">
            <summary>
            Indicates whether the grid is <see cref="P:Sudoku.Data.IGrid`1.Empty"/>, which means the grid
            holds totally same value with <see cref="P:Sudoku.Data.IGrid`1.Empty"/>.
            </summary>
            <seealso cref="P:Sudoku.Data.IGrid`1.Empty"/>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.IsDebuggerUndefined">
            <summary>
            Indicates whether the grid is as same behaviors as <see cref="P:Sudoku.Data.IGrid`1.Undefined"/>
            in debugging mode.
            </summary>
            <remarks>
            <para>
            This property checks whether all non-first masks are all 0. This checking behavior
            is aiming to the debugger because the debugger can't recognize the fixed buffer.
            </para>
            <para>
            The debugger can't recognize fixed buffer.
            The fixed buffer whose code is like:
            <code><![CDATA[
            private fixed short _values[81];
            ]]></code>
            However, internally, the field <c>_values</c> is implemented
            with a fixed buffer using a inner struct, which is just like:
            <code><![CDATA[
            [StructLayout(LayoutKind.Explicit, Size = 81 * sizeof(short))]
            private struct FixedBuffer
            {
                public short _internalValue;
            }
            ]]></code>
            And that field:
            <code><![CDATA[
            private FixedBuffer _fixedField;
            ]]></code>
            From the code we can learn that only 2 bytes of the inner struct can be detected,
            because the buffer struct only contains 2 bytes data.
            </para>
            </remarks>
            <see cref="P:Sudoku.Data.IGrid`1.Undefined"/>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.CandidatesCount">
            <summary>
            Indicates the number of total candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.GivensCount">
            <summary>
            Indicates the total number of given cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.ModifiablesCount">
            <summary>
            Indicates the total number of modifiable cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.EmptiesCount">
            <summary>
            Indicates the total number of empty cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.EmptyCells">
            <summary>
            Indicates the cells that corresponding position in this grid is empty.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.BivalueCells">
            <summary>
            Indicates the cells that corresponding position in this grid contain two candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.CandidatesMap">
            <summary>
            Indicates the map of possible positions of the existence of the candidate value for each digit.
            The return value will be an array of 9 elements, which stands for the statuses of 9 digits.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.DigitsMap">
            <summary>
            <para>
            Indicates the map of possible positions of the existence of each digit. The return value will
            be an array of 9 elements, which stands for the statuses of 9 digits.
            </para>
            <para>
            Different with <see cref="P:Sudoku.Data.IGrid`1.CandidatesMap"/>, this property contains all givens, modifiables and
            empty cells only if it contains the digit in the mask.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Data.IGrid`1.CandidatesMap"/>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.ValuesMap">
            <summary>
            <para>
            Indicates the map of possible positions of the existence of that value of each digit.
            The return value will be an array of 9 elements, which stands for the statuses of 9 digits.
            </para>
            <para>
            Different with <see cref="P:Sudoku.Data.IGrid`1.CandidatesMap"/>, the value only contains the given or modifiable
            cells whose mask contain the set bit of that digit.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Data.IGrid`1.CandidatesMap"/>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.Item(System.Int32)">
            <summary>
            Gets or sets the value in the specified cell.
            </summary>
            <param name="cell">The cell you want to get or set a value.</param>
            <value>
            The value you want to set. The value should be between 0 and 8. If assigning -1,
            that means to re-compute all candidates.
            </value>
            <returns>
            The value that the cell filled with. The possible values are:
            <list type="table">
            <item>
            <term>-2</term>
            <description>The status of the specified cell is <see cref="F:Sudoku.Data.CellStatus.Undefined"/>.</description>
            </item>
            <item>
            <term>-1</term>
            <description>The status of the specified cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/>.</description>
            </item>
            <item>
            <term>0 to 8</term>
            <description>
            The actual value that the cell filled with. 0 is for the digit 1, 1 is for the digit 2, etc..
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="P:Sudoku.Data.IGrid`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a candidate existence case with a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="cell">The cell offset between 0 and 80.</param>
            <param name="digit">The digit between 0 and 8.</param>
            <value>
            The case you want to set. <see langword="false"/> means that this candidate
            doesn't exist in this current sudoku grid; otherwise, <see langword="true"/>.
            </value>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.SimplyValidate">
            <summary>
            Check whether the current grid is valid (no duplicate values on same row, column or block).
            </summary>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Exists(System.Int32)">
            <summary>
            Indicates whether the current grid contains the specified candidate offset.
            </summary>
            <param name="candidate">The candidate offset.</param>
            <returns>
            The method will return a <see cref="T:System.Boolean"/>? value (contains three possible cases:
            <see langword="true"/>, <see langword="false"/> and <see langword="null"/>).
            All values corresponding to the cases are below:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The cell that the candidate specified is an empty cell <b>and</b> contains the specified digit
            that the candidate specified.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>
            The cell that the candidate specified is an empty cell <b>but doesn't</b> contain the specified digit
            that the candidate specified.
            </description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>
            The cell that the candidate specified is <b>not</b> an empty cell that the candidate specified.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            Note that the method will return a <see cref="T:System.Boolean"/>?, so you should use the code
            '<c>grid.Exists(candidate) is true</c>' or '<c>grid.Exists(candidate) == true</c>'
            to decide whether a condition is true.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Exists(System.Int32,System.Int32)">
            <summary>
            Indicates whether the current grid contains the digit in the specified cell.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>
            The method will return a <see cref="T:System.Boolean"/>? value (contains three possible cases:
            <see langword="true"/>, <see langword="false"/> and <see langword="null"/>).
            All values corresponding to the cases are below:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The cell is an empty cell <b>and</b> contains the specified digit.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>
            The cell is an empty cell <b>but doesn't</b> contain the specified digit.
            </description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The cell is <b>not</b> an empty cell.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Note that the method will return a <see cref="T:System.Boolean"/>?, so you should use the code
            '<c>grid.Exists(cell, digit) is true</c>' or '<c>grid.Exists(cell, digit) == true</c>'
            to decide whether a condition is true.
            </para>
            <para>
            In addition, because the type is <see cref="T:System.Boolean"/>? rather than <see cref="T:System.Boolean"/>,
            the result case will be more precisely than the indexer <see cref="P:Sudoku.Data.IGrid`1.Item(System.Int32,System.Int32)"/>,
            which is the main difference between this method and that indexer.
            </para>
            </remarks>
            <seealso cref="P:Sudoku.Data.IGrid`1.Item(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.ToArray">
            <summary>
            Serializes this instance to an array, where all digit value will be stored.
            </summary>
            <returns>
            This array. All elements are between 0 to 9, where 0 means the
            cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/> now.
            </returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.GetMask(System.Int32)">
            <summary>
            Get a mask at the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.GetCandidates(System.Int32)">
            <summary>
            Get the candidate mask part of the specified cell.
            </summary>
            <param name="cell">The cell offset you want to get.</param>
            <returns>
            <para>
            The candidate mask. The return value is a 9-bit <see cref="T:System.Int16"/>
            value, where each bit will be:
            <list type="table">
            <item>
            <term><c>0</c></term>
            <description>The cell <b>doesn't contain</b> the possibility of the digit.</description>
            </item>
            <item>
            <term><c>1</c></term>
            <description>The cell <b>contains</b> the possibility of the digit.</description>
            </item>
            </list>
            </para>
            <para>
            For example, if the result mask is 266 (i.e. <c>0b<b>1</b>00_00<b>1</b>_0<b>1</b>0</c> in binary),
            the value will indicate the cell contains the digit 2, 4 and 9.
            </para>
            </returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.GetPinnableReference">
            <summary>
            Returns a reference to the element of the <typeparamref name="T"/> at index zero.
            </summary>
            <returns>A reference to the element of the <typeparamref name="T"/> at index zero.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.ToMaskString">
            <summary>
            Get all masks and print them.
            </summary>
            <returns>The result.</returns>
            <remarks>
            Please note that the method cannot be called with a correct behavior using
            <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> to output. It seems that Visual Studio
            doesn't print correct values when indices of this grid aren't 0. In other words,
            when we call this method using <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/>, only <c>grid[0]</c>
            can be output correctly, and other values will be incorrect: they're always 0.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.GetStatus(System.Int32)">
            <summary>
            Get the cell status at the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Fix">
            <summary>
            To fix the current grid (all modifiable values will be changed to given ones).
            </summary>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Unfix">
            <summary>
            To unfix the current grid (all given values will be changed to modifiable ones).
            </summary>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <summary>
            Set the specified cell to the specified status.
            </summary>
            <param name="cell">The cell.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.SetMask(System.Int32,System.Int16)">
            <summary>
            Set the specified cell to the specified mask.
            </summary>
            <param name="cell">The cell.</param>
            <param name="mask">The mask to set.</param>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Equals(`0@,`0@)">
            <summary>
            To determine whether two sudoku grid is totally same.
            </summary>
            <param name="left">The left one.</param>
            <param name="right">The right one.</param>
            <returns>The <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            <para>Parses a string value and converts to this type.</para>
            <para>
            If you want to parse a PM grid, we recommend you use the method
            <see cref="M:Sudoku.Data.IGrid`1.Parse(System.String,Sudoku.Data.GridParsingOption)"/> instead of this method.
            </para>
            </summary>
            <param name="str">The string.</param>
            <returns>The result instance had converted.</returns>
            <seealso cref="M:Sudoku.Data.IGrid`1.Parse(System.String,Sudoku.Data.GridParsingOption)"/>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Parse(System.Char*)">
            <summary>
            Parses a pointer that points to a string value and converts to this type.
            </summary>
            <param name="ptrStr">The pointer that points to string.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Parse(System.String,System.Boolean)">
            <summary>
            <para>
            Parses a string value and converts to this type.
            </para>
            <para>
            If you want to parse a PM grid, you should decide the mode to parse.
            If you use compatible mode to parse, all single values will be treated as
            given values; otherwise, recommended mode, which uses '<c><![CDATA[<d>]]></c>'
            or '<c>*d*</c>' to represent a value be a given or modifiable one. The decision
            will be indicated and passed by the second parameter <paramref name="compatibleFirst"/>.
            </para>
            </summary>
            <param name="str">The string.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check PM grid.
            </param>
            <returns>The result instance had converted.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.Parse(System.String,Sudoku.Data.GridParsingOption)">
            <summary>
            Parses a string value and converts to this type, using a specified grid parsing type.
            </summary>
            <param name="str">The string.</param>
            <param name="gridParsingOption">The grid parsing type.</param>
            <returns>The result instance had converted.</returns>
        </member>
        <member name="M:Sudoku.Data.IGrid`1.TryParse(System.String,Sudoku.Data.GridParsingOption,`0@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="option">The grid parsing type.</param>
            <param name="result">
            The result parsed. If the conversion is failed,
            this argument will be <see cref="P:Sudoku.Data.IGrid`1.Undefined"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="P:Sudoku.Data.IGrid`1.Undefined"/>
        </member>
        <member name="T:Sudoku.Data.Link">
            <summary>
            Encapsulates a link used for drawing.
            </summary>
            <param name="StartCandidate">Indicates the start candidate.</param>
            <param name="EndCandidate">Indicates the end candidate.</param>
            <param name="LinkType">Indicates the link type.</param>
        </member>
        <member name="M:Sudoku.Data.Link.#ctor(System.Int32,System.Int32,Sudoku.Data.LinkType)">
            <summary>
            Encapsulates a link used for drawing.
            </summary>
            <param name="StartCandidate">Indicates the start candidate.</param>
            <param name="EndCandidate">Indicates the end candidate.</param>
            <param name="LinkType">Indicates the link type.</param>
        </member>
        <member name="P:Sudoku.Data.Link.StartCell">
            <summary>
            Indicates the start cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Link.StartDigit">
            <summary>
            Indicates the start digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Link.EndCell">
            <summary>
            Indicates the end cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Link.EndDigit">
            <summary>
            Indicates the end digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Link.EigenValue">
            <summary>
            Indicates the eigen value.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Link.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Data.Link.JsonConverter">
            <summary>
            Defines a JSON converter that allows the current instance being serialized.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Link.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Link.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Throws when the specified data is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.Link.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.Link,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Link.Equals(Sudoku.Data.Link@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Link.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Link.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@,Sudoku.Data.LinkType@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="T:Sudoku.Data.LinkType">
            <summary>
            Indicates a link type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Default">
            <summary>
            Indicates the default link (<c><![CDATA[off -> off]]></c> or <c><![CDATA[on -> on]]></c>).
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Weak">
            <summary>
            Indicates the weak link (<c><![CDATA[on -> off]]></c>).
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Strong">
            <summary>
            Indicates the strong link (<c><![CDATA[off -> on]]></c>).
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Line">
            <summary>
            Indicates the link is used for rendering as a normal line (without start and end node).
            </summary>
        </member>
        <member name="T:Sudoku.Data.LinkTypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:Sudoku.Data.LinkType"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.LinkType"/>
        </member>
        <member name="M:Sudoku.Data.LinkTypeExtensions.GetNotation(Sudoku.Data.LinkType)">
            <summary>
            Get the string notation of this current link type.
            </summary>
            <param name="this">The link type.</param>
            <returns>The notation.</returns>
        </member>
        <member name="T:Sudoku.Data.MaskMarshal">
            <summary>
            Provides extension methods on <see cref="T:System.Int16"/> value as a mask.
            </summary>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:Sudoku.Data.MaskMarshal.MaskToStatus(System.Int16)">
            <summary>
            To get the cell status through a mask.
            </summary>
            <param name="mask">The mask.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="T:Sudoku.Data.Node">
            <summary>
            Encapsulates a chain node.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified digit, cell and a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="isOn">A <see cref="T:System.Boolean"/> value indicating whether the node is on.</param>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Int32,System.Int32,System.Boolean,Sudoku.Data.Node@)">
            <summary>
            Initializes an instance with the specified digit, the cell, a <see cref="T:System.Boolean"/> value
            and the parent node.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="isOn">A <see cref="T:System.Boolean"/> value indicating whether the specified node is on.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="P:Sudoku.Data.Node.Cell">
            <summary>
            Indicates the cell used. In the default case, the AIC contains only one cell and the digit (which
            combine to a candidate).
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.AncestorsCount">
            <summary>
            Get the total number of the ancestors.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.IsOn">
            <summary>
            Indicates whether the specified node is on.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Root">
            <summary>
            Indicates the root.
            </summary>
            <remarks>
            This property can only find the first root.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Node.Parents">
            <summary>
            Get all parents of the current node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Chain">
            <summary>
            The chain nodes.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Candidate">
            <summary>
            Indicates the candidate.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.ClearParents">
            <summary>
            Clear all parent nodes.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.IsParentOf(Sudoku.Data.Node@)">
            <summary>
            Determine whether the node is the parent of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Node.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Node.Deconstruct(System.Int32@,System.Boolean@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.Deconstruct(System.Int32@,System.Boolean@,System.Collections.Generic.IList{Sudoku.Data.Node}@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(Sudoku.Data.Node@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_Equality(Sudoku.Data.Node@,Sudoku.Data.Node@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_Inequality(Sudoku.Data.Node@,Sudoku.Data.Node@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Data.Parsers.CellParser">
            <summary>
            Encapsulates the cell parser that converts the string to an <see cref="T:System.Int32"/> value that
            represents a cell offset.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Parsers.CellParser.TryParse(System.String,System.Byte@)">
            <summary>
            Try to parse the string, and converts the instance to a cell instance represented
            by a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="str">The string.</param>
            <param name="cell">The cell.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Parsers.CellParser.TryParse(System.String,Sudoku.Data.Cells@)">
            <summary>
            Try to parse the string, and converts the instance to cells instance represented
            by <see cref="T:System.Byte"/> values.
            </summary>
            <param name="str">The string.</param>
            <param name="cells">The cells.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Parsers.CellParser.TryParse(System.String,Sudoku.Data.Cells@,System.Char[])">
            <summary>
            Try to parse the string, and converts the instance to cells instance represented
            by <see cref="T:System.Byte"/> values, with the specified separators.
            </summary>
            <param name="str">The string.</param>
            <param name="cells">The cell.</param>
            <param name="separators">All separators.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Data.RegionCalculator">
            <summary>
            Provides extension methods on conversions between a cell and a region.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionCalculator.BlockTable">
            <summary>
            The block table.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionCalculator.RowTable">
            <summary>
            The row table.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionCalculator.ColumnTable">
            <summary>
            The column table.
            </summary>
        </member>
        <member name="M:Sudoku.Data.RegionCalculator.ToRegion(System.Int32,Sudoku.Data.RegionLabel)">
            <summary>
            Get the region index for the specified cell and the region type.
            </summary>
            <param name="this">The cell.</param>
            <param name="label">The label to represent a region type.</param>
            <returns>The region index.</returns>
        </member>
        <member name="T:Sudoku.Data.RegionLabel">
            <summary>
            Indicates the region label.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionLabel.Block">
            <summary>
            Indicates the block.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionLabel.Row">
            <summary>
            Indicates the row.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionLabel.Column">
            <summary>
            Indicates the column.
            </summary>
        </member>
        <member name="T:Sudoku.Data.RegionLabelConverter">
            <summary>
            Encapsulates the converter methods of conversions between <see cref="T:System.Int32"/>
            and <see cref="T:Sudoku.Data.RegionLabel"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.RegionLabel"/>
        </member>
        <member name="M:Sudoku.Data.RegionLabelConverter.ToLabel(System.Int32)">
            <summary>
            Get the label in the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The region label.</returns>
        </member>
        <member name="T:Sudoku.Data.Resources.ResourceDocument">
            <summary>
            Defines a resource document. The resource document always holds a JSON string value,
            and only contains key-value pairs of type <see cref="T:System.String"/>. For example:
            <code>
            {
              "prop1": "value1",
              "prop2": "value2",
              "prop3": "value3"
            }
            </code>
            In this case, we can use the indexer <see cref="P:Sudoku.Data.Resources.ResourceDocument.Item(System.String)"/> to fetch the value via the key,
            for example, <c>document["prop1"]</c> you'll get the value <c>"value1"</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Resources.ResourceDocument.DefaultDocumentOptions">
            <summary>
            Indicates the default JSON document options.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Resources.ResourceDocument.DefaultSerializerOptions">
            <summary>
            Indicates the default serializer options used for serialization and deserialization operations.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Resources.ResourceDocument._root">
            <summary>
            Indicates the root JSON element.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Resources.ResourceDocument._parentDoc">
            <summary>
            Indicates the corresponding JSON document.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Resources.ResourceDocument._culture">
            <summary>
            Indicates the culture used.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.#ctor(System.Globalization.CultureInfo,System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.Resources.ResourceDocument"/> instance via the specified JSON string.
            </summary>
            <param name="culture">Indicates the culture specified.</param>
            <param name="json">The JSON string.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the specified string isn't a JSON or can't be converted to a regular JSON string.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">Throws when the specified string isn't valid JSON code.</exception>
        </member>
        <member name="P:Sudoku.Data.Resources.ResourceDocument.Count">
            <summary>
            Indicates the number of elements in the whole document.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Resources.ResourceDocument.BasicHash">
            <summary>
            Indicates the basic hash that uses the property <see cref="P:System.Globalization.CultureInfo.LCID"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Resources.ResourceDocument.StringHash">
            <summary>
            Indicates the hash that corresponds to the string value.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Resources.ResourceDocument.Item(System.String)">
            <summary>
            Try to fetch the property value via the specified property name.
            </summary>
            <param name="propertyName">The property name to find.</param>
            <returns>The value that correspoding to the property.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Throws when no such property found.</exception>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.ToString(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the current instance to <see cref="T:System.String"/> representation in JSON format,
            via the specified <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance as your customized options.
            </summary>
            <param name="options">The customized options being used in this method.</param>
            <returns>The <see cref="T:System.String"/> JSON representation.</returns>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.TryParse(System.String,Sudoku.Data.Resources.ResourceDocument@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.TryParse(System.String,System.Globalization.CultureInfo,Sudoku.Data.Resources.ResourceDocument@)">
            <summary>
            Try to parse the specified string text and get the same-meaning instance
            of type <see cref="T:Sudoku.Data.Resources.ResourceDocument"/>, with the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="str">The string to parse. The value shouldn't <see langword="null"/>.</param>
            <param name="culture">The culture specified.</param>
            <param name="result">
            The result parsed. If failed to parse, the value will keep the <see langword="default"/> value,
            i.e. <see langword="default"/>(<see cref="T:Sudoku.Data.Resources.ResourceDocument"/>).
            </param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether the operation is successful to execute.</returns>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parse the specified string text, and get the same-meaning instance of type <see cref="T:Sudoku.Data.Resources.ResourceDocument"/>.
            </summary>
            <param name="str">The string to parsed. The value shouldn't be <see langword="null"/>.</param>
            <param name="culture">The culture specified.</param>
            <returns>The result parsed.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the specified string isn't a JSON or can't be converted to a regular JSON string.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">Throws when the specified string isn't valid JSON code.</exception>
        </member>
        <member name="T:Sudoku.Data.Resources.ResourceDocument.Enumerator">
            <summary>
            Indicates the enumerator of the current instance to iterate.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Resources.ResourceDocument.Enumerator._enumerator">
            <summary>
            Indicates the enumerator instance.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Enumerator.#ctor(System.Text.Json.JsonElement)">
            <summary>
            Initializes an <see cref="T:Sudoku.Data.Resources.ResourceDocument.Enumerator"/> instance via the first element.
            </summary>
            <param name="root">The root <see cref="T:System.Text.Json.JsonElement"/> instance to iterate.</param>
        </member>
        <member name="P:Sudoku.Data.Resources.ResourceDocument.Enumerator.Current">
            <summary>
            Gets the key-value pair in the resource dictionary at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Enumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Enumerator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Enumerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Enumerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.Equals(Sudoku.Data.Resources.ResourceDocument)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.op_Equality(Sudoku.Data.Resources.ResourceDocument,Sudoku.Data.Resources.ResourceDocument)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.op_Inequality(Sudoku.Data.Resources.ResourceDocument,Sudoku.Data.Resources.ResourceDocument)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sudoku.Data.Resources.ResourceDocument.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Data.Stepping.AntiEliminationStep">
            <summary>
            Encapsulates an anti-elimination step.
            </summary>
            <param name="Digit">The digit.</param>
            <param name="Cell">The cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Encapsulates an anti-elimination step.
            </summary>
            <param name="Digit">The digit.</param>
            <param name="Cell">The cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.AssignmentStep">
            <summary>
            Encapsulates an assignment step.
            </summary>
            <param name="Cell">The current cell to fill with a digit.</param>
            <param name="Digit">The current digit to assign.</param>
            <param name="Snapshot">The grid snapshot.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.#ctor(System.Int32,System.Int32,Sudoku.Data.SudokuGrid@)">
            <summary>
            Encapsulates an assignment step.
            </summary>
            <param name="Cell">The current cell to fill with a digit.</param>
            <param name="Digit">The current digit to assign.</param>
            <param name="Snapshot">The grid snapshot.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.EliminationStep">
            <summary>
            Encapsulates an elimination step.
            </summary>
            <param name="Digit">Indicates the digit.</param>
            <param name="Cell">Indicates the cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Encapsulates an elimination step.
            </summary>
            <param name="Digit">Indicates the digit.</param>
            <param name="Cell">Indicates the cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.FixStep">
            <summary>
            Encapsulates a fix step.
            </summary>
            <param name="AllCells">Indicates all cells to fix.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.#ctor(Sudoku.Data.Cells@)">
            <summary>
            Encapsulates a fix step.
            </summary>
            <param name="AllCells">Indicates all cells to fix.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.IStep">
            <summary>
            Provides a step used for applying to a sudoku grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Apply the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.IStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Undo the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Data.Stepping.IUndoable">
            <summary>
            Provides a undo-able data structure.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Undo">
            <summary>
            To undo the step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Redo">
            <summary>
            To redo the step.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Stepping.ResetStep">
            <summary>
            Encapsulates a reset step.
            </summary>
            <param name="OldMasks">Indicates the table of new grid masks.</param>
            <param name="NewMasks">Indicates the table of old grid masks.</param>
            <remarks>
            Note that <see langword="record"/>s doesn't support pointers at present. Therefore,
            I use <see cref="T:System.IntPtr"/> instead.
            </remarks>
            <seealso cref="T:System.IntPtr"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Encapsulates a reset step.
            </summary>
            <param name="OldMasks">Indicates the table of new grid masks.</param>
            <param name="NewMasks">Indicates the table of old grid masks.</param>
            <remarks>
            Note that <see langword="record"/>s doesn't support pointers at present. Therefore,
            I use <see cref="T:System.IntPtr"/> instead.
            </remarks>
            <seealso cref="T:System.IntPtr"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetMaskStep">
            <summary>
            Encapsulates a step of setting mask.
            </summary>
            <param name="Cell">Indicates the cell.</param>
            <param name="OldMask">Indicates the old mask.</param>
            <param name="NewMask">Indicates the new mask.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.#ctor(System.Int32,System.Int16,System.Int16)">
            <summary>
            Encapsulates a step of setting mask.
            </summary>
            <param name="Cell">Indicates the cell.</param>
            <param name="OldMask">Indicates the old mask.</param>
            <param name="NewMask">Indicates the new mask.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetStatusStep">
            <summary>
            Encapsulates a step for setting a cell status.
            </summary>
            <param name="Cell">The cell.</param>
            <param name="OldStatus">The old status.</param>
            <param name="NewStatus">The new status.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.#ctor(System.Int32,Sudoku.Data.CellStatus,Sudoku.Data.CellStatus)">
            <summary>
            Encapsulates a step for setting a cell status.
            </summary>
            <param name="Cell">The cell.</param>
            <param name="OldStatus">The old status.</param>
            <param name="NewStatus">The new status.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.UndoableGrid">
            <summary>
            Provides an undoable sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._undoStack">
            <summary>
            The undo and redo stack.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._redoStack">
            <summary>
            The undo and redo stack.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._innerGrid">
            <summary>
            The inner sudoku grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(System.Int16[])">
            <summary>
            Initializes an instance with the specified mask array.
            </summary>
            <param name="masks">The mask array.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes an instance with the specified sudoku grid (value type).
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasUndoSteps">
            <summary>
            Indicates whether the grid has any undo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasRedoSteps">
            <summary>
            Indicates whether the grid has any redo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.IsSolved">
            <summary>
            Indicates whether the grid has been already solved.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.GivensCount">
            <summary>
            Indicates the number of given cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.InnerGrid">
            <summary>
            Indicates the inner grid.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32)">
            <summary>
            Get the result digit of a specified cell, or set the specified digit to a cell.
            </summary>
            <param name="cell">The cell.</param>
            <value>The digit you want to set.</value>
            <returns>The result digit.</returns>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32,System.Int32)">
            <summary>
            Get whether the specified candidate is currently set, or set the status to a candidate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <value>
            The <see cref="T:System.Boolean"/> status you want to set. If <see langword="false"/>, the candidate
            should be deleted.
            </value>
            <returns>The <see cref="T:System.Boolean"/> result indicating whether the candidate is set.</returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Fix">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.Fix"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Unfix">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.Unfix"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Reset">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.Reset"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.RecomputeCandidates">
            <inheritdoc cref="F:Sudoku.Data.SudokuGrid.RefreshingCandidates"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetStatus(System.Int32)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.GetStatus(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.SetStatus(System.Int32,Sudoku.Data.CellStatus)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetMask(System.Int32)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.GetMask(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetCandidates(System.Int32)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.GetCandidates(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetPinnableReference">
            <summary>
            Returns a reference to the element of the <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> at index zero.
            </summary>
            <returns>A reference to the element of the <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> at index zero.</returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetPinnableReference(Sudoku.Data.SudokuGrid.PinnedItem)">
            <summary>
            Returns a reference to the element of the <see cref="T:Sudoku.Data.SudokuGrid"/> at index zero.
            </summary>
            <param name="pinnedItem">The item you want to fix. If </param>
            <returns>A reference to the element of the <see cref="T:Sudoku.Data.SudokuGrid"/> at index zero.</returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetMask(System.Int32,System.Int16)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.SetMask(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Redo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the redo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Undo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the undo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ClearStack">
            <summary>
            To clear step stacks.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(Sudoku.Data.SudokuGrid@)">
            <inheritdoc cref="M:System.IValueEquatable`1.Equals(`0@)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the specified format string.
            </summary>
            <param name="format">The format. If available, the parameter can be <see langword="null"/>.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Determines whether two <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/>s hold a same sudoku grid as inner.
            </summary>
            <param name="left">The first sudoku grid to compare.</param>
            <param name="right">The second sudoku grid to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result. <see langword="true"/> is for same value; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.SudokuGrid@,Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Determines whether a <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> and a <see cref="T:Sudoku.Data.SudokuGrid"/>
            hold a same sudoku grid as inner.
            </summary>
            <param name="left">The first sudoku grid to compare.</param>
            <param name="right">The second sudoku grid to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result. <see langword="true"/> is for same value; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.SudokuGrid@)">
            <summary>
            Determines whether a <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> and a <see cref="T:Sudoku.Data.SudokuGrid"/>
            hold a same sudoku grid as inner.
            </summary>
            <param name="left">The first sudoku grid to compare.</param>
            <param name="right">The second sudoku grid to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result. <see langword="true"/> is for same value; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Determines whether two <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/>s don't hold the totally same sudoku grid as inner.
            </summary>
            <param name="left">The first sudoku grid to compare.</param>
            <param name="right">The second sudoku grid to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result. <see langword="false"/> is for same value; otherwise,
            <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.SudokuGrid@,Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Determines whether a <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> and a <see cref="T:Sudoku.Data.SudokuGrid"/>
            don't hold the totally same sudoku grid as inner.
            </summary>
            <param name="left">The first sudoku grid to compare.</param>
            <param name="right">The second sudoku grid to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result. <see langword="false"/> is for same value; otherwise,
            <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.SudokuGrid@)">
            <summary>
            Determines whether a <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> and a <see cref="T:Sudoku.Data.SudokuGrid"/>
            don't hold the totally same sudoku grid as inner.
            </summary>
            <param name="left">The first sudoku grid to compare.</param>
            <param name="right">The second sudoku grid to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result. <see langword="false"/> is for same value; otherwise,
            <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Explicit(Sudoku.Data.Stepping.UndoableGrid)~Sudoku.Data.SudokuGrid">
            <summary>
            Explicit cast from <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> to <see cref="T:Sudoku.Data.SudokuGrid"/>.
            </summary>
            <param name="grid">The grid.</param>
            <remarks>The cast won't use neither box nor unbox operations.</remarks>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Implicit(Sudoku.Data.SudokuGrid@)~Sudoku.Data.Stepping.UndoableGrid">
            <summary>
            Implicit cast from <see cref="T:Sudoku.Data.SudokuGrid"/> to <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/>.
            </summary>
            <param name="grid">The grid.</param>
            <remarks>The cast won't use neither box nor unbox operations.</remarks>
        </member>
        <member name="T:Sudoku.Data.Stepping.UnfixStep">
            <summary>
            Encapsulates an unfix step.
            </summary>
            <param name="AllCells">Indicates all cells.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.#ctor(Sudoku.Data.Cells@)">
            <summary>
            Encapsulates an unfix step.
            </summary>
            <param name="AllCells">Indicates all cells.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid">
            <summary>
            Encapsulates a sudoku grid using value type instead of reference type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.DefaultMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.DefaultMask"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.MaxCandidatesMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.MaxCandidatesMask"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.EmptyMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.EmptyMask"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.ModifiableMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.ModifiableMask"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.GivenMask">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.GivenMask"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Base64List">
            <summary>
            The list of 64-based characters.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.RegionCellsCount">
            <summary>
            Indicates the size of each region.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Length">
            <summary>
            Indicates the size of each grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Base64Length">
            <summary>
            Indicates the length of the string <see cref="F:Sudoku.Data.SudokuGrid.Base64List"/>.
            </summary>
            <seealso cref="F:Sudoku.Data.SudokuGrid.Base64List"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.EmptyString">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.EmptyString"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.ValueChanged">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.ValueChanged"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.RefreshingCandidates">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.RefreshingCandidates"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Undefined">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.Undefined"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Empty">
            <inheritdoc cref="P:Sudoku.Data.IGrid`1.Empty"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Lookup">
            <summary>
            The lookup table.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid._values">
            <summary>
            Indicates the inner array that stores the masks of the sudoku grid, where:
            <list type="table">
            <item>
            <term><c>_values</c></term>
            <description>Stores the in-time sudoku grid inner information.</description>
            </item>
            <item>
            <term><c>_initialValues</c></term>
            <description>Stores the initial information of a sudoku grid.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid._initialValues">
            <summary>
            Indicates the inner array that stores the masks of the sudoku grid, where:
            <list type="table">
            <item>
            <term><c>_values</c></term>
            <description>Stores the in-time sudoku grid inner information.</description>
            </item>
            <item>
            <term><c>_initialValues</c></term>
            <description>Stores the initial information of a sudoku grid.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.#ctor(System.Int32[])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.#ctor(System.Int32[],Sudoku.Data.GridCreatingOption)">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <param name="creatingOption">The grid creating option.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.#ctor(System.String)">
            <summary>
            Try to parse a token, and converts the token to the sudoku grid instance.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.#ctor(System.Int16[])">
            <summary>
            Initializes an instance with the specified mask array.
            </summary>
            <param name="masks">The masks.</param>
            <exception cref="T:System.ArgumentException">Throws when <see cref="P:System.Array.Length"/> is not 81.</exception>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.IsSolved">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.IsUndefined">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.IsDebuggerUndefined">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.CandidatesCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GivensCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ModifiablesCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.EmptiesCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Token">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.EigenString">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.EmptyCells">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.BivalueCells">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.CandidateMap">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.DigitsMap">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ValuesMap">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Triplet">
            <summary>
            The triplet of three main information.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#CandidatesMap">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#DefaultMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#MaxCandidatesMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#EmptyMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#ModifiableMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#GivenMask">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#EmptyString">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#ValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#RefreshingCandidates">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#Undefined">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Sudoku#Data#IGrid{Sudoku#Data#SudokuGrid}#Empty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.SimplyValidate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Exists(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Exists(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetMask(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetCandidates(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetPinnableReference">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetPinnableReference(Sudoku.Data.SudokuGrid.PinnedItem)">
            <summary>
            Returns a reference to the element of the <see cref="T:Sudoku.Data.SudokuGrid"/> at index zero.
            </summary>
            <param name="pinnedItem">
            The item you want to fix. If the value is
            <list type="table">
            <item>
            <term><see cref="F:Sudoku.Data.SudokuGrid.PinnedItem.CurrentGrid"/></term>
            <description>The current grid mask list of pointer value will be returned.</description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Data.SudokuGrid.PinnedItem.InitialGrid"/></term>
            <description>The initial grid mask list of pointer value will be returned.</description>
            </item>
            <item>
            <term>Otherwise</term>
            <description>The reference of <see langword="null"/>.</description>
            </item>
            </list>
            </param>
            <returns>A reference to the element of the <see cref="T:Sudoku.Data.SudokuGrid"/> at index zero.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToMaskString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetStatus(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Fix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Unfix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Reset">
            <summary>
            To reset the grid to initial status.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.SetMask(System.Int32,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.UpdateInitialMasks">
            <summary>
            To update initial masks.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetMap()">
            <summary>
            Called by properties <see cref="P:Sudoku.Data.SudokuGrid.CandidateMap"/>, <see cref="P:Sudoku.Data.SudokuGrid.DigitsMap"/>
            and <see cref="P:Sudoku.Data.SudokuGrid.ValuesMap"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The map of digits.</returns>
            <seealso cref="P:Sudoku.Data.SudokuGrid.CandidateMap"/>
            <seealso cref="P:Sudoku.Data.SudokuGrid.DigitsMap"/>
            <seealso cref="P:Sudoku.Data.SudokuGrid.ValuesMap"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetCells()">
            <summary>
            Called by properties <see cref="P:Sudoku.Data.SudokuGrid.EmptyCells"/> and <see cref="P:Sudoku.Data.SudokuGrid.BivalueCells"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The cells.</returns>
            <seealso cref="P:Sudoku.Data.SudokuGrid.EmptyCells"/>
            <seealso cref="P:Sudoku.Data.SudokuGrid.BivalueCells"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Equals(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.Char*)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.String,Sudoku.Data.GridParsingOption)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.TryParse(System.String,Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.TryParse(System.String,System.IFormatProvider,Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.TryParse(System.String,Sudoku.Data.GridParsingOption,Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.op_Division(Sudoku.Data.SudokuGrid@,System.Int32)">
            <summary>
            Returns the segment via the specified region and the sudoku grid to filter.
            </summary>
            <param name="grid">The grid.</param>
            <param name="region">The region.</param>
            <returns>The segment.</returns>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.Enumerator">
            <summary>
            The inner enumerator.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Enumerator._start">
            <summary>
            The pointer to the start value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Enumerator._currentPointer">
            <summary>
            The current pointer.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Enumerator._currentMask">
            <summary>
            Indicates the current mask.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Enumerator._currentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.#ctor(System.Int16*)">
            <summary>
            Initializes an instance with the specified pointer to an array to iterate.
            </summary>
            <param name="arr">The pointer to an array.</param>
            <remarks>
            Note here we should point at the one-unit-lengthed memory before the array start.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.Formatter">
            <summary>
            Provides operations for grid formatting.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with a <see cref="T:System.Boolean"/> value
            indicating multi-line.
            </summary>
            <param name="multiline">
            The multi-line identifier. If the value is <see langword="true"/>, the output will
            be multi-line.
            </param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.#ctor(System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize an instance with the specified information.
            </summary>
            <param name="placeholder">The placeholder.</param>
            <param name="multiline">Indicates whether the formatter will use multiple lines mode.</param>
            <param name="withModifiables">Indicates whether the formatter will output modifiables.</param>
            <param name="withCandidates">
            Indicates whether the formatter will output candidates list.
            </param>
            <param name="treatValueAsGiven">
            Indicates whether the formatter will treat values as givens always.
            </param>
            <param name="subtleGridLines">
            Indicates whether the formatter will process outline corner of the multiline grid.
            </param>
            <param name="hodokuCompatible">
            Indicates whether the formatter will use hodoku library mode to output.
            </param>
            <param name="sukaku">Indicates whether the formatter will output as sukaku.</param>
            <param name="excel">Indicates whether the formatter will output as excel.</param>
            <param name="openSudoku">
            Indicates whether the formatter will output as open sudoku format.
            </param>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.Placeholder">
            <summary>
            The place holder.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.Multiline">
            <summary>
            Indicates whether the output should be multi-line.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.WithModifiables">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in '<c>:candidate list</c>'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c><![CDATA[<digit>]]></c>' instead
            of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.Sukaku">
            <summary>
            Indicates the output will be sukaku format (all single-valued digit will
            be all treated as candidates).
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.Excel">
            <summary>
            Indicates the output will be Excel format.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Formatter.OpenSudoku">
            <summary>
            Indicates whether the current output mode is aiming to open sudoku format.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToString(Sudoku.Data.SudokuGrid@)">
            <summary>
            Represents a string value indicating this instance.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToString(Sudoku.Data.SudokuGrid@,System.String)">
            <summary>
            Represents a string value indicating this instance, with the specified format string.
            </summary>
            <param name="grid">The grid.</param>
            <param name="format">The string format.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.Create(Sudoku.Data.GridFormattingOptions)">
            <summary>
            Create a <see cref="T:Sudoku.Data.SudokuGrid.Formatter"/> according to the specified grid output options.
            </summary>
            <param name="gridOutputOption">The grid output options.</param>
            <returns>The grid formatter.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.Create(System.String)">
            <summary>
            Create a <see cref="T:Sudoku.Data.SudokuGrid.Formatter"/> according to the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The grid formatter.</returns>
            <exception cref="T:System.FormatException">Throws when the format string is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToExcelString(Sudoku.Data.SudokuGrid@)">
            <summary>
            To Excel format string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToOpenSudokuString(Sudoku.Data.SudokuGrid@)">
            <summary>
            To open sudoku format string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
            <exception cref="T:Sudoku.InvalidPuzzleException">Throws when the specified grid is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToHodokuLibraryFormatString(Sudoku.Data.SudokuGrid@)">
            <summary>
            To string with Hodoku library format compatible string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToSukakuString(Sudoku.Data.SudokuGrid@)">
            <summary>
            To string with the sukaku format.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the puzzle is an invalid sukaku puzzle (at least one cell is given or modifiable).
            </exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToSingleLineStringCore(Sudoku.Data.SudokuGrid@)">
            <summary>
            To single line string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToMultiLineStringCore(Sudoku.Data.SudokuGrid@)">
            <summary>
            To multi-line string with candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToMultiLineSimpleGridCore(Sudoku.Data.SudokuGrid@)">
            <summary>
            To multi-line normal grid string without any candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Formatter.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.JsonConverter">
            <summary>
            Indicates a <see cref="T:Sudoku.Data.SudokuGrid"/> JSON converter.
            </summary>
            <seealso cref="T:Sudoku.Data.SudokuGrid"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.JsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.SudokuGrid,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.Parser">
            <summary>
            Encapsulates a grid parser.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Parser.ParseFunctions">
            <summary>
            The list of all methods to parse.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.#ctor(System.String)">
            <summary>
            Initializes an instance with parsing data.
            </summary>
            <param name="parsingValue">The string to parse.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance with parsing data and a bool value
            indicating whether the parsing operation should use compatible mode.
            </summary>
            <param name="parsingValue">The string to parse.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check
            PM grid. See <see cref="P:Sudoku.Data.SudokuGrid.Parser.CompatibleFirst"/> to learn more.
            </param>
            <seealso cref="P:Sudoku.Data.SudokuGrid.Parser.CompatibleFirst"/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Parser.ParsingValue">
            <summary>
            The string value to parse.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Parser.CompatibleFirst">
            <summary>
            Indicates whether the parser will change the execution order of PM grid.
            If the value is <see langword="true"/>, the parser will check compatible one
            first, and then check recommended parsing plan ('<c><![CDATA[<d>]]></c>' and '<c>*d*</c>').
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.Parse">
            <summary>
            To parse the value.
            </summary>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.Parse(Sudoku.Data.GridParsingOption)">
            <summary>
            To parse the value with a specified grid parsing type.
            </summary>
            <param name="gridParsingOption">A specified parsing type.</param>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.OnParsingSimpleMultilineGrid(Sudoku.Data.SudokuGrid.Parser@)">
            <summary>
            Parse the value using multi-line simple grid (without any candidates).
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.OnParsingExcel(Sudoku.Data.SudokuGrid.Parser@)">
            <summary>
            Parse the Excel format.
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.OnParsingOpenSudoku(Sudoku.Data.SudokuGrid.Parser@)">
            <summary>
            Parse the open sudoku format grid.
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.OnParsingPencilMarked(Sudoku.Data.SudokuGrid.Parser@)">
            <summary>
            Parse the PM grid.
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.OnParsingSimpleTable(Sudoku.Data.SudokuGrid.Parser@)">
            <summary>
            Parse the simple table format string (Sudoku explainer format).
            </summary>
            <param name="parser">The parser.</param>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.OnParsingSusser(Sudoku.Data.SudokuGrid.Parser@)">
            <summary>
            Parse the susser format string.
            </summary>
            <param name="parser">The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.OnParsingSukaku(Sudoku.Data.SudokuGrid.Parser@,System.Boolean)">
            <summary>
            Parse the sukaku format string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="compatibleFirst">
            Indicates whether the algorithm uses compatibility mode to check and parse sudoku grid.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parser.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.PinnedItem">
            <summary>
            Indicates the item that <see cref="M:Sudoku.Data.SudokuGrid.GetPinnableReference"/> selects and returns the reference.
            </summary>
            <remarks>
            <para>
            This enumeration type is called to select what the inner field we want to fix. For example,
            if called <see cref="M:Sudoku.Data.SudokuGrid.GetPinnableReference"/> (parameterless method), the default value is
            <see cref="F:Sudoku.Data.SudokuGrid.PinnedItem.CurrentGrid"/>, and we'll get the table that contains all current statuses of the
            current grid using a <see cref="T:System.Int16"/>*. The code should be:
            <code><![CDATA[
            fixed (short* s = grid)
            {
                // Do something...
            }
            ]]></code>
            The code is equivalent to
            <code><![CDATA[
            fixed (short* s = &grid.GetPinnableReference())
            {
                // Do something...
            }
            ]]></code>
            </para>
            <para>
            If you want to get the item <see cref="F:Sudoku.Data.SudokuGrid.PinnedItem.InitialGrid"/>, you should call the method
            <see cref="M:Sudoku.Data.SudokuGrid.GetPinnableReference(Sudoku.Data.SudokuGrid.PinnedItem)"/>.
            </para>
            </remarks>
            <see cref="M:Sudoku.Data.SudokuGrid.GetPinnableReference"/>
            <see cref="M:Sudoku.Data.SudokuGrid.GetPinnableReference(Sudoku.Data.SudokuGrid.PinnedItem)"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.PinnedItem.CurrentGrid">
            <summary>
            Indicates the current grid should be pinned.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.PinnedItem.InitialGrid">
            <summary>
            Indicates the initial grid should be pinned.
            </summary>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.ValueChangedArgs">
            <summary>
            Provides arguments for the event <see cref="F:Sudoku.Data.SudokuGrid.ValueChanged"/>.
            </summary>
            <param name="Cell">The cell offset. Must be in range 0 to 80.</param>
            <param name="OldMask">The old mask before modified.</param>
            <param name="NewMask">The mask to modify the cell.</param>
            <param name="SetValue">The value. -1 when this value is not required.</param>
            <seealso cref="F:Sudoku.Data.SudokuGrid.ValueChanged"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ValueChangedArgs.#ctor(System.Int32,System.Int16,System.Int16,System.Int32)">
            <summary>
            Provides arguments for the event <see cref="F:Sudoku.Data.SudokuGrid.ValueChanged"/>.
            </summary>
            <param name="Cell">The cell offset. Must be in range 0 to 80.</param>
            <param name="OldMask">The old mask before modified.</param>
            <param name="NewMask">The mask to modify the cell.</param>
            <param name="SetValue">The value. -1 when this value is not required.</param>
            <seealso cref="F:Sudoku.Data.SudokuGrid.ValueChanged"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Deconstruct(Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells[]@,Sudoku.Data.Cells[]@,Sudoku.Data.Cells[]@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Equals(Sudoku.Data.SudokuGrid@)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)" />
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.op_Equality(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)">
            <summary>
            Determine whether two instances hold a same value.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.op_Inequality(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)">
            <summary>
            Determine whether two instances don't hold a same value.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Data.SudokuGridExtensions">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Data.SudokuGrid"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.SudokuGrid"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGridExtensions.Duplicate(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            Check whether the digit will be duplicate of its peers when it is filled in the specified cell.
            </summary>
            <param name="this">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Data.SudokuGridSegment">
            <summary>
            Defines a segment that stores a part of a sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment._maskList">
            <summary>
            Indicates the mask list and the candidates list.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment._candidatesList">
            <summary>
            Indicates the mask list and the candidates list.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.#ctor(Sudoku.Data.SudokuGrid@,System.Int32)">
            <summary>
            Initializes a <see cref="T:Sudoku.Data.SudokuGridSegment"/> with the specified region,
            and what sudoku grid filters.
            </summary>
            <param name="grid">The sudoku grid.</param>
            <param name="region">The region to project.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Throws when the argument <paramref name="region"/> isn't between 0 and 26.
            </exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.#ctor(Sudoku.Data.SudokuGrid@,Sudoku.Data.RegionLabel,System.Int32)">
            <summary>
            Initialzes a <see cref="T:Sudoku.Data.SudokuGridSegment"/> with the specified region label,
            the index and a sudoku grid that filters.
            </summary>
            <param name="grid">The sudoku grid.</param>
            <param name="regionLabel">The region label.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Sudoku.Data.SudokuGridSegment.Masks">
            <summary>
            Indicates the inner masks.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGridSegment.Candidates">
            <summary>
            Indicates the candicates calculated.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGridSegment.RegionIndex">
            <summary>
            Indicates the region index.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGridSegment.Cells">
            <summary>
            Indicates the cells covered.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGridSegment.Undefined">
            <summary>
            Indicates the empty segment value that holds the undefined value.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.GetPinnableReference">
            <summary>
            Returns a reference to the element of the <see cref="T:Sudoku.Data.SudokuGridSegment"/> at index zero.
            </summary>
            <returns>A reference to the element of the <see cref="T:Sudoku.Data.SudokuGridSegment"/> at index zero.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.GetPinnableReference(Sudoku.Data.SudokuGridSegment.PinnedItem)">
            <summary>
            Returns a reference to the element of the <see cref="T:Sudoku.Data.SudokuGridSegment"/> at index zero.
            </summary>
            <param name="pinnedItem">
            The item you want to fix. If the value is
            <list type="table">
            <item>
            <term><see cref="F:Sudoku.Data.SudokuGridSegment.PinnedItem.Masks"/></term>
            <description>The original mask list of pointer value will be returned.</description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Data.SudokuGridSegment.PinnedItem.CandidateMasks"/></term>
            <description>The candidate mask list of pointer value will be returned.</description>
            </item>
            </list>
            </param>
            <returns>A reference to the element of the <see cref="T:Sudoku.Data.SudokuGridSegment"/> at index zero.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.ToArray">
            <summary>
            Converts the collection into an array of type <see cref="T:System.Int16"/>.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Equals(Sudoku.Data.SudokuGridSegment@,Sudoku.Data.SudokuGridSegment@)">
            <summary>
            Determine whether two <see cref="T:Sudoku.Data.SudokuGridSegment"/>s are equal.
            </summary>
            <param name="left">The left instance to check.</param>
            <param name="right">The right instance to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Data.SudokuGridSegment.Enumerator">
            <summary>
            The inner enumerator.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment.Enumerator._start">
            <summary>
            The pointer to the start value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment.Enumerator._currentPointer">
            <summary>
            The current pointer.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment.Enumerator._currentMask">
            <summary>
            Indicates the current mask.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment.Enumerator._currentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Enumerator.#ctor(System.Int16*)">
            <summary>
            Initializes an instance with the specified pointer to an array to iterate.
            </summary>
            <param name="arr">The pointer to an array.</param>
            <remarks>
            Note here we should point at the one-unit-lengthed memory before the array start.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.SudokuGridSegment.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Enumerator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Enumerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Enumerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.SudokuGridSegment.PinnedItem">
            <summary>
            Indicates the item that <see cref="M:Sudoku.Data.SudokuGridSegment.GetPinnableReference"/> selects and returns the reference.
            </summary>
            <remarks>
            <para>
            This enumeration type is called to select what the inner field we want to fix. For example,
            if called <see cref="M:Sudoku.Data.SudokuGridSegment.GetPinnableReference"/> (parameterless method), the default value is
            <see cref="F:Sudoku.Data.SudokuGridSegment.PinnedItem.Masks"/>, and we'll get the table that contains all current statuses of the
            curect collection using a <see cref="T:System.Int16"/>*. The code should be:
            <code><![CDATA[
            fixed (short* s = segment)
            {
                // Do something...
            }
            ]]></code>
            The code is equivalent to
            <code><![CDATA[
            fixed (short* s = &segment.GetPinnableReference())
            {
                // Do something...
            }
            ]]></code>
            </para>
            <para>
            If you want to get the item <see cref="F:Sudoku.Data.SudokuGridSegment.PinnedItem.CandidateMasks"/>, you should call the method
            <see cref="M:Sudoku.Data.SudokuGridSegment.GetPinnableReference(Sudoku.Data.SudokuGridSegment.PinnedItem)"/>.
            </para>
            </remarks>
            <see cref="M:Sudoku.Data.SudokuGridSegment.GetPinnableReference"/>
            <see cref="M:Sudoku.Data.SudokuGridSegment.GetPinnableReference(Sudoku.Data.SudokuGridSegment.PinnedItem)"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment.PinnedItem.Masks">
            <summary>
            Indicates the pinned item is <c>_maskList</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridSegment.PinnedItem.CandidateMasks">
            <summary>
            Indicates the pinned item is <c>_candidateList</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Equals(Sudoku.Data.SudokuGridSegment@)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)" />
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.op_Equality(Sudoku.Data.SudokuGridSegment@,Sudoku.Data.SudokuGridSegment@)">
            <summary>
            Determine whether two instances hold a same value.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.op_Inequality(Sudoku.Data.SudokuGridSegment@,Sudoku.Data.SudokuGridSegment@)">
            <summary>
            Determine whether two instances don't hold a same value.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGridSegment.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Data.SudokuGridTransformations">
            <summary>
            Provides methods for <see cref="T:Sudoku.Data.SudokuGrid"/> instances on transformations.
            </summary>
            <seealso cref="T:Sudoku.Data.SudokuGrid"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGridTransformations.ClockwiseTable">
            <summary>
            The table of clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridTransformations.CounterclockwiseTable">
            <summary>
            The table of counter-clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGridTransformations.PiRotateTable">
            <summary>
            The table of pi-rotation.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.MirrorLeftRight(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror left-right the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.MirrorTopBottom(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror top-bottom the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.MirrorDiagonal(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror diagonal the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.Transpose(Sudoku.Data.SudokuGrid@)">
            <summary>
            Transpose the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.MirrorAntidiagonal(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror anti-diagonal the grid.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.RotateClockwise(Sudoku.Data.SudokuGrid@)">
            <summary>
            Rotate the grid clockwise.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.RotateCounterclockwise(Sudoku.Data.SudokuGrid@)">
            <summary>
            Rotate the grid counterclockwise.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.RotatePi(Sudoku.Data.SudokuGrid@)">
            <summary>
            Rotate the grid <c><see cref="F:System.Math.PI"/></c> degrees.
            </summary>
            <param name="this">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGridTransformations.SwapTwoRegions(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            Swap to regions.
            </summary>
            <param name="this">The grid.</param>
            <param name="region1">The region 1.</param>
            <param name="region2">The region 2.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when two specified region argument is not in valid range (0..27)
            or two regions are not in same region type.
            </exception>
        </member>
        <member name="T:Sudoku.Data.SymmetryType">
            <summary>
            Define a symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.None">
            <summary>
            Indicates none of symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.Central">
            <summary>
            Indicates the central symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.Diagonal">
            <summary>
            Indicates the diagonal symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.AntiDiagonal">
            <summary>
            Indicates the anti-diagonal symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.XAxis">
            <summary>
            Indicates the x-axis symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.YAxis">
            <summary>
            Indicates the y-axis symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.AxisBoth">
            <summary>
            Indicates both X-axis and Y-axis symmetry types.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.DiagonalBoth">
            <summary>
            Indicates both diagonal and anti-diagonal symmetry types.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.All">
            <summary>
            Indicates all symmetry types should be satisfied.
            </summary>
        </member>
        <member name="T:Sudoku.Data.SymmetryTypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:Sudoku.Data.SymmetryType"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.SymmetryType"/>
        </member>
        <member name="M:Sudoku.Data.SymmetryTypeExtensions.GetName(Sudoku.Data.SymmetryType)">
            <summary>
            Get the name of the current symmetry type.
            </summary>
            <param name="this">The type.</param>
            <returns>The name.</returns>
        </member>
        <member name="T:Sudoku.Data.UndoableGridExtensions">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.Stepping.UndoableGrid"/>
        </member>
        <member name="M:Sudoku.Data.UndoableGridExtensions.Duplicate(Sudoku.Data.Stepping.UndoableGrid,System.Int32,System.Int32)">
            <summary>
            Check whether the digit will be duplicate of its peers when it is filled in the specified cell.
            </summary>
            <param name="this">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Data.UnknownValue">
            <summary>
            Encapsulates an unknown value that used in the technique <b>Unknown Covering</b>.
            </summary>
            <param name="Cell">Indicates the cell that used and marked.</param>
            <param name="UnknownIdentifier">Indicates the identifier that identifies the value range.</param>
            <param name="DigitsMask">Indicates a mask that holds a serial of candidate values.</param>
        </member>
        <member name="M:Sudoku.Data.UnknownValue.#ctor(System.Int32,System.Char,System.Int16)">
            <summary>
            Encapsulates an unknown value that used in the technique <b>Unknown Covering</b>.
            </summary>
            <param name="Cell">Indicates the cell that used and marked.</param>
            <param name="UnknownIdentifier">Indicates the identifier that identifies the value range.</param>
            <param name="DigitsMask">Indicates a mask that holds a serial of candidate values.</param>
        </member>
        <member name="M:Sudoku.Data.UnknownValue.System#IValueEquatable{Sudoku#Data#UnknownValue}#Equals(Sudoku.Data.UnknownValue@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.UnknownValue.JsonConverter">
            <summary>
            Indicates the JSON converter.
            </summary>
        </member>
        <member name="P:Sudoku.Data.UnknownValue.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.UnknownValue.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.UnknownValue.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.UnknownValue,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Globalization.CountryCode">
            <summary>
            Encapsulates a country code to tell different countries.
            </summary>
            <remarks>
            This <see langword="enum"/> is used for some formatted string output, i.e. a
            multi-language string.
            </remarks>
        </member>
        <member name="F:Sudoku.Globalization.CountryCode.Default">
            <summary>
            Indicates the language is none of them, which is the default value of this type.
            </summary>
        </member>
        <member name="F:Sudoku.Globalization.CountryCode.EnUs">
            <summary>
            Indicates the American English.
            </summary>
        </member>
        <member name="F:Sudoku.Globalization.CountryCode.ZhCn">
            <summary>
            Indicates the Chinese (Mainland).
            </summary>
        </member>
        <member name="T:Sudoku.InvalidPuzzleException">
            <summary>
            Indicates an error that throws when a sudoku grid is in an invalid state in other scenarios
            that <see cref="T:Sudoku.MultipleSolutionsException"/> or <see cref="T:Sudoku.NoSolutionException"/> can't cover.
            </summary>
        </member>
        <member name="M:Sudoku.InvalidPuzzleException.#ctor(Sudoku.Data.Grid@,System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.InvalidPuzzleException"/> with the specified invalid grid,
            and the reason why throws this exception instance.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
            <param name="reason">The reason why the exception throws.</param>
        </member>
        <member name="M:Sudoku.InvalidPuzzleException.#ctor(Sudoku.Data.SudokuGrid@,System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.InvalidPuzzleException"/> with the specified invalid grid,
            and the reason why throws this exception instance.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
            <param name="reason">The reason why the exception throws.</param>
        </member>
        <member name="M:Sudoku.InvalidPuzzleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.InvalidPuzzleException.Reason">
            <summary>
            Indicates the reason why the exception throws.
            </summary>
        </member>
        <member name="P:Sudoku.InvalidPuzzleException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.InvalidPuzzleException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.InvalidPuzzleException.InvalidPuzzle">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="P:Sudoku.InvalidPuzzleException.InvalidGrid">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="M:Sudoku.InvalidPuzzleException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Models.ColorIdentifier">
            <summary>
            Indicates the color identifier that used to identify the color.
            </summary>
            <param name="UseId">Indicates whether the current instance suggests an ID using.</param>
            <param name="Id">
            Indicates the ID label. The property has a useful value
            if and only if the property <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="true"/>.
            </param>
            <param name="Color">
            Indicates the color. The property has a useful value
            if and only if the property <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="false"/>.
            </param>
            <seealso cref="P:Sudoku.Models.ColorIdentifier.UseId"/>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Indicates the color identifier that used to identify the color.
            </summary>
            <param name="UseId">Indicates whether the current instance suggests an ID using.</param>
            <param name="Id">
            Indicates the ID label. The property has a useful value
            if and only if the property <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="true"/>.
            </param>
            <param name="Color">
            Indicates the color. The property has a useful value
            if and only if the property <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="false"/>.
            </param>
            <seealso cref="P:Sudoku.Models.ColorIdentifier.UseId"/>
        </member>
        <member name="F:Sudoku.Models.ColorIdentifier.UnexpectedOperationException">
            <summary>
            Returns the <see cref="T:System.InvalidOperationException"/> instance to report the unexpected operation
            for getting the A, R, G, B value.
            </summary>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a <see cref="T:Sudoku.Models.ColorIdentifier"/> with the specified R, G, B value.
            </summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a <see cref="T:Sudoku.Models.ColorIdentifier"/> with the specified A, R, G, B value.
            </summary>
            <param name="a">The alpha value.</param>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="P:Sudoku.Models.ColorIdentifier.A">
            <summary>
            Gets the alpha value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws when <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="true"/>.
            </exception>
            <seealso cref="P:Sudoku.Models.ColorIdentifier.UseId"/>
        </member>
        <member name="P:Sudoku.Models.ColorIdentifier.R">
            <summary>
            Gets the red value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws when <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="true"/>.
            </exception>
            <seealso cref="P:Sudoku.Models.ColorIdentifier.UseId"/>
        </member>
        <member name="P:Sudoku.Models.ColorIdentifier.G">
            <summary>
            Gets the green value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws when <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="true"/>.
            </exception>
            <seealso cref="P:Sudoku.Models.ColorIdentifier.UseId"/>
        </member>
        <member name="P:Sudoku.Models.ColorIdentifier.B">
            <summary>
            Gets the blue value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws when <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="true"/>.
            </exception>
            <seealso cref="P:Sudoku.Models.ColorIdentifier.UseId"/>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.TryGetColor(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Try to get the color value. If the property <see cref="P:Sudoku.Models.ColorIdentifier.UseId"/> is <see langword="true"/>,
            the return value will be <see langword="false"/>.
            </summary>
            <param name="a">The alpha value.</param>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
            <returns>Returns whether the taking operation is successful.</returns>
            <seealso cref="P:Sudoku.Models.ColorIdentifier.UseId"/>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.Equals(Sudoku.Models.ColorIdentifier@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.GetHashCode">
            <inheritdoc/>
            <remarks>
            We on purpose show the another property value. For example, if we uses ID
            as the instance representing, the result value of get hash code will be the color value,
            and vice versa.
            </remarks>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.op_Equality(Sudoku.Models.ColorIdentifier@,Sudoku.Models.ColorIdentifier@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.op_Inequality(Sudoku.Models.ColorIdentifier@,Sudoku.Models.ColorIdentifier@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.ColorIdentifier.op_Explicit(System.Int32)~Sudoku.Models.ColorIdentifier">
            <summary>
            Explicit cast from <see cref="T:System.Int32"/> to <see cref="T:Sudoku.Models.ColorIdentifier"/>.
            The value is initialized as the ID value.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="T:Sudoku.Models.DrawingInfo">
            <summary>
            Encapsulates a drawing information pair for highlighting cells,
            candidates and regions.
            </summary>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes an instance with ID and value.
            </summary>
            <param name="id">The ID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Sudoku.Models.DrawingInfo.Id">
            <summary>
            Indicates the ID value. The ID is the unique key corresponding to one color.
            </summary>
        </member>
        <member name="P:Sudoku.Models.DrawingInfo.Value">
            <summary>
            Indicates the value.
            </summary>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.op_Implicit(System.ValueTuple{System.Int64,System.Int32}@)~Sudoku.Models.DrawingInfo">
            <summary>
            Implicit cast from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Sudoku.Models.DrawingInfo"/>.
            </summary>
            <param name="pair">The pair value.</param>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.Deconstruct(System.Int64@,System.Int32@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.Equals(Sudoku.Models.DrawingInfo@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.op_Equality(Sudoku.Models.DrawingInfo@,Sudoku.Models.DrawingInfo@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Models.DrawingInfo.op_Inequality(Sudoku.Models.DrawingInfo@,Sudoku.Models.DrawingInfo@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Models.GridProgressResult">
            <summary>
            Encapsulates a progress result used for report the current state.
            </summary>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.#ctor(System.Int32,System.Int32,System.Int32,Sudoku.Globalization.CountryCode)">
            <summary>
            Initializes an instance with the specified current point and the total point.
            </summary>
            <param name="currentCandidatesCount">The current point.</param>
            <param name="currentCellsCount">The number of unsolved cells.</param>
            <param name="initialCandidatesCount">The number of unsolved candidates in the initial grid.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.CurrentCellsCount">
            <summary>
            Indicates the number of unsolved cells.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.CurrentCandidatesCount">
            <summary>
            Indicates the number of unsolved candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.InitialCandidatesCount">
            <summary>
            Indicates the number of unsolved candidates in the initial grid.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.CountryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.Percentage">
            <summary>
            Indicates the current percentage.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.BaseHashCode">
            <summary>
            Indicates the base hash code.
            </summary>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the instance into multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Equals(Sudoku.Models.GridProgressResult@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.op_Equality(Sudoku.Models.GridProgressResult@,Sudoku.Models.GridProgressResult@)">
            <summary>
            Determines whether the two instances contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.op_Inequality(Sudoku.Models.GridProgressResult@,Sudoku.Models.GridProgressResult@)">
            <summary>
            Determines whether the two instances don't contain a same value.
            </summary>
            <param name="left">The left-side-operator instance to compare.</param>
            <param name="right">The right-side-operator instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Models.IProgressResult">
            <summary>
            Encapsulates and provides with a progress result instance.
            </summary>
        </member>
        <member name="P:Sudoku.Models.IProgressResult.Percentage">
            <summary>
            Indicates the current percentage.
            </summary>
        </member>
        <member name="P:Sudoku.Models.IProgressResult.CountryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="M:Sudoku.Models.IProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Models.PresentationData">
            <summary>
            Indicates the presentation data that is used for present the information.
            </summary>
            <param name="Cells">The cells.</param>
            <param name="Candidates">The candidates.</param>
            <param name="Regions">The regions.</param>
            <param name="Links">The links.</param>
            <param name="DirectLines">The direct lines.</param>
            <param name="UnknownValues">The unknown values.</param>
        </member>
        <member name="M:Sudoku.Models.PresentationData.#ctor(System.Collections.Generic.IList{System.ValueTuple{System.Int32,Sudoku.Models.ColorIdentifier}},System.Collections.Generic.IList{System.ValueTuple{System.Int32,Sudoku.Models.ColorIdentifier}},System.Collections.Generic.IList{System.ValueTuple{System.Int32,Sudoku.Models.ColorIdentifier}},System.Collections.Generic.IList{System.ValueTuple{Sudoku.Data.ChainLink,Sudoku.Models.ColorIdentifier}},System.Collections.Generic.IList{System.ValueTuple{Sudoku.Presentation.Crosshatch,Sudoku.Models.ColorIdentifier}},System.Collections.Generic.IList{System.ValueTuple{Sudoku.Data.UnknownValue,Sudoku.Models.ColorIdentifier}})">
            <summary>
            Indicates the presentation data that is used for present the information.
            </summary>
            <param name="Cells">The cells.</param>
            <param name="Candidates">The candidates.</param>
            <param name="Regions">The regions.</param>
            <param name="Links">The links.</param>
            <param name="DirectLines">The direct lines.</param>
            <param name="UnknownValues">The unknown values.</param>
        </member>
        <member name="F:Sudoku.Models.PresentationData.Undefined">
            <summary>
            Indicates the default instance of this type.
            </summary>
        </member>
        <member name="P:Sudoku.Models.PresentationData.IsUndefiened">
            <summary>
            Indicates whether the current instance is undefined.
            </summary>
        </member>
        <member name="M:Sudoku.Models.PresentationData.Equals(Sudoku.Models.PresentationData@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PresentationData.Contains``1(Sudoku.Models.PresentationDataKind,``0)">
            <summary>
            Checks whether the collection contains the specified element.
            </summary>
            <typeparam name="TStruct">The type of the element.</typeparam>
            <param name="dataKind">The data kind.</param>
            <param name="element">The element to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Models.PresentationData.IndexOf``1(Sudoku.Models.PresentationDataKind,``0)">
            <summary>
            Checks whether the collection contains the specified element. If so, return the index of the element.
            </summary>
            <typeparam name="TStruct">The type of the element.</typeparam>
            <param name="dataKind">The data kind.</param>
            <param name="element">The element to check.</param>
            <returns>An <see cref="T:System.Int32"/> index. If not found, return -1.</returns>
        </member>
        <member name="M:Sudoku.Models.PresentationData.UnknownIdentifierOverlapsWithCell(System.Int32)">
            <summary>
            Determines whether the unknown identifiers of the current instance
            overlaps the specified cell. Of course the property <see cref="P:Sudoku.Models.PresentationData.UnknownValues"/>
            shouldn't be <see langword="null"/>.
            </summary>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <seealso cref="P:Sudoku.Models.PresentationData.UnknownValues"/>
        </member>
        <member name="M:Sudoku.Models.PresentationData.Add``1(Sudoku.Models.PresentationDataKind,``0,Sudoku.Models.ColorIdentifier)">
            <summary>
            Append an element into the collection.
            </summary>
            <typeparam name="TStruct">The type of the element to add.</typeparam>
            <param name="dataKind">The data kind to append.</param>
            <param name="element">
            The element to add. Here we require the type of the argument should be:
            <list type="table">
            <listheader>
            <term>The argument <paramref name="dataKind"/> value</term>
            <description>The type of this argument</description>
            </listheader>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Cells"/></term>
            <description><see cref="T:System.Int32"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Candidates"/></term>
            <description><see cref="T:System.Int32"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Regions"/></term>
            <description><see cref="T:System.Int32"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Links"/></term>
            <description><see cref="T:Sudoku.Data.ChainLink"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.DirectLines"/></term>
            <description><see cref="T:Sudoku.Presentation.Crosshatch"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.UnknownValue"/></term>
            <description><see cref="T:Sudoku.Data.UnknownValue"/></description>
            </item>
            </list>
            </param>
            <param name="color">The color identifier.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="element"/> can't be converted to the target type.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="dataKind"/> is out of range.
            </exception>
        </member>
        <member name="M:Sudoku.Models.PresentationData.Remove``1(Sudoku.Models.PresentationDataKind,``0)">
            <summary>
            Removes the element out of the collection.
            </summary>
            <typeparam name="TStruct">The type of the element to remove.</typeparam>
            <param name="dataKind">The data kind.</param>
            <param name="element">
            The element. Here we require the type of the argument should be:
            <list type="table">
            <listheader>
            <term>The argument <paramref name="dataKind"/> value</term>
            <description>The type of this argument</description>
            </listheader>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Cells"/></term>
            <description><see cref="T:System.Int32"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Candidates"/></term>
            <description><see cref="T:System.Int32"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Regions"/></term>
            <description><see cref="T:System.Int32"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.Links"/></term>
            <description><see cref="T:Sudoku.Data.ChainLink"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.DirectLines"/></term>
            <description><see cref="T:Sudoku.Presentation.Crosshatch"/></description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Models.PresentationDataKind.UnknownValue"/></term>
            <description><see cref="T:Sudoku.Data.UnknownValue"/></description>
            </item>
            </list>
            </param>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="element"/> can't be converted to the target type.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="dataKind"/> is out of range.
            </exception>
        </member>
        <member name="M:Sudoku.Models.PresentationData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PresentationData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PresentationData.ToSvgCode">
            <summary>
            Fetch the SVG-format <see cref="T:System.String"/> instance that can represent this instance.
            </summary>
            <returns>The SVG-format <see cref="T:System.String"/> result.</returns>
        </member>
        <member name="M:Sudoku.Models.PresentationData.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PresentationData.TryParse(System.String,Sudoku.Models.PresentationData@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PresentationData.EnsureNotNull``1(System.Collections.Generic.IList{System.ValueTuple{``0,Sudoku.Models.ColorIdentifier}}@)">
            <summary>
            To ensure the collection isn't <see langword="null"/>. If <see langword="null"/>, the method
            will initialize the instance specified as the parameter with the modifier <see langword="ref"/>,
            which means the value can be re-assigned in this method.
            </summary>
            <typeparam name="TStruct">The type of the element.</typeparam>
            <param name="collection">The collection to initialize when <see langword="null"/>.</param>
            <remarks>
            The argument can be passed a <see langword="null"/>-able type,
            and changes to a non-<see langword="null"/> value when the method has been executed wholly.
            </remarks>
        </member>
        <member name="M:Sudoku.Models.PresentationData.ThrowIfArgTypeIsInvalid``2(``0,``1@,System.String)">
            <summary>
            Just throws when the argument <paramref name="element"/> is a wrong type, which is dismatched to
            the type <typeparamref name="TConverted"/>.
            </summary>
            <typeparam name="TBase">The type to be converted.</typeparam>
            <typeparam name="TConverted">The type to convert to.</typeparam>
            <param name="element">The real value to convert.</param>
            <param name="result">The result value converted.</param>
            <param name="argName">
            The original name of the argument. The argument should keep its <see langword="null"/> value
            because the value will be initialized by compiler.
            </param>
            <exception cref="T:System.ArgumentException">Throws when the type dismatches.</exception>
        </member>
        <member name="M:Sudoku.Models.PresentationData.op_Equality(Sudoku.Models.PresentationData@,Sudoku.Models.PresentationData@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PresentationData.op_Inequality(Sudoku.Models.PresentationData@,Sudoku.Models.PresentationData@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Models.PresentationDataKind">
            <summary>
            Presents a kind to identify the inner presentation data.
            </summary>
        </member>
        <member name="F:Sudoku.Models.PresentationDataKind.None">
            <summary>
            Indicates the data kind is none.
            </summary>
        </member>
        <member name="F:Sudoku.Models.PresentationDataKind.Cells">
            <summary>
            Indicates the data kind is for cells.
            </summary>
        </member>
        <member name="F:Sudoku.Models.PresentationDataKind.Candidates">
            <summary>
            Indicates the data kind is for candidates.
            </summary>
        </member>
        <member name="F:Sudoku.Models.PresentationDataKind.Regions">
            <summary>
            Indicates the data kind is for regions.
            </summary>
        </member>
        <member name="F:Sudoku.Models.PresentationDataKind.Links">
            <summary>
            Indicates the data kind is for links.
            </summary>
        </member>
        <member name="F:Sudoku.Models.PresentationDataKind.DirectLines">
            <summary>
            Indicates the data kind is for direct lines.
            </summary>
        </member>
        <member name="F:Sudoku.Models.PresentationDataKind.UnknownValue">
            <summary>
            Indicates the data kind is for unknown value.
            </summary>
        </member>
        <member name="T:Sudoku.Models.PuzzleGeneratingProgressResult">
            <summary>
            Indicates a puzzle generating progress result.
            </summary>
        </member>
        <member name="M:Sudoku.Models.PuzzleGeneratingProgressResult.#ctor(Sudoku.Globalization.CountryCode)">
            <summary>
            Initializes an instance with the specified country code.
            </summary>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="M:Sudoku.Models.PuzzleGeneratingProgressResult.#ctor(System.Int32,Sudoku.Globalization.CountryCode)">
            <summary>
            Initializes an instance with the specified trial times and country code.
            </summary>
            <param name="generatingTrial">The number of the trial times.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:Sudoku.Models.PuzzleGeneratingProgressResult.GeneratingTrial">
            <summary>
            Indicates how many trials of the specified generator generates.
            </summary>
        </member>
        <member name="P:Sudoku.Models.PuzzleGeneratingProgressResult.Percentage">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Models.PuzzleGeneratingProgressResult.CountryCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PuzzleGeneratingProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <remarks><i>
            Before C# 10, <see langword="dynamic"/> type can be used as interpolation part
            in a interpolation string; after C# 10 interpolation string doesn't handle
            <see langword="dynamic"/> types, so we must append a type cast to <see cref="T:System.String"/>.
            </i></remarks>
        </member>
        <member name="T:Sudoku.Models.TechniqueProgressResult">
            <summary>
            Indicates a technique progress result.
            </summary>
        </member>
        <member name="M:Sudoku.Models.TechniqueProgressResult.#ctor(System.Int32,Sudoku.Globalization.CountryCode)">
            <summary>
            Initializes an instance with the specified technique count.
            </summary>
            <param name="totalSearchers">The total number of searchers.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.Percentage">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.CurrentTechnique">
            <summary>
            Indicates the current technique.
            </summary>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.CurrentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.CountryCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.TotalSearchers">
            <summary>
            The total number of searchers.
            </summary>
        </member>
        <member name="M:Sudoku.Models.TechniqueProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.MultipleSolutionsException">
            <summary>
            Indicates an error that throws when a sudoku grid has multiple solutions
            while solving, checking or generating a puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.Grid@)">
            <summary>
            Initializes a <see cref="T:Sudoku.NoSolutionException"/> with the specified invalid grid.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes a <see cref="T:Sudoku.MultipleSolutionsException"/> with the specified invalid grid.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.InvalidPuzzle">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.InvalidGrid">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.NoSolutionException">
            <summary>
            Indicates an error that throws when a sudoku grid has no solution
            while solving, checking or generating a puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.Grid@)">
            <summary>
            Initializes a <see cref="T:Sudoku.NoSolutionException"/> with the specified invalid grid.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes a <see cref="T:Sudoku.NoSolutionException"/> with the specified invalid grid.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.NoSolutionException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.NoSolutionException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.NoSolutionException.InvalidPuzzle">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="P:Sudoku.NoSolutionException.InvalidGrid">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="M:Sudoku.NoSolutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Presentation.Coordinate">
            <summary>
            Defines a coordinate used in a sudoku grid.
            </summary>
            <param name="Cell">
            Indicates the cell value used. The possible values are between 0 and 80. You can't assign a value out of this range;
            otherwise, an <see cref="T:System.InvalidOperationException"/> or <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown.
            </param>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.#ctor(System.Byte)">
            <summary>
            Defines a coordinate used in a sudoku grid.
            </summary>
            <param name="Cell">
            Indicates the cell value used. The possible values are between 0 and 80. You can't assign a value out of this range;
            otherwise, an <see cref="T:System.InvalidOperationException"/> or <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown.
            </param>
        </member>
        <member name="F:Sudoku.Presentation.Coordinate.Undefined">
            <summary>
            Indicates the undefined <see cref="T:Sudoku.Presentation.Coordinate"/> instance that stands for an invalid <see cref="T:Sudoku.Presentation.Coordinate"/> value.
            </summary>
        </member>
        <member name="F:Sudoku.Presentation.Coordinate.MinValue">
            <inheritdoc cref="P:System.IMinMaxValue`1.MinValue"/>
        </member>
        <member name="F:Sudoku.Presentation.Coordinate.MaxValue">
            <inheritdoc cref="P:System.IMinMaxValue`1.MaxValue"/>
        </member>
        <member name="P:Sudoku.Presentation.Coordinate.Row">
            <summary>
            Indicates the current row lying in.
            </summary>
        </member>
        <member name="P:Sudoku.Presentation.Coordinate.Column">
            <summary>
            Indicates the current column lying in.
            </summary>
        </member>
        <member name="P:Sudoku.Presentation.Coordinate.Block">
            <summary>
            Indicates the current block lying in.
            </summary>
        </member>
        <member name="P:Sudoku.Presentation.Coordinate.System#IMinMaxValue{Sudoku#Presentation#Coordinate}#MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Presentation.Coordinate.System#IMinMaxValue{Sudoku#Presentation#Coordinate}#MaxValue">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.CompareTo(Sudoku.Presentation.Coordinate)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.ToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.MoveForwardly(System.Byte)">
            <inheritdoc cref="M:Sudoku.Presentation.Coordinate.op_Addition(Sudoku.Presentation.Coordinate,System.Byte)"/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.MoveBackwardly(System.Byte)">
            <inheritdoc cref="M:Sudoku.Presentation.Coordinate.op_Subtraction(Sudoku.Presentation.Coordinate,System.Byte)"/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.MoveForwardlyThroughBlock">
            <summary>
            Moves the current <see cref="T:Sudoku.Presentation.Coordinate"/> to skip cells to the first cell in its next block forwardly.
            </summary>
            <returns>The result <see cref="T:Sudoku.Presentation.Coordinate"/></returns>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.MoveBackwardlyThroughBlock">
            <summary>
            Moves the current <see cref="T:Sudoku.Presentation.Coordinate"/> to skip cells to the first cell in its next block backwardly.
            </summary>
            <returns>The result <see cref="T:Sudoku.Presentation.Coordinate"/></returns>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.System#IValueComparable{Sudoku#Presentation#Coordinate}#CompareTo(Sudoku.Presentation.Coordinate@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.System#IComparable#CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.TryParse(System.String,Sudoku.Presentation.Coordinate@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_GreaterThanOrEqual(Sudoku.Presentation.Coordinate,Sudoku.Presentation.Coordinate)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_LessThanOrEqual(Sudoku.Presentation.Coordinate,Sudoku.Presentation.Coordinate)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_GreaterThan(Sudoku.Presentation.Coordinate,Sudoku.Presentation.Coordinate)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_LessThan(Sudoku.Presentation.Coordinate,Sudoku.Presentation.Coordinate)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_Addition(Sudoku.Presentation.Coordinate,System.Byte)">
            <summary>
            Moves the specified <see cref="T:Sudoku.Presentation.Coordinate"/> forwardly.
            </summary>
            <param name="coordinate">The <see cref="T:Sudoku.Presentation.Coordinate"/> instance to be moved.</param>
            <param name="offset">The offset that the <see cref="T:Sudoku.Presentation.Coordinate"/> instance moves.</param>
            <returns>The result <see cref="T:Sudoku.Presentation.Coordinate"/>.</returns>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_Subtraction(Sudoku.Presentation.Coordinate,System.Byte)">
            <summary>
            Moves the specified <see cref="T:Sudoku.Presentation.Coordinate"/> backwardly.
            </summary>
            <param name="coordinate">The <see cref="T:Sudoku.Presentation.Coordinate"/> instance to be moved.</param>
            <param name="offset">The offset that the <see cref="T:Sudoku.Presentation.Coordinate"/> instance moves.</param>
            <returns>The result <see cref="T:Sudoku.Presentation.Coordinate"/>.</returns>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_Implicit(Sudoku.Presentation.Coordinate)~System.Byte">
            <summary>
            Implicit conversion from <see cref="T:Sudoku.Presentation.Coordinate"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="coordinate">The <see cref="T:Sudoku.Presentation.Coordinate"/> instance.</param>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.op_Explicit(System.Byte)~Sudoku.Presentation.Coordinate">
            <summary>
            Explicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Sudoku.Presentation.Coordinate"/>.
            </summary>
            <param name="cell">The cell value.</param>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.Equals(Sudoku.Presentation.Coordinate@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Presentation.Coordinate.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Presentation.Crosshatch">
            <summary>
            Defines a crosshatching line that used for displaying in a picture.
            </summary>
            <param name="Start">The start position.</param>
            <param name="End">The end position.</param>
        </member>
        <member name="M:Sudoku.Presentation.Crosshatch.#ctor(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Defines a crosshatching line that used for displaying in a picture.
            </summary>
            <param name="Start">The start position.</param>
            <param name="End">The end position.</param>
        </member>
        <member name="M:Sudoku.Presentation.Crosshatch.Equals(Sudoku.Presentation.Crosshatch@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Crosshatch.op_Implicit(System.ValueTuple{Sudoku.Data.Cells,Sudoku.Data.Cells}@)~Sudoku.Presentation.Crosshatch">
            <summary>
            Implicit cast from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Sudoku.Presentation.Crosshatch"/>.
            </summary>
            <param name="pair">The pair of crosshatching line data.</param>
        </member>
        <member name="T:Sudoku.Presentation.Crosshatch.JsonConverter">
            <summary>
            Indicates the JSON converter.
            </summary>
        </member>
        <member name="P:Sudoku.Presentation.Crosshatch.JsonConverter.HandleNull">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Crosshatch.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Presentation.Crosshatch.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Presentation.Crosshatch,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.PuzzleShouldHaveBeenSolvedException">
            <summary>
            Indicates an exception that throws when the puzzle should have been solved before using a function.
            </summary>
        </member>
        <member name="M:Sudoku.PuzzleShouldHaveBeenSolvedException.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes a <see cref="T:Sudoku.PuzzleShouldHaveBeenSolvedException"/> instance with the specified puzzle.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.PuzzleShouldHaveBeenSolvedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.PuzzleShouldHaveBeenSolvedException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.PuzzleShouldHaveBeenSolvedException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.PuzzleShouldHaveBeenSolvedException.InvalidGrid">
            <summary>
            Indicates the invalid grid.
            </summary>
        </member>
        <member name="M:Sudoku.PuzzleShouldHaveBeenSolvedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.ResourceCannotBeFoundException">
            <summary>
            Indicates the exception that throws when the resource can't be found.
            </summary>
        </member>
        <member name="M:Sudoku.ResourceCannotBeFoundException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.ResourceCannotBeFoundException"/> instance with the specified resource.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:Sudoku.ResourceCannotBeFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.ResourceCannotBeFoundException.Resource">
            <summary>
            Indicates the resource file.
            </summary>
        </member>
        <member name="P:Sudoku.ResourceCannotBeFoundException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.ResourceCannotBeFoundException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.ResourceCannotBeFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Resources.Paths">
            <summary>
            Here displays the default and basic paths in this project.
            </summary>
        </member>
        <member name="F:Sudoku.Resources.Paths.TrainedDataFileName">
            <summary>
            Indicates the trained data file name.
            </summary>
        </member>
        <member name="F:Sudoku.Resources.Paths.LangSourceEnUs">
            <summary>
            Indicates the language source dictionary (English).
            </summary>
        </member>
        <member name="F:Sudoku.Resources.Paths.LangSourceZhCn">
            <summary>
            Indicates the language source dictionary (Chinese).
            </summary>
        </member>
        <member name="T:Sudoku.Resources.TextResources">
            <summary>
            Provides a way to get the local text resources, and save the resources to the local path.
            </summary>
        </member>
        <member name="F:Sudoku.Resources.TextResources.Current">
            <summary>
            Indicates the singleton to get items and method invokes.
            </summary>
            <remarks>
            <para>
            This is a <see langword="dynamic"/> instance, which means you can get anything you want
            using the following code style to get the items in this class:
            <list type="bullet">
            <item><c>Current.PropertyName</c> (Property invokes)</item>
            <item><c>Current[PropertyIndex]</c> (Indexer invokes)</item>
            <item><c>Current.MethodName(Parameters)</c> (Method invokes)</item>
            </list>
            </para>
            <para>
            For example,
            if you want to get the <see cref="T:System.String"/> value from the key <c>"Bug"</c>, now you may
            write <c>Current.Bug</c> or <c>Current["Bug"]</c> to get that value.
            </para>
            <para>
            All supported methods are:
            <list type="bullet">
            <item><c>Current.Serialize(string instanceNameToSerialize, string toPath)</c></item>
            <item><c>Current.Deserialize(string instanceNameToDeserialize, string fromPath)</c></item>
            <item><c>Current.ChangeLanguage(CountryCode countryCode)</c></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Resources.TextResources.CountryCode">
            <summary>
            Indicates the current country code.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.TextResources.LangSourceEnUs">
            <summary>
            The language source for the globalization string "<c>en-us</c>".
            </summary>
        </member>
        <member name="P:Sudoku.Resources.TextResources.LangSourceZhCn">
            <summary>
            The language source for the globalization string "<c>zh-cn</c>".
            </summary>
        </member>
        <member name="M:Sudoku.Resources.TextResources.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Resources.TextResources.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Resources.TextResources.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Resources.TextResources.DefaultOptions">
            <summary>
            Indicates the default options.
            </summary>
        </member>
        <member name="F:Sudoku.Resources.TextResources._dicPointer">
            <summary>
            Indicates the current source.
            </summary>
        </member>
        <member name="M:Sudoku.Resources.TextResources.#ctor">
            <summary>
            Indicates the default constructor.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.TextResources.CurrentCountryCode">
            <summary>
            Indicates the current country code.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.TextResources.CurrentLangSourceEnUs">
            <summary>
            The language source for the globalization string "<c>en-us</c>".
            </summary>
        </member>
        <member name="P:Sudoku.Resources.TextResources.CurrentLangSourceZhCn">
            <summary>
            The language source for the globalization string "<c>zh-cn</c>".
            </summary>
        </member>
        <member name="M:Sudoku.Resources.TextResources.Deserialize(System.String,System.String)">
            <summary>
            Try to deserialize the file specified as a file path, and converts it to the instance.
            </summary>
            <param name="instanceNameToDeserialize">The instance to covert to.</param>
            <param name="path">The file path.</param>
            <returns>The <see cref="T:System.Boolean"/> value indicating whether the operation is successful.</returns>
        </member>
        <member name="M:Sudoku.Resources.TextResources.Serialize(System.String,System.String)">
            <summary>
            Try to serialize the instance whose name is specified as a string.
            </summary>
            <param name="instanceNameToSerialize">The instance that is to serialize.</param>
            <param name="path">The path to serialize.</param>
            <returns>The <see cref="T:System.Boolean"/> value indicating whether the operation is successful.</returns>
        </member>
        <member name="M:Sudoku.Resources.TextResources.ChangeLanguage(Sudoku.Globalization.CountryCode)">
            <summary>
            To change the current language with the specified country code.
            </summary>
            <param name="countryCode">The country code.</param>
            <exception cref="T:Sudoku.ResourceCannotBeFoundException">
            Throws when the resource file can't be found.
            </exception>
        </member>
        <member name="M:Sudoku.Resources.TextResources.TryGetValue(System.String)">
            <summary>
            Get the value with the specified key, without any exception throws.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The value. If the key can't be found in neither the current language dictionary
            nor the default dictionary, the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.BitwiseSolver">
            <summary>
            Defines a fast solver.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.BufferLength">
            <summary>
            The buffer length of a solution puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.BitSet27">
            <summary>
            All pencil marks set - 27 bits per band.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver._stack">
            <summary>
            Stack to store current and previous states.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver._singleApplied">
            <summary>
            Nasty global flag telling if <see cref="M:Sudoku.Solving.BitwiseSolver.ApplySingleOrEmptyCells"/> found anything.
            </summary>
            <seealso cref="M:Sudoku.Solving.BitwiseSolver.ApplySingleOrEmptyCells"/>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver._solution">
            <summary>
            Pointer to where to store the first solution. This value can be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver._numSolutions">
            <summary>
            The number of solutions found so far.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver._limitSolutions">
            <summary>
            The max number of solution we're looking for.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver._g">
            <summary>
            Pointer to the currently active slot.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BitwiseSolver.LimitSolutions">
            <summary>
            Indicates the number of solutions found.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.Solve(Sudoku.Data.Grid@)">
            <summary>
            To solve the puzzle, and get the solution.
            </summary>
            <param name="puzzle">The puzzle to solve.</param>
            <returns>The solution. If failed to solve, <see cref="F:Sudoku.Data.Grid.Undefined"/>.</returns>
            <seealso cref="F:Sudoku.Data.Grid.Undefined"/>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.Solve(System.Char*,System.Char*,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The pointer to the puzzle.</param>
            <param name="solution">The solution. <see langword="null"/> if you don't want to use the value.</param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.Solve(System.String,System.Char*,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">The solution. <see langword="null"/> if you don't want to use the value.</param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.Solve(System.String,System.String@,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution. The value keeps <see langword="null"/> if you doesn't want to use this result.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.Char*)">
            <summary>
            Same as <see cref="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.String,System.String@)"/>, but doesn't contain
            any <see langword="out"/> parameters.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
            <seealso cref="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.String,System.String@)"/>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.String)">
            <summary>
            Same as <see cref="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.String,System.String@)"/>, but doesn't contain
            any <see langword="out"/> parameters.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
            <seealso cref="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.String,System.String@)"/>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.String,System.String@)">
            <summary>
            Check the validity of the puzzle.
            </summary>
            <param name="grid">The grid.</param>
            <param name="solutionIfUnique">The solution if the puzzle is unique.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.SetSolvedDigit(System.Int32,System.Int32)">
            <summary>
            Set a cell as solved - used in <see cref="M:Sudoku.Solving.BitwiseSolver.InitSudoku(System.Char*)"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.EliminateDigit(System.Int32,System.Int32)">
            <summary>
            Eliminate a digit - used in <see cref="M:Sudoku.Solving.BitwiseSolver.InitSudoku(System.Char*)"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.SetSolvedMask(System.Int32,System.UInt32)">
            <summary>
            Set a cell as solved - used in various guess routines.
            </summary>
            <param name="band">The band.</param>
            <param name="mask">The mask.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.InitSudoku(System.Char*)">
            <summary>
            Setup everything and load the puzzle.
            </summary>
            <param name="puzzle">The pointer that points to a puzzle buffer.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.Update">
            <summary>
            Core of fast processing.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.ApplySingleOrEmptyCells">
            <summary>
            Find singles, bi-value cells, and impossible cells.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.InternalSolve(System.Char*,System.Char*,System.Int32)">
            <summary>
            The internal solving method.
            </summary>
            <param name="puzzle">The pointer to the puzzle string.</param>
            <param name="solutionPtr">The pointer to the solution string.</param>
            <param name="limit">The limitation for the number of all final solutions.</param>
            <returns>The number of solutions found.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.ExtractSolution(System.Char*)">
            <summary>
            Extract solution as a string.
            </summary>
            <param name="solution">
            The solution pointer. <b>The buffer should be at least <see cref="F:Sudoku.Solving.BitwiseSolver.BufferLength"/>
            of value of length.</b>
            </param>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.GuessBiValueInCell">
            <summary>
            Try both options for cells with exactly two pencil marks.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.GuessFirstCell">
            <summary>
            Guess all possibilities in first unsolved cell.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.Guess">
            <summary>
            Either already solved, or guess and recurse.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.FullUpdate">
            <summary>
            Get as far as possible without guessing.
            </summary>
            <returns>An <see cref="T:System.Byte"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BitwiseSolver.BitPos(System.UInt32)">
            <summary>
            Get the bit position.
            </summary>
            <param name="map">The map.</param>
            <returns>The position.</returns>
        </member>
        <member name="T:Sudoku.Solving.BitwiseSolver.State">
            <summary>
            To describe a state for a current grid using binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.State.Bands">
            <summary>
            Pencil marks in bands by digit.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.State.PrevBands">
            <summary>
            Value of bands last time it was calculated.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.State.UnsolvedCells">
            <summary>
            Bit vector of unsolved cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.State.UnsolvedRows">
            <summary>
            Bit vector of unsolved rows - three bits per band.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.State.Pairs">
            <summary>
            Bit vector of cells with exactly two pencil marks.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.TblComplexMask">
            <summary>
            To keep mini rows still valid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.TblMaskSingle">
            <summary>
            Kill in other blocks locked column/box.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.TblShrinkSingle">
            <summary>
            Keep only rows with single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.TblRowUniq">
            <remarks>
            1 is row not defined in block mode <c>1</c> to <c>111</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.TblColumnSingle">
            <summary>
            Single in column applied to shrunk block.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BitwiseSolver.TblRowMask">
            <summary>
            Rows where single found: <c>000</c> to <c>111</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Techniques.Technique">
            <summary>
            Represents a technique instance, which is used for comparison.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.None">
            <summary>
            The placeholder of this enumeration type.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FullHouse">
            <summary>
            Indicates the full house.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.LastDigit">
            <summary>
            Indicates the last digit.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenSingleBlock">
            <summary>
            Indicates the hidden single (in block).
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenSingleRow">
            <summary>
            Indicates the hidden single (in row).
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenSingleColumn">
            <summary>
            Indicates the hidden single (in column).
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NakedSingle">
            <summary>
            Indicates the naked single.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Pointing">
            <summary>
            Indicates the pointing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Claiming">
            <summary>
            Indicates the claiming.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlmostLockedPair">
            <summary>
            Indicates the ALP.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlmostLockedTriple">
            <summary>
            Indicates the ALT.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlmostLockedQuadruple">
            <summary>
            Indicates the ALQ.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NakedPair">
            <summary>
            Indicates the naked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NakedPairPlus">
            <summary>
            Indicates the naked pair plus (naked pair (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.LockedPair">
            <summary>
            Indicates the locked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenPair">
            <summary>
            Indicates the hidden pair.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NakedTriple">
            <summary>
            Indicates the naked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NakedTriplePlus">
            <summary>
            Indicates the naked triple plus (naked triple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.LockedTriple">
            <summary>
            Indicates the locked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenTriple">
            <summary>
            Indicates the hidden triple.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NakedQuadruple">
            <summary>
            Indicates the naked quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NakedQuadruplePlus">
            <summary>
            Indicates the naked quadruple plus (naked quadruple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenQuadruple">
            <summary>
            Indicates the hidden quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XWing">
            <summary>
            Indicates the X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedXWing">
            <summary>
            Indicates the finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiXWing">
            <summary>
            Indicates the sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedXWing">
            <summary>
            Indicates the siamese finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiXWing">
            <summary>
            Indicates the siamese sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FrankenXWing">
            <summary>
            Indicates the franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedFrankenXWing">
            <summary>
            Indicates the finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiFrankenXWing">
            <summary>
            Indicates the sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedFrankenXWing">
            <summary>
            Indicates the siamese finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiFrankenXWing">
            <summary>
            Indicates the siamese sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MutantXWing">
            <summary>
            Indicates the mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedMutantXWing">
            <summary>
            Indicates the finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiMutantXWing">
            <summary>
            Indicates the sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedMutantXWing">
            <summary>
            Indicates the siamese finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiMutantXWing">
            <summary>
            Indicates the siamese sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Swordfish">
            <summary>
            Indicates the swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedSwordfish">
            <summary>
            Indicates the finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiSwordfish">
            <summary>
            Indicates the sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedSwordfish">
            <summary>
            Indicates the siamese finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiSwordfish">
            <summary>
            Indicates the siamese sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FrankenSwordfish">
            <summary>
            Indicates the swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedFrankenSwordfish">
            <summary>
            Indicates the finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiFrankenSwordfish">
            <summary>
            Indicates the sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedFrankenSwordfish">
            <summary>
            Indicates the siamese finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiFrankenSwordfish">
            <summary>
            Indicates the siamese sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MutantSwordfish">
            <summary>
            Indicates the mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedMutantSwordfish">
            <summary>
            Indicates the finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiMutantSwordfish">
            <summary>
            Indicates the sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedMutantSwordfish">
            <summary>
            Indicates the siamese finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiMutantSwordfish">
            <summary>
            Indicates the siamese sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Jellyfish">
            <summary>
            Indicates the jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedJellyfish">
            <summary>
            Indicates the finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiJellyfish">
            <summary>
            Indicates the sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedJellyfish">
            <summary>
            Indicates the siamese finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiJellyfish">
            <summary>
            Indicates the siamese sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FrankenJellyfish">
            <summary>
            Indicates the franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedFrankenJellyfish">
            <summary>
            Indicates the finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiFrankenJellyfish">
            <summary>
            Indicates the sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedFrankenJellyfish">
            <summary>
            Indicates the siamese finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiFrankenJellyfish">
            <summary>
            Indicates the siamese sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MutantJellyfish">
            <summary>
            Indicates the mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedMutantJellyfish">
            <summary>
            Indicates the finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiMutantJellyfish">
            <summary>
            Indicates the sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedMutantJellyfish">
            <summary>
            Indicates the siamese finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiMutantJellyfish">
            <summary>
            Indicates the siamese sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Squirmbag">
            <summary>
            Indicates the squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedSquirmbag">
            <summary>
            Indicates the finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiSquirmbag">
            <summary>
            Indicates the sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedSquirmbag">
            <summary>
            Indicates the siamese finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiSquirmbag">
            <summary>
            Indicates the siamese sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FrankenSquirmbag">
            <summary>
            Indicates the franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedFrankenSquirmbag">
            <summary>
            Indicates the finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiFrankenSquirmbag">
            <summary>
            Indicates the sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedFrankenSquirmbag">
            <summary>
            Indicates the siamese finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiFrankenSquirmbag">
            <summary>
            Indicates the siamese sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MutantSquirmbag">
            <summary>
            Indicates the mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedMutantSquirmbag">
            <summary>
            Indicates the finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiMutantSquirmbag">
            <summary>
            Indicates the sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedMutantSquirmbag">
            <summary>
            Indicates the siamese finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiMutantSquirmbag">
            <summary>
            Indicates the siamese sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Whale">
            <summary>
            Indicates the whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedWhale">
            <summary>
            Indicates the finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiWhale">
            <summary>
            Indicates the sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedWhale">
            <summary>
            Indicates the siamese finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiWhale">
            <summary>
            Indicates the siamese sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FrankenWhale">
            <summary>
            Indicates the franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedFrankenWhale">
            <summary>
            Indicates the finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiFrankenWhale">
            <summary>
            Indicates the sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedFrankenWhale">
            <summary>
            Indicates the siamese finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiFrankenWhale">
            <summary>
            Indicates the siamese sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MutantWhale">
            <summary>
            Indicates the mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedMutantWhale">
            <summary>
            Indicates the finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiMutantWhale">
            <summary>
            Indicates the sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedMutantWhale">
            <summary>
            Indicates the siamese finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiMutantWhale">
            <summary>
            Indicates the siamese sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Leviathan">
            <summary>
            Indicates the leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedLeviathan">
            <summary>
            Indicates the finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiLeviathan">
            <summary>
            Indicates the sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedLeviathan">
            <summary>
            Indicates the siamese finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiLeviathan">
            <summary>
            Indicates the siamese sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FrankenLeviathan">
            <summary>
            Indicates the franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedFrankenLeviathan">
            <summary>
            Indicates the finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiFrankenLeviathan">
            <summary>
            Indicates the sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedFrankenLeviathan">
            <summary>
            Indicates the siamese finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiFrankenLeviathan">
            <summary>
            Indicates the siamese sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MutantLeviathan">
            <summary>
            Indicates the mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FinnedMutantLeviathan">
            <summary>
            Indicates the finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SashimiMutantLeviathan">
            <summary>
            Indicates the sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseFinnedMutantLeviathan">
            <summary>
            Indicates the siamese finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSashimiMutantLeviathan">
            <summary>
            Indicates the siamese sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XyWing">
            <summary>
            Indicates the XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XyzWing">
            <summary>
            Indicates the XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.WxyzWing">
            <summary>
            Indicates the WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.VwxyzWing">
            <summary>
            Indicates the VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UvwxyzWing">
            <summary>
            Indicates the UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.TuvwxyzWing">
            <summary>
            Indicates the TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.StuvwxyzWing">
            <summary>
            Indicates the STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.RstuvwxyzWing">
            <summary>
            Indicates the RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.IncompleteWxyzWing">
            <summary>
            Indicates the incomplete WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.IncompleteVwxyzWing">
            <summary>
            Indicates the incomplete VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.IncompleteUvwxyzWing">
            <summary>
            Indicates the incomplete UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.IncompleteTuvwxyzWing">
            <summary>
            Indicates the incomplete TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.IncompleteStuvwxyzWing">
            <summary>
            Indicates the incomplete STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.IncompleteRstuvwxyzWing">
            <summary>
            Indicates the incomplete RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.WWing">
            <summary>
            Indicates the W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MWing">
            <summary>
            Indicates the M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.LocalWing">
            <summary>
            Indicates the local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SplitWing">
            <summary>
            Indicates the split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HybridWing">
            <summary>
            Indicates the hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedXyWing">
            <summary>
            Indicates the grouped XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedWWing">
            <summary>
            Indicates the grouped W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedMWing">
            <summary>
            Indicates the grouped M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedLocalWing">
            <summary>
            Indicates the grouped local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedSplitWing">
            <summary>
            Indicates the grouped split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedHybridWing">
            <summary>
            Indicates the grouped hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrType1">
            <summary>
            Indicates the UR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleType1">
            <summary>
            Indicates the unique rectangle type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrType2">
            <summary>
            Indicates the UR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleType2">
            <summary>
            Indicates the unique rectangle type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrType3">
            <summary>
            Indicates the UR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleType3">
            <summary>
            Indicates the unique rectangle type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrType4">
            <summary>
            Indicates the UR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleType4">
            <summary>
            Indicates the unique rectangle type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrType5">
            <summary>
            Indicates the UR type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleType5">
            <summary>
            Indicates the unique rectangle type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrType6">
            <summary>
            Indicates the UR type 6.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleType6">
            <summary>
            Indicates the unique rectangle type 6.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenUr">
            <summary>
            Indicates the hidden UR.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenUniqueRectangle">
            <summary>
            Indicates the hidden unique rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus2D">
            <summary>
            Indicates the UR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle2D">
            <summary>
            Indicates the UR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus2B1SL">
            <summary>
            Indicates the UR + 2B / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle2B1">
            <summary>
            Indicates the UR + 2B / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus2D1SL">
            <summary>
            Indicates the UR + 2D / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle2D1">
            <summary>
            Indicates the UR + 2D / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus3X">
            <summary>
            Indicates the UR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle3X">
            <summary>
            Indicates the UR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus3x1SL_Lower">
            <summary>
            Indicates the UR + 3x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle3X1L">
            <summary>
            Indicates the UR + 3x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus3X1SL_Upper">
            <summary>
            Indicates the UR + 3X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle3X1U">
            <summary>
            Indicates the UR + 3X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus3X2SL">
            <summary>
            Indicates the UR + 3X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle3X2">
            <summary>
            Indicates the UR + 3X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus3N2SL">
            <summary>
            Indicates the UR + 3N / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle3N2">
            <summary>
            Indicates the UR + 3N / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus3U2SL">
            <summary>
            Indicates the UR + 3U / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle3U2">
            <summary>
            Indicates the UR + 3U / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus3E2SL">
            <summary>
            Indicates the UR + 3E / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle3E2">
            <summary>
            Indicates the UR + 3E / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus4x1SL_Lower">
            <summary>
            Indicates the UR + 4x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle4X1L">
            <summary>
            Indicates the UR + 4x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus4X1SL_Upper">
            <summary>
            Indicates the UR + 4X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle4X1U">
            <summary>
            Indicates the UR + 4X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus4x2SL_Lower">
            <summary>
            Indicates the UR + 4x / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle4X2L">
            <summary>
            Indicates the UR + 4x / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus4X2SL_Upper">
            <summary>
            Indicates the UR + 4X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle4X2U">
            <summary>
            Indicates the UR + 4X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus4X3SL">
            <summary>
            Indicates the UR + 4X / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle4X3">
            <summary>
            Indicates the UR + 4X / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrPlus4C3SL">
            <summary>
            Indicates the UR + 4C / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangle4C3">
            <summary>
            Indicates the UR + 4C / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrXyWing">
            <summary>
            Indicates the UR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleXyWing">
            <summary>
            Indicates the UR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrXyzWing">
            <summary>
            Indicates the UR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleXyzWing">
            <summary>
            Indicates the UR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrWxyzWing">
            <summary>
            Indicates the UR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleWxyzWing">
            <summary>
            Indicates the UR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrSdc">
            <summary>
            Indicates the UR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleSueDeCoq">
            <summary>
            Indicates the UR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrUnknownCovering">
            <summary>
            Indicates the UR unknown covering.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleUnknownCovering">
            <summary>
            Indicates the UR unknown covering.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UrGuardian">
            <summary>
            Indicates the UR guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueRectangleBrokenWing">
            <summary>
            Indicates the UR guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArType1">
            <summary>
            Indicates the AR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleType1">
            <summary>
            Indicates the AR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArType2">
            <summary>
            Indicates the AR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleType2">
            <summary>
            Indicates the AR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArType3">
            <summary>
            Indicates the AR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleType3">
            <summary>
            Indicates the AR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArType5">
            <summary>
            Indicates the AR type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleType5">
            <summary>
            Indicates the AR type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenAr">
            <summary>
            Indicates the hidden AR.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.HiddenAvoidableRectangle">
            <summary>
            Indicates the hidden AR.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArPlus2D">
            <summary>
            Indicates the AR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangle2D">
            <summary>
            Indicates the AR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArPlus3X">
            <summary>
            Indicates the AR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangle3X">
            <summary>
            Indicates the AR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArXyWing">
            <summary>
            Indicates the AR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleXyWing">
            <summary>
            Indicates the AR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArXyzWing">
            <summary>
            Indicates the AR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleXyzWing">
            <summary>
            Indicates the AR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArWxyzWing">
            <summary>
            Indicates the AR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleWxyzWing">
            <summary>
            Indicates the AR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArSdc">
            <summary>
            Indicates the AR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleSueDeCoq">
            <summary>
            Indicates the AR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArGuardian">
            <summary>
            Indicates the AR guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleBrokenWing">
            <summary>
            Indicates the AR guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArHiddenSingleBlock">
            <summary>
            Indicates the AR hidden single in block.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleHiddenSingleBlock">
            <summary>
            Indicates the AR hidden single in block.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArHiddenSingleRow">
            <summary>
            Indicates the AR hidden single in row.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleHiddenSingleRow">
            <summary>
            Indicates the AR hidden single in row.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ArHiddenSingleColumn">
            <summary>
            Indicates the AR hidden single in column.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AvoidableRectangleHiddenSingleColumn">
            <summary>
            Indicates the AR hidden single in column.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UlType1">
            <summary>
            Indicates the UL type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueLoopType1">
            <summary>
            Indicates the UL type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UlType2">
            <summary>
            Indicates the UL type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueLoopType2">
            <summary>
            Indicates the UL type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UlType3">
            <summary>
            Indicates the UL type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueLoopType3">
            <summary>
            Indicates the UL type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UlType4">
            <summary>
            Indicates the UL type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueLoopType4">
            <summary>
            Indicates the UL type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XrType1">
            <summary>
            Indicates the XR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ExtendedRectangleType1">
            <summary>
            Indicates the XR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XrType2">
            <summary>
            Indicates the XR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ExtendedRectangleType2">
            <summary>
            Indicates the XR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XrType3">
            <summary>
            Indicates the XR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ExtendedRectangleType3">
            <summary>
            Indicates the XR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XrType4">
            <summary>
            Indicates the XR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ExtendedRectangleType4">
            <summary>
            Indicates the XR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugType1">
            <summary>
            Indicates the BUG type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGraveType1">
            <summary>
            Indicates the BUG type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugType2">
            <summary>
            Indicates the BUG type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGraveType2">
            <summary>
            Indicates the BUG type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugType3">
            <summary>
            Indicates the BUG type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGraveType3">
            <summary>
            Indicates the BUG type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugType4">
            <summary>
            Indicates the BUG type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGraveType4">
            <summary>
            Indicates the BUG type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugMultiple">
            <summary>
            Indicates the BUG + n.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGravePlusN">
            <summary>
            Indicates the BUG + n.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugMultipleFc">
            <summary>
            Indicates the BUG + n with forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGravePlusNForcingChains">
            <summary>
            Indicates the BUG + n with forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugXz">
            <summary>
            Indicates the BUG-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGraveXzRule">
            <summary>
            Indicates the BUG-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BugXyWing">
            <summary>
            Indicates the BUG-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueUniversalGraveXyWing">
            <summary>
            Indicates the BUG-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BdpType1">
            <summary>
            Indicates the BDP type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniquePolygonType1">
            <summary>
            Indicates the unique polygon type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BdpType2">
            <summary>
            Indicates the BDP type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniquePolygonType2">
            <summary>
            Indicates the unique polygon type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BdpType3">
            <summary>
            Indicates the BDP type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniquePolygonType3">
            <summary>
            Indicates the unique polygon type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BdpType4">
            <summary>
            Indicates the BDP type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniquePolygonType4">
            <summary>
            Indicates the unique polygon type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QdpType1">
            <summary>
            Indicates the QDP type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QiuDeadlyPatternType1">
            <summary>
            Indicates the Qiu's deadly pattern type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QdpType2">
            <summary>
            Indicates the QDP type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QiuDeadlyPatternType2">
            <summary>
            Indicates the Qiu's deadly pattern type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QdpType3">
            <summary>
            Indicates the QDP type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QiuDeadlyPatternType3">
            <summary>
            Indicates the Qiu's deadly pattern type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QdpType4">
            <summary>
            Indicates the QDP type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.QiuDeadlyPatternType4">
            <summary>
            Indicates the Qiu's deadly pattern type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.LockedQdp">
            <summary>
            Indicates the locked QDP.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.LockedQiuDeadlyPattern">
            <summary>
            Indicates the locked Qiu's deadly pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UsType1">
            <summary>
            Indicates the US type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueSquareType1">
            <summary>
            Indicates the unique square type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UsType2">
            <summary>
            Indicates the US type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueSquareType2">
            <summary>
            Indicates the unique square type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UsType3">
            <summary>
            Indicates the US type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueSquareType3">
            <summary>
            Indicates the unique square type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UsType4">
            <summary>
            Indicates the US type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.UniqueSquareType4">
            <summary>
            Indicates the unique square type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUrType1">
            <summary>
            Indicates the reverse UR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueRectangleType1">
            <summary>
            Indicates the reverse unique rectangle type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUrType2">
            <summary>
            Indicates the reverse UR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueRectangleType2">
            <summary>
            Indicates the reverse unique rectangle type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUrType3">
            <summary>
            Indicates the reverse UR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueRectangleType3">
            <summary>
            Indicates the reverse unique rectangle type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUrType4">
            <summary>
            Indicates the reverse UR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueRectangleType4">
            <summary>
            Indicates the reverse unique rectangle type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUlType1">
            <summary>
            Indicates the reverse UL type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueLoopType1">
            <summary>
            Indicates the reverse unique loop type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUlType2">
            <summary>
            Indicates the reverse UL type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueLoopType2">
            <summary>
            Indicates the reverse unique loop type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUlType3">
            <summary>
            Indicates the reverse UL type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueLoopType3">
            <summary>
            Indicates the reverse unique loop type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUlType4">
            <summary>
            Indicates the reverse UL type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ReverseUniqueLoopType4">
            <summary>
            Indicates the reverse unique loop type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Sdc">
            <summary>
            Indicates the SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SueDeCoq">
            <summary>
            Indicates the sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SueDeCoqIsolated">
            <summary>
            Indicates the sue de coq with isolated digit.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Sdc3d">
            <summary>
            Indicates the 3-dimension SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SueDeCoq3Dimension">
            <summary>
            Indicates the 3-dimensional sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.CannibalizedSdc">
            <summary>
            Indicates the cannibalized SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SueDeCoqCannibalism">
            <summary>
            Indicates the sue de coq cannibalism.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Skyscraper">
            <summary>
            Indicates the skyscraper.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.TwoStringKite">
            <summary>
            Indicates the two-string kite.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.TurbotFish">
            <summary>
            Indicates the turbot fish.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.EmptyRectangle">
            <summary>
            Indicates the empty rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Guardian">
            <summary>
            Indicates the guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BrokenWing">
            <summary>
            Indicates the broken wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueOddagonType1">
            <summary>
            Indicates the bi-value oddagon type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueOddagonType2">
            <summary>
            Indicates the bi-value oddagon type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BivalueOddagonType3">
            <summary>
            Indicates the bi-value oddagon type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedBivalueOddagon">
            <summary>
            Indicates the grouped bi-value oddagon.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XChain">
            <summary>
            Indicates the X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.YChain">
            <summary>
            Indicates the Y-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.FishyCycle">
            <summary>
            Indicates the fishy cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XyChain">
            <summary>
            Indicates the XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XyCycle">
            <summary>
            Indicates the XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.XyXChain">
            <summary>
            Indicates the XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.PurpleCow">
            <summary>
            Indicates the purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DiscontinuousNiceLoop">
            <summary>
            Indicates the discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ContinuousNiceLoop">
            <summary>
            Indicates the continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Aic">
            <summary>
            Indicates the AIC.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlternatingInferenceChain">
            <summary>
            Indicates the alternating inference chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedXChain">
            <summary>
            Indicates the grouped X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedFishyCycle">
            <summary>
            Indicates the grouped fishy cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedXyChain">
            <summary>
            Indicates the grouped XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedXyCycle">
            <summary>
            Indicates the grouped XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedXyXChain">
            <summary>
            Indicates the grouped XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedPurpleCow">
            <summary>
            Indicates the grouped purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedDiscontinuousNiceLoop">
            <summary>
            Indicates the grouped discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedContinuousNiceLoop">
            <summary>
            Indicates the grouped continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedAic">
            <summary>
            Indicates the grouped AIC.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GroupedAlternatingInferenceChain">
            <summary>
            Indicates the grouped alternating inference chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NishioFc">
            <summary>
            Indicates the nishio FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.NishioForcingChains">
            <summary>
            Indicates the nishio forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.RegionFc">
            <summary>
            Indicates the region FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.RegionForcingChains">
            <summary>
            Indicates the region forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.CellFc">
            <summary>
            Indicates the cell FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.CellForcingChains">
            <summary>
            Indicates the cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicRegionFc">
            <summary>
            Indicates the dynamic region FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicRegionForcingChains">
            <summary>
            Indicates the dynamic region forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicCellFc">
            <summary>
            Indicates the dynamic cell FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicCellForcingChains">
            <summary>
            Indicates the dynamic cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicContradictionFc">
            <summary>
            Indicates the dynamic contradiction FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicContradictionForcingChains">
            <summary>
            Indicates the dynamic contradiction forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicDoubleFc">
            <summary>
            Indicates the dynamic double FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicDoubleForcingChains">
            <summary>
            Indicates the dynamic double forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicFc">
            <summary>
            Indicates the dynamic FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DynamicForcingChains">
            <summary>
            Indicates the dynamic forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Erip">
            <summary>
            Indicates the ERIP.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.EmptyRectangleIntersectionPair">
            <summary>
            Indicates the empty rectangle intersection pair.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Esp">
            <summary>
            Indicates the ESP.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ExtendedSubsetPrinciple">
            <summary>
            Indicates the extended subset principle.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SinglyLinkedAlsXz">
            <summary>
            Indicates the singly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SinglyLinkedAlmostLockedSetsXzRule">
            <summary>
            Indicates the singly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DoublyLinkedAlsXz">
            <summary>
            Indicates the doubly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DoublyLinkedAlmostLockedSetsXzRule">
            <summary>
            Indicates the doubly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlsXyWing">
            <summary>
            Indicates the ALS-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlmostLockedSetsXyWing">
            <summary>
            Indicates the ALS-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlsWWing">
            <summary>
            Indicates the ALS-W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.AlmostLockedSetsWWing">
            <summary>
            Indicates the ALS-W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DeathBlossom">
            <summary>
            Indicates the death blossom.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Gsp">
            <summary>
            Indicates the GSP.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.GurthSymmetricalPlacement">
            <summary>
            Indicates the Gurth's symmetrical placement.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Gsp2">
            <summary>
            Indicates the GSP2.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ExtendedGurthSymmetricalPlacement">
            <summary>
            Indicates the extended Gurth's symmetrical placement.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Je">
            <summary>
            Indicates the JE.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.JuniorExocet">
            <summary>
            Indicates the junior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Se">
            <summary>
            Indicates the SE.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SeniorExocet">
            <summary>
            Indicates the senior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ComplexSe">
            <summary>
            Indicates the complex SE.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.ComplexSeniorExocet">
            <summary>
            Indicates the complex senior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseJe">
            <summary>
            Indicates the siamese JE. 
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseJuniorExocet">
            <summary>
            Indicates the siamese junior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSe">
            <summary>
            Indicates the siamese SE.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SiameseSeniorExocet">
            <summary>
            Indicates the siamese senior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.SkLoop">
            <summary>
            Indicates the SK-Loop.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.DominoLoop">
            <summary>
            Indicates the domino loop.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Msls">
            <summary>
            Indicates the multi-sector locked sets.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.MultisectorLockedSets">
            <summary>
            Indicates the multi-sector locked sets.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.Pom">
            <summary>
            Indicates the POM.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.PatternOverlay">
            <summary>
            Indicates the pattern overlay method.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.TemplateSet">
            <summary>
            Indicates the template set.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.TemplateDelete">
            <summary>
            Indicates the template delete.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BowmanBingo">
            <summary>
            Indicates the bowman's bingo.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.Technique.BruteForce">
            <summary>
            Indicates the brute force.
            </summary>
        </member>
        <member name="T:Sudoku.Techniques.TechniqueGroup">
            <summary>
            Indicates a technique group.
            </summary>
            <remarks>
            Different with <see cref="T:Sudoku.Techniques.TechniqueTags"/>, this enumeration type contains
            the real technique group that the technique belongs to. In addition, the value
            of this type may effect the displaying of the analysis result.
            </remarks>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.None">
            <summary>
            Indicates the technique doesn't belong to any group.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Single">
            <summary>
            Indicates the singles technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Lc">
            <summary>
            Indicates the locked candidates (LC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.LockedCandidates">
            <summary>
            Indicates the locked candidates (LC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Subset">
            <summary>
            Indicates the subset technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.NormalFish">
            <summary>
            Indicates the normal fish technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.ComplexFish">
            <summary>
            Indicates the complex fish technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Wing">
            <summary>
            Indicates the wing technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.EmptyRectangle">
            <summary>
            Indicates the empty rectangle technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Sdp">
            <summary>
            Indicates the single digit pattern (SDP) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.SingleDigitPattern">
            <summary>
            Indicates the single digit pattern (SDP) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Erip">
            <summary>
            Indicates the empty rectangle intersection pair (ERIP) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.EmptyRectangleIntersectionPair">
            <summary>
            Indicates the empty rectangle intersection pair (ERIP) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Alc">
            <summary>
            Indicates the almost locked candidates (ALC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.AlmostLockedCandidates">
            <summary>
            Indicates the almost locked candidates (ALC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Aic">
            <summary>
            Indicates the alternating inference chain (AIC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.AlternatingInferenceChain">
            <summary>
            Indicates the alternating inference chain (AIC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Fc">
            <summary>
            Indicates the forcing chains (FC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.ForcingChains">
            <summary>
            Indicates the forcing chains (FC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Ur">
            <summary>
            Indicates the unique rectangle (UR) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.UniqueRectangle">
            <summary>
            Indicates the unique rectangle (UR) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.UrPlus">
            <summary>
            Indicates the unique rectangle plus (UR+) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.UniqueRectanglePlus">
            <summary>
            Indicates the unique rectangle plus (UR+) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Ul">
            <summary>
            Indicates the unique loop (UL) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.UniqueLoop">
            <summary>
            Indicates the unique loop (UL) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Xr">
            <summary>
            Indicates the extended rectangle (XR) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.ExtendedRectangle">
            <summary>
            Indicates the extended rectangle (XR) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Bug">
            <summary>
            Indicates the bi-value universal grave (BUG) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.BivalueUniversalGrave">
            <summary>
            Indicates the bi-value universal grave (BUG) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.ReverseBug">
            <summary>
            Indicates the reverse bi-value universal grave (Reverse BUG) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.ReverseBivalueUniversalGrave">
            <summary>
            Indicates the reverse bi-value universal grave (Reverse BUG) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.DeadlyPattern">
            <summary>
            Indicates the deadly pattern technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.BivalueOddagon">
            <summary>
            Indicates the bi-value oddagon technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Sdc">
            <summary>
            Indicates the sue de coq (SdC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.SueDeCoq">
            <summary>
            Indicates the sue de coq (SdC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Guardian">
            <summary>
            Indicates the guardian technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.BrokenWing">
            <summary>
            Indicates the broken wing technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.AlsChainingLike">
            <summary>
            Indicates the ALS chaining-like (ALS-XZ, ALS-XY-Wing, ALS-W-Wing) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.AlmostLockedSetsChainingLike">
            <summary>
            Indicates the ALS chaining-like (ALS-XZ, ALS-XY-Wing, ALS-W-Wing) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.SkLoop">
            <summary>
            Indicates the SK-Loop technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.DominoLoop">
            <summary>
            Indicates the SK-Loop technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Msls">
            <summary>
            Indicates the multi-sector locked sets (MSLS) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.MultisectorLockedSets">
            <summary>
            Indicates the multi-sector locked sets (MSLS) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Exocet">
            <summary>
            Indicates the exocet technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Symmetry">
            <summary>
            Indicates the symmetry technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.RankTheory">
            <summary>
            Indicates the technique checked and searched relies on the rank theory.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.BowmanBingo">
            <summary>
            Indicates the bowman bingo technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Pom">
            <summary>
            Indicates the pattern overlay method (POM) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.PatternOverlay">
            <summary>
            Indicates the pattern overlay method (POM) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Templating">
            <summary>
            Indicates the templating technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.Bf">
            <summary>
            Indicates the brute force (BF) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueGroup.BruteForce">
            <summary>
            Indicates the brute force (BF) technique.
            </summary>
        </member>
        <member name="T:Sudoku.Techniques.TechniqueTags">
            <summary>
            Provides a series of tags to mark on a technique.
            </summary>
            <remarks>
            For example, a <see cref="F:Sudoku.Techniques.Technique.DeathBlossom"/> can be categorized
            as two flags <see cref="F:Sudoku.Techniques.TechniqueTags.Als"/> and <see cref="F:Sudoku.Techniques.TechniqueTags.LongChaining"/>.
            </remarks>
            <seealso cref="F:Sudoku.Techniques.TechniqueTags.Als"/>
            <seealso cref="F:Sudoku.Techniques.TechniqueTags.LongChaining"/>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.None">
            <summary>
            Indicates none of flags that the technique belongs to.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Singles">
            <summary>
            Indicates the singles technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Intersections">
            <summary>
            Indicates the intersection technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Subsets">
            <summary>
            Indicates the subset technique. Please note that all ALS techniques shouldn't be with this flag.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Fishes">
            <summary>
            Indicates the fish technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Wings">
            <summary>
            Indicates the wing technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.SingleDigitPattern">
            <summary>
            Indicates the single digit pattern technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.ShortChaining">
            <summary>
            Indicates the short chain.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.LongChaining">
            <summary>
            Indicates the long chain, which includes normal AICs, forcing chains
            and other chaining-like techniques, such as Bowman's Bingo.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.ForcingChains">
            <summary>
            Indicates the forcing chains technique, such as Bowman's Bingo, Region Forcing Chains and so on.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.DeadlyPattern">
            <summary>
            Indicates the deadly pattern technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Als">
            <summary>
            Indicates the ALS technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Msls">
            <summary>
            Indicates the MSLS technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Exocet">
            <summary>
            Indicates the exocet technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.RankTheory">
            <summary>
            Indicates the technique checked and searched relies on the rank theory.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.Symmetry">
            <summary>
            Indicates the symmetry technique.
            </summary>
        </member>
        <member name="F:Sudoku.Techniques.TechniqueTags.LastResort">
            <summary>
            Indicates the last resort technique.
            </summary>
        </member>
        <member name="T:Sudoku.Versioning.ForStudyingOnlyAttribute">
            <summary>
            To mark onto a type (only for <see langword="class"/> or <see langword="struct"/>), to tell the user
            and the compiler that the type is only used in algorithms-studying scenarios.
            </summary>
        </member>
    </members>
</doc>
