<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeAnalysis</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0101_LargeStructTypeAnalyzer">
            <summary>
            Indicates the analyzer that can provide the following diagnostic results:
            <list type="bullet">
            <item><see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0001">SCA0001</see> (Special type missing)</item>
            <item><see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0101">SCA0101</see> (Don't initialize large structure)</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0101_LargeStructTypeAnalyzer.PropertyName_SuggestedMemberName">
            <summary>
            The extra property fields. Such fields will be used while reporting diagnostics.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0101_LargeStructTypeAnalyzer.PropertyName_TypeName">
            <summary>
            The extra property fields. Such fields will be used while reporting diagnostics.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0101_LargeStructTypeAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0101_LargeStructTypeAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0101_LargeStructTypeAnalyzer.AnalyzeCore(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)">
            <summary>
            The core method to analyze the symbol, syntax node, operation or something else that can be analyzed.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0102_LargeStructureShouldPassByRefAnalyzer">
            <summary>
            Indicates the analyzer that can provide the following diagnostic results:
            <list type="bullet">
            <item><see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0001">SCA0001</see> (Special type missing)</item>
            <item><see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0102">SCA0102</see> (Large structures should pass by reference)</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0102_LargeStructureShouldPassByRefAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0102_LargeStructureShouldPassByRefAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0102_LargeStructureShouldPassByRefAnalyzer.AnalyzeCore(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext)">
            <summary>
            The core method to analyze the symbol, syntax node, operation or something else that can be analyzed.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0201_UseArgumentAnalyzer">
            <summary>
            Indicates the analyzer that can provide the following diagnostic results:
            <list type="bullet">
            <item><see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0201">SCA0201</see> (Use type 'Argument' instead)</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0201_UseArgumentAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0201_UseArgumentAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0201_UseArgumentAnalyzer.AnalyzeCore(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext)">
            <summary>
            The core method to analyze the symbol, syntax node, operation or something else that can be analyzed.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0202_UseAddMethodAnalyzer">
            <summary>
            Indicates the analyzer that can provide the following diagnostic results:
            <list type="bullet">
            <item><see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0001">SCA0001</see> (Special type missing)</item>
            <item><see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0202">SCA0202</see> (Use 'Add' instead of plus operator)</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0202_UseAddMethodAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0202_UseAddMethodAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SCA0202_UseAddMethodAnalyzer.AnalyzeCore(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)">
            <summary>
            The core method to analyze the symbol, syntax node, operation or something else that can be analyzed.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.NamedArgumentsExtensions">
            <summary>
            Provides extension methods on named arguments list type <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Immutable.ImmutableArray`1"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.NamedArgumentsExtensions.GetValueByName(System.Collections.Immutable.ImmutableArray{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.TypedConstant}},System.String)">
            <summary>
            Try to fetch target <see cref="T:Microsoft.CodeAnalysis.TypedConstant"/> instance whose corresponding key is the specified name.
            </summary>
            <param name="this">A list of key-value pair to be checked.</param>
            <param name="namedArgumentName">The named argument name to be checked.</param>
            <returns>The found <see cref="T:Microsoft.CodeAnalysis.TypedConstant"/> value; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.SpecialFullTypeNames">
            <summary>
            The special full type names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.SpecialNamedArgumentNames">
            <summary>
            Provides with special named argument names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.WellKnownDiagnosticDescriptors">
            <summary>
            Represents with the well-known diagnostic descriptors.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.WellKnownDiagnosticDescriptors.SCA0001">
            <summary>
            Indicates the diagnostic result <see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0001">SCA0001</see>:
            <list type="bullet">
            <item><b>Title</b>: Special type missing</item>
            <item><b>Description</b>: Special type is missing; please check the code analysis project and change the namespace.</item>
            <item><b>Category</b>: CodeAnalysis</item>
            <item><b>Severity</b>: <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.WellKnownDiagnosticDescriptors.SCA0101">
            <summary>
            Indicates the diagnostic result <see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0101">SCA0101</see>:
            <list type="bullet">
            <item><b>Title</b>: Don't initialize large structure</item>
            <item><b>Description</b>: Don't initialize large structure; please use expected fields or 'Create' methods instead if available.</item>
            <item><b>Category</b>: Usage</item>
            <item><b>Severity</b>: <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.WellKnownDiagnosticDescriptors.SCA0102">
            <summary>
            Indicates the diagnostic result <see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0102">SCA0102</see>:
            <list type="bullet">
            <item><b>Title</b>: Large structures should pass by reference</item>
            <item><b>Description</b>: Large structure should pass by reference in order to optimize performance.</item>
            <item><b>Category</b>: Usage</item>
            <item><b>Severity</b>: <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.WellKnownDiagnosticDescriptors.SCA0201">
            <summary>
            Indicates the diagnostic result <see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0201">SCA0201</see>:
            <list type="bullet">
            <item><b>Title</b>: Use type 'Argument' instead</item>
            <item><b>Description</b>: The current 'if' statement can be converted into 'Argument' method invocation; use 'Argument' instead to simplify the code.</item>
            <item><b>Category</b>: Usage</item>
            <item><b>Severity</b>: <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Info"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.WellKnownDiagnosticDescriptors.SCA0202">
            <summary>
            Indicates the diagnostic result <see href="https://sunnieshine.github.io/Sudoku/code-analysis/sca0202">SCA0202</see>:
            <list type="bullet">
            <item><b>Title</b>: Use 'Add' instead of plus operator</item>
            <item><b>Description</b>: Use 'Add' instead of plus operator</item>
            <item><b>Category</b>: Performance</item>
            <item><b>Severity</b>: <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Info"/></item>
            </list>
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>
            Represent a type can be used to index a collection either from the start or the end.
            </summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>
            Construct an Index using a value and indicating if the index is from the start or from the end.
            </summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element
            and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Declare this to get init properties.
            </summary>
            <remarks>
            Please see
            <see href="https://github.com/dotnet/roslyn/issues/45510#issuecomment-694977239">this link</see>
            to learn more details about this type.
            </remarks>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
    </members>
</doc>
