<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeAnalysis</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ArrayCreationClauseAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9002">SS9002</a></term>
            <description>Redundant array creation statement</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ArrayCreationClauseAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ArrayCreationClauseAnalyzer.SS9002">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9002">SS9002</a>
            diagnostic result (Redundant array creation statement).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ArrayCreationClauseAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AttributeSetterAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9007">SS9007</a></term>
            <description>Please use keyword 'init' instead of 'set' of the property accessor in an attribute type</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AttributeSetterAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AttributeSetterAnalyzer.SS9007">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9007">SS9007</a>
            diagnostic result (Please use keyword 'init' instead of 'set' of the property accessor in an attribute type).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AttributeSetterAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InheritFromObjectAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9006">SS9006</a></term>
            <description>You don't need to write ': object' because this is always a truth</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InheritFromObjectAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InheritFromObjectAnalyzer.SS9006">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9006">SS9006</a>
            diagnostic result (You don't need to write ': object' because this is always a truth).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InheritFromObjectAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0501">SS0501</a></term>
            <description>Deconstruction methods should contain at least 2 parameters</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0502">SS0502</a></term>
            <description>Deconstruction methods must be instance ones</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0503">SS0503</a></term>
            <description>Deconstruction methods must return void</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0504">SS0504</a></term>
            <description>Deconstruction methods must be public</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0505">SS0505</a></term>
            <description>All parameters in deconstruction methods should be out parameters</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0506">SS0506</a></term>
            <description>The assignment statement isn't a simple variable one, but an expression</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0507">SS0507</a></term>
            <description>The parameter should be corresponded to a certain instance field or instance property in this type</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0508">SS0508</a></term>
            <description>The type has already contained a deconstruction method that holds the same number of parameters of this method, so this method won't work</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0501">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0501">SS0501</a>
            diagnostic result (Deconstruction methods should contain at least 2 parameters).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0502">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0502">SS0502</a>
            diagnostic result (Deconstruction methods must be instance ones).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0503">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0503">SS0503</a>
            diagnostic result (Deconstruction methods must return void).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0504">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0504">SS0504</a>
            diagnostic result (Deconstruction methods must be public).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0505">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0505">SS0505</a>
            diagnostic result (All parameters in deconstruction methods should be out parameters).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0506">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0506">SS0506</a>
            diagnostic result (The assignment statement isn't a simple variable one, but an expression).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0507">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0507">SS0507</a>
            diagnostic result (The parameter should be corresponded to a certain instance field or instance property in this type).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SS0508">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0508">SS0508</a>
            diagnostic result (The type has already contained a deconstruction method that holds the same number of parameters of this method, so this method won't work).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DeconstructionMethodAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0303">SD0303</a></term>
            <description>Please use the default-value field to avoid instantiation</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0304">SD0304</a></term>
            <description>Please use the specific property to simplify the invocation</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.CellsTypeName">
            <summary>
            Indicates the cells type name.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.CandidatesTypeName">
            <summary>
            Indicates the candidates type name.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.SudokuGridTypeName">
            <summary>
            Indicates the sudoku grid type name.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.CellsFullTypeName">
            <summary>
            Indicates the full type name of <c>Cells</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.CandidatesFullTypeName">
            <summary>
            Indicates the full type name of <c>Candidates</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.SudokuGridFullTypeName">
            <summary>
            Indicates the full type name of the sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.EmptyPropertyName">
            <summary>
            Indicates the field name to check in the diagnostic result <c>SD0303</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.SudokuGridEmptyPropertyName">
            <summary>
            Indicates the field name to check in the diagnostic result <c>SD0303</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.IsEmptyPropertyName">
            <summary>
            Indicates the field name to check in the diagnostic result <c>SD0304</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.IsUndefinedPropertyName">
            <summary>
            Indicates the field name to check in the diagnostic result <c>SD0304</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.SD0303">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0303">SD0303</a>
            diagnostic result (Please use the default-value field to avoid instantiation).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.SD0304">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0304">SD0304</a>
            diagnostic result (Please use the specific property to simplify the invocation).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DefaultExpressionAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9003">SS9003</a></term>
            <description>Unncessary discards</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardAnalyzer.Discard">
            <summary>
            Indicates the discard symbol.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardAnalyzer.SS9003">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9003">SS9003</a>
            diagnostic result (Unncessary discards).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ClosedEnumAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0401">SS0401</a></term>
            <description>Can't apply the operator here because the type is closed enum</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ClosedEnumAnalyzer.ClosedAttributeFullTypeName">
            <summary>
            Indicates the full type name of the closed attribute.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ClosedEnumAnalyzer.TypeFormat">
            <summary>
            Indicates the type format.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ClosedEnumAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ClosedEnumAnalyzer.SS0401">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0401">SS0401</a>
            diagnostic result (Can't apply the operator here because the type is closed enum).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ClosedEnumAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.FlaggedEnumFieldAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0402">SS0402</a></term>
            <description>The enum field must holds a flag value if the enum is marked 'FlagsAttribute'</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0403">SS0403</a></term>
            <description>The enum field must holds a explicitly-wroten value if the enum is marked 'FlagsAttribute'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.FlaggedEnumFieldAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.FlaggedEnumFieldAnalyzer.SS0402">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0402">SS0402</a>
            diagnostic result (The enum field must holds a flag value if the enum is marked 'FlagsAttribute').
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.FlaggedEnumFieldAnalyzer.SS0403">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0403">SS0403</a>
            diagnostic result (The enum field must holds a explicitly-wroten value if the enum is marked 'FlagsAttribute').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.FlaggedEnumFieldAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InterpolatedStringAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0101">SS0101</a></term>
            <description>Please add 'ToString' method invocation to the interpolation part in order to prevent any box and unbox operations</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0102">SS0102</a></term>
            <description>Unnecessary interpolation leading character '$'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InterpolatedStringAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InterpolatedStringAnalyzer.SS0101">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0101">SS0101</a>
            diagnostic result (Please add 'ToString' method invocation to the interpolation part in order to prevent any box and unbox operations).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InterpolatedStringAnalyzer.SS0102">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0102">SS0102</a>
            diagnostic result (Unnecessary interpolation leading character '$').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.InterpolatedStringAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableSimplificationAnyMethodAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0303">SS0303</a></term>
            <description>Available simplification of LINQ expression</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableSimplificationAnyMethodAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableSimplificationAnyMethodAnalyzer.SS0303">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0303">SS0303</a>
            diagnostic result (Available simplification of LINQ expression).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableSimplificationAnyMethodAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.LinqAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0301">SS0301</a></term>
            <description>Replace 'Count() >=(or >) value' with 'Take(value).Count() >=(or >) value'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.LinqAnalyzer.EnumerableClassFullName">
            <summary>
            Indicates the full type name of <see cref="T:System.Linq.Enumerable"/>.
            </summary>
            <seealso cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.LinqAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.LinqAnalyzer.SS0301">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0301">SS0301</a>
            diagnostic result (Replace 'Count() >=(or >) value' with 'Take(value).Count() >=(or >) value').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.LinqAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CompoundNullCoalescingAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0701">SS0701</a></term>
            <description>The expression can be simplified to using compound null-coalesce operator '??='</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0705">SS0705</a></term>
            <description>Using compound null-coalesce operator '??=' is unncessary</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CompoundNullCoalescingAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CompoundNullCoalescingAnalyzer.SS0701">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0701">SS0701</a>
            diagnostic result (The expression can be simplified to using compound null-coalesce operator '??=').
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CompoundNullCoalescingAnalyzer.SS0705">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0705">SS0705</a>
            diagnostic result (Using compound null-coalesce operator '??=' is unncessary).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CompoundNullCoalescingAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullCoalescingAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0702">SS0702</a></term>
            <description>The expression can be simplified to using null-coalescing operator '??'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullCoalescingAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullCoalescingAnalyzer.SS0702">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0702">SS0702</a>
            diagnostic result (The expression can be simplified to using null-coalescing operator '??').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullCoalescingAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullConditionalAndSuppressionAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0703">SS0703</a></term>
            <description>Unncessary null-conditional operator '?'</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0704">SS0704</a></term>
            <description>Unncessary null-forgiving operator '!'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullConditionalAndSuppressionAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullConditionalAndSuppressionAnalyzer.SS0703">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0703">SS0703</a>
            diagnostic result (Unncessary null-conditional operator '?').
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullConditionalAndSuppressionAnalyzer.SS0704">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0704">SS0704</a>
            diagnostic result (Unncessary null-forgiving operator '!').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullConditionalAndSuppressionAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReferenceEqualsAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0706">SS0706</a></term>
            <description>If you want to check the whether two references from two objects are equal, please use 'object.ReferenceEquals' instead of the operators '==' or '!='</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReferenceEqualsAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReferenceEqualsAnalyzer.SS0706">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0706">SS0706</a>
            diagnostic result (If you want to check the whether two references from two objects are equal, please use 'object.ReferenceEquals' instead of the operators '==' or '!=').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReferenceEqualsAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableAndOrPatternsToMergeAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0621">SS0621</a></term>
            <description>Available simplification for property patterns connected with keyword 'and' to a single property pattern</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0622">SS0622</a></term>
            <description>Available simplification for property patterns connected with keyword 'or' to a single property pattern</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableAndOrPatternsToMergeAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableAndOrPatternsToMergeAnalyzer.SS0621">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0621">SS0621</a>
            diagnostic result (Available simplification for property patterns connected with keyword 'and' to a single property pattern).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableAndOrPatternsToMergeAnalyzer.SS0622">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0622">SS0622</a>
            diagnostic result (Available simplification for property patterns connected with keyword 'or' to a single property pattern).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableAndOrPatternsToMergeAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableEmptyBracePropertyPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0634">SS0634</a></term>
            <description>The expression can be simplified to use empty-brace property pattern</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableEmptyBracePropertyPatternAnalyzer.VariableNamePropertyName">
            <summary>
            Indicates the property name that is used in <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableEmptyBracePropertyPatternAnalyzer.EmptyBrace">
            <summary>
            Indicates a pair of braces (i.e. <c>{ }</c>).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableEmptyBracePropertyPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableEmptyBracePropertyPatternAnalyzer.SS0634">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0634">SS0634</a>
            diagnostic result (The expression can be simplified to use empty-brace property pattern).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableEmptyBracePropertyPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableExtendedPropertyPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0624">SS0624</a></term>
            <description>Available simplification for extended property patterns</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableExtendedPropertyPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableExtendedPropertyPatternAnalyzer.SS0624">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0624">SS0624</a>
            diagnostic result (Available simplification for extended property patterns).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableExtendedPropertyPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableLengthPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0627">SS0627</a></term>
            <description>Available length pattern</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableLengthPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableLengthPatternAnalyzer.SS0627">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0627">SS0627</a>
            diagnostic result (Available length pattern).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailableLengthPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailablePositionalPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0606">SS0606</a></term>
            <description>The expression can be simplifiy via using positional pattern matching</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailablePositionalPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailablePositionalPatternAnalyzer.SS0606">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0606">SS0606</a>
            diagnostic result (The expression can be simplifiy via using positional pattern matching).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AvailablePositionalPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.BuiltInTypesConstantPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0604">SS0604</a></term>
            <description>Unnecessary constant pattern for the variable of the same type</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.BuiltInTypesConstantPatternAnalyzer.EqualsToken">
            <summary>
            Indicates the equals token and not equals token.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.BuiltInTypesConstantPatternAnalyzer.NotEqualsToken">
            <summary>
            Indicates the equals token and not equals token.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.BuiltInTypesConstantPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.BuiltInTypesConstantPatternAnalyzer.SS0604">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0604">SS0604</a>
            diagnostic result (Unnecessary constant pattern for the variable of the same type).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.BuiltInTypesConstantPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardedPositionalPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0610">SS0610</a></term>
            <description>The positional pattern judges nothing; if you want to judge whether the object is not null, please use empty property pattern '{ }' or 'not null' instead</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardedPositionalPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardedPositionalPatternAnalyzer.SS0610">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0610">SS0610</a>
            diagnostic result (The positional pattern judges nothing; if you want to judge whether the object is not null, please use empty property pattern '{ }' or 'not null' instead).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardedPositionalPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardInVarPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0611">SS0611</a></term>
            <description>The discard in the 'var' pattern may not take any effects</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0612">SS0612</a></term>
            <description>It doesn't take any effects that all subpatterns use discards in a 'var' deconstruction pattern</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardInVarPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardInVarPatternAnalyzer.SS0611">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0611">SS0611</a>
            diagnostic result (The discard in the 'var' pattern may not take any effects).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardInVarPatternAnalyzer.SS0612">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0612">SS0612</a>
            diagnostic result (It doesn't take any effects that all subpatterns use discards in a 'var' deconstruction pattern).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DiscardInVarPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.IncorrectDiscardPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0608">SS0608</a></term>
            <description>The positional pattern may not allow because bounded deconstruction method is a parameterless or single-parameter one</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.IncorrectDiscardPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.IncorrectDiscardPatternAnalyzer.SS0608">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0608">SS0608</a>
            diagnostic result (The positional pattern may not allow because bounded deconstruction method is a parameterless or single-parameter one).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.IncorrectDiscardPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NotNullAndAndNullOrAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0618">SS0618</a></term>
            <description>Pattern 'not null' is redundant; please remove it</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0619">SS0619</a></term>
            <description>Combination constant pattern 'null' and the keyword 'or' is redundant; please remove it</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NotNullAndAndNullOrAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NotNullAndAndNullOrAnalyzer.Recursion">
            <summary>
            Delegates a method that invokes to handle the sub-patterns in an <see langword="and"/>
            or <see langword="or"/> pattern recursively.
            </summary>
            <param name="context">The context.</param>
            <param name="nestedPatterns">The nested patterns to iterate.</param>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NotNullAndAndNullOrAnalyzer.SS0618">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0618">SS0618</a>
            diagnostic result (Pattern 'not null' is redundant; please remove it).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NotNullAndAndNullOrAnalyzer.SS0619">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0619">SS0619</a>
            diagnostic result (Combination constant pattern 'null' and the keyword 'or' is redundant; please remove it).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NotNullAndAndNullOrAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableTypesPatternMatchingSuggestionAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0615">SS0615</a></term>
            <description>Please use '{ }' instead of '!= null', 'not null' or 'HasValue' in nullable value types</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0616">SS0616</a></term>
            <description>Please use '{ }' or 'not null' instead of '!= null' in nullable reference types</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableTypesPatternMatchingSuggestionAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableTypesPatternMatchingSuggestionAnalyzer.SS0615">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0615">SS0615</a>
            diagnostic result (Please use '{ }' instead of '!= null', 'not null' or 'HasValue' in nullable value types).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableTypesPatternMatchingSuggestionAnalyzer.SS0616">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0616">SS0616</a>
            diagnostic result (Please use '{ }' or 'not null' instead of '!= null' in nullable reference types).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableTypesPatternMatchingSuggestionAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableValueTypeConstantPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0605">SS0605</a></term>
            <description>The nullable value type checking expression will be suggested to convert to constant pattern</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableValueTypeConstantPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableValueTypeConstantPatternAnalyzer.SS0605">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0605">SS0605</a>
            diagnostic result (The nullable value type checking expression will be suggested to convert to constant pattern).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.NullableValueTypeConstantPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PairKeywordNotAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0626">SS0626</a></term>
            <description>Keyword 'not' repeats; A pair of keyword 'not' can be omitted</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PairKeywordNotAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PairKeywordNotAnalyzer.SS0626">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0626">SS0626</a>
            diagnostic result (Keyword 'not' repeats; A pair of keyword 'not' can be omitted).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PairKeywordNotAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RedundantSubpatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0609">SS0609</a></term>
            <description>The positional subpattern is redundant</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RedundantSubpatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RedundantSubpatternAnalyzer.SS0609">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0609">SS0609</a>
            diagnostic result (The positional subpattern is redundant).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RedundantSubpatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RemoveParameterNameAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0635">SS0635</a></term>
            <description>It's unnecessary to explicitly specify positional parameter in this sub-positional pattern that the pattern part is used a discard pattern</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RemoveParameterNameAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RemoveParameterNameAnalyzer.SS0635">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0635">SS0635</a>
            diagnostic result (It's unnecessary to explicitly specify positional parameter in this sub-positional pattern that the pattern part is used a discard pattern).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RemoveParameterNameAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RepeatedPropertyPathAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0623">SS0623</a></term>
            <description>Repeated property path; try to integrate to one using keyword 'and' as the connection</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0625">SS0625</a></term>
            <description>Repeated property path in the extended property pattern; try to integrate to one using keyword 'and' as the connection</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RepeatedPropertyPathAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RepeatedPropertyPathAnalyzer.SS0623">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0623">SS0623</a>
            diagnostic result (Repeated property path; try to integrate to one using keyword 'and' as the connection).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RepeatedPropertyPathAnalyzer.SS0625">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0625">SS0625</a>
            diagnostic result (Repeated property path in the extended property pattern; try to integrate to one using keyword 'and' as the connection).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RepeatedPropertyPathAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ShouldAppendParameterNameAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0636">SS0636</a></term>
            <description>We suggest you explicitly specify the parameter name to enhance the readability when the sub-pattern in the positional pattern has used the non-discard one</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ShouldAppendParameterNameAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ShouldAppendParameterNameAnalyzer.SS0636">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0636">SS0636</a>
            diagnostic result (We suggest you explicitly specify the parameter name to enhance the readability when the sub-pattern in the positional pattern has used the non-discard one).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ShouldAppendParameterNameAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.TypePatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0601">SS0601</a></term>
            <description>Unnecessary explicit type pattern</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0602">SS0602</a></term>
            <description>The pattern can be simplify to 'is null'</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0603">SS0603</a></term>
            <description>The pattern can be simplify to 'is not null'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.TypePatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.TypePatternAnalyzer.SS0601">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0601">SS0601</a>
            diagnostic result (Unnecessary explicit type pattern).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.TypePatternAnalyzer.SS0602">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0602">SS0602</a>
            diagnostic result (The pattern can be simplify to 'is null').
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.TypePatternAnalyzer.SS0603">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0603">SS0603</a>
            diagnostic result (The pattern can be simplify to 'is not null').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.TypePatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0607">SS0607</a></term>
            <description>This discard can be omitted in the current positional pattern</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0613">SS0613</a></term>
            <description>The discard pattern in this property pattern doesn't judge anything; please remove this clause</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer.TripletComparer">
            <summary>
            Defines a comparer that allows a triplet of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax"/>, <see cref="T:System.String"/>
            and <see cref="T:System.Int32"/> participating in this comparison.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer.TripletComparer.Equals(System.ValueTuple{Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax,System.String,System.Int32},System.ValueTuple{Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax,System.String,System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer.TripletComparer.GetHashCode(System.ValueTuple{Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax,System.String,System.Int32})">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer.SS0607">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0607">SS0607</a>
            diagnostic result (This discard can be omitted in the current positional pattern).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer.SS0613">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0613">SS0613</a>
            diagnostic result (The discard pattern in this property pattern doesn't judge anything; please remove this clause).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryDiscardPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryEmptyBracePatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0614">SS0614</a></term>
            <description>The empty-brace property pattern '{ }' will take effects only in reference types or value types with variable designations, so we don't suggest you use the pattern to judge non-nullable types; please change the clause to 'var' pattern or other valid patterns, or just remove it</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryEmptyBracePatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryEmptyBracePatternAnalyzer.SS0614">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0614">SS0614</a>
            diagnostic result (The empty-brace property pattern '{ }' will take effects only in reference types or value types with variable designations, so we don't suggest you use the pattern to judge non-nullable types; please change the clause to 'var' pattern or other valid patterns, or just remove it).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnncessaryEmptyBracePatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryIsOperatorAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0617">SS0617</a></term>
            <description>Unncessary operator 'is' to determine the range of that value of same type</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryIsOperatorAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryIsOperatorAnalyzer.SS0617">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0617">SS0617</a>
            diagnostic result (Unncessary operator 'is' to determine the range of that value of same type).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryIsOperatorAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryNotInRelationPatternAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0620">SS0620</a></term>
            <description>Keyword 'not' followed with relation pattern is redundant; please negate the operator directly instead</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryNotInRelationPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryNotInRelationPatternAnalyzer.SS0620">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0620">SS0620</a>
            diagnostic result (Keyword 'not' followed with relation pattern is redundant; please negate the operator directly instead).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UnnecessaryNotInRelationPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UseDefaultCaseAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0633">SS0633</a></term>
            <description>'case var _' label in a switch expression (or statement) is equivalent to the default case ('default:' in switch statement and '_ =>' in switch expression); try to use 'default:' or '_ =>' instead</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UseDefaultCaseAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UseDefaultCaseAnalyzer.SS0633">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0633">SS0633</a>
            diagnostic result ('case var _' label in a switch expression (or statement) is equivalent to the default case ('default:' in switch statement and '_ =>' in switch expression); try to use 'default:' or '_ =>' instead).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.UseDefaultCaseAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ForLoopBadConditionAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9001">SS9001</a></term>
            <description>Available prepositional iteration condition expression</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ForLoopBadConditionAnalyzer.MemberAccessExpressionRegex">
            <summary>
            Indicates the regular expression to match a member access expression.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ForLoopBadConditionAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ForLoopBadConditionAnalyzer.SS9001">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9001">SS9001</a>
            diagnostic result (Available prepositional iteration condition expression).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ForLoopBadConditionAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RecordToStringAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9004">SS9004</a></term>
            <description>Due to recursive member in the record type, invoking synthesized method ToString will cause stack overflowing</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RecordToStringAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RecordToStringAnalyzer.SS9004">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9004">SS9004</a>
            diagnostic result (Due to recursive member in the record type, invoking synthesized method ToString will cause stack overflowing).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.RecordToStringAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SpanOrReadOnlySpanAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0201">SS0201</a></term>
            <description>The result of the expression '.ctor(void*, int)' can't be the return value as any methods</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SpanOrReadOnlySpanAnalyzer.SpanTypeFullName">
            <summary>
            Indicates the full type name of <see cref="T:System.Span`1"/> of <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SpanOrReadOnlySpanAnalyzer.ReadOnlySpanTypeFullName">
            <summary>
            Indicates the full type name of <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SpanOrReadOnlySpanAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SpanOrReadOnlySpanAnalyzer.InternalVisit(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Visit methods.
            </summary>
            <param name="context">The context.</param>
            <param name="node">The root node of the function.</param>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SpanOrReadOnlySpanAnalyzer.SS0201">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0201">SS0201</a>
            diagnostic result (The result of the expression '.ctor(void*, int)' can't be the return value as any methods).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SpanOrReadOnlySpanAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReadOnlyPropertyAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9008">SS9008</a></term>
            <description>Please append keyword 'readonly' into the read-only properties</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReadOnlyPropertyAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReadOnlyPropertyAnalyzer.SS9008">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9008">SS9008</a>
            diagnostic result (Please append keyword 'readonly' into the read-only properties).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ReadOnlyPropertyAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StructReadOnlyModifierAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9005">SS9005</a></term>
            <description>Auto property in a non-readonly struct has already contained the meaning of the modifier 'readonly', so you don't specify the modifier 'readonly'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StructReadOnlyModifierAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StructReadOnlyModifierAnalyzer.SS9005">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9005">SS9005</a>
            diagnostic result (Auto property in a non-readonly struct has already contained the meaning of the modifier 'readonly', so you don't specify the modifier 'readonly').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StructReadOnlyModifierAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0401">SD0401</a></term>
            <description>Please use nameof expression instead</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0402">SD0402</a></term>
            <description>This attribute must contain the specified number of parameters</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoDeconstructAttributeTypeName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoDeconstructAttributeTypeShortName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoDeconstructExtensionAttributeTypeName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoDeconstructExtensionAttributeTypeShortName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoEqualityAttributeTypeName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoEqualityAttributeTypeShortName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoGetEnumeratorAttributeTypeName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoGetEnumeratorAttributeTypeShortName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoHashCodeAttributeTypeName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.AutoHashCodeAttributeTypeShortName">
            <summary>
            Indicates the full type names.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.SD0401">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0401">SD0401</a>
            diagnostic result (Please use nameof expression instead).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.SD0402">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0402">SD0402</a>
            diagnostic result (This attribute must contain the specified number of parameters).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoAttributePropertiesAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoEqualityArgumentsAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0405">SD0405</a></term>
            <description>The type of this expression should overload the operator '=='</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoEqualityArgumentsAnalyzer.AutoEqualityAttributeTypeName">
            <summary>
            Indicates the full type name of type <c>AutoEqualityAttribute</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoEqualityArgumentsAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoEqualityArgumentsAnalyzer.GetBuiltInTypesWithoutOperatorEquality(Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Get all built in types that don't contain <c>operator ==</c>.
            </summary>
            <param name="compilation">The compilation.</param>
            <returns>The symbols.</returns>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoEqualityArgumentsAnalyzer.SD0405">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0405">SD0405</a>
            diagnostic result (The type of this expression should overload the operator '==').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.AutoEqualityArgumentsAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0305">SD0305</a></term>
            <description>The input value in this initializer is invalid</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0306">SD0306</a></term>
            <description>The remove expression in the initializer following with the current constructor has no effect</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0307">SD0307</a></term>
            <description>The expression can be simplified</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0308">SD0308</a></term>
            <description>The initializer contains the duplicate value</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.CellsTypeName">
            <summary>
            Indicates the cells type name.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.CandidatesTypeName">
            <summary>
            Indicates the candidates type name.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.CellsFullTypeName">
            <summary>
            Indicates the full type name of <c>Cells</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.CandidatesFullTypeName">
            <summary>
            Indicates the full type name of <c>Candidates</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.SD0305">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0305">SD0305</a>
            diagnostic result (The input value in this initializer is invalid).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.SD0306">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0306">SD0306</a>
            diagnostic result (The remove expression in the initializer following with the current constructor has no effect).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.SD0307">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0307">SD0307</a>
            diagnostic result (The expression can be simplified).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.SD0308">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0308">SD0308</a>
            diagnostic result (The initializer contains the duplicate value).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CellsAndCandidatesInitializerAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0302">SD0302</a></term>
            <description>Replace 'Count == 0' or 'Count != 0' with 'IsEmpty' or '!IsEmpty'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer.ZeroString">
            <summary>
            Indicates the zero string.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer.CountPropertyName">
            <summary>
            Indicates the property name of <c>Count</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer.CellsFullTypeName">
            <summary>
            Indicates the full type name of <c>Cells</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer.CandidatesFullTypeName">
            <summary>
            Indicates the full type name of <c>Candidates</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer.SD0302">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0302">SD0302</a>
            diagnostic result (Replace 'Count == 0' or 'Count != 0' with 'IsEmpty' or '!IsEmpty').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.CountIsEqualToZeroAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherAttributeAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0403">SD0403</a></term>
            <description>'DirectSearcherAttribute' attribute can be only used for step searchers</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherAttributeAnalyzer.StepSearcherTypeName">
            <summary>
            Indicates the type name of the <c>StepSearcher</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherAttributeAnalyzer.AttributeTypeName">
            <summary>
            Indicates the type name of the <c>DirectSearcherAttribute</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherAttributeAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherAttributeAnalyzer.SD0403">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0403">SD0403</a>
            diagnostic result ('DirectSearcherAttribute' attribute can be only used for step searchers).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherAttributeAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0404">SD0404</a></term>
            <description>If a step searcher doesn't mark 'DirectSearcherAttribute' attribute, the searcher can't be initialized unless the variable declaration above contains a method invocation 'FastProperties.InitializeMaps'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer.StepSearcherTypeName">
            <summary>
            Indicates the type name of the <c>StepSearcher</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer.AttributeTypeName">
            <summary>
            Indicates the type name of the <c>DirectSearcherAttribute</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer.FastPropertiesTypeName">
            <summary>
            Indicates the type name of the <c>FastProperties</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer.SudokuGridTypeName">
            <summary>
            Indicates the type name of the <c>SudokuGrid</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer.SD0404">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0404">SD0404</a>
            diagnostic result (If a step searcher doesn't mark 'DirectSearcherAttribute' attribute, the searcher can't be initialized unless the variable declaration above contains a method invocation 'FastProperties.InitializeMaps').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DirectSearcherUsageAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0202">SD0202</a></term>
            <description>The specified method can't be found and called</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0203">SD0203</a></term>
            <description>The number of arguments mismatched in this dynamically invocation</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0204">SD0204</a></term>
            <description>The argument type mismatched in this dynamically invocation</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0205">SD0205</a></term>
            <description>The method returns void, but you make it an rvalue expression</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0206">SD0206</a></term>
            <description>The specified dynamic invocation method doesn't exist</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.ChangeLanguageMethodName">
            <summary>
            Indicates the method name that is called in order to change the language of that resource dictionary.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.SerializeMethodName">
            <summary>
            Indicates the method name that is called in order to serialize the object.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.DeserializeMethodName">
            <summary>
            Indicates the method name that is called in order to deserialize the object.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.CountryCodeTypeName">
            <summary>
            Indicates the country code type name.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.TextResourcesClassName">
            <summary>
            Indicates the text resources class name.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.TextResourcesStaticReadOnlyFieldName">
            <summary>
            Indicates that field dynamically bound.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.SD0202">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0202">SD0202</a>
            diagnostic result (The specified method can't be found and called).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.SD0203">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0203">SD0203</a>
            diagnostic result (The number of arguments mismatched in this dynamically invocation).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.SD0204">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0204">SD0204</a>
            diagnostic result (The argument type mismatched in this dynamically invocation).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.SD0205">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0205">SD0205</a>
            diagnostic result (The method returns void, but you make it an rvalue expression).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.SD0206">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0206">SD0206</a>
            diagnostic result (The specified dynamic invocation method doesn't exist).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.DynamicallyInvocationOfCurrentAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0101">SD0101</a></term>
            <description>A property named 'Properties' expected</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0102">SD0102</a></term>
            <description>The property 'Properties' must be public</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0103">SD0103</a></term>
            <description>The property 'Properties' must be static</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0104">SD0104</a></term>
            <description>The property 'Properties' must be read-only</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0105">SD0105</a></term>
            <description>The property 'Properties' has a wrong type</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0106">SD0106</a></term>
            <description>The property 'Properties' can't be null</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0107">SD0107</a></term>
            <description>The property 'Properties' must contain an initializer</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0108">SD0108</a></term>
            <description>The property 'Properties' must be initialized by a new clause</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.TargetPropertyName">
            <summary>
            Indicates the target property name to check (i.e. <c>Properties</c>).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.StepSearcherTypeFullName">
            <summary>
            Indicates the full name of the type.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.TechniquePropertiesTypeFullName">
            <summary>
            Indicates the full name of the type of the property technique properties.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.AnalyzeSymbol(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext)">
            <summary>
            To analyze this symbol.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0101">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0101">SD0101</a>
            diagnostic result (A property named 'Properties' expected).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0102">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0102">SD0102</a>
            diagnostic result (The property 'Properties' must be public).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0103">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0103">SD0103</a>
            diagnostic result (The property 'Properties' must be static).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0104">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0104">SD0104</a>
            diagnostic result (The property 'Properties' must be read-only).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0105">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0105">SD0105</a>
            diagnostic result (The property 'Properties' has a wrong type).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0106">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0106">SD0106</a>
            diagnostic result (The property 'Properties' can't be null).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0107">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0107">SD0107</a>
            diagnostic result (The property 'Properties' must contain an initializer).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SD0108">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0108">SD0108</a>
            diagnostic result (The property 'Properties' must be initialized by a new clause).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.PropertiesInStepSearcherAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0406">SD0406</a></term>
            <description>The source generator will be well-working until the method marked '[ProxyEquality]' is 'static'</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0407">SD0407</a></term>
            <description>The source generator will be well-working until the method marked '[ProxyEquality]' should return 'bool'</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0408">SD0408</a></term>
            <description>The source generator will be well-working until the method marked '[ProxyEquality]' should contain a pair of parameters that is of the current type</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0409">SD0409</a></term>
            <description>The source generator will be well-working until the number of methods marked '[ProxyEquality]' should be only 1</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0410">SD0410</a></term>
            <description>The source generator will be well-working until the method marked '[ProxyEquality]' should contain 2 parameters</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.ProxyEqualityAttributeTypeName">
            <summary>
            Indicates the type name of the attribute <c>ProxyEqualityAttribute</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.SD0406">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0406">SD0406</a>
            diagnostic result (The source generator will be well-working until the method marked '[ProxyEquality]' is 'static').
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.SD0407">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0407">SD0407</a>
            diagnostic result (The source generator will be well-working until the method marked '[ProxyEquality]' should return 'bool').
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.SD0408">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0408">SD0408</a>
            diagnostic result (The source generator will be well-working until the method marked '[ProxyEquality]' should contain a pair of parameters that is of the current type).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.SD0409">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0409">SD0409</a>
            diagnostic result (The source generator will be well-working until the number of methods marked '[ProxyEquality]' should be only 1).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.SD0410">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0410">SD0410</a>
            diagnostic result (The source generator will be well-working until the method marked '[ProxyEquality]' should contain 2 parameters).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ProxyEqualityAttributeAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ResourceDictionaryAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0201">SD0201</a></term>
            <description>The specified key can't be found in the resource dictionary</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ResourceDictionaryAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ResourceDictionaryAnalyzer.SD0201">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0201">SD0201</a>
            diagnostic result (The specified key can't be found in the resource dictionary).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.ResourceDictionaryAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StackAllocAndNewClauseInCellsAndCandidatesAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0309">SD0309</a></term>
            <description>'stackalloc' or 'new' expression is unnecessary; Please use object initializer instead</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StackAllocAndNewClauseInCellsAndCandidatesAnalyzer.CellsFullTypeName">
            <summary>
            Indicates the full type name of <c>Cells</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StackAllocAndNewClauseInCellsAndCandidatesAnalyzer.CandidatesFullTypeName">
            <summary>
            Indicates the full type name of <c>Candidates</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StackAllocAndNewClauseInCellsAndCandidatesAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StackAllocAndNewClauseInCellsAndCandidatesAnalyzer.SD0309">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0309">SD0309</a>
            diagnostic result ('stackalloc' or 'new' expression is unnecessary; Please use object initializer instead).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.StackAllocAndNewClauseInCellsAndCandidatesAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0301">SD0301</a></term>
            <description>The member can't be invoked because they are reserved</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridAnalyzer.SudokuGridTypeName">
            <summary>
            Indicates the type name of the sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridAnalyzer.RefreshingCandidatesFuncPtrName">
            <summary>
            Indicates the field name "<c>RefreshingCandidates</c>".
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridAnalyzer.ValueChangedFuncPtrName">
            <summary>
            Indicates the field name "<c>ValueChanged</c>".
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridAnalyzer.SD0301">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0301">SD0301</a>
            diagnostic result (The member can't be invoked because they are reserved).
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridFormatStringAnalyzer">
            <summary>
            Indicates an analyzer that analyzes the code for the following diagnostic results:
            <list type="table">
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0310">SD0310</a></term>
            <description>Please add the format string as the argument into the method invocation of SudokuGrid, such as '.' for default case, or '#' for intelligent-handling case</description>
            </item>
            <item>
            <term><a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0311">SD0311</a></term>
            <description>Invalid format string in 'SudokuGrid.ToString'</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridFormatStringAnalyzer.SudokuGridFullTypeName">
            <summary>
            Indicates the full type name of the sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridFormatStringAnalyzer.PossibleFormats">
            <summary>
            All possible format strings to check.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridFormatStringAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridFormatStringAnalyzer.SD0310">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0310">SD0310</a>
            diagnostic result (Please add the format string as the argument into the method invocation of SudokuGrid, such as '.' for default case, or '#' for intelligent-handling case).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridFormatStringAnalyzer.SD0311">
            <summary>
            Indicates the <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0311">SD0311</a>
            diagnostic result (Invalid format string in 'SudokuGrid.ToString').
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.Analyzers.SudokuGridFormatStringAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CaseConvertingOption">
            <summary>
            Defines an option that uses and specifies the case converting, which is used in
            <see cref="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.StringEx.ToCamelCase(System.String,Sudoku.Diagnostics.CodeAnalysis.CaseConvertingOption)"/>
            or <see cref="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.StringEx.ToPascalCase(System.String)"/>.
            </summary>
            <seealso cref="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.StringEx.ToCamelCase(System.String,Sudoku.Diagnostics.CodeAnalysis.CaseConvertingOption)"/>
            <seealso cref="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.StringEx.ToPascalCase(System.String)"/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.CaseConvertingOption.None">
            <summary>
            Indicates the option is none.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.CaseConvertingOption.ReserveLeadingUnderscore">
            <summary>
            Indicates the option will specify that the leading underscore in the identifier will be reserved
            after conversion from a case to another case, e.g. Pascal case to camel case.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0101CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0101">SD0101</a>
            (A property named 'Properties' expected).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0101CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0101CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0101CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0102CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0102">SD0102</a>
            (The property 'Properties' must be public).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0102CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0102CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0102CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0103CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0103">SD0103</a>
            (The property 'Properties' must be static).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0103CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0103CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0103CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0104CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0104">SD0104</a>
            (The property 'Properties' must be read-only).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0104CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0104CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0104CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0106CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0106">SD0106</a>
            (The property 'Properties' can't be null).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0106CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0106CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0106CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0107CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0107">SD0107</a>
            (The property 'Properties' must contain an initializer).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0107CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0107CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0107CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0108CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0108">SD0108</a>
            (The property 'Properties' must be initialized by a new clause).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0108CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0108CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0108CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0302CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0302">SD0302</a>
            (Replace 'Count == 0' or 'Count != 0' with 'IsEmpty' or '!IsEmpty').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0302CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0302CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0302CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0303CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0303">SD0303</a>
            (Please use the default-value field to avoid instantiation).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0303CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0303CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0303CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0304CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0304">SD0304</a>
            (Please use the specific property to simplify the invocation).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0304CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0304CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0304CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0306CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0306">SD0306</a>
            (The remove expression in the initializer following with the current constructor has no effect).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0306CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0306CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0306CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0307CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0307">SD0307</a>
            (The expression can be simplified).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0307CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0307CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0307CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0308CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0308">SD0308</a>
            (The initializer contains the duplicate value).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0308CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0308CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0308CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0309CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0309">SD0309</a>
            ('stackalloc' or 'new' expression is unnecessary; Please use object initializer instead).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0309CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0309CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0309CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0310CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://github.com/SunnieShine/Sudoku/wiki/Rule-SD0310">SD0310</a>.
            </summary>
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0310">SD0310</a>
            (Please add the format string as the argument into the method invocation of SudokuGrid, such as '.' for default case, or '#' for intelligent-handling case).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0310CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0310CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0310CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0401CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SD0401">SD0401</a>
            (Please use nameof expression instead).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0401CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0401CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SD0401CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0101CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0101">SS0101</a>
            (Please add 'ToString' method invocation to the interpolation part in order to prevent any box and unbox operations).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0101CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0101CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0101CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0102CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0102">SS0102</a>
            (Unnecessary interpolation leading character '$').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0102CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0102CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0102CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0301CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0301">SS0301</a>
            (Replace 'Count() >=(or >) value' with 'Take(value).Count() >=(or >) value').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0301CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0301CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0301CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0303CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0303">SS0303</a>
            (Available simplification of LINQ expression).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0303CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0303CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0303CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0402CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0402">SS0402</a>
            (The enum field must holds a flag value if the enum is marked 'FlagsAttribute').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0402CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0402CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0402CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0403CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0403">SS0403</a>
            (The enum field must holds a explicitly-wroten value if the enum is marked 'FlagsAttribute').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0403CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0403CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0403CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0502CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0502">SS0502</a>
            (Deconstruction methods must be instance ones).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0502CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0502CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0502CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0504CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0504">SS0504</a>
            (Deconstruction methods must be public).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0504CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0504CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0504CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0505CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0505">SS0505</a>
            (All parameters in deconstruction methods should be out parameters).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0505CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0505CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0505CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0507CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0507">SS0507</a>
            (The parameter should be corresponded to a certain instance field or instance property in this type).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0507CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0507CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0507CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0601CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0601">SS0601</a>
            (Unnecessary explicit type pattern).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0601CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0601CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0601CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0602CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0602">SS0602</a>
            (The pattern can be simplify to 'is null').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0602CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0602CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0602CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0603CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0603">SS0603</a>
            (The pattern can be simplify to 'is not null').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0603CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0603CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0603CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0604CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0604">SS0604</a>
            (Unnecessary constant pattern for the variable of the same type).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0604CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0604CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0604CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0605CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0605">SS0605</a>
            (The nullable value type checking expression will be suggested to convert to constant pattern).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0605CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0605CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0605CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0607CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0607">SS0607</a>
            (This discard can be omitted in the current positional pattern).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0607CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0607CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0607CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0609CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0609">SS0609</a>
            (The positional subpattern is redundant).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0609CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0609CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0609CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0610CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0610">SS0610</a>
            (The positional pattern judges nothing; if you want to judge whether the object is not null, please use empty property pattern '{ }' or 'not null' instead).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0610CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0610CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0610CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0613CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0613">SS0613</a>
            (The discard pattern in this property pattern doesn't judge anything; please remove this clause).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0613CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0613CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0613CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0615CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0615">SS0615</a>
            (Please use '{ }' instead of '!= null', 'not null' or 'HasValue' in nullable value types).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0615CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0615CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0615CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0616CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0616">SS0616</a>
            (Please use '{ }' or 'not null' instead of '!= null' in nullable reference types).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0616CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0616CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0616CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0617CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0617">SS0617</a>
            (Unncessary operator 'is' to determine the range of that value of same type).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0617CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0617CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0617CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0620CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0620">SS0620</a>
            (Keyword 'not' followed with relation pattern is redundant; please negate the operator directly instead).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0620CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0620CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0620CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0626CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0626">SS0626</a>
            (Keyword 'not' repeats; A pair of keyword 'not' can be omitted).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0626CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0626CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0626CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0633CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0633">SS0633</a>
            ('case var _' label in a switch expression (or statement) is equivalent to the default case ('default:' in switch statement and '_ =>' in switch expression); try to use 'default:' or '_ =>' instead).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0633CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0633CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0633CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0634CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0634">SS0634</a>
            (The expression can be simplified to use empty-brace property pattern).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0634CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0634CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0634CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0635CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0635">SS0635</a>
            (It's unnecessary to explicitly specify positional parameter in this sub-positional pattern that the pattern part is used a discard pattern).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0635CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0635CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0635CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0701CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0701">SS0701</a>
            (The expression can be simplified to using compound null-coalesce operator '??=').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0701CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0701CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0701CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0702CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0702">SS0702</a>
            (The expression can be simplified to using null-coalescing operator '??').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0702CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0702CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0702CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0703CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0703">SS0703</a>
            (Unncessary null-conditional operator '?').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0703CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0703CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0703CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0704CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0704">SS0704</a>
            (Unncessary null-forgiving operator '!').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0704CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0704CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0704CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0706CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS0706">SS0706</a>
            (If you want to check the whether two references from two objects are equal, please use 'object.ReferenceEquals' instead of the operators '==' or '!=').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0706CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0706CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS0706CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9001CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9001">SS9001</a>
            (Available prepositional iteration condition expression).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9001CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9001CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9001CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9002CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9002">SS9002</a>
            (Redundant array creation statement).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9002CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9002CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9002CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9005CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9005">SS9005</a>
            (Auto property in a non-readonly struct has already contained the meaning of the modifier 'readonly', so you don't specify the modifier 'readonly').
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9005CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9005CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9005CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9006CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9006">SS9006</a>
            (You don't need to write ': object' because this is always a truth).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9006CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9006CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9006CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9007CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9007">SS9007</a>
            (Please use keyword 'init' instead of 'set' of the property accessor in an attribute type).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9007CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9007CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9007CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9008CodeFixProvider">
            <summary>
            Indicates the code fixer for solving the diagnostic result
            <a href="https://sunnieshine.github.io/Sudoku/rules/Rule-SS9008">SS9008</a>
            (Please append keyword 'readonly' into the read-only properties).
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9008CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9008CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.CodeFixers.SS9008CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.CodeFixTitles">
            <summary>
            Provides the titles for the code fix solutions.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.ArgumentSyntaxEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.ArgumentSyntaxEx.GetParamFullName(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Gets the full name of the parameter.
            </summary>
            <param name="this">The argument syntax node.</param>
            <param name="semanticModel">The semantic model.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The full name.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.ExpressionSyntaxEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.ExpressionSyntaxEx.IsSimpleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            To check whether the expression is a simple expression.
            </summary>
            <param name="this">The node.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.IFieldReferenceOperationEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.Operations.IFieldReferenceOperation"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.Operations.IFieldReferenceOperation"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.IFieldReferenceOperationEx.SameReferenceWith(Microsoft.CodeAnalysis.Operations.IFieldReferenceOperation,Microsoft.CodeAnalysis.Operations.IFieldReferenceOperation)">
            <summary>
            Checks whether the current instance has the same reference with the specified one.
            </summary>
            <param name="this">The current instance.</param>
            <param name="other">Another instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.ILocalReferenceOperationEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.Operations.ILocalReferenceOperation"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.Operations.ILocalReferenceOperation"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.ILocalReferenceOperationEx.SameReferenceWith(Microsoft.CodeAnalysis.Operations.ILocalReferenceOperation,Microsoft.CodeAnalysis.Operations.ILocalReferenceOperation)">
            <summary>
            Checks whether the current instance has the same reference with the specified one.
            </summary>
            <param name="this">The current instance.</param>
            <param name="other">Another instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.IMethodSymbolEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.IMethodSymbolEx.IsDeconstructionMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            To determine whether the specified method symbol is referenced to a deconstruction method.
            </summary>
            <param name="this">The symbol to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.INamedTypeSymbolEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.INamedTypeSymbolEx.DerivedFrom(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Check whether the current symbol derives from the specified type symbol.
            </summary>
            <param name="this">The symbol to check.</param>
            <param name="type">The type.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.INamedTypeSymbolEx.WithTypeArguments(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.SpecialType[])">
            <summary>
            Creates an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> with specified type arguments.
            </summary>
            <param name="this">The base symbol.</param>
            <param name="compilation">The compilation.</param>
            <param name="specialTypes">All special types to create.</param>
            <returns>Result symbol.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.INamedTypeSymbolEx.DerivedFrom(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation,System.String)">
            <summary>
            Check whether the current symbol derives from the specified type.
            </summary>
            <param name="this">The symbol to check.</param>
            <param name="compilation">The compilation.</param>
            <param name="typeName">The type name.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.IPropertyReferenceOperationEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.Operations.IPropertyReferenceOperation"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.Operations.IPropertyReferenceOperation"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.IPropertyReferenceOperationEx.SameReferenceWith(Microsoft.CodeAnalysis.Operations.IPropertyReferenceOperation,Microsoft.CodeAnalysis.Operations.IPropertyReferenceOperation)">
            <summary>
            Checks whether the current instance has the same reference with the specified one.
            </summary>
            <param name="this">The current instance.</param>
            <param name="other">Another instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.ITypeSymbolEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.ITypeSymbolEx.IsNullableType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Determine whether the current type symbol is a nullable type. The nullable types
            are:
            <list type="number">
            <item>Nullable value type (abbr. NVT), i.e. <see cref="T:System.Nullable`1"/>.</item>
            <item>Nullable reference type (abbr. NRT).</item>
            </list>
            </summary>
            <param name="this">The symbol to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <remarks>
            This method also checks the nullable state when the type is a nullable reference type.
            For example, if the code is like <c>var p = new Class();</c>, p is always corresponds to
            nullable type <c>Class?</c>; however, because the initialization clause is a <see langword="new"/>
            clause, so the type result will be <c>Class</c> instead of <c>Class?</c>, because current state is
            not <see langword="null"/>.
            </remarks>
            <seealso cref="T:System.Nullable`1"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.ITypeSymbolEx.GetAllMembers(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Get all members that belongs to the type and its base types
            (but interfaces checks the property <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>).
            </summary>
            <param name="this">The symbol.</param>
            <returns>All members.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.ITypeSymbolEx.GetAllDeconstructionMethods(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Get all deconstruction methods in this current type.
            </summary>
            <param name="this">The type.</param>
            <returns>All possible deconstruction methods.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.MethodDeclarationSyntaxEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.MethodDeclarationSyntaxEx.IsDeconstructionMethod(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax,System.Boolean,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Determine whether the specified method syntax node is an valid deconstruction method
            declaration of a type.
            </summary>
            <param name="this">The node to check.</param>
            <param name="checkMemberExistence">
            A <see cref="T:System.Boolean"/> value indicating whether the all parameters can be corresponding
            to the members in that type.
            </param>
            <param name="semanticModel">
            The corresponding semantic model to check and get type symbol. This argument shouldn't be
            <see langword="null"/> when <paramref name="checkMemberExistence"/> is <see langword="true"/>;
            otherwise, the method can't infer the correct result, so always returns <see langword="false"/>
            for this case.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.SemanticModelEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SemanticModel"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.SemanticModelEx.TypeEquals(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Checks whether the two <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>s hold the same type.</para>
            <para>
            If <paramref name="left"/> or <paramref name="right"/> is <see langword="null"/>-literal expression
            and another node is of reference type, the method also return <see langword="true"/>.
            </para>
            </summary>
            <param name="this">The semantic model.</param>
            <param name="left">The left comparer.</param>
            <param name="right">The right comparer.</param>
            <param name="withNullableChecking">
            Indicates whether the comparer uses advanced one to check nullable type.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <exception cref="T:System.ArgumentException">Throws when the type can't be inferred.</exception>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.StringEx">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.StringEx.ToCamelCase(System.String,Sudoku.Diagnostics.CodeAnalysis.CaseConvertingOption)">
            <summary>
            Converts the current name into the camel case.
            </summary>
            <param name="this">The name.</param>
            <param name="caseConvertingOption">The option that decides the result.</param>
            <returns>The result name.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.StringEx.ToPascalCase(System.String)">
            <summary>
            Converts the current name into the pascal case.
            </summary>
            <param name="this">The name.</param>
            <returns>The result name.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.SyntaxFactoryEx">
            <summary>
            Provides the additional operations for <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxFactory"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxFactory"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.SyntaxFactoryEx.IsEmptyPropertyPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean)">
            <summary>
            Creates a syntax node that represents a <c>expr <see langword="is"/> { }</c>
            or <c>expr <see langword="is not"/> { }</c> syntax.
            </summary>
            <param name="expression">The expression <c>expr</c> node.</param>
            <param name="isNegated">
            Indicates whether the pattern should be negated. The result expression may be as follows:
            <list type="table">
            <item>
            <term><see langword="false"/></term>
            <description><c>expr <see langword="is"/> { }</c></description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description><c>expr <see langword="is not"/> { }</c></description>
            </item>
            </list>
            </param>
            <returns>The syntax node.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.SyntaxFactoryEx.IsEmptyPropertyPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.String,System.Boolean)">
            <summary>
            Creates a syntax node that represents a <c>expr <see langword="is"/> { } variable</c>
            or <c>expr <see langword="is not"/> { } variable</c> syntax.
            </summary>
            <param name="expression">The expression <c>expr</c> node.</param>
            <param name="variableName">The variable name of the part <c>variable</c>.</param>
            <param name="isNegated">
            Indicates whether the pattern should be negated. The result expression may be as follows:
            <list type="table">
            <item>
            <term><see langword="false"/></term>
            <description><c>expr <see langword="is"/> { }</c></description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description><c>expr <see langword="is not"/> { }</c></description>
            </item>
            </list>
            </param>
            <returns>The syntax node.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.Extensions.SyntaxNodeEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeAnalysis.Extensions.SyntaxNodeEx.ContainingTypeIs(Microsoft.CodeAnalysis.SyntaxNode,System.Predicate{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Check whether the containing type of the specified syntax node satisfies the
            specified condition.
            </summary>
            <param name="this">The syntax node.</param>
            <param name="predicate">
            The condition, where the parameter of the anonymous function or lambda is
            the node that used in traversing the iteration.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.FormatOptions">
            <summary>
            Provides the format options.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.FormatOptions.TypeFormat">
            <summary>
            Indicates the type format.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.FormatOptions.PropertyTypeFormat">
            <summary>
            Indicates the property format.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeAnalysis.ProjectNames">
            <summary>
            Provides the project names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.ProjectNames.Sudoku_Windows">
            <summary>
            Indicates the project <c>Sudoku.Windows</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeAnalysis.ProjectNames.Sudoku_UI">
            <summary>
            Indicates the project <c>Sudoku.UI</c>.
            </summary>
            <remarks>
            This project won't be added into the solution because I had deleted yet.
            </remarks>
        </member>
        <member name="T:Sudoku.CodeGen.ResourceDictionaryKeys">
            <summary>
            Indicates the resource dictionary to check.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGen.ResourceDictionaryKeys.Keys">
            <summary>
            Indicates the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Extensions.SyntaxNodeAnalysisContextEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext@,Microsoft.CodeAnalysis.SemanticModel@,Microsoft.CodeAnalysis.Compilation@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Extensions.SyntaxNodeAnalysisContextEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext@,Microsoft.CodeAnalysis.SemanticModel@,Microsoft.CodeAnalysis.Compilation@,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Extensions.SyntaxNodeAnalysisContextEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext@,Microsoft.CodeAnalysis.SemanticModel@,Microsoft.CodeAnalysis.Compilation@,Microsoft.CodeAnalysis.SyntaxNode@,Microsoft.CodeAnalysis.ISymbol@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Extensions.SyntaxNodeAnalysisContextEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext@,Microsoft.CodeAnalysis.SemanticModel@,Microsoft.CodeAnalysis.Compilation@,Microsoft.CodeAnalysis.SyntaxNode@,Microsoft.CodeAnalysis.ISymbol@,System.Threading.CancellationToken@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Extensions.OperationAnalysisContextEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext@,Microsoft.CodeAnalysis.Compilation@,Microsoft.CodeAnalysis.IOperation@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Extensions.CompilationStartAnalysisContextEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext,Microsoft.CodeAnalysis.Compilation@,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.Extensions.TextSpanEx.Deconstruct(Microsoft.CodeAnalysis.Text.TextSpan@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.Extensions.TextSpanEx.Deconstruct(Microsoft.CodeAnalysis.Text.TextSpan@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.DiagnosticEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostic,Microsoft.CodeAnalysis.Location@,Microsoft.CodeAnalysis.DiagnosticDescriptor@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.DiagnosticEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostic,Microsoft.CodeAnalysis.Location@,Microsoft.CodeAnalysis.DiagnosticDescriptor@,Microsoft.CodeAnalysis.DiagnosticSeverity@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.DiagnosticEx.Deconstruct(Microsoft.CodeAnalysis.Diagnostic,Microsoft.CodeAnalysis.Location@,Microsoft.CodeAnalysis.DiagnosticDescriptor@,Microsoft.CodeAnalysis.DiagnosticSeverity@,Microsoft.CodeAnalysis.DiagnosticSeverity@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.DiagnosticDescriptorEx.Deconstruct(Microsoft.CodeAnalysis.DiagnosticDescriptor,System.String@,Microsoft.CodeAnalysis.LocalizableString@,Microsoft.CodeAnalysis.LocalizableString@,System.String@,Microsoft.CodeAnalysis.LocalizableString@,System.String@,Microsoft.CodeAnalysis.DiagnosticSeverity@,System.Boolean@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.LocationEx.Deconstruct(Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.SyntaxTree@,Microsoft.CodeAnalysis.Text.TextSpan@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.IParameterSymbolEx.Deconstruct(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.ITypeSymbol@,System.String@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="!:ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="!:ValueTuple"/>
        </member>
    </members>
</doc>
