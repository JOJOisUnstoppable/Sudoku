<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeGen</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1">
            <summary>
            Used on an assembly, to tell the compiler this assembly will generate a serial of extension methods called
            <c>Deconstruct</c> that used for deconstruction of an instance.
            </summary>
            <typeparam name="T">
            The type that is the aim for the source generator to generate the extension deconstruction methods.
            </typeparam>
            <remarks>
            <para>
            For example, if you write the code like:
            <code><![CDATA[[assembly: AutoDeconstructExtension<Class>(nameof(Class.A), nameof(Class.B), nameof(Class.C))]]]></code>
            then you'll get the generated code:
            <code><![CDATA[
            public static partial class ClassExtensions
            {
                [CompilerGenerated, MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static void Deconstruct(this Class @this, out int a, out int b, out int c)
                {
                    a = @this.A;
                    b = @this.B;
                    c = @this.C;
                }
            }
            ]]></code>
            </para>
            <para>
            Please note that this attribute is a generic attribute, which is introduced in C# 10.
            If you don't know this feature (generic attribute), please visit
            <see href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/generic-attributes.md">
            this link
            </see>
            for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1.#ctor(System.String[])">
            <summary>
            Initializes an <see cref="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1"/> instance with the members.
            </summary>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1.Namespace">
            <summary>
            Indicates the namespace that the output extension class stored. If the value is
            <see langword="null"/>, the namespace will use the basic namespace of the type itself.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1.MemberNames">
            <summary>
            Indicates the member names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2">
            <summary>
            Mark this attribute onto a type, to tell the source generator that the source generator will
            generates the extension deconstruction methods, with expressions.
            </summary>
            <typeparam name="T">
            The type of the element as the type of the generated code for the deconstruction methods.
            </typeparam>
            <typeparam name="TProvider">
            The type of the provider class that provides the extension methods for the argument provider
            of extension deconstruction methods.
            </typeparam>
            <remarks>
            <para>
            For example, if you write the code like:
            <code><![CDATA[
            [assembly: AutoDeconstructExtensionLambda<Class, Provider>(nameof(Class.A), nameof(Class.B), $".{nameof(Provider.C)}")]
            ]]></code>
            (Real arguments are <c>"A"</c>, <c>"B"</c> and <c>".C"</c>.)
            </para>
            <para>
            We suppose that the value <c>.C</c> is an expression that is defined by ours:
            <code><![CDATA[
            [PrivatizeParameterlessConstructor]
            internal sealed partial class Provider
            {
            	[LambdaBody]
                internal static int C(Class instance) => instance.A + instance.B;
            }
            ]]></code>
            then you'll get the generated code:
            <code><![CDATA[
            public static partial class ClassExtensions
            {
                [CompilerGenerated, MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static void Deconstruct(this Class @this, out int a, out int b, out int c)
                {
                    a = @this.A;
                    b = @this.B;
                    c = Provider.C(@this); // Translated into '@this.A + @this.B' here.
                }
            }
            ]]></code>
            </para>
            <para>
            Please note that this attribute is a generic attribute, which is introduced in C# 10.
            If you don't know this feature (generic attribute), please visit
            <see href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/generic-attributes.md">
            this link
            </see>
            for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2.#ctor(System.String[])">
            <summary>
            Initializes an <see cref="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute"/> instance via the member names.
            </summary>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2.Namespace">
            <summary>
            Indicates the namespace that the output extension class stored. If the value is
            <see langword="null"/>, the namespace will use the basic namespace of the type itself.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2.MemberNames">
            <summary>
            Indicates the member names to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute">
            <summary>
            Mark this attribute onto a type, to tell the source generator that the source generator will
            generates the deconstruction methods, with expressions.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute.#ctor(System.String[])">
            <summary>
            Initializes an <see cref="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute"/> instance via the member names.
            </summary>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute.MemberNames">
            <summary>
            Indicates the member names to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute">
            <summary>
            To mark on a type, to tell the compiler that the compiler will automatically generate
            <c>GetEnumerator</c> methods for that type.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified member name.
            </summary>
            <param name="memberName">
            The member name. If you want to pass "this" as the reference, just input "<c>@</c>".
            </param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.MemberName">
            <summary>
            Indicates the member name.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.MemberConversion">
            <summary>
            Indicates the member conversion that is used for creation of the enumerator.
            </summary>
            <remarks>
            <para>
            This property should be stored a lambda body. One of possible syntaxes is:
            <code><![CDATA[[AutoGetEnumerator(nameof(MemberName), "((IEnumerable<int>)@).*")]]]></code>
            Where:
            <list type="table">
            <item>
            <term>'<c>@</c>'</term>
            <description>Equivalent to the member.</description>
            </item>
            <item>
            <term>'<c>*</c>'</term>
            <description>Equivalent to the code <c>GetEnumerator()</c>.</description>
            </item>
            </list>
            </para>
            <para>
            The default conversion is "<c>@</c>".
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.ExtraNamespaces">
            <summary>
            Indicates the extra namespace should be imported.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.ReturnType">
            <summary>
            Indicates the return type. If <see langword="null"/>, the source generator will uses
            <see cref="T:System.Collections.IEnumerable"/>&lt;<see cref="T:System.Int32"/>&gt; as the return type to generate the code.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants">
            <summary>
            Defines the constants used in this project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.KeywordsToBclNames">
            <summary>
            Indicates the collection that stores the conversion relations from type keywords to their BCL names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats">
            <summary>
            Provides <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat"/> instance that is for types.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats.FullNameWithConstraints">
            <summary>
            Indicates the type format that is the full name of the type,
            and is with type argument constraints.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats.FullName">
            <summary>
            Indicates the type format that is the full name of the type,
            and is without type argument constraints.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts">
            <summary>
            Indicates the shortcuts for the generated files.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.ExtensionDeconstructionMethod">
            <summary>
            Indicates the source generator is for extension deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.FormattedMethods">
            <summary>
            Indicates the source generator is for auto format methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.GetEnumeratorMethod">
            <summary>
            Indicates the source generator is for auto get enumerator methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.RefStructDefaultMethod">
            <summary>
            Indicates the source generator is for <see langword="ref struct"/> default overriden methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.LambdaedDeconstructionMethod">
            <summary>
            Indicates the source generator is for deconstruction methods with expressions.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.LambdaedExtensionDeconstructionMethod">
            <summary>
            Indicates the source generator is for extension deconstruction methods with expressions.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.VersionValue">
            <summary>
            Indicates the version of this project.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoExtensionDeconstruct">
            <summary>
            Provides a generator that generates the deconstruction methods that are extension methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoExtensionDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoExtensionDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator">
            <summary>
            Defines the source generator that generates the source code for <c>GetEnumerator</c> methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Replacements">
            <summary>
            All possible replacements.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct">
            <summary>
            Defines a source generator that generates the deconstruction methods with expressions.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedExtensionDeconstruct">
            <summary>
            Provides a source generator that generates the source code for extension deconstruction methods
            with expressions.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedExtensionDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedExtensionDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens">
            <summary>
            Indicates the generator that generates the default overriden methods in a <see langword="ref struct"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.IResultCollectionReceiver`1">
            <summary>
            Defines a result collection receiver.
            </summary>
            <typeparam name="T">The type of each result value.</typeparam>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.IResultCollectionReceiver`1.Collection">
            <summary>
            Indicates the result collection.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.MemberDetail">
            <summary>
            Encapsulates the member detail.
            </summary>
            <param name="MemberSymbol">The member symbol.</param>
            <param name="TypeSymbol">The type symbol.</param>
            <param name="FullTypeName">The full type name.</param>
            <param name="Name">The simple type name.</param>
            <param name="Attributes">The attributes of the type.</param>
            <param name="OutParameterDeclaration">
            The string representation of the <see langword="out"/> parameter declaration.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.MemberDetail.#ctor(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},System.String)">
            <summary>
            Encapsulates the member detail.
            </summary>
            <param name="MemberSymbol">The member symbol.</param>
            <param name="TypeSymbol">The type symbol.</param>
            <param name="FullTypeName">The full type name.</param>
            <param name="Name">The simple type name.</param>
            <param name="Attributes">The attributes of the type.</param>
            <param name="OutParameterDeclaration">
            The string representation of the <see langword="out"/> parameter declaration.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.MemberDetail.GetDetailList(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Creates the <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/> instance via the specified type, and the attribute marks onto
            the type.
            </summary>
            <param name="typeSymbol">The type symbol.</param>
            <param name="attributeSymbol">The type symbol which means the type is an attribute marks onto.</param>
            <returns>The list of <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/>s.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.MemberDetail.GetDetailList(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates the <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/> instance via the specified type, and the attribute marks onto
            the type.
            </summary>
            <param name="typeSymbol">The type symbol.</param>
            <param name="attributeSymbol">The type symbol which means the type is an attribute marks onto.</param>
            <param name="handleRecursively">
            Indicates whether the method will handle all nested types recursively.
            </param>
            <returns>The list of <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/>s.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AttributeDataExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.AttributeData"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.AttributeData"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AttributeDataExtensions.TryGetNamedArgument(Microsoft.CodeAnalysis.AttributeData,System.String,Microsoft.CodeAnalysis.TypedConstant@)">
            <summary>
            Try to get the named argument using the specified name.
            </summary>
            <param name="this">The attribute data instance.</param>
            <param name="namedArg">The named argument name.</param>
            <param name="result">The result got.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether the operation is successful.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.CheckAnyTypeArgumentIsMarked``1(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            <para>
            Check all type arguments recursively whether any types are marked specified attribute type.
            </para>
            <para>
            This method will check all type arguments for this type symbol.
            For example, if the type symbol is like this:
            <code><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></code>
            this method will check those parts:
            <list type="bullet">
            <item><c><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></c></item>
            <item><c>string</c></item>
            <item><c><![CDATA[IReadOnlyList<IReadOnlyList<int>>]]></c></item>
            <item><c><![CDATA[IReadOnlyList<int>]]></c></item>
            <item><c>int</c></item>
            </list>
            </para>
            </summary>
            <typeparam name="TAttribute">The type of the attribute to check.</typeparam>
            <param name="symbol">The symbol to check.</param>
            <param name="compilation">The compilation.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The type symbol contains a argument that is marked <typeparamref name="TAttribute"/>.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>All type arguments aren't marked <typeparamref name="TAttribute"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.ToFileName(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get the file name of the type symbol.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The file name. Due to the limited file name and the algorithm, if:
            <list type="bullet">
            <item>
            The character is <c><![CDATA['<']]></c> or <c><![CDATA['>']]></c>:
            Change them to <c>'['</c> and <c>']'</c>.
            </item>
            <item>The character is <c>','</c>: Change it to <c>'_'</c>.</item>
            <item>The character is <c>' '</c>: Remove it.</item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.IPropertySymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/>.
            </summary>
            <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IPropertySymbolExtensions.IsAutoImplemented(Microsoft.CodeAnalysis.IPropertySymbol)">
            <summary>
            <para>
            Checks whether the property member that specified as an <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/> instance
            is an auto-implemented property.
            </para>
            <para>
            An <b>auto-implemented property</b> is a property that only contains the keyword <see langword="get"/>,
            <see langword="set"/> or <see langword="init"/> as the body,
            e.g. <c>public int Property { get; set; }</c>.
            </para>
            </summary>
            <param name="this">The property symbol to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ISymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ISymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ISymbolExtensions.GetMemberType(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the member type string representation.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The result string that is the string representation of the type gotten.
            <list type="table">
            <listheader>
            <term>Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IFieldSymbol.Type"/> will be returned.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IPropertySymbol.Type"/> will be returned.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnType"/> will be returned.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IEventSymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IEventSymbol.Type"/> will be returned.</description>
            </item>
            <item>
            <term>Other cases</term>
            <description>Constant value <see langword="null"/> will be returned.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ITypeSymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ITypeSymbolExtensions.GetAllMembers(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Get all members that belongs to the type and its base types
            (but interfaces checks the property <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>).
            </summary>
            <param name="this">The symbol.</param>
            <returns>All members.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolOutputInfo">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.FromSymbol(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance via the specified <paramref name="symbol"/>,
            and set a <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </summary>
            <param name="symbol">The type symbol.</param>
            <param name="checkNotRefStruct">
            A <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the current string into the camel case.
            </summary>
            <param name="this">The string.</param>
            <returns>The result.</returns>
        </member>
    </members>
</doc>
