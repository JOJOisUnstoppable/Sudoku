<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeGen</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CodeGen.DiagnosticDescriptors">
            <summary>
            Provides with the shared <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> instances.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator">
            <summary>
            Defines a source generator that generates deconstruction methods of a type.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.ExpressionPattern">
            <summary>
            Defines the pattern that matches for an expression.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.GatherAssemblyAttributes(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IAssemblySymbol,System.Collections.Generic.ICollection{System.ValueTuple{System.Boolean,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.Location}})">
            <summary>
            Get for assembly-targeted attributes on generation.
            </summary>
            <param name="attributeTypeSymbol">The attribute type symbol.</param>
            <param name="assembly">The assembly symbol.</param>
            <param name="collection">The target collection to store the results.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.GetForExtension(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.ValueTuple{Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.Location}[],System.String,System.String)">
            <summary>
            Gets the raw code parts for extension deconstruction methods via the specified list of attributes data.
            </summary>
            <param name="context">The context to report diagnostics.</param>
            <param name="attributesData">The attributes data, with the corresponding location.</param>
            <param name="genericParameterListWithoutConstraint">The generic parameter list.</param>
            <param name="fullTypeNameWithoutConstraint">The full type name, without the generic constraint.</param>
            <returns>The collection of raw code parts for extension deconstruction methods.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.GetForInstance(Microsoft.CodeAnalysis.GeneratorExecutionContext@,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.Location}})">
            <summary>
            Gets the raw code parts for instance deconstruction methods via the specified list of attributes data.
            </summary>
            <param name="context">The context to report diagnostics.</param>
            <param name="type">The type to be used.</param>
            <param name="readOnlyKeyword">The read-only keyword token.</param>
            <param name="attributesData">The attributes data, and the corresponding location.</param>
            <returns>The collection of raw code parts for instance deconstruction methods.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.DisableParameterlessConstructorGenerator">
            <summary>
            Indicates the generator that generates the parameterless constructor on <see langword="struct"/> types,
            to disallow any invokes for them from user.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.DisableParameterlessConstructorGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.DisableParameterlessConstructorGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator">
            <summary>
            Indicates the generator that generates the default overriden methods in a <see langword="ref struct"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator.OnTopLevel(Microsoft.CodeAnalysis.GeneratorExecutionContext,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Generates for top-levelled <see langword="ref struct"/> types.
            </summary>
            <param name="context">The context.</param>
            <param name="type">The type.</param>
            <param name="compilation">The compilation instance.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator.OnNested(Microsoft.CodeAnalysis.GeneratorExecutionContext,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Generates for nested-levelled <see langword="ref struct"/> types.
            </summary>
            <param name="context">The context.</param>
            <param name="type">The type.</param>
            <param name="compilation">The compilation instance.</param>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.AutoDeconstructionReceiver">
            <summary>
            Defines a syntax context receiver that provides the gathered node for the usages on the source generator
            <see cref="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator"/>.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
            <seealso cref="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.AutoDeconstructionReceiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver that provides the gathered node for the usages on the source generator
            <see cref="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator"/>.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
            <seealso cref="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator"/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.AutoDeconstructionReceiver.CancellationToken">
            <summary>The cancellation token to cancel the operation.</summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.AutoDeconstructionReceiver.Collection">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.AutoDeconstructionReceiver.Diagnostics">
            <summary>
            Indicates the diagnostic results found.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.AutoDeconstructionReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.DisableParameterlessConstructorReceiver">
            <summary>
            Defines a syntax context receiver that provides the gathered node for the usages on the source generator
            <see cref="T:Sudoku.Diagnostics.CodeGen.Generators.DisableParameterlessConstructorGenerator"/>.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
            <seealso cref="T:Sudoku.Diagnostics.CodeGen.Generators.DisableParameterlessConstructorGenerator"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.DisableParameterlessConstructorReceiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver that provides the gathered node for the usages on the source generator
            <see cref="T:Sudoku.Diagnostics.CodeGen.Generators.DisableParameterlessConstructorGenerator"/>.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
            <seealso cref="T:Sudoku.Diagnostics.CodeGen.Generators.DisableParameterlessConstructorGenerator"/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.DisableParameterlessConstructorReceiver.CancellationToken">
            <summary>The cancellation token to cancel the operation.</summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.DisableParameterlessConstructorReceiver.Collection">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.DisableParameterlessConstructorReceiver.Diagnostics">
            <summary>
            Indicates the diagnostic results found.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.DisableParameterlessConstructorReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.IResultCollectionReceiver`1">
            <summary>
            Defines a result collection receiver.
            </summary>
            <typeparam name="T">The type of each result value.</typeparam>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.IResultCollectionReceiver`1.Collection">
            <summary>
            Indicates the result collection.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.RefStructOverridensReceiver">
            <summary>
            Defines a syntax context receiver that provides the gathered node for the usages on the source generator
            <see cref="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator"/>.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
            <seealso cref="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.RefStructOverridensReceiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver that provides the gathered node for the usages on the source generator
            <see cref="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator"/>.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
            <seealso cref="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridensGenerator"/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.RefStructOverridensReceiver.CancellationToken">
            <summary>The cancellation token to cancel the operation.</summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.RefStructOverridensReceiver.Collection">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.RefStructOverridensReceiver.Diagnostics">
            <summary>
            Indicates the diagnostic results found.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceivers.RefStructOverridensReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.VersionValue">
            <summary>
            Indicates the version of this project.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolOutputInfo">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.TypeName">
            <summary>The type name of the type symbol.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.FullTypeName">
            <summary>The full type name of the type symbol.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.NamespaceName">
            <summary>The namespace name that the type symbol belongs to.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.GenericParameterList">
            <summary>
            The generic parameter list if the type symbol contains the type parameters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.GenericParameterListWithoutConstraint">
            <summary>
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.TypeKind">
            <summary>
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.ReadOnlyKeyword">
            <summary>
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.InKeyword">
            <summary>
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.NullableAnnotation">
            <summary>
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.IsGeneric">
            <summary>A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.FromSymbol(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance via the specified <paramref name="symbol"/>,
            and set a <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </summary>
            <param name="symbol">The type symbol.</param>
            <param name="checkNotRefStruct">
            A <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance.</returns>
        </member>
    </members>
</doc>
