<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeGen</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructAttribute">
            <summary>
            Indicates an attribute that is used for a <see langword="class"/> or <see langword="struct"/>
            as a mark that interacts with the source generator, to tell the source generator that
            it'll generate the source code for deconstruction methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified member list.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructAttribute.FieldOrPropertyList">
            <summary>
            All members to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoEqualityAttribute">
            <summary>
            Indicates an attribute that is used for a <see langword="class"/> or <see langword="struct"/>
            as a mark that interacts with the source generator, to tell the source generator that
            it'll generate the source code for equality methods.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoGetHashCodeAttribute">
            <summary>
            Indicates an attribute that is used for a <see langword="class"/> or <see langword="struct"/>
            as a mark that interacts with the source generator, to tell the source generator that
            it'll generate the source code for <c>GetHashCode</c> overriden.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants">
            <summary>
            Defines the constants used in this project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.VersionValue">
            <summary>
            Indictaes the version of this project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.KeywordsToBclNames">
            <summary>
            Indicates the collection that stores the conversion relations from type keywords to their BCL names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats">
            <summary>
            Provides <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat"/> instance that is for types.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats.FullNameWithConstraints">
            <summary>
            Indicates the type format that is the full name of the type,
            and is with type argument constraints.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats.FullName">
            <summary>
            Indicates the type format that is the full name of the type,
            and is without type argument constraints.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts">
            <summary>
            Indicates the shortcuts for the generated files.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.GetHashCode">
            <summary>
            Indicates the source generator is for get hash code.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_GetAllSets">
            <summary>
            Indicates the source generator is for bit operations get all sets.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_GetEnumerator">
            <summary>
            Indicates the source generator is for bit operations get enumerator.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_GetNextSet">
            <summary>
            Indicates the source generator is for bit operations get next set.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_ReverseBits">
            <summary>
            Indicates the source generator is for bit operations reverse bits.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_SetAt">
            <summary>
            Indicates the source generator is for bit operations set at.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_SkipSetBit">
            <summary>
            Indicates the source generator is for bit operations skip set bit.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.CodeAnalyzer">
            <summary>
            Indicates the source generator is for code analyzer.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.CodeFixer">
            <summary>
            Indicates the source generator is for code fixer.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.CoreConstants">
            <summary>
            Indicates the source generator is for core constants.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.DeconstructionMethod">
            <summary>
            Indicates the source generator is for deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.EqualsMethod">
            <summary>
            Indicates the source generator is for equals methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.ExtensionDeconstructionMethod">
            <summary>
            Indicates the source generator is for extension deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.FormattedMethods">
            <summary>
            Indicates the source generator is for auto format methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.GetEnumeratorMethod">
            <summary>
            Indicates the source generator is for auto get enumerator methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.PrimaryConstructorMethod">
            <summary>
            Indicates the source generator is for primary constructors for <see langword="class"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.ProxyEqualsMethod">
            <summary>
            Indicates the source generator is for auto equals method that binds with a proxy equality method.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.RefStructDefaultMethod">
            <summary>
            Indicates the source generator is for <see langword="ref struct"/> default overriden methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.LambdaedDeconstructionMethod">
            <summary>
            Indicates the source generator is for deconstruction methods with expressions.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.LambdaedExtensionDeconstructionMethod">
            <summary>
            Indicates the source generator is for extension deconstruction methods with expressions.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.PrivateParameterlessConstructor">
            <summary>
            Indicates the source generator is for parameterless constructors.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.OperatorNames">
            <summary>
            Indicates the operator names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.OperatorNames.Equality">
            <summary>
            Indicates the name of the <see langword="operator"/> <c>==</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.OperatorNames.Inequality">
            <summary>
            Indicates the name of the <see langword="operator"/> <c>!=</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames">
            <summary>
            Indicates the project names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.SystemExtensions">
            <summary>
            Indicates the project <c>SystemExtensions</c>.
            The project uses the namespace <c>System</c> to store types.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.Core">
            <summary>
            Indicates the project <c>Sudouk.Core</c>.
            The project uses the namespace <c>Sudoku</c> to store types.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.CodeAnalysis">
            <summary>
            Indicates the project <c>Sudoku.Diagnostics.CodeAnalysis</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.Solving">
            <summary>
            Indicates the project <c>Sudoku.Solving</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct">
            <summary>
            Defines a source generator that generates the source code for deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct._resultCollection">
            <summary>
            The result collection.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality">
            <summary>
            Defines a source generator that generates the source code
            for equality methods and the equality operator overloading.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality._resultCollection">
            <summary>
            The result collection.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode">
            <summary>
            Defines a source generator that generates the source code for getting hash code.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode._resultCollection">
            <summary>
            The result collection.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.SyntaxContextReceiverCreator">
            <summary>
            Encapsulates a set of methods to create the <see cref="T:Microsoft.CodeAnalysis.ISyntaxContextReceiver"/>s.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ISyntaxContextReceiver"/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceiverCreator.Create(System.Action{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel})">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.ISyntaxContextReceiver"/> instance to determine whether the syntax node satisfies
            some condition and can be used by the source generator.
            </summary>
            <param name="syntaxNodeVisitor">The syntax node visitor method.</param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.ISyntaxContextReceiver"/> instance.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.SyntaxContextReceiverCreator.DefaultReceiver">
            <summary>
            Indicates the default syntax context receiver.
            </summary>
            <param name="SyntaxNodeVisitor">
            The syntax node visitor method that determines
            whether the syntax node can be used by a source generator.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceiverCreator.DefaultReceiver.#ctor(System.Action{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel})">
            <summary>
            Indicates the default syntax context receiver.
            </summary>
            <param name="SyntaxNodeVisitor">
            The syntax node visitor method that determines
            whether the syntax node can be used by a source generator.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.SyntaxContextReceiverCreator.DefaultReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.TypeDetail">
            <summary>
            Encapsulates the type detail.
            </summary>
            <param name="FullTypeName">The full type name.</param>
            <param name="Name">The simple type name.</param>
            <param name="Symbol">The type symbol.</param>
            <param name="Attributes">The attributes of the type.</param>
            <param name="OutParameterDeclaration">
            The string representation of the <see langword="out"/> parameter declaration.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.TypeDetail.#ctor(System.String,System.String,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},System.String)">
            <summary>
            Encapsulates the type detail.
            </summary>
            <param name="FullTypeName">The full type name.</param>
            <param name="Name">The simple type name.</param>
            <param name="Symbol">The type symbol.</param>
            <param name="Attributes">The attributes of the type.</param>
            <param name="OutParameterDeclaration">
            The string representation of the <see langword="out"/> parameter declaration.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.TypeDetail.GetDetailList(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Creates the <see cref="T:Sudoku.Diagnostics.CodeGen.TypeDetail"/> instance via the specified type, and the attribute marks onto
            the type.
            </summary>
            <param name="typeSymbol">The type symbol.</param>
            <param name="attributeSymbol">The type symbol which means the type is an attribute marks onto.</param>
            <returns>The list of <see cref="T:Sudoku.Diagnostics.CodeGen.TypeDetail"/>s.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.TypeDetail.GetDetailList(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates the <see cref="T:Sudoku.Diagnostics.CodeGen.TypeDetail"/> instance via the specified type, and the attribute marks onto
            the type.
            </summary>
            <param name="typeSymbol">The type symbol.</param>
            <param name="attributeSymbol">The type symbol which means the type is an attribute marks onto.</param>
            <param name="handleRecursively">
            Indicates whether the method will handle all nested types recursively.
            </param>
            <returns>The list of <see cref="T:Sudoku.Diagnostics.CodeGen.TypeDetail"/>s.</returns>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.BitOperations">
            <summary>
            Indicates the generator that generates the code about extended methods of type <c>BitOperations</c>.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.LeadingText">
            <summary>
            Indicates the leading text.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.TrailingText">
            <summary>
            Indicates the trailing text.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.GetAllSetsTypes">
            <summary>
            Indicates the type names of the method <c>GetAllSets</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.GetEnumeratorTypes">
            <summary>
            Indicates the type names of the method <c>GetEnumerator</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.GetNextSetTypes">
            <summary>
            Indicates the type names of the method <c>NextSetTypes</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.ReverseBitsTypes">
            <summary>
            Indicates the type names of the method <c>ReverseBits</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.SetAtTypes">
            <summary>
            Indicates the type names of the method <c>SetAt</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperations.SkipSetBitTypes">
            <summary>
            Indicates the type names of the method <c>SkipSetBit</c> to be used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.G_GlobalFile">
            <summary>
            Generates the global file.
            </summary>
            <returns>The string text of the code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.G_GetAllSets(System.String)">
            <summary>
            Generates the file of the method <c>GetAllSets</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.G_GetEnumerator(System.String)">
            <summary>
            Generates the file of the method <c>GetEnumerator</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.G_GetNextSet(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>GetNextSet</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.G_ReverseBits(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>ReverseBits</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.G_SetAt(System.String)">
            <summary>
            Generates the file of the method <c>SetAt</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperations.G_SkipSetBit(System.String)">
            <summary>
            Generates the file of the method <c>SkipSetBit</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CompilationExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.Compilation"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.Compilation"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CompilationExtensions.TypeArgumentMarked``1(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            <para>
            Check all type arguments recursively whether any types are marked specified attribute type.
            </para>
            <para>
            This method will check all type arguments for this type symbol recursively.
            For example, if the type symbol is like this:
            <code><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></code>
            this method will check those parts:
            <list type="bullet">
            <item><c><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></c></item>
            <item><c>string</c></item>
            <item><c><![CDATA[IReadOnlyList<IReadOnlyList<int>>]]></c></item>
            <item><c><![CDATA[IReadOnlyList<int>]]></c></item>
            <item><c>int</c></item>
            </list>
            </para>
            </summary>
            <typeparam name="TAttribute">The type of the attribute to check.</typeparam>
            <param name="this">The compilation.</param>
            <param name="symbol">The symbol to check.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The type symbol contains a argument that is marked <typeparamref name="TAttribute"/>.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>All type arguments aren't marked <typeparamref name="TAttribute"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.IsNotInProject(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String[])">
            <summary>
            To check whether the context isn't executed on the specified projects.
            </summary>
            <param name="this">The context.</param>
            <param name="projectNames">The project names to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <param name="encoding">The encoding.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.CheckAnyTypeArgumentIsMarked``1(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            <para>
            Check all type arguments recursively whether any types are marked specified attribute type.
            </para>
            <para>
            This method will check all type arguments for this type symbol.
            For example, if the type symbol is like this:
            <code><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></code>
            this method will check those parts:
            <list type="bullet">
            <item><c><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></c></item>
            <item><c>string</c></item>
            <item><c><![CDATA[IReadOnlyList<IReadOnlyList<int>>]]></c></item>
            <item><c><![CDATA[IReadOnlyList<int>]]></c></item>
            <item><c>int</c></item>
            </list>
            </para>
            </summary>
            <typeparam name="TAttribute">The type of the attribute to check.</typeparam>
            <param name="symbol">The symbol to check.</param>
            <param name="compilation">The compilation.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The type symbol contains a argument that is marked <typeparamref name="TAttribute"/>.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>All type arguments aren't marked <typeparamref name="TAttribute"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.ToFileName(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get the file name of the type symbol.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The file name. Due to the limited file name and the algorithm, if:
            <list type="bullet">
            <item>
            The character is <c><![CDATA['<']]></c> or <c><![CDATA['>']]></c>:
            Change them to <c>'['</c> and <c>']'</c>.
            </item>
            <item>The character is <c>','</c>: Change it to <c>'_'</c>.</item>
            <item>The character is <c>' '</c>: Remove it.</item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolOutputInfo">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.FromSymbol(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance via the specified <paramref name="symbol"/>,
            and set a <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </summary>
            <param name="symbol">The type symbol.</param>
            <param name="checkNotRefStruct">
            A <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:System.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Check whether the last character is the specified character.
            </summary>
            <param name="this">The string.</param>
            <param name="character">The character to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result</returns>
        </member>
        <member name="M:System.StringExtensions.CountOf(System.String,System.Char)">
            <summary>
            Count how many specified characters are in the current string.
            </summary>
            <param name="this">The current string.</param>
            <param name="character">The character to count.</param>
            <returns>The number of characters found.</returns>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the current string into the camel case.
            </summary>
            <param name="this">The string.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.StringExtensions.GetMemberValues(System.String,System.Int32)">
            <summary>
            Separate the attribute string representation into multiple elements.
            The attribute string will be like <c>Type({value1, value2, value3})</c>.
            </summary>
            <param name="this">The attribute string.</param>
            <param name="tokenStartIndex">The token start index.</param>
            <returns>The array of separated values.</returns>
        </member>
        <member name="M:System.StringExtensions.SplitInfo(System.String)">
            <summary>
            To split the info on the <c>*.csv</c> file line.
            </summary>
            <param name="this">A line of the file.</param>
            <returns>The <see cref="T:System.String"/>[] result.</returns>
            <exception cref="T:System.ArgumentException">Throws when the specified string is invalid to split.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
