<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeGen</name>
    </assembly>
    <members>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.VersionValue">
            <summary>
            Indicates the version of this project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratorAttributesNamespace">
            <summary>
            Indicates the namespace of the generator attributes.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.AutoExtensionDeconstructionAttribute">
            <summary>
            Indicates the attribute name of the auto extension deconstruction.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.EnumSwitchExpressionArmAttribute">
            <summary>
            Indicates the attribute name of the enum switch expression arm.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.EnumSwitchExpressionRootAttribute">
            <summary>
            Indicates the attribute name of the enum switch expression root.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.EnumSwitchExpressionDefaultBehavior">
            <summary>
            Indicates the type name of the enum switch expression default behavior.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator">
            <summary>
            Defines a source generator that generates deconstruction methods of a type.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.ExpressionPattern">
            <summary>
            Defines the pattern that matches for an expression.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.GatherAssemblyAttributes(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IAssemblySymbol,System.Collections.Generic.ICollection{System.ValueTuple{Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData}})">
            <summary>
            Get for assembly-targeted attributes on generation.
            </summary>
            <param name="attributeTypeSymbol">The attribute type symbol.</param>
            <param name="assembly">The assembly symbol.</param>
            <param name="collection">The target collection to store the results.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.GetForExtension(Microsoft.CodeAnalysis.AttributeData[],System.String,System.String,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the raw code parts for extension deconstruction methods via the specified list of attributes data.
            </summary>
            <param name="attributesData">The attributes data, with the corresponding location.</param>
            <param name="genericParameterListWithoutConstraint">The generic parameter list.</param>
            <param name="fullTypeNameWithoutConstraint">The full type name, without the generic constraint.</param>
            <param name="type">The current emit type.</param>
            <returns>The collection of raw code parts for extension deconstruction methods.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator">
            <summary>
            Indicates the generator that generates the code about extended methods of type <c>BitOperations</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.LeadingText">
            <summary>
            Indicates the leading text.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.GenerateSource(Microsoft.CodeAnalysis.SourceProductionContext,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Try to generate source.
            </summary>
            <param name="spc">The <see cref="T:Microsoft.CodeAnalysis.SourceProductionContext"/> instance that can generate files.</param>
            <param name="compilation">
            The compilation to check whether the current compilation should generate the files.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.G_GlobalFile">
            <summary>
            Generates the global file.
            </summary>
            <returns>The string text of the code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.G_GetAllSets(System.String)">
            <summary>
            Generates the file of the method <c>GetAllSets</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.G_GetEnumerator(System.String)">
            <summary>
            Generates the file of the method <c>GetEnumerator</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.G_GetNextSet(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>GetNextSet</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.G_ReverseBits(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>ReverseBits</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.G_SetAt(System.String)">
            <summary>
            Generates the file of the method <c>SetAt</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperationsGenerator.G_SkipSetBit(System.String)">
            <summary>
            Generates the file of the method <c>SkipSetBit</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.EnumSwitchExpressionGenerator">
            <summary>
            Defines a source generator that generates the method and the corresponding values,
            forming a <see langword="switch"/> expression.
            </summary>
            <remarks>This source generator does not support generic types.</remarks>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.EnumSwitchExpressionGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.EnumSwitchExpressionGenerator.GenerateSource(Microsoft.CodeAnalysis.SourceProductionContext,System.Collections.Immutable.ImmutableArray{System.Nullable{System.ValueTuple{Microsoft.CodeAnalysis.INamedTypeSymbol,System.ValueTuple{Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,Microsoft.CodeAnalysis.AttributeData,System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.AttributeData}}}[]}}})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AttributeDataComparer">
            <summary>
            Represents a comparer instance that compares two <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instances
            via their own first arguments.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AttributeDataComparer.Equals(Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.AttributeData)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AttributeDataComparer.GetHashCode(Microsoft.CodeAnalysis.AttributeData)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.GeneratorAttributesGenerator">
            <summary>
            Defines a source generator that produces generator-related attributes.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.GeneratorAttributesGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.LogicalSolverOperationsGenerator">
            <summary>
            Defines a source generator that generates the source code that are options used in logical solver type.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.LogicalSolverOperationsGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.StepSearcherOptionsGenerator">
            <summary>
            Defines a source generator that generates the source code for the searcher options
            on a step searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.StepSearcherOptionsGenerator.EnabledAreaPropertyName">
            <summary>
            Indicates the property name of <c>EnabledArea</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.StepSearcherOptionsGenerator.DisabledReasonPropertyName">
            <summary>
            Indicates the property name of <c>DisabledReason</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.StepSearcherOptionsGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData">
            <summary>
            Simply encapsulates a data tuple describing the information of a found attribute.
            </summary>
            <param name="Namespace">Indicates the namespace symbol of that step searcher.</param>
            <param name="PriorityValue">The priority value of the step searcher.</param>
            <param name="DifficultyLevel">The difficulty level of the step searcher.</param>
            <param name="TypeName">The name of the step searcher type.</param>
            <param name="DocCommentInterfaceTypeName">
            The name of the interface type that is used for displaying for the doc comment.
            </param>
            <param name="NamedArguments">The named arguments of that attribute.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData.#ctor(Microsoft.CodeAnalysis.INamespaceSymbol,System.Int32,System.Byte,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.TypedConstant}})">
            <summary>
            Simply encapsulates a data tuple describing the information of a found attribute.
            </summary>
            <param name="Namespace">Indicates the namespace symbol of that step searcher.</param>
            <param name="PriorityValue">The priority value of the step searcher.</param>
            <param name="DifficultyLevel">The difficulty level of the step searcher.</param>
            <param name="TypeName">The name of the step searcher type.</param>
            <param name="DocCommentInterfaceTypeName">
            The name of the interface type that is used for displaying for the doc comment.
            </param>
            <param name="NamedArguments">The named arguments of that attribute.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData.Namespace">
            <summary>Indicates the namespace symbol of that step searcher.</summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData.PriorityValue">
            <summary>The priority value of the step searcher.</summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData.DifficultyLevel">
            <summary>The difficulty level of the step searcher.</summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData.TypeName">
            <summary>The name of the step searcher type.</summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData.DocCommentInterfaceTypeName">
            <summary>
            The name of the interface type that is used for displaying for the doc comment.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.FoundAttributeData.NamedArguments">
            <summary>The named arguments of that attribute.</summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Projects">
            <summary>
            Defines a list of project names to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Projects.System">
            <summary>
            Indicates the system extensions project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Projects.SudokuCore">
            <summary>
            Indicates the sudoku core project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Projects.SolvingLogical">
            <summary>
            Indicates the solving logical project.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Shortcuts">
            <summary>
            Defines the shortcuts of the source generators.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtendedSymbolDisplayFormat">
            <summary>
            Provides extended <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat"/>s instance that is for types.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtendedSymbolDisplayFormat.FullyQualifiedFormatWithConstraints">
            <summary>
            Indicates the type format that is the full name of the type,
            and is with type argument constraints.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AttributeDataExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Microsoft.CodeAnalysis.AttributeData"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.AttributeData"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AttributeDataExtensions.GetNamedArgument``1(Microsoft.CodeAnalysis.AttributeData,System.String,``0)">
            <summary>
            Try to get the named arguments in the specified attribute data.
            </summary>
            <typeparam name="T">The type of the named argument.</typeparam>
            <param name="this">The attribute data instance.</param>
            <param name="namedArgumentName">The named argument name.</param>
            <param name="defaultValue">Indicates the default value of the current named argument.</param>
            <returns>The found value.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>.
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetAllMembers(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets all possible members in a type, even including its base type members.
            </summary>
            <param name="this">The type symbol.</param>
            <returns>All members.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.ToFileName(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get the file name of the type symbol.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The file name. Due to the limited file name and the algorithm, if:
            <list type="bullet">
            <item>
            The character is <c><![CDATA['<']]></c> or <c><![CDATA['>']]></c>:
            Change them to <c>'['</c> and <c>']'</c>.
            </item>
            <item>The character is <c>','</c>: Change it to <c>'_'</c>.</item>
            <item>The character is <c>' '</c>: Remove it.</item>
            </list>
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetTypeKindModifier(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the type kind modifier for a symbol.
            </summary>
            <param name="this">The named type symbol.</param>
            <returns>The string as the representation of the type kind modifier.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the current named type symbol holds an invalid case that doesn't contain
            any possible type kind modifier.
            </exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamespaceSymbolExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamespaceSymbolExtensions.GetAllNestedTypes(Microsoft.CodeAnalysis.INamespaceSymbol)">
            <summary>
            Try to fetch all possible types that is from the specified namespace and its children namespaces.
            </summary>
            <param name="this">The namespace.</param>
            <returns>All found types.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ISymbolExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ISymbolExtensions.ContainsAttribute``1(``0,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance has marked the specified attribute type.
            </summary>
            <typeparam name="TSymbol">The type of the symbol.</typeparam>
            <param name="this">The instance.</param>
            <param name="attributeType">The attribute type.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.StringExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the specified string value as the camel-casing.
            </summary>
            <param name="this">The string.</param>
            <returns>The converted string value.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolOutputInfo">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record"/></item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record"/></item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.TypeName">
            <summary>The type name of the type symbol.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.FullTypeName">
            <summary>The full type name of the type symbol.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.NamespaceName">
            <summary>The namespace name that the type symbol belongs to.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.GenericParameterList">
            <summary>
            The generic parameter list if the type symbol contains the type parameters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.GenericParameterListWithoutConstraint">
            <summary>
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.TypeKind">
            <summary>
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record"/></item>
            <item><see langword="record struct"/></item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.ReadOnlyKeyword">
            <summary>
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.InKeyword">
            <summary>
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.NullableAnnotation">
            <summary>
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SymbolOutputInfo.IsGeneric">
            <summary>A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.FromSymbol(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance via the specified <paramref name="symbol"/>,
            and set a <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </summary>
            <param name="symbol">The type symbol.</param>
            <param name="checkNotRefStruct">
            A <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance.</returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            The method to replace with <see langword="foreach"/> loop.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The collection to iterate.</param>
            <param name="action">The action that is executed while iterating.</param>
        </member>
        <member name="T:System.Collections.Generic.KeyValuePairExtensions">
            <summary>
            Provides with the extension methods on type <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePairExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct the instance of type <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into two values:
            <list type="table">
            <item>
            <term><see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/></term>
            <description>The key.</description>
            </item>
            <item>
            <term><see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/></term>
            <description>The value.</description>
            </item>
            </list>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:System.Index">
            <summary>
            Represent a type can be used to index a collection either from the start or the end.
            </summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>
            Construct an Index using a value and indicating if the index is from the start or from the end.
            </summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element
            and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Declare this to get init properties.
            </summary>
            <remarks>
            Please see
            <see href="https://github.com/dotnet/roslyn/issues/45510#issuecomment-694977239">this link</see>
            to learn more details about this type.
            </remarks>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
    </members>
</doc>
