<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeGen</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator">
            <summary>
            Defines a source generator that generates deconstruction methods of a type.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.ExpressionPattern">
            <summary>
            Defines the pattern that matches for an expression.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.GatherAssemblyAttributes(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IAssemblySymbol,System.Collections.Generic.ICollection{System.ValueTuple{Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData}})">
            <summary>
            Get for assembly-targeted attributes on generation.
            </summary>
            <param name="attributeTypeSymbol">The attribute type symbol.</param>
            <param name="assembly">The assembly symbol.</param>
            <param name="collection">The target collection to store the results.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstructionGenerator.GetForExtension(Microsoft.CodeAnalysis.AttributeData[],System.String,System.String,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the raw code parts for extension deconstruction methods via the specified list of attributes data.
            </summary>
            <param name="attributesData">The attributes data, with the corresponding location.</param>
            <param name="genericParameterListWithoutConstraint">The generic parameter list.</param>
            <param name="fullTypeNameWithoutConstraint">The full type name, without the generic constraint.</param>
            <param name="type">The current emit type.</param>
            <returns>The collection of raw code parts for extension deconstruction methods.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.EnumSwitchExpressionGenerator">
            <summary>
            Defines a source generator that generates the method and the corresponding values, forming a <see langword="switch"/> expression.
            </summary>
            <remarks>This source generator does not support generic types.</remarks>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.EnumSwitchExpressionGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AttributeDataComparer">
            <summary>
            Represents a comparer instance that compares two <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instances
            via their own first arguments.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AttributeDataComparer.Equals(Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.AttributeData)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AttributeDataComparer.GetHashCode(Microsoft.CodeAnalysis.AttributeData)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.GeneratedDeconstructionGenerator">
            <summary>
            Defines a source generator that generates the source code for deconstruction methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.GeneratedDeconstructionGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.GeneratedDeconstructionGenerator.OutputAction(Microsoft.CodeAnalysis.SourceProductionContext,System.Collections.Immutable.ImmutableArray{System.Nullable{System.ValueTuple{Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol},Microsoft.CodeAnalysis.SyntaxTokenList}}})">
            <summary>
            Output action.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.GeneratedDeconstructionGenerator.NodePredicate(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Node predicate.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.GeneratedDeconstructionGenerator.StandardizeIdentifierName(System.String)">
            <summary>
            To standardize the identifier name, converting it into <c>PascalCase</c>.
            </summary>
            <param name="name">The identifier name.</param>
            <returns>The converted name. The return value must be <c>PascalCase</c>.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.GeneratedDeconstructionGenerator.Transform(Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext,System.Threading.CancellationToken)">
            <summary>
            The transforming method.
            </summary>
        </member>
        <member name="F:CodeGen.Constants.VersionValue">
            <summary>
            Indicates the version of this project.
            </summary>
        </member>
    </members>
</doc>
