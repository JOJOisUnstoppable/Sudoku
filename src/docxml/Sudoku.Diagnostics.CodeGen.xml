<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics.CodeGen</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructAttribute">
            <summary>
            Indicates an attribute that is used for a <see langword="class"/> or <see langword="struct"/>
            as a mark that interacts with the source generator, to tell the source generator that
            it'll generate the source code for deconstruction methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified member list.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructAttribute.FieldOrPropertyList">
            <summary>
            All members to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1">
            <summary>
            Used on an assembly, to tell the compiler this assembly will generate a serial of extension methods called
            <c>Deconstruct</c> that used for deconstruction of an instance.
            </summary>
            <typeparam name="T">
            The type that is the aim for the source generator to generate the extension deconstruction methods.
            </typeparam>
            <remarks>
            <para>
            For example, if you write the code like:
            <code><![CDATA[[assembly: AutoDeconstructExtension<Class>(nameof(Class.A), nameof(Class.B), nameof(Class.C))]]]></code>
            then you'll get the generated code:
            <code><![CDATA[
            public static partial class ClassExtensions
            {
                [CompilerGenerated, MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static void Deconstruct(this Class @this, out int a, out int b, out int c)
                {
                    a = @this.A;
                    b = @this.B;
                    c = @this.C;
                }
            }
            ]]></code>
            </para>
            <para>
            Please note that this attribute is a generic attribute, which is introduced in C# 10.
            If you don't know this feature (generic attribute), please visit
            <see href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/generic-attributes.md">
            this link
            </see>
            for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1.#ctor(System.String[])">
            <summary>
            Initializes an <see cref="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructAttribute"/> instance with the members.
            </summary>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1.Namespace">
            <summary>
            Indicates the namespace that the output extension class stored. If the value is
            <see langword="null"/>, the namespace will use the basic namespace of the type itself.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionAttribute`1.MemberNames">
            <summary>
            Indicates the member names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2">
            <summary>
            Mark this attribute onto a type, to tell the source generator that the source generator will
            generates the extension deconstruction methods, with expressions.
            </summary>
            <typeparam name="T">
            The type of the element as the type of the generated code for the deconstruction methods.
            </typeparam>
            <typeparam name="TProvider">
            The type of the provider class that provides the extension methods for the argument provider
            of extension deconstruction methods.
            </typeparam>
            <remarks>
            <para>
            For example, if you write the code like:
            <code><![CDATA[
            [assembly: AutoDeconstructExtensionLambda<Class, Provider>(nameof(Class.A), nameof(Class.B), $".{nameof(Provider.C)}")]
            ]]></code>
            (Real arguments are <c>"A"</c>, <c>"B"</c> and <c>".C"</c>.)
            </para>
            <para>
            We suppose that the value <c>.C</c> is an expression that is defined by ours:
            <code><![CDATA[
            [PrivatizeParameterlessConstructor]
            internal sealed partial class Provider
            {
            	[LambdaBody]
                internal static int C(Class instance) => instance.A + instance.B;
            }
            ]]></code>
            then you'll get the generated code:
            <code><![CDATA[
            public static partial class ClassExtensions
            {
                [CompilerGenerated, MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static void Deconstruct(this Class @this, out int a, out int b, out int c)
                {
                    a = @this.A;
                    b = @this.B;
                    c = Provider.C(@this); // Translated into '@this.A + @this.B' here.
                }
            }
            ]]></code>
            </para>
            <para>
            Please note that this attribute is a generic attribute, which is introduced in C# 10.
            If you don't know this feature (generic attribute), please visit
            <see href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/generic-attributes.md">
            this link
            </see>
            for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2.#ctor(System.String[])">
            <summary>
            Initializes an <see cref="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute"/> instance via the member names.
            </summary>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2.Namespace">
            <summary>
            Indicates the namespace that the output extension class stored. If the value is
            <see langword="null"/>, the namespace will use the basic namespace of the type itself.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructExtensionLambdaAttribute`2.MemberNames">
            <summary>
            Indicates the member names to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute">
            <summary>
            Mark this attribute onto a type, to tell the source generator that the source generator will
            generates the deconstruction methods, with expressions.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute.#ctor(System.String[])">
            <summary>
            Initializes an <see cref="T:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute"/> instance via the member names.
            </summary>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoDeconstructLambdaAttribute.MemberNames">
            <summary>
            Indicates the member names to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoEqualityAttribute">
            <summary>
            Indicates an attribute that is used for a <see langword="class"/> or <see langword="struct"/>
            as a mark that interacts with the source generator, to tell the source generator that
            it'll generate the source code for equality methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoEqualityAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified members.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoEqualityAttribute.FieldOrPropertyList">
            <summary>
            Indicates the field of property list.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoFormattableAttribute">
            <summary>
            Indicates an attribute that is used for a <see langword="class"/> or <see langword="struct"/>
            as a mark that interacts with the source generator, to tell the source generator that
            it'll generate the source code for <c>ToString</c> overriden,
            and being with <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute">
            <summary>
            To mark on a type, to tell the compiler that the compiler will automatically generate
            <c>GetEnumerator</c> methods for that type.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified member name.
            </summary>
            <param name="memberName">
            The member name. If you want to pass "this" as the reference, just input "<c>@</c>".
            </param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.MemberName">
            <summary>
            Indicates the member name.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.MemberConversion">
            <summary>
            Indicates the member conversion that is used for creation of the enumerator.
            </summary>
            <remarks>
            <para>
            This property should be stored a lambda body. One of possible syntaxes is:
            <code><![CDATA[[AutoGetEnumerator(nameof(MemberName), "((IEnumerable<int>)@).*")]]]></code>
            Where:
            <list type="table">
            <item>
            <term>'<c>@</c>'</term>
            <description>Equivalent to the member.</description>
            </item>
            <item>
            <term>'<c>*</c>'</term>
            <description>Equivalent to the code <c>GetEnumerator()</c>.</description>
            </item>
            </list>
            </para>
            <para>
            The default conversion is "<c>@</c>".
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.ExtraNamespaces">
            <summary>
            Indicates the extra namespace should be imported.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetEnumeratorAttribute.ReturnType">
            <summary>
            Indicates the return type. If <see langword="null"/>, the source generator will uses
            <see cref="T:System.Collections.IEnumerable"/>&lt;<see cref="T:System.Int32"/>&gt; as the return type to generate the code.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoGetHashCodeAttribute">
            <summary>
            Indicates an attribute that is used for a <see langword="class"/> or <see langword="struct"/>
            as a mark that interacts with the source generator, to tell the source generator that
            it'll generate the source code for <c>GetHashCode</c> overriden.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.AutoGetHashCodeAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified member list.
            </summary>
            <param name="dataMembers">The data members.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoGetHashCodeAttribute.DataMembers">
            <summary>
            All members to generate.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.AutoPrimaryConstructorAttribute">
            <summary>
            Indicates the marked <see langword="class"/> should generate primary constructor automatically.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoPrimaryConstructorAttribute.Accessibility">
            <summary>
            <para>Indicates the custom accessibility.</para>
            <para>The default value is <see cref="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.Public"/>.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoPrimaryConstructorAttribute.IncludedMemberNames">
            <summary>
            Indicates the included member names.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.AutoPrimaryConstructorAttribute.ExcludedMemberNames">
            <summary>
            Indicates the excluded member names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.LambdaBodyAttribute">
            <summary>
            Indicates the method is provided as a lambda conversion that is used by source generators.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.PrivatizeParameterlessConstructorAttribute">
            <summary>
            Marks onto a <see langword="class"/> type, to tell the source generator the type should contain
            a <see langword="private"/> parameterless constructor that can't be accessed out of its type field.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.ProxyEqualityAttribute">
            <summary>
            Indicates an attribute instance which is marked on a method,
            to tell the users and the compiler that this method is an equality
            method to judge whether two instances contain the same value.
            </summary>
            <remarks>
            Because of the limitation of the algorithm and the source generator, the method marked this
            attribute must be <see langword="static"/>. If you marks on a method
            that isn't a <see langword="static"/> method, the source generator will do nothing.
            </remarks>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants">
            <summary>
            Defines the constants used in this project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.KeywordsToBclNames">
            <summary>
            Indicates the collection that stores the conversion relations from type keywords to their BCL names.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats">
            <summary>
            Provides <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat"/> instance that is for types.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats.FullNameWithConstraints">
            <summary>
            Indicates the type format that is the full name of the type,
            and is with type argument constraints.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.TypeFormats.FullName">
            <summary>
            Indicates the type format that is the full name of the type,
            and is without type argument constraints.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts">
            <summary>
            Indicates the shortcuts for the generated files.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.GetHashCode">
            <summary>
            Indicates the source generator is for get hash code.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_GetAllSets">
            <summary>
            Indicates the source generator is for bit operations get all sets.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_GetEnumerator">
            <summary>
            Indicates the source generator is for bit operations get enumerator.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_GetNextSet">
            <summary>
            Indicates the source generator is for bit operations get next set.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_ReverseBits">
            <summary>
            Indicates the source generator is for bit operations reverse bits.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_SetAt">
            <summary>
            Indicates the source generator is for bit operations set at.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.BitOperations_SkipSetBit">
            <summary>
            Indicates the source generator is for bit operations skip set bit.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.CodeAnalyzer">
            <summary>
            Indicates the source generator is for code analyzer.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.CodeFixer">
            <summary>
            Indicates the source generator is for code fixer.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.CoreConstants">
            <summary>
            Indicates the source generator is for core constants.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.DeconstructionMethod">
            <summary>
            Indicates the source generator is for deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.EqualsMethod">
            <summary>
            Indicates the source generator is for equals methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.ExtensionDeconstructionMethod">
            <summary>
            Indicates the source generator is for extension deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.FormattedMethods">
            <summary>
            Indicates the source generator is for auto format methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.GetEnumeratorMethod">
            <summary>
            Indicates the source generator is for auto get enumerator methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.PrimaryConstructorMethod">
            <summary>
            Indicates the source generator is for primary constructors for <see langword="class"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.ProxyEqualsMethod">
            <summary>
            Indicates the source generator is for auto equals method that binds with a proxy equality method.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.RefStructDefaultMethod">
            <summary>
            Indicates the source generator is for <see langword="ref struct"/> default overriden methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.LambdaedDeconstructionMethod">
            <summary>
            Indicates the source generator is for deconstruction methods with expressions.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.LambdaedExtensionDeconstructionMethod">
            <summary>
            Indicates the source generator is for extension deconstruction methods with expressions.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.GeneratedFileShortcuts.PrivateParameterlessConstructor">
            <summary>
            Indicates the source generator is for parameterless constructors.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.OperatorNames">
            <summary>
            Indicates the operator names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.OperatorNames.Equality">
            <summary>
            Indicates the name of the <see langword="operator"/> <c>==</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.OperatorNames.Inequality">
            <summary>
            Indicates the name of the <see langword="operator"/> <c>!=</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames">
            <summary>
            Indicates the project names.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.SystemExtensions">
            <summary>
            Indicates the project <c>SystemExtensions</c>.
            The project uses the namespace <c>System</c> to store types.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.Core">
            <summary>
            Indicates the project <c>Sudouk.Core</c>.
            The project uses the namespace <c>Sudoku</c> to store types.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.CodeAnalysis">
            <summary>
            Indicates the project <c>Sudoku.Diagnostics.CodeAnalysis</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.ProjectNames.Solving">
            <summary>
            Indicates the project <c>Sudoku.Solving</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Constants.VersionValue">
            <summary>
            Indictaes the version of this project.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.DefaultSyntaxContextReceiver">
            <summary>
            Indicates the default syntax context receiver.
            </summary>
            <param name="SyntaxNodeVisitor">
            The syntax node visitor method that determines
            whether the syntax node can be used by a source generator.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.DefaultSyntaxContextReceiver.#ctor(System.Action{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel})">
            <summary>
            Indicates the default syntax context receiver.
            </summary>
            <param name="SyntaxNodeVisitor">
            The syntax node visitor method that determines
            whether the syntax node can be used by a source generator.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.DefaultSyntaxContextReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct">
            <summary>
            Defines a source generator that generates the source code for deconstruction methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoDeconstruct.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality">
            <summary>
            Defines a source generator that generates the source code
            for equality methods and the equality operator overloading.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoEquality.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoExtensionDeconstruct">
            <summary>
            Provides a generator that generates the deconstruction methods that are extension methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoExtensionDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoExtensionDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoFormattable">
            <summary>
            Defines a source generator that generates the source code for formatting methods.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoFormattable.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoFormattable.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoFormattable.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoFormattable.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoFormattable.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoFormattable.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator">
            <summary>
            Defines the source generator that generates the source code for <c>GetEnumerator</c> methods.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Replacements">
            <summary>
            All possible replacements.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetEnumerator.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode">
            <summary>
            Defines a source generator that generates the source code for getting hash code.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoGetHashCode.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct">
            <summary>
            Defines a source generator that generates the deconstruction methods with expressions.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedDeconstruct.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedExtensionDeconstruct">
            <summary>
            Provides a source generator that generates the source code for extension deconstruction methods
            with expressions.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedExtensionDeconstruct.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoLambdaedExtensionDeconstruct.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoPrimaryConstructor">
            <summary>
            Defines a source generator that generates the source code for primary constructors.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoPrimaryConstructor.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoPrimaryConstructor.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.AutoPrimaryConstructor.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoPrimaryConstructor.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.AutoPrimaryConstructor.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.AutoPrimaryConstructor.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.BitOperations">
            <summary>
            Indicates the generator that generates the code about extended methods of type <c>BitOperations</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.LeadingText">
            <summary>
            Indicates the leading text.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.TrailingText">
            <summary>
            Indicates the trailing text.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.GetAllSetsTypes">
            <summary>
            Indicates the type names of the method <c>GetAllSets</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.GetEnumeratorTypes">
            <summary>
            Indicates the type names of the method <c>GetEnumerator</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.GetNextSetTypes">
            <summary>
            Indicates the type names of the method <c>NextSetTypes</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.ReverseBitsTypes">
            <summary>
            Indicates the type names of the method <c>ReverseBits</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.SetAtTypes">
            <summary>
            Indicates the type names of the method <c>SetAt</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.SkipSetBitTypes">
            <summary>
            Indicates the type names of the method <c>SkipSetBit</c> to be used.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.G_GlobalFile">
            <summary>
            Generates the global file.
            </summary>
            <returns>The string text of the code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.G_GetAllSets(System.String)">
            <summary>
            Generates the file of the method <c>GetAllSets</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.G_GetEnumerator(System.String)">
            <summary>
            Generates the file of the method <c>GetEnumerator</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.G_GetNextSet(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>GetNextSet</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.G_ReverseBits(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>ReverseBits</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.G_SetAt(System.String)">
            <summary>
            Generates the file of the method <c>SetAt</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.BitOperations.G_SkipSetBit(System.String)">
            <summary>
            Generates the file of the method <c>SkipSetBit</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.PrivatizeParameterlessConstructor">
            <summary>
            Provides a source generator that automatically generates the source code for disability of the
            usage of the parameterless constructor outside the type range.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.PrivatizeParameterlessConstructor.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.PrivatizeParameterlessConstructor.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.PrivatizeParameterlessConstructor.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.PrivatizeParameterlessConstructor.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.PrivatizeParameterlessConstructor.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.PrivatizeParameterlessConstructor.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod">
            <summary>
            Indicates a generator that generates the code about the equality method.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod.Receiver._processedList">
            <summary>
            Indicates the processed list that records the type symbols had been handled,
            which is used for removing duplicate cases.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.ProxyEqualsMethod.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens">
            <summary>
            Indicates the generator that generates the default overriden methods in a <see langword="ref struct"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver.#ctor(System.Threading.CancellationToken)">
            <summary>
            Defines a syntax context receiver.
            </summary>
            <param name="CancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver.Collection">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.Generators.RefStructOverridens.Receiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.IResultCollectionReceiver`1">
            <summary>
            Defines a result collection receiver.
            </summary>
            <typeparam name="T">The type of each result value.</typeparam>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeGen.IResultCollectionReceiver`1.Collection">
            <summary>
            Indicates the result collection.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.MemberDetail">
            <summary>
            Encapsulates the member detail.
            </summary>
            <param name="MemberSymbol">The member symbol.</param>
            <param name="TypeSymbol">The type symbol.</param>
            <param name="FullTypeName">The full type name.</param>
            <param name="Name">The simple type name.</param>
            <param name="Attributes">The attributes of the type.</param>
            <param name="OutParameterDeclaration">
            The string representation of the <see langword="out"/> parameter declaration.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.MemberDetail.#ctor(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},System.String)">
            <summary>
            Encapsulates the member detail.
            </summary>
            <param name="MemberSymbol">The member symbol.</param>
            <param name="TypeSymbol">The type symbol.</param>
            <param name="FullTypeName">The full type name.</param>
            <param name="Name">The simple type name.</param>
            <param name="Attributes">The attributes of the type.</param>
            <param name="OutParameterDeclaration">
            The string representation of the <see langword="out"/> parameter declaration.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.MemberDetail.GetDetailList(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Creates the <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/> instance via the specified type, and the attribute marks onto
            the type.
            </summary>
            <param name="typeSymbol">The type symbol.</param>
            <param name="attributeSymbol">The type symbol which means the type is an attribute marks onto.</param>
            <returns>The list of <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/>s.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeGen.MemberDetail.GetDetailList(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates the <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/> instance via the specified type, and the attribute marks onto
            the type.
            </summary>
            <param name="typeSymbol">The type symbol.</param>
            <param name="attributeSymbol">The type symbol which means the type is an attribute marks onto.</param>
            <param name="handleRecursively">
            Indicates whether the method will handle all nested types recursively.
            </param>
            <returns>The list of <see cref="T:Sudoku.Diagnostics.CodeGen.MemberDetail"/>s.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility">
            <summary>
            Indicates the accessibility of a member.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.None">
            <summary>
            Indicates the accessibility is none.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.Public">
            <summary>
            Indicates the <see langword="public"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.Internal">
            <summary>
            Indicates the <see langword="internal"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.Protected">
            <summary>
            Indicates the <see langword="protected"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.ProtectedInternal">
            <summary>
            Indicates the <see langword="protected internal"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.Private">
            <summary>
            Indicates the <see langword="private"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeGen.Reflection.MemberAccessibility.PrivateProtected">
            <summary>
            Indicates the <see langword="private protected"/> modifier.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.PrivatizeParameterlessConstructorGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.PrivatizeParameterlessConstructorGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.PrivatizeParameterlessConstructorGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AttributeDataExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.AttributeData"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.AttributeData"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AttributeDataExtensions.TryGetNamedArgument(Microsoft.CodeAnalysis.AttributeData,System.String,Microsoft.CodeAnalysis.TypedConstant@)">
            <summary>
            Try to get the named argument using the specified name.
            </summary>
            <param name="this">The attribute data instance.</param>
            <param name="namedArg">The named argument name.</param>
            <param name="result">The result got.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether the operation is successful.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CompilationExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.Compilation"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.Compilation"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CompilationExtensions.TypeArgumentMarked``1(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            <para>
            Check all type arguments recursively whether any types are marked specified attribute type.
            </para>
            <para>
            This method will check all type arguments for this type symbol recursively.
            For example, if the type symbol is like this:
            <code><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></code>
            this method will check those parts:
            <list type="bullet">
            <item><c><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></c></item>
            <item><c>string</c></item>
            <item><c><![CDATA[IReadOnlyList<IReadOnlyList<int>>]]></c></item>
            <item><c><![CDATA[IReadOnlyList<int>]]></c></item>
            <item><c>int</c></item>
            </list>
            </para>
            </summary>
            <typeparam name="TAttribute">The type of the attribute to check.</typeparam>
            <param name="this">The compilation.</param>
            <param name="symbol">The symbol to check.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The type symbol contains a argument that is marked <typeparamref name="TAttribute"/>.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>All type arguments aren't marked <typeparamref name="TAttribute"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.IsNotInProject(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String[])">
            <summary>
            To check whether the context isn't executed on the specified projects.
            </summary>
            <param name="this">The context.</param>
            <param name="projectNames">The project names to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <param name="encoding">The encoding.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.CheckAnyTypeArgumentIsMarked``1(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            <para>
            Check all type arguments recursively whether any types are marked specified attribute type.
            </para>
            <para>
            This method will check all type arguments for this type symbol.
            For example, if the type symbol is like this:
            <code><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></code>
            this method will check those parts:
            <list type="bullet">
            <item><c><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></c></item>
            <item><c>string</c></item>
            <item><c><![CDATA[IReadOnlyList<IReadOnlyList<int>>]]></c></item>
            <item><c><![CDATA[IReadOnlyList<int>]]></c></item>
            <item><c>int</c></item>
            </list>
            </para>
            </summary>
            <typeparam name="TAttribute">The type of the attribute to check.</typeparam>
            <param name="symbol">The symbol to check.</param>
            <param name="compilation">The compilation.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The type symbol contains a argument that is marked <typeparamref name="TAttribute"/>.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>All type arguments aren't marked <typeparamref name="TAttribute"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.ToFileName(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get the file name of the type symbol.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The file name. Due to the limited file name and the algorithm, if:
            <list type="bullet">
            <item>
            The character is <c><![CDATA['<']]></c> or <c><![CDATA['>']]></c>:
            Change them to <c>'['</c> and <c>']'</c>.
            </item>
            <item>The character is <c>','</c>: Change it to <c>'_'</c>.</item>
            <item>The character is <c>' '</c>: Remove it.</item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.IPropertySymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/>.
            </summary>
            <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IPropertySymbolExtensions.IsAutoImplemented(Microsoft.CodeAnalysis.IPropertySymbol)">
            <summary>
            <para>
            Checks whether the property member that specified as an <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/> instance
            is an auto-implemented property.
            </para>
            <para>
            An <b>auto-implemented property</b> is a property that only contains the keyword <see langword="get"/>,
            <see langword="set"/> or <see langword="init"/> as the body,
            e.g. <c>public int Property { get; set; }</c>.
            </para>
            </summary>
            <param name="this">The property symbol to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ISymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ISymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ISymbolExtensions.HasInitializer(Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            To determine whether the specified symbol (should be property or field members)
            has an initializer.
            </summary>
            <param name="this">The symbol to check.</param>
            <param name="cancellationToken">The cancellation token used for cancelling the operation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ISymbolExtensions.GetMemberType(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the member type string representation.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The result string that is the string representation of the type gotten.
            <list type="table">
            <listheader>
            <term>Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IFieldSymbol.Type"/> will be returned.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IPropertySymbol.Type"/> will be returned.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnType"/> will be returned.</description>
            </item>
            <item>
            <term><see cref="T:Microsoft.CodeAnalysis.IEventSymbol"/></term>
            <description>The property <see cref="P:Microsoft.CodeAnalysis.IEventSymbol.Type"/> will be returned.</description>
            </item>
            <item>
            <term>Other cases</term>
            <description>Constant value <see langword="null"/> will be returned.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ITypeSymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ITypeSymbolExtensions.GetAllMembers(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Get all members that belongs to the type and its base types
            (but interfaces checks the property <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>).
            </summary>
            <param name="this">The symbol.</param>
            <returns>All members.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolOutputInfo">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides the basic information used for output a source code via an <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="TypeName">The type name of the type symbol.</param>
            <param name="FullTypeName">The full type name of the type symbol.</param>
            <param name="NamespaceName">The namespace name that the type symbol belongs to.</param>
            <param name="GenericParameterList">
            The generic parameter list if the type symbol contains the type parameters.
            </param>
            <param name="GenericParameterListWithoutConstraint">
            The generic parameter list without the constraints if the type symbol contains the type parameters.
            </param>
            <param name="TypeKind">
            The type kind of the type symbol. All possible type kinds are:
            <list type="bullet">
            <item><see langword="class"/></item>
            <item><see langword="struct"/></item>
            <item><see langword="record class"/> (Denotes as a keyword <c>record</c>)</item>
            <item><see langword="record struct"/></item>
            </list>
            </param>
            <param name="ReadOnlyKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="readonly"/>) onto the members to implement.
            </param>
            <param name="InKeyword">
            Indicates whether the type symbol is a <see langword="struct"/>. If so, this property will keep the value
            as a modifier (i.e. keyword <see langword="in"/>) onto the parameters in methods.
            </param>
            <param name="NullableAnnotation">
            Indicates whether the type symbol is a <see langword="class"/>. If so, this property will keep the value
            as a nullable annotation <c>?</c> onto the parameter types.
            </param>
            <param name="IsGeneric">A <see cref="T:System.Boolean"/> value indicating whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolOutputInfo.FromSymbol(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance via the specified <paramref name="symbol"/>,
            and set a <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </summary>
            <param name="symbol">The type symbol.</param>
            <param name="checkNotRefStruct">
            A <see cref="T:System.Boolean"/> value indicating whether the method will check whether the type
            is a <see langword="ref struct"/>.
            </param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.SymbolOutputInfo"/> instance.</returns>
        </member>
        <member name="T:System.Collections.Immutable.ImmutableArrayExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>
            </summary>
            <seealso cref="T:System.Collections.Immutable.ImmutableArray`1"/>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.NullableMatches(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}@,Microsoft.CodeAnalysis.NullableAnnotation[])">
            <summary>
            Matches the array of <see cref="T:Microsoft.CodeAnalysis.IParameterSymbol"/> instances, to check whether the
            types matches the nullable annotation list.
            </summary>
            <param name="this">The array of parameter symbols.</param>
            <param name="nullableAnnotations">The nullable annotation list to check.</param>
            <returns>
            Returns <see langword="true"/> when all parameters matches the corresponding nullable annotation;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws when the current length isn't equal to <paramref name="nullableAnnotations"/>.Length.
            </exception>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.GetPath(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText}@,System.Predicate{System.String})">
            <summary>
            Try to get the path in the additional file list that satisify the specified condition.
            </summary>
            <param name="this">The list of additional files.</param>
            <param name="predicate">The condition</param>
            <returns>
            The file name found. If none of all files satisfies the condition, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:System.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Check whether the last character is the specified character.
            </summary>
            <param name="this">The string.</param>
            <param name="character">The character to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result</returns>
        </member>
        <member name="M:System.StringExtensions.CountOf(System.String,System.Char)">
            <summary>
            Count how many specified characters are in the current string.
            </summary>
            <param name="this">The current string.</param>
            <param name="character">The character to count.</param>
            <returns>The number of characters found.</returns>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the current string into the camel case.
            </summary>
            <param name="this">The string.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.StringExtensions.GetMemberValues(System.String,System.Int32)">
            <summary>
            Separate the attribute string representation into multiple elements.
            The attribute string will be like <c>Type({value1, value2, value3})</c>.
            </summary>
            <param name="this">The attribute string.</param>
            <param name="tokenStartIndex">The token start index.</param>
            <returns>The array of separated values.</returns>
        </member>
        <member name="M:System.StringExtensions.SplitInfo(System.String)">
            <summary>
            To split the info on the <c>*.csv</c> file line.
            </summary>
            <param name="this">A line of the file.</param>
            <returns>The <see cref="T:System.String"/>[] result.</returns>
            <exception cref="T:System.ArgumentException">Throws when the specified string is invalid to split.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
