<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Solving</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Generating.BasicPuzzleGenerator">
            <summary>
            Encapsulates a puzzle generator, which provides the symmetry type constraint
            and the maximum clues constraint.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.Generate(System.Int32,Sudoku.Data.SymmetryType,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generate a puzzle with the specified information.
            </summary>
            <param name="max">The maximum hints of the puzzle.</param>
            <param name="symmetricalType">
            The symmetry type flags. The <see cref="T:Sudoku.Data.SymmetryType"/> is
            a flag type, you can use bit operators to accumulate multiple
            symmetrical types such as
            <c><see cref="F:Sudoku.Data.SymmetryType.AntiDiagonal"/> | <see cref="F:Sudoku.Data.SymmetryType.Diagonal"/></c>,
            which means that the solver will generate anti-diagonal type or
            diagonal type puzzles.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The grid.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
            <seealso cref="T:Sudoku.Data.SymmetryType"/>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.GenerateAsync(System.Int32,Sudoku.Data.SymmetryType,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generate a puzzle with the specified information asynchronously.
            </summary>
            <param name="max">The maximum hints of the puzzle.</param>
            <param name="symmetricalType">
            The symmetry type flags. The <see cref="T:Sudoku.Data.SymmetryType"/> is
            a flag type, you can use bit operators to accumulate multiple
            symmetrical types such as
            <c><see cref="F:Sudoku.Data.SymmetryType.AntiDiagonal"/> | <see cref="F:Sudoku.Data.SymmetryType.Diagonal"/></c>,
            which means that the solver will generate anti-diagonal type or
            diagonal type puzzles.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The task.</returns>
            <seealso cref="T:Sudoku.Data.SymmetryType"/>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.CreatePattern(System.Span{System.Int32}@)">
            <inheritdoc/>
            <exception cref="T:System.NotImplementedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Generating.DiggingPuzzleGenerator">
            <summary>
            Encapsulates a puzzle generator, whose basic algorithm is digging
            some values out of a random answer grid.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.DiggingPuzzleGenerator.FastSolver">
            <summary>
            The fast solver.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.GenerateAnswerGrid(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            To generate an answer grid.
            </summary>
            <param name="puzzle">The puzzle string.</param>
            <param name="solution">The solution string.</param>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.CreatePattern(System.Span{System.Int32}@)">
            <summary>
            To create the pattern.
            </summary>
            <param name="pattern">The pattern array.</param>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.CheckDuplicate(System.Text.StringBuilder,System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="gridArray">The grid array.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Generating.HardPatternPuzzleGenerator">
            <summary>
            Provides an extended puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.BlockFactor">
            <summary>
            The block factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.SwappingFactor">
            <summary>
            Indicates the swapping factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.BackdoorSearcher">
            <summary>
            The backdoor searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.Generate(System.Int32,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Solving.Manual.DifficultyLevel,Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a sudoku grid with a backdoor filter depth.
            </summary>
            <param name="backdoorFilterDepth">
            The backdoor filter depth. When the value is -1, the generator won't check
            any backdoors.
            </param>
            <param name="progress">The progress.</param>
            <param name="difficultyLevel">The difficulty level.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The grid.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.GenerateAsync(System.Int32,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Solving.Manual.DifficultyLevel,Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a sudoku grid with a backdoor filter depth asynchronously.
            </summary>
            <param name="backdoorFilterDepth">
            The backdoor filter depth. When the value is -1, the generator won't check
            any backdoors.
            </param>
            <param name="progress">The progress.</param>
            <param name="difficultyLevel">The difficulty level.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CreatePattern(System.Span{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.RecreatePattern(System.Span{System.Int32}@)">
            <summary>
            To re-create the pattern.
            </summary>
            <param name="pattern">The pattern array.</param>
        </member>
        <member name="T:Sudoku.Generating.IPuzzleGenerator">
            <summary>
            Provides data for all derived puzzle generators.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.IPuzzleGenerator.Rng">
            <summary>
            The random number generator.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.Generate">
            <summary>
            Generates a puzzle.
            </summary>
            <returns>
            The puzzle. If the operation is cancelled, the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.GenerateAsync">
            <summary>
            Generates a puzzle asynchronously.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="T:Sudoku.Generating.TechniqueCodeFilter">
            <summary>
            Encapsulates a technique code filter that contains some of technique codes.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueCodeFilter._internalList">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.#ctor">
            <summary>
            Initializes an empty <see cref="T:Sudoku.Generating.TechniqueCodeFilter"/> collection instance.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.#ctor(Sudoku.Techniques.Technique[])">
            <summary>
            Initializes an instance with the specified technique codes.
            </summary>
            <param name="techniqueCodes">The technique codes.</param>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.#ctor(System.Collections.BitArray)">
            <summary>
            Initializes an instance with the specified bit array.
            </summary>
            <param name="bitArray">The bit array.</param>
        </member>
        <member name="P:Sudoku.Generating.TechniqueCodeFilter.Count">
            <summary>
            The total number of techniques.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Add(Sudoku.Techniques.Technique)">
            <summary>
            To add a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Techniques.Technique})">
            <summary>
            Add a serial of technique codes to this list.
            </summary>
            <param name="techniqueCodes">The codes.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Remove(Sudoku.Techniques.Technique)">
            <summary>
            To remove a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Contains(Sudoku.Techniques.Technique)">
            <summary>
            To determine whether the specified filter contains the technique.
            </summary>
            <param name="techniqueCode">The technique code to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.TechniqueFilteringPuzzleGenerator">
            <summary>
            Provides a puzzle generator with the technique filter.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.DefaultFilter">
            <summary>
            Indicates the default filter.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.ManualSolver">
            <summary>
            The default manual solver.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.Generate(Sudoku.Generating.TechniqueCodeFilter,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a puzzle that contains the specified technique code.
            </summary>
            <param name="techniqueCodeFilter">
            The technique codes to filter. If the parameter is <see langword="null"/>,
            the process will use the default filter.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The puzzle.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="M:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.GenerateAsync(Sudoku.Generating.TechniqueCodeFilter,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a puzzle that contains the specified technique code asynchronously.
            </summary>
            <param name="techniqueCodeFilter">
            The technique codes to filter. If the parameter is <see langword="null"/>,
            the process will use the default filter.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The globalization string.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:Sudoku.Solving.ModuleInitializer">
            <summary>
            Indicates the module initializer of this project.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.ModuleInitializer.Initialize">
            <summary>
            The initialize method.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.AnalysisResult">
            <summary>
            Provides an analysis result after a puzzle solved.
            </summary>
            <param name="SolverName">Indicates the solver name.</param>
            <param name="Puzzle">Indicates the puzzle.</param>
            <param name="IsSolved">Indicates whether the puzzle has been solved.</param>
            <param name="ElapsedTime">The elapsed time.</param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.#ctor(System.String,Sudoku.Data.SudokuGrid@,System.Boolean,System.TimeSpan@)">
            <summary>
            Provides an analysis result after a puzzle solved.
            </summary>
            <param name="SolverName">Indicates the solver name.</param>
            <param name="Puzzle">Indicates the puzzle.</param>
            <param name="IsSolved">Indicates whether the puzzle has been solved.</param>
            <param name="ElapsedTime">The elapsed time.</param>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Additional">
            <summary>
            Indicates the additional texts that we should describe.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Solution">
            <summary>
            Indicates the solution of the puzzle. If the puzzle doesn't contain non-unique solution,
            the value will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.StepGrids">
            <summary>
            Indicates a list, whose element is the intermediate grid for each step.
            </summary>
            <remarks>
            The result value is not <see langword="null"/> when the property
            <see cref="P:Sudoku.Solving.AnalysisResult.Steps"/> is not <see langword="null"/>.
            </remarks>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Steps">
            <summary>
            Indicates all solving steps that the solver has recorded.
            </summary>
            <remarks>
            The result value is not <see langword="null"/> when the property
            <see cref="P:Sudoku.Solving.AnalysisResult.StepGrids"/> is not <see langword="null"/>.
            </remarks>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.StepGrids"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.MaxDifficulty">
            <summary>
            <para>Indicates the maximum difficulty of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the maximum value among all difficulty
            ratings in solving steps. If the puzzle has not been solved,
            or else the puzzle is solved by other solvers, this value will
            be always <c>20M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.TotalDifficulty">
            <summary>
            <para>Indicates the total difficulty rating of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the sum of all difficulty ratings of steps. If
            the puzzle has not been solved, the value will be the sum of all
            difficulty ratings of steps recorded in <see cref="P:Sudoku.Solving.AnalysisResult.Steps"/>.
            However, if the puzzle is solved by other solvers, this value will
            be <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.PearlDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first solving step. If the puzzle has not solved or
            the puzzle is solved by other solvers, this value will be always <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.DiamondDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first step before the first one whose conclusion is
            <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>. If the puzzle has not solved
            or solved by other solvers, this value will be <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="T:Sudoku.Data.ConclusionType"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolvingStepsCount">
            <summary>
            Indicates the number of all solving steps recorded.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.DifficultyLevel">
            <summary>
            Indicates the difficulty level of the puzzle.
            If the puzzle has not solved or solved by other
            solvers, this value will be <see cref="F:Sudoku.Solving.Manual.DifficultyLevel.Unknown"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Bottleneck">
            <summary>
            Indicates the bottle neck during the whole grid solving.
            </summary>
            <remarks>
            The result value is not <see langword="null"/> when the property <see cref="P:Sudoku.Solving.AnalysisResult.Steps"/>
            is not <see langword="null"/>.
            </remarks>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Item(System.Int32)">
            <summary>
            Gets the step information at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The step information.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the result list is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">Throws when the index is out of range.</exception>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Item(Sudoku.Techniques.Technique)">
            <summary>
            Gets the first <see cref="T:Sudoku.Solving.Manual.StepInfo"/> instance that matches the specified technique.
            </summary>
            <param name="code">The technique code to check and fetch.</param>
            <returns>The step information instance as the result.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the list doesn't contain any valid instance to get.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(System.String,Sudoku.Globalization.CountryCode)">
            <summary>
            Get the analysis result string using the specified format and the country code.
            </summary>
            <param name="format">The format.</param>
            <param name="countryCode">The country code.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(Sudoku.Solving.AnalysisResultFormattingOptions)">
            <inheritdoc cref="M:Sudoku.Solving.AnalysisResult.Formatter.ToString(Sudoku.Solving.AnalysisResultFormattingOptions)"/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(Sudoku.Solving.AnalysisResultFormattingOptions,Sudoku.Globalization.CountryCode)">
            <inheritdoc cref="M:Sudoku.Solving.AnalysisResult.Formatter.ToString(Sudoku.Solving.AnalysisResultFormattingOptions,Sudoku.Globalization.CountryCode)"/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Evaluator(,System.Decimal)">
            <summary>
            The inner executor to get the difficulty value (total, average).
            </summary>
            <param name="funcExecutor">The execute method.</param>
            <param name="defaultValue">
            The default value when <see cref="P:Sudoku.Solving.AnalysisResult.Steps"/> is <see langword="null"/> or empty.
            </param>
            <returns>The result.</returns>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.Steps"/>
        </member>
        <member name="T:Sudoku.Solving.AnalysisResult.Formatter">
            <summary>
            Provides operations for analysis result formatting.
            </summary>
            <param name="Result">Indicates the analysis result.</param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Formatter.#ctor(Sudoku.Solving.AnalysisResult)">
            <summary>
            Provides operations for analysis result formatting.
            </summary>
            <param name="Result">Indicates the analysis result.</param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Formatter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Formatter.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the specified format string.
            </summary>
            <param name="format">
            The format. If available, the parameter can be <see langword="null"/>.
            </param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Formatter.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Formatter.ToString(System.String,System.IFormatProvider,Sudoku.Globalization.CountryCode)">
            <summary>
            Get the string result.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="countryCode">The country code.</param>
            <returns>The result.</returns>
            <exception cref="T:System.FormatException">
            Throws when the specified format contains other invalid characters
            and the format provider can't work.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Formatter.ToString(Sudoku.Solving.AnalysisResultFormattingOptions)">
            <summary>
            Get the string result with the specified formatting options.
            </summary>
            <param name="options">The options.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Formatter.ToString(Sudoku.Solving.AnalysisResultFormattingOptions,Sudoku.Globalization.CountryCode)">
            <summary>
            Get the string result with the specified formatting options and the country code.
            </summary>
            <param name="options">The options.</param>
            <param name="countryCode">The country code.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.Boolean@,System.Int32@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.StepInfo}@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.String@,System.Boolean@,System.Decimal@,System.Decimal@,System.Decimal@,System.Decimal@,Sudoku.Data.SudokuGrid@,System.Nullable{Sudoku.Data.SudokuGrid}@,System.TimeSpan@,System.Int32@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.StepInfo}@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.SudokuGrid}@,System.Object@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the specified format string.
            </summary>
            <param name="format">
            The format. If available, the parameter can be <see langword="null"/>.
            </param>
            <returns>The string result.</returns>
        </member>
        <member name="T:Sudoku.Solving.AnalysisResultFormattingOptions">
            <summary>
            Indicates the formatting options of <see cref="T:Sudoku.Solving.AnalysisResult"/> instance.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.None">
            <summary>
            Indicates the none of the formatting option.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowSeparators">
            <summary>
            Indicates the analysis result will append separators.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowStepLabel">
            <summary>
            Indicates the analysis result will append the step label.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowSimple">
            <summary>
            Indicates the analysis result will use simple mode to show steps.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowBottleneck">
            <summary>
            Indicates the analysis result will show the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowDifficulty">
            <summary>
            Indicates the analysis result will show the difficulty.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowStepsAfterBottleneck">
            <summary>
            Indicates the analysis result will show all steps after the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowAttributes">
            <summary>
            Indicates the analysis result will append the attributes of the grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowBackdoors">
            <summary>
            Indicates the analysis result will append the backdoors of the grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowStepDetail">
            <summary>
            Indicates the analysis result will show the step detail.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.AnalysisResultFormattingOptions.ShowSteps">
            <summary>
            Indicates the analysis result will show the steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.BacktrackingSolver">
            <summary>
            Provides a solver using backtracking method.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.BacktrackingSolver._grid">
            <summary>
            The temporary grid to solve.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.BacktrackingSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.Solve(Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
            <exception cref="T:Sudoku.NoSolutionException">Throws when the puzzle contains no solutions.</exception>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.BacktrackinglySolve(System.Int32@,System.Int32[]@,System.Int32[],System.Int32)">
            <summary>
            Solve backtrackingly.
            </summary>
            <param name="solutionsCount">
            The number of solutions.
            </param>
            <param name="result">
            The result array.
            </param>
            <param name="gridValues">All grid values.</param>
            <param name="finishedCellsCount">The number of cells had finished.</param>
            <exception cref="T:Sudoku.MultipleSolutionsException">
            Throws when the puzzle contains multiple solutions.
            </exception>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.OneLineLinqSolver">
            <summary>
            Provides a solver using LINQ method.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.OneLineLinqSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.OneLineLinqSolver.Solve(Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
            <exception cref="T:Sudoku.NoSolutionException">Throws when the puzzle has no valid solution.</exception>
            <exception cref="T:Sudoku.MultipleSolutionsException">
            Throws when the puzzle has multiple solutions.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.OneLineLinqSolver.SolveStrings(System.String)">
            <summary>
            Internal solving method.
            </summary>
            <param name="puzzle">The puzzle string, with placeholder character '0'.</param>
            <returns>The result strings (i.e. All solutions).</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver">
            <summary>
            Define an unsafe bitwise solver.
            </summary>
            <remarks>
            This solver is implemented by Zhou Yundong, but he wrote this solver using C.
            I change the programming language to C# to decrease the native calling.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.BitSet27">
            <summary>
            All pencil marks set - 27 bits per band.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.BufferLength">
            <summary>
            The buffer length of a solution puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver._stack">
            <summary>
            Stack to store current and previous states.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver._g">
            <summary>
            Pointer to the currently active slot.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver._numSolutions">
            <summary>
            The number of solutions found so far.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver._limitSolutions">
            <summary>
            The max number of solution we're looking for.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver._singleApplied">
            <summary>
            Nasty global flag telling if <see cref="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.ApplySingleOrEmptyCells"/> found anything.
            </summary>
            <seealso cref="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.ApplySingleOrEmptyCells"/>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver._solution">
            <summary>
            Pointer to where to store the first solution. This value can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.Solve(Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
            <exception cref="T:Sudoku.NoSolutionException">Throws when the puzzle has no valid solution.</exception>
            <exception cref="T:Sudoku.MultipleSolutionsException">
            Throws when the puzzle has multiple solutions.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.Solve(System.String,System.String@,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution. The value keeps <see langword="null"/>
            if you doesn't want to use this result.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.Solve(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution. <see langword="null"/> if you don't want to use the value.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.Solve(System.String,System.Text.ValueStringBuilder@,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution receiver. This parameter is used when you want
            to use the solution string. The receiver is represented as a <see cref="T:System.Text.ValueStringBuilder"/>.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
            <seealso cref="T:System.Text.ValueStringBuilder"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.CheckValidity(System.String)">
            <summary>
            Same as <see cref="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.CheckValidity(System.String,System.String@)"/>, but doesn't contain
            any <see langword="out"/> parameters.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
            <seealso cref="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.CheckValidity(System.String,System.String@)"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.CheckValidity(System.String,System.String@)">
            <summary>
            Check the validity of the puzzle.
            </summary>
            <param name="grid">The grid.</param>
            <param name="solutionIfUnique">The solution if the puzzle is unique.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.SetSolvedDigit(System.Int32,System.Int32)">
            <summary>
            Set a cell as solved - used in <see cref="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.InitSudoku(System.Char*)"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.EliminateDigit(System.Int32,System.Int32)">
            <summary>
            Eliminate a digit - used in <see cref="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.InitSudoku(System.Char*)"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.SetSolvedMask(System.Int32,System.UInt32)">
            <summary>
            Set a cell as solved - used in various guess routines.
            </summary>
            <param name="band">The band.</param>
            <param name="mask">The mask.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.InitSudoku(System.Char*)">
            <summary>
            Setup everything and load the puzzle.
            </summary>
            <param name="board">The puzzle string.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.Update">
            <summary>
            Core of fast processing.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.ApplySingleOrEmptyCells">
            <summary>
            Find singles, bi-value cells, and impossible cells.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.InternalSolve(System.Char*,System.Char*,System.Int32)">
            <summary>
            The internal solving method.
            </summary>
            <param name="puzzle">The pointer to the puzzle string.</param>
            <param name="solutionPtr">The pointer to the solution string.</param>
            <param name="limit">The limitation for the number of all final solutions.</param>
            <returns>The number of solutions found.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.ExtractSolution(System.Char*)">
            <summary>
            Extract solution as a string.
            </summary>
            <param name="solution">
            The solution pointer. <b>The buffer should be at least <see cref="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.BufferLength"/>
            of value of length.</b>
            </param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.GuessBiValueInCell">
            <summary>
            Try both options for cells with exactly two pencil marks.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.GuessFirstCell">
            <summary>
            Guess all possibilities in first unsolved cell.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.Guess">
            <summary>
            Either already solved, or guess and recurse.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.FullUpdate">
            <summary>
            Get as far as possible without guessing.
            </summary>
            <returns>An <see cref="T:System.Byte"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.BitPos(System.UInt32)">
            <summary>
            Get the bit position.
            </summary>
            <param name="map">The map.</param>
            <returns>The position.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.State">
            <summary>
            To describe a state for a current grid using binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.State.Bands">
            <summary>
            Pencil marks in bands by digit.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.State.PrevBands">
            <summary>
            Value of bands last time it was calculated.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.State.UnsolvedCells">
            <summary>
            Bit vector of unsolved cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.State.UnsolvedRows">
            <summary>
            Bit vector of unsolved rows - three bits per band.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.State.Pairs">
            <summary>
            Bit vector of cells with exactly two pencil marks.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.TblComplexMask">
            <summary>
            To keep mini rows still valid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.TblMaskSingle">
            <summary>
            Kill in other blocks locked column/box.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.TblShrinkSingle">
            <summary>
            Keep only rows with single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.TblRowUniq">
            <remarks>
            1 is row not defined in block mode <c>1</c> to <c>111</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.TblColumnSingle">
            <summary>
            Single in column applied to shrunk block.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.UnsafeBitwiseSolver.TblRowMask">
            <summary>
            Rows where single found: <c>000</c> to <c>111</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Checking.BackdoorSearcher">
            <summary>
            Provides a backdoor searcher.
            </summary>
            <remarks>
            <b>Backdoor</b>s are <see cref="T:Sudoku.Data.Conclusion"/>s making the difficulty of
            a puzzle decrease sharply after they are applied to a grid.
            </remarks>
            <seealso cref="T:Sudoku.Data.Conclusion"/>
        </member>
        <member name="F:Sudoku.Solving.Checking.BackdoorSearcher.TestSolver">
            <summary>
            The temporary test solver used in this searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.SearchForBackdoors(Sudoku.Data.SudokuGrid@,System.Int32)">
            <summary>
            Search all backdoors whose level is lower or equals than the
            specified depth.
            </summary>
            <param name="grid">The grid.</param>
            <param name="depth">
            The depth you want to search for. The depth value must be between 0 and 3.
            where value 0 is for searching for assignments.
            </param>
            <returns>All backdoors.</returns>
            <exception cref="T:Sudoku.InvalidPuzzleException">Throws when the specified grid is invalid.</exception>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.SearchForBackdoorsExact(Sudoku.Data.SudokuGrid@,System.Int32)">
            <summary>
            Search all backdoors whose depth is exactly same as the argument.
            </summary>
            <param name="grid">The grid.</param>
            <param name="depth">
            The depth you want to search for. The depth value must be between 0 and 3.
            where value 0 is for searching for assignments.
            </param>
            <returns>All backdoors.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.SearchForBackdoorsExactAsync(Sudoku.Data.SudokuGrid,System.Int32)">
            <summary>
            Search all backdoors whose depth is exactly same as the argument asynchronously.
            </summary>
            <param name="grid">The grid.</param>
            <param name="depth">
            The depth you want to search for. The depth value must be between 0 and 3.
            where value 0 is for searching for assignments.
            </param>
            <returns>The task to calculate all conclusions.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.SearchForBackdoors(System.Collections.Generic.IList{System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion}},Sudoku.Data.SudokuGrid@,System.Int32)">
            <summary>
            To find all backdoors in a sudoku grid.
            </summary>
            <param name="result">The result list.</param>
            <param name="grid">A sudoku grid to search backdoors.</param>
            <param name="depth">The depth to search.</param>
            <exception cref="T:Sudoku.InvalidPuzzleException">
            Throws when the grid is invalid (has no solution or multiple solutions).
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Checking.BugChecker">
            <summary>
            Encapsulates a BUG technique checker.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes an instance with the specified grid.
            </summary>
            <param name="puzzle">The current puzzle grid.</param>
            <exception cref="T:Sudoku.InvalidPuzzleException">Throws when the puzzle is invalid.</exception>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.IsBugPattern">
            <summary>
            Indicates the current grid is a BUG+n pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.Puzzle">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.TrueCandidates">
            <summary>
            Indicates all true candidates (non-BUG candidates).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllTrueCandidates(System.Int32)">
            <summary>
            Get all true candidates when the number of empty cells
            is below than the argument.
            </summary>
            <param name="maximumEmptyCells">The maximum number of the empty cells.</param>
            <returns>All true candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllTrueCandidatesAsync(System.Int32)">
            <summary>
            Get all true candidates when the number of empty cells
            is below than the argument asynchronously.
            </summary>
            <param name="maximumEmptyCells">The maximum number of the empty cells.</param>
            <returns>The task to get all true candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllTrueCandidates">
            <summary>
            Get all true candidates.
            </summary>
            <returns>All true candidates.</returns>
        </member>
        <member name="T:Sudoku.Solving.Checking.PuzzleAttributeChecker">
            <summary>
            Provides some puzzle attributes validation operations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.PuzzleAttributeChecker.Solver">
            <summary>
            Indicates the inner solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@)">
            <summary>
            Same as <see cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)"/> and
            <see cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,System.Nullable{System.Boolean}@)"/>,
            but doesn't contain any <see langword="out"/> parameters.
            </summary>
            <param name="this">The grid.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
            <seealso cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)"/>
            <seealso cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,System.Nullable{System.Boolean}@)"/>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Same as <see cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid@)"/> and
            <see cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid@,System.Nullable{System.Boolean}@)"/>,
            but doesn't contain any <see langword="out"/> parameters.
            </summary>
            <param name="this">The grid.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
            <seealso cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid@)"/>
            <seealso cref="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid@,System.Nullable{System.Boolean}@)"/>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="solutionIfValid">
            The solution if the puzzle is valid;
            otherwise, <see cref="F:Sudoku.Data.SudokuGrid.Undefined"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="F:Sudoku.Data.SudokuGrid.Undefined"/>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="solutionIfValid">
            The solution if the puzzle is valid;
            otherwise, <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@,System.Nullable{System.Boolean}@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="sukaku">
            A <see cref="T:System.Boolean"/> value indicating whether the current
            grid is a sukaku. <see langword="true"/> is for sukaku.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid,System.Nullable{System.Boolean}@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="sukaku">
            A <see cref="T:System.Boolean"/> value indicating whether the current
            grid is a sukaku. <see langword="true"/> is for sukaku.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,System.Nullable{System.Boolean}@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="solutionIfValid">
            The solution if the puzzle is valid;
            otherwise, <see cref="F:Sudoku.Data.SudokuGrid.Undefined"/>.
            </param>
            <param name="sukaku">
            Indicates whether the current mode is sukaku mode.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="F:Sudoku.Data.SudokuGrid.Undefined"/>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid@,System.Nullable{System.Boolean}@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="solutionIfValid">
            The solution if the puzzle is valid;
            otherwise, <see langword="null"/>.
            </param>
            <param name="sukaku">
            Indicates whether the current mode is sukaku mode.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsMinimal(Sudoku.Data.SudokuGrid@)">
            <summary>
            To check if the puzzle is minimal or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsPearl(Sudoku.Data.SudokuGrid@)">
            <summary>
            To check if the puzzle is pearl or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsDiamond(Sudoku.Data.SudokuGrid@)">
            <summary>
            To check if the puzzle is diamond or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.CanBeSolvedUsingOnlySsts(Sudoku.Data.SudokuGrid@)">
            <summary>
            To check whether the puzzle can be solved using only simple sudoku technique set.
            </summary>
            <param name="this">The puzzle.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.GetDifficultyLevel(Sudoku.Data.SudokuGrid@)">
            <summary>
            Get the difficulty level of this puzzle.
            </summary>
            <param name="this">The puzzle.</param>
            <returns>The difficulty level.</returns>
        </member>
        <member name="T:Sudoku.Solving.ISolver">
            <summary>
            Indicates an instance used for solving a sudoku puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ISolver.SolverName">
            <summary>
            Indicates the name of this solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.ISolver.Solve(Sudoku.Data.SudokuGrid@)">
            <summary>
            To solve the specified puzzle.
            </summary>
            <param name="grid">The puzzle.</param>
            <returns>
            An <see cref="T:Sudoku.Solving.AnalysisResult"/> displaying all information of solving.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.AllStepSearcher">
            <summary>
            Provides a step searcher that is different with <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>.
            </summary>
            <remarks>
            All-step searcher (<see cref="T:Sudoku.Solving.Manual.AllStepSearcher"/>) is a searcher that find all steps in a given grid,
            which can be a initial grid or a intermediate grid. Different with <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            this searcher only calculates for the grid in an only status.
            In addition, different with <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>, this searcher searches all
            possible solving techniques.
            </remarks>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.AllStepSearcher._solver">
            <summary>
            Indicates the inner solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.AllStepSearcher.Search(Sudoku.Data.SudokuGrid@,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for all possible steps in a grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The result grouped by technique names.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.AllStepSearcher.SearchAsync(Sudoku.Data.SudokuGrid,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for all possible steps in a grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The task of that searching.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="T:Sudoku.Solving.Manual.BatchRater">
            <summary>
            Define a batch rater.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.BatchRater.BatchRatingAsync(System.String,System.String)">
            <summary>
            To batch rating a series of puzzles being saved in <paramref name="inputPath"/>,
            and output the puzzles and their rating results to <paramref name="outputPath"/>.
            </summary>
            <param name="inputPath">The input path.</param>
            <param name="outputPath">The output path.</param>
            <returns>The task of this operation.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Buffers.StepSearcherPool">
            <summary>
            Indicates a pool that stores the <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>s.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Buffers.StepSearcherPool.InnerCollection">
            <summary>
            The inner value.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffers.StepSearcherPool.Searchers">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>s.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.CellsPatternHelper">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Data.Cells"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.Cells"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.CellsPatternHelper.IsEmptyRectangle(Sudoku.Data.Cells@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Check whether the cells form an empty cell.
            </summary>
            <param name="this">The empty cell grid map.</param>
            <param name="block">The block.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.ChainingHelper">
            <summary>
            Provides methods that do checking during chain searching.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.ChainingHelper.GetExtraDifficultyByLength(System.Int32)">
            <summary>
            Get extra difficulty rating for a chain node sequence.
            </summary>
            <param name="length">The length.</param>
            <returns>The difficulty.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ChainingHelper.GetLinks(System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Converts all cells to the links that is used in drawing ULs or Reverse BUGs.
            </summary>
            <param name="this">The list of cells.</param>
            <param name="offset">The offset. The default value is 4.</param>
            <returns>All links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ChainingHelper.GetOnToOff(Sudoku.Data.SudokuGrid@,Sudoku.Data.Node@,System.Boolean)">
            <summary>
            Get all available weak links.
            </summary>
            <param name="grid">The grid.</param>
            <param name="p">The current node.</param>
            <param name="yEnabled">Indicates whether the Y-Chains are enabled.</param>
            <returns>All possible weak links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ChainingHelper.GetOffToOn(Sudoku.Data.SudokuGrid@,Sudoku.Data.Node@,System.Boolean,System.Boolean,System.Boolean,System.Nullable{Sudoku.Data.SudokuGrid}@,System.Collections.Generic.ISet{Sudoku.Data.Node},System.Boolean)">
            <summary>
            Get all available strong links.
            </summary>
            <param name="grid">The grid.</param>
            <param name="p">The current node.</param>
            <param name="xEnabled">Indicates whether the X-Chains are enabled.</param>
            <param name="yEnabled">Indicates whether the Y-Chains are enabled.</param>
            <param name="enableFastProperties">
            Indicates whether the caller has enabled <see cref="T:Sudoku.Solving.Manual.FastProperties"/>.
            </param>
            <param name="source">The source grid.</param>
            <param name="offNodes">All off nodes.</param>
            <param name="isDynamic">
            Indicates whether the current searcher is searching for dynamic chains. If so,
            we can't use those static properties to optimize the performance.
            </param>
            <returns>All possible strong links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ChainingHelper.AddHiddenParentsOfCell(Sudoku.Data.Node@,Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,System.Collections.Generic.ISet{Sudoku.Data.Node})">
            <summary>
            Add hidden parents of a cell.
            </summary>
            <param name="p">The node.</param>
            <param name="grid">The grid.</param>
            <param name="source">The source grid.</param>
            <param name="offNodes">All off nodes.</param>
            <exception cref="T:System.Exception">
            Throws when the parent node of the specified node cannot be found.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ChainingHelper.AddHiddenParentsOfRegion(Sudoku.Data.Node@,Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,Sudoku.Data.RegionLabel,System.Collections.Generic.ISet{Sudoku.Data.Node})">
            <summary>
            Add hidden parents of a region.
            </summary>
            <param name="p">The node.</param>
            <param name="grid">The grid.</param>
            <param name="source">The source grid.</param>
            <param name="currRegion">The current region label.</param>
            <param name="offNodes">All off nodes.</param>
            <exception cref="T:System.Exception">
            Throws when the parent node of the specified node cannot be found.
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Manual.Constants">
            <summary>
            Provides the constants for the operation handling on solving puzzles.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.BdpTemplatesSize3Count">
            <summary>
            Indicates the total number of Borescoper's Deadly Pattern possible templates of size 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.BdpTemplatesSize4Count">
            <summary>
            Indicates the total number of Borescoper's Deadly Pattern possible templates of size 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.QdpTemplatesCount">
            <summary>
            Indicates the total number of Qiu's Deadly Pattern possible templates.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.UsTemplatesCount">
            <summary>
            Indicates the total number of Unique Square possible templates.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.ExocetTemplatesCount">
            <summary>
            Indicates the total number of Exocet templates.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.AllRowsMask">
            <summary>
            Indicates the mask that means all rows.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.AllColumnsMask">
            <summary>
            Indicates the mask that means all columns.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.AllRegionsMask">
            <summary>
            Indicates the mask that means all regions.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.SubsetNames">
            <summary>
            <para>The names of all subsets by their sizes.</para>
            <para>
            For example, if you want to get the name of the size 3, the code will be
            <code>
            string name = TechniqueStrings.SubsetNames[3];
            </code>
            Here the digit <c>3</c> is the size you want to get.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.FishNames">
            <summary>
            The names of all fishes by their sizes.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.RegularWingNames">
            <summary>
            <para>The names of all regular wings by their sizes.</para>
            <para>
            For example, if you want to get the name of the size 3, the code will be
            <code>
            string name = TechniqueStrings.RegularWingNames[3];
            </code>
            Here the digit <c>3</c> is the size you want to get.
            </para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DifficultyLevel">
            <summary>
            Provides a difficulty kind for a puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Unknown">
            <summary>
            Indicates the difficulty level is unknown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Easy">
            <summary>
            Indicates the difficulty is easy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Moderate">
            <summary>
            Indicates the difficulty is moderate.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Hard">
            <summary>
            Indicates the difficulty is hard.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Fiendish">
            <summary>
            Indicates the difficulty is fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Nightmare">
            <summary>
            Indicates the difficulty is nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.LastResort">
            <summary>
            Indicates the puzzle can't be solved
            unless using last resort methods.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DirectSearcherAttribute">
            <summary>
            <para>
            Indicates the technique searcher can or can't be used in some scenarios
            where they aren't in traversing mode to call
            <see cref="M:Sudoku.Solving.Manual.StepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)"/>
            in <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>s one by one.
            </para>
            <para>
            If <see langword="true"/>, the searcher can't use those <see langword="static"/>
            properties such as <see cref="P:Sudoku.Solving.Manual.FastProperties.CandMaps"/> in its method
            <see cref="M:Sudoku.Solving.Manual.StepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)"/>.
            </para>
            </summary>
            <remarks>
            <para>
            All disallowed properties are:
            <list type="bullet">
            <item><see cref="P:Sudoku.Solving.Manual.FastProperties.DigitMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.FastProperties.ValueMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.FastProperties.CandMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.FastProperties.BivalueMap"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.FastProperties.EmptyMap"/></item>
            </list>
            The disallowed method is:
            <list type="bullet">
            <item><see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/></item>
            </list>
            </para>
            <para>
            Those properties or methods can optimize the performance to analyze a sudoku grid, but
            sometimes they may cause a potential bug that is hard to find and fix. The attribute
            is created and used for solving the problem.
            </para>
            </remarks>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.FastProperties"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.DirectSearcherAttribute.IsAllow">
            <summary>
            Indicates the ability that can or can't be used in non-traversing scenarios.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DisabledReason">
            <summary>
            Indicates a reason why the searcher is disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.None">
            <summary>
            Indicates the searcher is normal one and isn't disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.LastResort">
            <summary>
            Indicates the searcher searches for last resorts, which don't need to show.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.HasBugs">
            <summary>
            Indicates the searcher has bugs while searching.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.TooSlow">
            <summary>
            Indicates the searcher runs so slowly that the author himself can't stand to use it.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.Unstable">
            <summary>
            Indicates the searcher can get correct <see cref="T:Sudoku.Solving.Manual.StepInfo"/>s, but the difference
            of the difficulty among them are too big.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DisplayingLevel">
            <summary>
            Indicates the difficulty level of the step.
            This enumeration type is used for the displaying of the step information list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.None">
            <summary>
            Indicates the level is none.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.A">
            <summary>
            Indicates the level is the easy (Level A).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.B">
            <summary>
            Indicates the level is medium (Level B).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.C">
            <summary>
            Indicates the level is hard (Level C).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.D">
            <summary>
            Indicates the level is fiendish (Level D).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.E">
            <summary>
            Indicates the level is nightmare (Level E).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DrawingInfoExtractor">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Data.Node"/>, about extraction the <see cref="T:Sudoku.Models.DrawingInfo"/>s.
            </summary>
            <seealso cref="T:Sudoku.Data.Node"/>
            <seealso cref="T:Sudoku.Models.DrawingInfo"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.DrawingInfoExtractor.GetCandidateOffsets(Sudoku.Data.Node@,System.Boolean)">
            <summary>
            Get highlight candidate offsets through the specified target node.
            </summary>
            <param name="target">The target node.</param>
            <param name="simpleChain">
            Indicates whether the current caller is in <see cref="T:Sudoku.Solving.Manual.Chaining.AicStepSearcher"/>. The
            default value is <see langword="false"/>.
            </param>
            <returns>The candidate offsets.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.DrawingInfoExtractor.GetLinks(Sudoku.Data.Node@,System.Boolean)">
            <summary>
            Get the links through the specified target node.
            </summary>
            <param name="this">The target node.</param>
            <param name="showAllLinks">
            Indicates whether the current chain will display all chains (even contains the weak links
            from the elimination node). The default value is <see langword="false"/>. If you want to
            draw the AIC, the elimination weak links don't need drawing.
            </param>
            <returns>The link.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.EnabledAreas">
            <summary>
            Represents the data about where a step searcher can be enabled and used.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.None">
            <summary>
            Indicates all modes are disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.Default">
            <summary>
            Indicates the default mode (Sudoku Explainer or Hodoku mode).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.FullSearching">
            <summary>
            Indicates the full searching mode (All steps will be found here).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.FastProperties">
            <summary>
            Provides and encapsulates the fast properties that is used in solving and analyzing a sudoku puzzle.
            </summary>
            <remarks>
            <para>
            The whole class is a <see langword="static"/> one, which means you can't use <see langword="new"/>
            clause to create a new instance of this type. In contrast, the class is used for providing with
            <see langword="static"/> properties used in a cyclic manual searching
            (i.e. in <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>).
            </para>
            <para>
            Some step searchers rely on this class. If you want to call them alone, you should ensure the method
            <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/> in this class is called before using these properties.
            </para>
            <para>
            If a step searcher doesn't rely on this class, it'll be marked an attribute named
            <see cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>. If you find that the step searcher marks that attribute,
            you can call it everywhere safely; however, if the searcher isn't marked that attribute, you
            can't call it everywhere unless you call the method <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>.
            </para>
            <para>
            Please note, all names of properties in this class can also be found in <see cref="T:Sudoku.Data.SudokuGrid"/>,
            which means you can also call the property by <see cref="T:Sudoku.Data.SudokuGrid"/>. Of course, some of them
            doesn't contain the same one in <see cref="T:Sudoku.Data.SudokuGrid"/>, but you can find a same property whose
            execution logic (handling logic) is totally same.
            For example, <see cref="P:Sudoku.Solving.Manual.FastProperties.EmptyMap"/> is same as <see cref="P:Sudoku.Data.SudokuGrid.EmptyCells"/>. The difference
            between them is that you shouldn't use <see cref="P:Sudoku.Solving.Manual.FastProperties.EmptyMap"/> until you have called
            <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>, while <see cref="P:Sudoku.Data.SudokuGrid.EmptyCells"/> can be used
            everywhere, because it isn't an instant property (which means the calculation begins
            when you called them, i.e. lazy ones; in contrast, some properties only store values directly,
            so their values can be got instantly, i.e. instant ones).
            </para>
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>
            <seealso cref="T:Sudoku.Data.SudokuGrid"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.FastProperties.EmptyMap">
            <summary>
            The empty cells map.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.FastProperties.BivalueMap">
            <summary>
            The bi-value cells map.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.FastProperties.CandMaps">
            <summary>
            The candidate maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.FastProperties.DigitMaps">
            <summary>
            The digit maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.FastProperties.ValueMaps">
            <summary>
            The value maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.DirectSearcherAttribute"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.FastProperties.InitializeMaps(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initialize the maps that used later.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.FastProperties.IsSashimi(System.Int32[],Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check whether the fish is sashimi one.
            </summary>
            <param name="baseSets">The base sets.</param>
            <param name="fins">All fins.</param>
            <param name="digit">The digit.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating that. All cases are below:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>If the fish is sashimi.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>If the fish is a normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>If the fish doesn't contain any fin.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.IsOptionsFixedAttribute">
            <summary>
            Marks onto a <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>, to let the compiler know the specified step searcher
            is fixed-ordering, and we can't modify the order in the settings UI.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.IStepSearcher">
            <summary>
            Provides the basic restraint of a <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStepSearcher.Options">
            <summary>
            Indicates the step searching options.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.IStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <summary>
            Accumulate all technique information instances into the specified accumulator.
            </summary>
            <param name="accumulator">The accumulator to store technique information.</param>
            <param name="grid">The grid to search for techniques.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.IStepSearcher.GetOne(Sudoku.Data.SudokuGrid@)">
            <summary>
            Take a technique step after searched all solving steps.
            </summary>
            <param name="grid">The grid to search steps.</param>
            <returns>A technique information.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.LightManualSolver">
            <summary>
            Provides a light manual solver used for testing and checking backdoors.
            This solver will use mankind logic to solve a puzzle, but only
            <b>Hidden Single</b>s and <b>Naked Single</b>s will be used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LightManualSolver.CanSolve(Sudoku.Data.SudokuGrid@)">
            <summary>
            To check whether the specified solver can solve the puzzle.
            </summary>
            <param name="grid">The puzzle.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the solver
            solved the puzzle successfully.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LightManualSolver.SaveStep(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.StepInfo},Sudoku.Solving.Manual.StepInfo,Sudoku.Data.SudokuGrid@)">
            <summary>
            To record the current technique step.
            </summary>
            <param name="steps">The steps have been found.</param>
            <param name="step">The current step.</param>
            <param name="cloneation">The cloneation of the grid.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Looping">
            <summary>
            Provides extension methods on checking a UL or a reverse BUG loop.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Looping.IsValidLoop(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Check whether the current loop is valid UL-shaped loop.
            </summary>
            <param name="loop">The loop.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolver">
            <summary>
            Provides a solver that use logical methods to solve a specified sudoku puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve(Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveAsync(Sudoku.Data.SudokuGrid,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To solve the specified puzzle in asynchronous way.
            </summary>
            <param name="grid">The grid.</param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">
            The cancellation token that is used to cancel the operation. If the value is <see langword="null"/>,
            the method won't support cancellation.
            </param>
            <returns>The task of the execution.</returns>
            <remarks>
            <para>
            If the task is cancelled, the inner result value (i.e. the value of the property
            <see cref="P:System.Threading.Tasks.Task`1.Result"/>) should be <see langword="null"/>. In this way, we can raise
            an exception called <see cref="T:System.OperationCanceledException"/>.
            </para>
            <para>
            However, please <b>don't</b> raise this exception here, because here is in the asynchronous
            environment and we can't process and handle any exception here.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve(Sudoku.Data.SudokuGrid@,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To solve the puzzle.
            </summary>
            <param name="grid">The puzzle.</param>
            <param name="progress">The progress instance to report the state.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token that is used to cancel the operation.</param>
            <returns>The analysis result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveNaively(Sudoku.Solving.Manual.ManualSolver,Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Boolean,Sudoku.Models.GridProgressResult@,System.IProgress{Sudoku.Models.IProgressResult},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Solve naively.
            </summary>
            <param name="this">The current manual solver.</param>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation grid to calculate.</param>
            <param name="steps">All steps found.</param>
            <param name="solution">The solution.</param>
            <param name="sukaku">Indicates whether the current mode is sukaku.</param>
            <param name="progressResult">
            (<see langword="ref"/> parameter)
            The progress result. This parameter is used for modify the state of UI controls.
            The current argument won't be used until <paramref name="progress"/> isn't <see langword="null"/>.
            In the default case, this parameter being
            <see langword="default"/>(<see cref="T:Sudoku.Models.GridProgressResult"/>) is okay.
            </param>
            <param name="progress">
            The progress used for report the current state. If we don't need, the value should
            be assigned <see langword="null"/>.
            </param>
            <param name="cancellationToken">The cancellation token that is used to cancel the operation.</param>
            <returns>The analysis result.</returns>
            <exception cref="T:Sudoku.Solving.Manual.WrongStepException">
            Throws when the solver can't solved due to wrong handling.
            </exception>
            <seealso cref="T:Sudoku.Models.GridProgressResult"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveSeMode(Sudoku.Solving.Manual.ManualSolver,Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Boolean,Sudoku.Models.GridProgressResult@,System.IProgress{Sudoku.Models.IProgressResult},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Solve the puzzle with <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> option.
            </summary>
            <param name="this">The current manual solver instance.</param>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation grid to calculate.</param>
            <param name="steps">All steps found.</param>
            <param name="solution">The solution.</param>
            <param name="sukaku">Indicates whether the current mode is sukaku mode.</param>
            <param name="progressResult">
            (<see langword="ref"/> parameter)
            The progress result. This parameter is used for modify the state of UI controls.
            The current argument won't be used until <paramref name="progress"/> isn't <see langword="null"/>.
            In the default case, this parameter being
            <see langword="default"/>(<see cref="T:Sudoku.Models.GridProgressResult"/>) is okay.
            </param>
            <param name="progress">
            The progress used for report the current state. If we don't need, the value should
            be assigned <see langword="null"/>.
            </param>
            <param name="cancellationToken">The cancellation token that is used to cancel the operation.</param>
            <returns>The analysis result.</returns>
            <exception cref="T:Sudoku.Solving.Manual.WrongStepException">
            Throws when the solver can't solved due to wrong handling.
            </exception>
            <seealso cref="T:Sudoku.Models.GridProgressResult"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AllowAlsCycles">
            <summary>
            <para>Indicates whether the solver should check ALS cycles.</para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AllowOverlappingAlses">
            <summary>
            <para>
            Indicates whether two ALSes can be overlapped with each other.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AlsHighlightRegionInsteadOfCell">
            <summary>
            <para>
            Indicates whether all ALSes shows highlight regions
            instead of cells.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly">
            <summary>
            <para>
            Indicates whether the solver should check all technique
            information using the strict technique searchers order.
            </para>
            <para>
            If the value is <see langword="true"/>, all technique searchers
            will be enabled calculation in order. It ensures the strictness
            of difficulty rating that the maximum difficulty searched in
            one searcher should be no more than the minimum one searched in
            the searcher behind the previous one.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if this value is <see langword="true"/>, the option
            <see cref="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder"/> will be disabled. In other
            words, this option doesn't work while solving when the condition
            is satisfied. However, the time of calculation with this value
            <see langword="true"/> will be <b>much slower</b> than that with the
            value is <see langword="false"/>.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckAlmostLockedQuadruple">
            <summary>
            <para>
            Indicates whether the solver should check the technique Almost
            Locked Quadruple (ALQ).
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckConclusionValidityAfterSearched">
            <summary>
            <para>
            Indicates whether the solver will check the validity of the conclusions
            after searched them. If the conclusions eliminate the wrong digits or
            assign to the wrong cells, it will report the error
            (i.e. throw a <see cref="T:Sudoku.Solving.Manual.WrongStepException"/>).
            </para>
            <para>
            The value is <see langword="true"/> in default case. If the value is
            <see langword="true"/>, all conclusions will be checked before applying
            to the grid. The comparer is the solution grid. Computer doesn't know
            which conclusions are correct and which ones are incorrect. Therefore,
            the best plan is to compare to the solution grid. If not, the solver
            won't check the validity of all conclusions. In other words, the solver
            doesn't stop the searching until the grid is totally invalid (None of
            eliminations or assignments can be searched). However, unfortunately,
            the grid has no solution at present.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.WrongStepException"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckGurthSymmetricalPlacement">
            <summary>
            <para>
            Indicates whether the solver should check Gurth's symmetrical placement
            at the initial grid.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if the value is <see langword="true"/>, the solver will check the symmetry
            of the grid at initial. If the grid is symmetrical grid, the solver
            will give you a hint about the technique of symmetrical placement. However,
            the hint will influence the difficulty rating during solving the puzzle.
            If the puzzle is so easy (in other words, the grid doesn't need check
            it), this option will make the difficulty rating of the puzzle much more
            higher than that when the option is <see langword="false"/>. In addition,
            if the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> is <see langword="true"/>,
            this option will be ignored.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckIncompleteUniquenessPatterns">
            <summary>
            <para>
            Indicates whether the solver should check incomplete uniqueness patterns.
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.SearchExtendedUniqueRectangles">
            <summary>
            <para>
            Indicates whether the solver should search for extended
            unique rectangles.
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableFullHouse">
            <summary>
            <para>
            Indicates whether the solver will record the step
            whose name or kind is full house.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
            <remarks>
            <b>Full house</b>s are the techniques that used in a single
            region. When the specified region has only one empty cell,
            the full house will be found at this empty cell (the last
            value in this region).
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableGarbageCollectionForcedly">
            <summary>
            <para>
            Indicates whether the solver enables the garbage collection
            after finished searching a technique whose searcher is
            high space-complexity.
            </para>
            <para>This value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableLastDigit">
            <summary>
            <para>
            Indicates whether the solver will record the step
            whose name or kind is last digit.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
            <remarks>
            <b>Last digit</b>s are the techniques that used in a single
            digit. When the whole grid has 8 same digits, the last
            one will be always found and set in the last position,
            which is last digit.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.FastSearch">
            <summary>
            <para>
            Indicates whether the solver will apply multiple technique usages
            at the same time if searched more than one technique.
            As for the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> is
            <see langword="true"/>, when searched more than one technique
            instance which holds a same difficulty, the searcher will apply
            them at the same time; however if the value is <see langword="false"/>,
            the solver will apply all same techniques searched at the same time.
            </para>
            <para>
            The value is <see langword="false"/> in default case. If the value
            is <see langword="true"/>, the solver will enable this mode to
            accelerate the running, but the applied techniques will be added much
            more than when the value is <see langword="false"/>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OnlyRecordTemplateDelete">
            <summary>
            <para>
            Indicates whether the step accumulator only records template delete,
            and template set won't be in this collection (if necessary).
            </para>
            <para>
            If the value is <see langword="true"/>, and the solver has checked
            all template steps, only template deletes in these steps will be
            recorded into the step accumulator.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OnlyShowSameLevelTechniquesInFindAllSteps">
            <summary>
            <para>
            Indicates whether the searcher will only display same-level techniques
            in Find All Steps tab page.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder">
            <summary>
            <para>Indicates whether the solver will optimizes the applying order.</para>
            <para>
            When the value is <see langword="true"/>, the result to apply to
            the grid will be the one which has the minimum difficulty
            rating; otherwise, the applying step will be the first one
            of all steps being searched.
            </para>
            <para>
            The value is <see langword="false"/> in default case. If the value
            is <see langword="true"/>, the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
            will be disabled.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.UseCalculationPriority">
            <summary>
            <para>
            Indicates whether the solver should order all technique searchers
            by its priority.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if you enable the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>,
            this option will be disabled because the solver will enable the
            function of count on all steps and get one with the <b>minimum</b>
            difficulty of them.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.UseExtendedBugSearcher">
            <summary>
            <para>
            Indicates whether the solver should use extended BUG checker
            to searcher for all true candidates no matter how difficult
            the true candidates looking for.
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckAdvancedInExocet">
            <summary>
            <para>
            Indicates whether the solver should check advanced eliminations
            during finding exocets.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.ShowDirectLines">
            <summary>
            <para>
            Indicates whether the solver will show cross hatching information single
            techniques).
            </para>
            <para>The value is <see langword="true"/> in debugger mode, and
            <see langword="false"/> in release mode in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.BowmanBingoMaximumLength">
            <summary>
            <para>
            Indicates the number of nodes to be searched for in bowman bingoes.
            </para>
            <para>
            The value is <c>32</c> in default case. You can let this value
            be higher because this value take a little influence on the solver.
            However, each unique solution has more than 17 hints (given digits),
            which means you can't set this value more than <c>64</c> (81 - 17 = 64).
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckRegularWingSize">
            <summary>
            <para>
            Indicates all regular wings with the size less than
            or equals to this specified value. This value should
            be between 3 and 5.
            </para>
            <para>The value is <c>5</c> in default case.</para>
            </summary>
            <remarks>
            In fact this value can be 9 at most (i.e. <c><![CDATA[value is >= 3 and <= 9]]></c>) theoretically.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.MaxPetalsOfDeathBlossom">
            <summary>
            <para>Indicates the max petals of death blossom to search.</para>
            <para>The value is <c>5</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.ComplexFishMaxSize">
            <summary>
            <para>Indicates the max size of the complex fish to search.</para>
            <para>The default value is <c>5</c>.</para>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.GetSearchers(System.Nullable{Sudoku.Data.SudokuGrid}@)">
            <summary>
            Gets all possible searchers via the current manual solver settings.
            </summary>
            <param name="solution">
            <para>The solution grid.</para>
            <para>
            This parameter is necessary because some technique searchers will use this value,
            such as <see cref="T:Sudoku.Solving.Manual.LastResorts.BfStepSearcher"/>. The default value is <see langword="null"/>.
            </para>
            </param>
            <returns>The result list.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.RecordStep(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Solving.Manual.StepInfo,Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@,System.Diagnostics.Stopwatch,System.Collections.Generic.IList{Sudoku.Data.SudokuGrid},Sudoku.Solving.AnalysisResult@,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Bound with on-solving methods returns the solving state.
            </summary>
            <param name="steps">The steps.</param>
            <param name="step">The step.</param>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation (playground).</param>
            <param name="stopwatch">The stopwatch.</param>
            <param name="stepGrids">The step grids.</param>
            <param name="result">The analysis result.</param>
            <param name="cancellationToken">The cancellation token that is used to cancel the operation.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.OperationCanceledException">
            Throws when the current operation is cancelled.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.GetSstsSearchers(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get all available SSTS searchers.
            </summary>
            <param name="enableFullHouse">
            Set an option to <see cref="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.EnableFullHouse"/>.
            </param>
            <param name="enableLastDigit">
            Set an option to <see cref="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.EnableLastDigit"/>.
            </param>
            <param name="showDirectLines">
            Set an option to <see cref="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.ShowDirectLines"/>.
            </param>
            <returns>Returns the list of SSTS searchers.</returns>
            <seealso cref="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.EnableFullHouse"/>
            <seealso cref="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.EnableLastDigit"/>
            <seealso cref="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.ShowDirectLines"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.CheckConclusionsValidity(Sudoku.Data.SudokuGrid@,System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <summary>
            To check the validity of all conclusions.
            </summary>
            <param name="solution">The solution.</param>
            <param name="conclusions">The conclusions.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.ReportProgress(Sudoku.Data.SudokuGrid@,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Models.GridProgressResult@)">
            <summary>
            To report the progress.
            </summary>
            <param name="cloneation">The cloneation grid.</param>
            <param name="progress">The progress reporter.</param>
            <param name="progressResult">The progress result.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolverExtensions">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverExtensions.GetSeModeSearchers(Sudoku.Solving.Manual.ManualSolver,System.Nullable{Sudoku.Data.SudokuGrid}@)">
            <summary>
            Get the searchers to enumerate on Sudoku Explainer mode.
            </summary>
            <param name="this">The manual solver.</param>
            <param name="solution">
            The solution for a sudoku grid.
            This parameter is necessary because some technique searchers will use this value,
            such as <see cref="T:Sudoku.Solving.Manual.LastResorts.BfStepSearcher"/>.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverExtensions.GetHodokuModeSearchers(Sudoku.Solving.Manual.ManualSolver,System.Nullable{Sudoku.Data.SudokuGrid}@)">
            <summary>
            Get the searchers to enumerate on Hodoku mode.
            </summary>
            <param name="this">The manual solver.</param>
            <param name="solution">
            The solution for a sudoku grid.
            This parameter is necessary because some technique searchers will use this value,
            such as <see cref="T:Sudoku.Solving.Manual.LastResorts.BfStepSearcher"/>. The default value is <see langword="null"/>.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Rarity">
            <summary>
            Indicates the rarity of the technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.VeryCommon">
            <summary>
            Indicates the technique appears very commonly, such as <b>Hidden Single</b>.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Common">
            <summary>
            Indicates the rarity is common.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Seldom">
            <summary>
            Indicates the rarity is seldom.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.OnlyForSpecialPuzzles">
            <summary>
            Indicates the technique only appears in the special puzzles, which are designed on purpose.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Als">
            <summary>
            Encapsulates a normal ALS.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.Als.StrongRelationsCount">
            <summary>
            Indicates an array of the total number of the strong relations in an ALS of the different size.
            The field is only unsed in the property <see cref="P:Sudoku.Solving.Manual.Alses.Als.StrongLinksMask"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.Alses.Als.StrongLinksMask"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.#ctor(System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Initializes an instance with the specified digit mask and the map of cells.
            </summary>
            <param name="digitMask">The digit mask.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.#ctor(System.Int16,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Initializes an instance with the specified digit mask and the map of cells.
            </summary>
            <param name="digitMask">The digit mask.</param>
            <param name="map">The map.</param>
            <param name="possibleEliminationSet">
            The possible elimination set.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.IsBivalueCell">
            <summary>
            Indicates whether this instance is a bi-value-cell ALS.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.Region">
            <summary>
            Indicates the region that the instance lies in.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.DigitsMask">
            <summary>
            Indicates the mask of each digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.Map">
            <summary>
            Indicates the map that ALS lying on.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.PossibleEliminationSet">
            <summary>
            Indicates the possible elimination set.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.StrongLinksMask">
            <summary>
            Indicates all strong links in this ALS. The result will be represented
            as a <see cref="T:System.Int16"/> mask of 9 bits indicating which bits used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.ContainsDigit(Sudoku.Data.SudokuGrid@,System.Int32,Sudoku.Data.Cells@)">
            <summary>
            Indicates whether the specified grid contains the digit.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="result">The result.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <remarks>
            If you want to determine the equality of two instance, I recommend you
            <b>should</b> use method <see cref="M:Sudoku.Solving.Manual.Alses.Als.Equals(Sudoku.Solving.Manual.Alses.Als@)"/> instead of this method.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.GetAllAlses(Sudoku.Data.SudokuGrid@)">
            <summary>
            To search for all ALSes in the specified grid.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All ALSes searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.Deconstruct(System.Int32@,System.Int16@,Sudoku.Data.Cells@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.Deconstruct(System.Boolean@,System.Int32@,System.Int16@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Int16[]@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsStepInfo">
            <summary>
            Provides a usage of <b>almost locked set</b> (ALS) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>almost locked set</b> (ALS) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsStepSearcher">
            <summary>
            Encapsulates an <b>almost locked set</b> (ALS) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsStepSearcher.AllowOverlapping">
            <summary>
            Indicates whether the ALSes can be overlapped with each other.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsStepSearcher.AlsShowRegions">
            <summary>
            Indicates whether the ALSes shows their regions rather than cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsStepSearcher.AllowAlsCycles">
            <summary>
            Indicates whether the solver will check ALS cycles.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo">
            <summary>
            Provides a usage of <b>almost locked sets W-Wing</b> (ALS-W-Wing) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Als1">The ALS 1.</param>
            <param name="Als2">The ALS 2.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
            <param name="WDigitsMask">The W digit mask.</param>
            <param name="X">The digit X.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Alses.Als@,Sudoku.Solving.Manual.Alses.Als@,Sudoku.Data.ConjugatePair@,System.Int16,System.Int32)">
            <summary>
            Provides a usage of <b>almost locked sets W-Wing</b> (ALS-W-Wing) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Als1">The ALS 1.</param>
            <param name="Als2">The ALS 2.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
            <param name="WDigitsMask">The W digit mask.</param>
            <param name="X">The digit X.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsWWingStepSearcher">
            <summary>
            Encapsulates an <b>almost locked sets W-Wing</b> (ALS-W-Wing) technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsWWingStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsWWingStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo">
            <summary>
            Provides a usage of <b>almost locked sets XY-Wing</b> (ALS-XY-Wing) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Als1">The ALS 1.</param>
            <param name="Als2">The ALS 2.</param>
            <param name="Bridge">The bridge ALS.</param>
            <param name="XDigitsMask">The X digits mask.</param>
            <param name="YDigitsMask">The Y digits mask.</param>
            <param name="ZDigitsMask">The Z digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Alses.Als@,Sudoku.Solving.Manual.Alses.Als@,Sudoku.Solving.Manual.Alses.Als@,System.Int16,System.Int16,System.Int16)">
            <summary>
            Provides a usage of <b>almost locked sets XY-Wing</b> (ALS-XY-Wing) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Als1">The ALS 1.</param>
            <param name="Als2">The ALS 2.</param>
            <param name="Bridge">The bridge ALS.</param>
            <param name="XDigitsMask">The X digits mask.</param>
            <param name="YDigitsMask">The Y digits mask.</param>
            <param name="ZDigitsMask">The Z digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsXyWingStepSearcher">
            <summary>
            Encapsulates an <b>almost locked sets XY-Wing</b> (ALS-XY-Wing) technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXyWingStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsXyWingStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsXzStepInfo">
            <summary>
            Provides a usage of <b>almost locked sets XZ rule</b> (ALS-XZ)
            or <b>extended subset principle</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Als1">The ALS 1 used.</param>
            <param name="Als2">The ALS 2 used.</param>
            <param name="XDigitsMask">The X digits mask.</param>
            <param name="ZDigitsMask">The Z digits mask.</param>
            <param name="IsDoublyLinked">
            <para>Indicates whether the instance is a doubly linked ALS-XZ.</para>
            <para>
            The property contains three different values:
            <list type="table">
            <item>
            <term><c><see langword="true"/></c></term>
            <description>The current instance is a Doubly Linked ALS-XZ.</description>
            </item>
            <item>
            <term><c><see langword="false"/></c></term>
            <description>The current instance is a Singly Linked ALS-XZ.</description>
            </item>
            <item>
            <term><c><see langword="null"/></c></term>
            <description>The current instance is a Extended Subset Principle.</description>
            </item>
            </list>
            </para>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Alses.Als@,Sudoku.Solving.Manual.Alses.Als@,System.Int16,System.Int16,System.Nullable{System.Boolean})">
            <summary>
            Provides a usage of <b>almost locked sets XZ rule</b> (ALS-XZ)
            or <b>extended subset principle</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Als1">The ALS 1 used.</param>
            <param name="Als2">The ALS 2 used.</param>
            <param name="XDigitsMask">The X digits mask.</param>
            <param name="ZDigitsMask">The Z digits mask.</param>
            <param name="IsDoublyLinked">
            <para>Indicates whether the instance is a doubly linked ALS-XZ.</para>
            <para>
            The property contains three different values:
            <list type="table">
            <item>
            <term><c><see langword="true"/></c></term>
            <description>The current instance is a Doubly Linked ALS-XZ.</description>
            </item>
            <item>
            <term><c><see langword="false"/></c></term>
            <description>The current instance is a Singly Linked ALS-XZ.</description>
            </item>
            <item>
            <term><c><see langword="null"/></c></term>
            <description>The current instance is a Extended Subset Principle.</description>
            </item>
            </list>
            </para>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepInfo.Format">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsXzStepSearcher">
            <summary>
            Encapsulates an <b>almost locked set XZ rule</b> (ALS-XZ) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.AlsXzStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsXzStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.DbStepInfo">
            <summary>
            Provides a usage of <b>death blossom</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pivot">The pivot cell.</param>
            <param name="Petals">All ALSes used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.DbStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Int32,Sudoku.Solving.Manual.Alses.Als})">
            <summary>
            Provides a usage of <b>death blossom</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pivot">The pivot cell.</param>
            <param name="Petals">All ALSes used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.DbStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.DbStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.DbStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.DbStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.DbStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.DbStepSearcher">
            <summary>
            Encapsulates a <b>death blossom</b> technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.DbStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.DbStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.DbStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.DbStepSearcher.ProcessDeathAlsInfo(Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells[],System.Int16[],System.Int32[0:,0:],System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.Alses.Als})">
            <summary>
            Process death ALSes information.
            </summary>
            <param name="grid">The grid.</param>
            <param name="candMaps">The digit distributions.</param>
            <param name="checkedCandidates">All checked candidates.</param>
            <param name="death">The death table.</param>
            <param name="alses">The ALS list.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.DbStepSearcher.PreprocessAndGatherAlses(Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@)">
            <summary>
            To preprocess and gather all ALSes.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="emptyMap">(<see langword="in"/> parameter) The map of all empty cells.</param>
            <returns>All ALSes.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.EripStepInfo">
            <summary>
            Provides a usage of <b>empty rectangle intersection pair</b> (ERIP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="StartCell">The start cell.</param>
            <param name="EndCell">The end cell.</param>
            <param name="Region">The region that empty rectangle forms.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.EripStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>empty rectangle intersection pair</b> (ERIP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="StartCell">The start cell.</param>
            <param name="EndCell">The end cell.</param>
            <param name="Region">The region that empty rectangle forms.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.EripStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.EripStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.EripStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.EripStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.EripStepSearcher">
            <summary>
            Encapsulates an <b>empty rectangle intersection pair</b> (ERIP) technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.EripStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.EripStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.EripStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.AicStepInfo">
            <summary>
            Provides a usage of <b>(grouped) alternating inference chain</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="XEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="YEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="Target">The target node.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean,System.Boolean,Sudoku.Data.Node@)">
            <summary>
            Provides a usage of <b>(grouped) alternating inference chain</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="XEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="YEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="Target">The target node.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.IsXChain">
            <summary>
            Indicates whether the specified chain is an X-Chain.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.IsMWing">
            <summary>
            Indicates whether the chain is M-Wing (<c>(x = y) - y = (y - x) = x</c>).
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.IsSplitWing">
            <summary>
            Indicates whether the chain is Split-Wing (<c>x = x - (x = y) - y = y</c>).
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.IsHybridWing">
            <summary>
            Indicates whether the chain is Hybrid-Wing.
            This wing has two types:
            <list type="bullet">
            <item><c>(x = y) - y = (y - z) = z</c></item>
            <item><c>(x = y) - (y = z) - z = z</c></item>
            </list>
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepInfo.IsLocalWing">
            <summary>
            Indicates whether the chain is Local-Wing (<c>x = (x - z) = (z - y) = y</c>).
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.AicStepSearcher">
            <summary>
            Encapsulates an <b>(grouped) alternating inference chain</b> (<b>(grouped) AIC</b>) 
            or <b>(grouped) continuous nice loop</b> (<b>(grouped) CNL</b>) technique searcher.
            </summary>
            <remarks>
            I want to use BFS (breadth-first searching) to search for chains, which can avoid
            the redundant backtracking.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.Chaining.ChainingStepInfo},Sudoku.Data.SudokuGrid@,System.Boolean,System.Boolean)">
            <summary>
            Search for chains of each type.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">Thr grid.</param>
            <param name="xEnabled">
            Indicates whether the strong links in regions are enabled to search for.
            </param>
            <param name="yEnabled">
            Indicates whether the strong links in cells are enabled to search for.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepSearcher.DoUnaryChaining(System.Collections.Generic.IList{Sudoku.Solving.Manual.Chaining.ChainingStepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Node@,System.Boolean,System.Boolean)">
            <summary>
            Do unary chaining.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pOn">The node set on.</param>
            <param name="xEnabled">
            Indicates whether the strong links in regions are enabled to search for.
            </param>
            <param name="yEnabled">
            Indicates whether the strong links in cells are enabled to search for.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepSearcher.CreateLoopHint(Sudoku.Data.SudokuGrid@,Sudoku.Data.Node@,System.Boolean,System.Boolean)">
            <summary>
            Create a loop hint (i.e. a <see cref="T:Sudoku.Solving.Manual.Chaining.LoopStepInfo"/>).
            </summary>
            <param name="grid">The grid.</param>
            <param name="destOn">The start node.</param>
            <param name="xEnabled">Indicates whether X-Chains are enabled.</param>
            <param name="yEnabled">Indicates whether Y-Chains are enabled.</param>
            <returns>
            If the number of conclusions are not zero (in other words, if worth), the information
            will be returned; otherwise, <see langword="null"/>.
            </returns>
            <seealso cref="T:Sudoku.Solving.Manual.Chaining.LoopStepInfo"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepSearcher.CreateAicHint(Sudoku.Data.SudokuGrid@,Sudoku.Data.Node@,System.Boolean,System.Boolean)">
            <summary>
            Create an AIC hint (i.e. a <see cref="T:Sudoku.Solving.Manual.Chaining.AicStepInfo"/>).
            </summary>
            <param name="grid">The grid.</param>
            <param name="target">The elimination node (which is used for searching the whole chain).</param>
            <param name="xEnabled">Indicates whether X-Chains are enabled.</param>
            <param name="yEnabled">Indicates whether Y-Chains are enabled.</param>
            <returns>
            If the number of conclusions are not zero (in other words, if worth), the information
            will be returned; otherwise, <see langword="null"/>.
            </returns>
            <seealso cref="T:Sudoku.Solving.Manual.Chaining.AicStepInfo"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepSearcher.DoAic(Sudoku.Data.SudokuGrid@,System.Collections.Generic.ISet{Sudoku.Data.Node},System.Collections.Generic.ISet{Sudoku.Data.Node},System.Boolean,System.Collections.Generic.IList{Sudoku.Data.Node},Sudoku.Data.Node@)">
            <summary>
            Simulate the passing strong and weak links in AICs.
            </summary>
            <param name="grid">The grid.</param>
            <param name="onToOn">The nodes that the end candidates are currently on.</param>
            <param name="onToOff">The nodes the end candidates are currently off.</param>
            <param name="yEnabled">Indicates whether the Y-Chains are enabled.</param>
            <param name="chains">The chain nodes.</param>
            <param name="source">The source node.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicStepSearcher.DoLoops(Sudoku.Data.SudokuGrid@,System.Collections.Generic.ISet{Sudoku.Data.Node},System.Collections.Generic.ISet{Sudoku.Data.Node},System.Boolean,System.Boolean,System.Collections.Generic.IList{Sudoku.Data.Node},Sudoku.Data.Node@)">
            <summary>
            Simulate the passing strong and weak links in CNLs.
            </summary>
            <param name="grid">The grid.</param>
            <param name="onToOn">The nodes that the end candidates are currently on.</param>
            <param name="onToOff">The nodes the end candidates are currently off.</param>
            <param name="xEnabled">Indicates whether the X-Chains are enabled.</param>
            <param name="yEnabled">Indicates whether the Y-Chains are enabled.</param>
            <param name="loops">The loop nodes.</param>
            <param name="source">The source node.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo">
            <summary>
            Provides a usage of <b>contradiction forcing chains</b> and <b>double forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SourceNode">Indicates the source node.</param>
            <param name="FromOnNode">Indicates the node that is the destination (on side).</param>
            <param name="FromOffNode">Indicates the node that is the destination (off side).</param>
            <param name="IsAbsurd">Indicates whether the chain is absurd.</param>
            <param name="IsMultiple">Indicates whether the chain is multiple.</param>
            <param name="IsNishio">Indicates whether the chain is nishio.</param>
            <param name="Level">Indicates the dynamic level of the chain.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Node@,Sudoku.Data.Node@,Sudoku.Data.Node@,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides a usage of <b>contradiction forcing chains</b> and <b>double forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SourceNode">Indicates the source node.</param>
            <param name="FromOnNode">Indicates the node that is the destination (on side).</param>
            <param name="FromOffNode">Indicates the node that is the destination (off side).</param>
            <param name="IsAbsurd">Indicates whether the chain is absurd.</param>
            <param name="IsMultiple">Indicates whether the chain is multiple.</param>
            <param name="IsNishio">Indicates whether the chain is nishio.</param>
            <param name="Level">Indicates the dynamic level of the chain.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.Anchor">
            <summary>
            Indicates the anchor.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.BinaryChainingStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo">
            <summary>
            Provides a usage of <b>cell forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SourceCell">The source cell.</param>
            <param name="Chains">All branches.</param>
            <param name="IsDynamic">Indicates whether the chain is dynamic.</param>
            <param name="Level">Indicates the depth level of the dynamic chains.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Int32,Sudoku.Data.Node},System.Boolean,System.Int32)">
            <summary>
            Provides a usage of <b>cell forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SourceCell">The source cell.</param>
            <param name="Chains">All branches.</param>
            <param name="IsDynamic">Indicates whether the chain is dynamic.</param>
            <param name="Level">Indicates the depth level of the dynamic chains.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.CellChainingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.ChainingStepInfo">
            <summary>
            Provides a usage of <b>chain</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="XEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="YEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="IsNishio">Indicates whether the chain is a nishio forcing chains (X-Forcing chains).</param>
            <param name="IsMultiple">
            Indicates whether the chain is a multiple forcing chains (Cell forcing chains and Region forcing chains).
            </param>
            <param name="IsDynamic">Indicates whether the chain is a dynamic forcing chains.</param>
            <param name="Level">The dynamic searching level.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides a usage of <b>chain</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="XEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="YEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="IsNishio">Indicates whether the chain is a nishio forcing chains (X-Forcing chains).</param>
            <param name="IsMultiple">
            Indicates whether the chain is a multiple forcing chains (Cell forcing chains and Region forcing chains).
            </param>
            <param name="IsDynamic">Indicates whether the chain is a dynamic forcing chains.</param>
            <param name="Level">The dynamic searching level.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.SortKey">
            <summary>
            The sort key.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.FlatComplexity">
            <summary>
            The flat complexity.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.Complexity">
            <summary>
            The total complexity.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.BaseDifficulty">
            <summary>
            The base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.LengthDifficulty">
            <summary>
            The length difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.IsXyChain">
            <summary>
            Indicates whether the specified chain is an XY-Chain.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.Equals(Sudoku.Solving.Manual.Chaining.ChainingStepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingStepInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.ChainingStepSearcher">
            <summary>
            Encapsulates a <b>chain</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.ChainingTypeCode">
            <summary>
            Indicates a type code for a chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.MWing">
            <summary>
            Indicates the M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.SplitWing">
            <summary>
            Indicates the split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.LocalWing">
            <summary>
            Indicates the local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.HybridWing">
            <summary>
            Indicates the hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.XChain">
            <summary>
            Indicates the X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.FishyCycle">
            <summary>
            Indicates the X-Cycle (Fishy Cycle).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.XyChain">
            <summary>
            Indicates the XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.XyCycle">
            <summary>
            Indicates the XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.ContinuousNiceLoop">
            <summary>
            Indicates the continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.XyXChain">
            <summary>
            Indicates the XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.DiscontinuousNiceLoop">
            <summary>
            Indicates the discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.Aic">
            <summary>
            Indicates the alternating inference chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.CellFc">
            <summary>
            Indicates the cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.RegionFc">
            <summary>
            Indicates the region forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.ContradictionFc">
            <summary>
            Indicates the contradiction forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.DoubleFc">
            <summary>
            Indicates the double forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.DynamicCellFc">
            <summary>
            Indicates the dynamic cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.DynamicRegionFc">
            <summary>
            Indicates the dynamic region forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.DynamicContradictionFc">
            <summary>
            Indicates the dynamic contradiction forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.ChainingTypeCode.DynamicDoubleFc">
            <summary>
            Indicates the dynamic double forcing chains.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.DynamicMultipleFcStepSearcher">
            <summary>
            Encapsulates an <b>dynamic multiple forcing chains</b> (<b>Dynamic Multiple FCs</b>) technique searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.DynamicMultipleFcStepSearcher.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.Chaining.DynamicMultipleFcStepSearcher"/> instance.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.FcStepSearcher">
            <summary>
            Encapsulates an <b>forcing chains</b> (<b>FCs</b>) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.FcStepSearcher.IsNishio">
            <summary>
            Indicates the information.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.FcStepSearcher.IsMultiple">
            <summary>
            Indicates the information.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.FcStepSearcher.IsDynamic">
            <summary>
            Indicates the information.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.FcStepSearcher.Level">
            <summary>
            Indicates the level of the searching depth.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Chaining.FcStepSearcher._savedGrid">
            <summary>
            Indicates the grid that is used in processing.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="nishio">Indicates whether the searcher should search for nishio chains.</param>
            <param name="multiple">Indicates whether the searcher should search for multiple chains.</param>
            <param name="dynamic">Indicates whether the searcher should search for dynamic chains.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.FcStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.FcStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.Chaining.ChainingStepInfo},Sudoku.Data.SudokuGrid@)">
            <summary>
            Search for chains of each type.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.DoBinaryChaining(System.Collections.Generic.IList{Sudoku.Solving.Manual.Chaining.ChainingStepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Node@,Sudoku.Data.Node@,System.Collections.Generic.Set{Sudoku.Data.Node},System.Collections.Generic.Set{Sudoku.Data.Node},System.Boolean,System.Boolean)">
            <summary>
            Do binary chaining.
            </summary>
            <param name="accumulator">The current accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pOn">The on node.</param>
            <param name="pOff">The off node.</param>
            <param name="onToOn">The list for <c>on</c> nodes to <c>on</c> nodes.</param>
            <param name="onToOff">The list for <c>on</c> nodes to <c>off</c> nodes.</param>
            <param name="doReduction">Indicates whether the method executes double chaining.</param>
            <param name="doContradiction">Indicates whether the method executes contradiction chaining.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.DoRegionChaining(System.Collections.Generic.IList{Sudoku.Solving.Manual.Chaining.ChainingStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,System.Collections.Generic.Set{Sudoku.Data.Node},System.Collections.Generic.Set{Sudoku.Data.Node})">
            <summary>
            Do region chaining.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid"></param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="onToOn">The list for <c>on</c> nodes to <c>on</c> nodes.</param>
            <param name="onToOff">The list for <c>on</c> nodes to <c>off</c> nodes.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.DoChaining(Sudoku.Data.SudokuGrid@,System.Collections.Generic.Set{Sudoku.Data.Node},System.Collections.Generic.Set{Sudoku.Data.Node})">
            <summary>
            Do chaining (i.e. multiple chaining).
            </summary>
            <param name="grid">The grid.</param>
            <param name="toOn">The list to <c>on</c> nodes.</param>
            <param name="toOff">The list to <c>off</c> nodes.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.CreateChainingOnHint(Sudoku.Data.Node@,Sudoku.Data.Node@,Sudoku.Data.Node@,Sudoku.Data.Node@,System.Boolean)">
            <summary>
            Create a chaining hint whose conclusion is an on result.
            </summary>
            <param name="destOn">The destination on node.</param>
            <param name="destOff">The destination off node.</param>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <param name="isAbsurd">Indicates whether the chain is absurd.</param>
            <returns>The hint.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.CreateChainingOffHint(Sudoku.Data.Node@,Sudoku.Data.Node@,Sudoku.Data.Node@,Sudoku.Data.Node@,System.Boolean)">
            <summary>
            Create a chaining hint whose conclusion is an off result.
            </summary>
            <param name="destOn">The destination on node.</param>
            <param name="destOff">The destination off node.</param>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <param name="isAbsurd">Indicates whether the chain is absurd.</param>
            <returns>The hint.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.CreateCellFcHint(Sudoku.Data.SudokuGrid@,System.Int32,Sudoku.Data.Node@,System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Collections.Generic.Set{Sudoku.Data.Node}})">
            <summary>
            Create the hint for cell forcing chains.
            </summary>
            <param name="grid">The grid.</param>
            <param name="sourceCell">The source cell.</param>
            <param name="target">The target elimination node.</param>
            <param name="outcomes">All outcomes (conclusions).</param>
            <returns>The information instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.FcStepSearcher.CreateRegionFcHint(System.Int32,System.Int32,Sudoku.Data.Node@,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.Set{Sudoku.Data.Node}})">
            <summary>
            Create a hint of region forcing chains.
            </summary>
            <param name="region">The region.</param>
            <param name="digit">The digit.</param>
            <param name="target">The target node.</param>
            <param name="outcomes">All outcomes (conclusions).</param>
            <returns>The technique information instance.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.LoopStepInfo">
            <summary>
            Provides a usage of <b>(grouped) continuous nice loop</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="XEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="YEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="Target">The destination node that is off.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.LoopStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean,System.Boolean,Sudoku.Data.Node@)">
            <summary>
            Provides a usage of <b>(grouped) continuous nice loop</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="XEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="YEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="Target">The destination node that is off.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopStepInfo.IsXCycle">
            <summary>
            Indicates whether the specified cycle is an X-Cycle.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.MultipleFcStepSearcher">
            <summary>
            Encapsulates an <b>multiple forcing chains</b> (<b>Multiple FCs</b>) technique searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.MultipleFcStepSearcher.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.Chaining.MultipleFcStepSearcher"/> instance.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.NishioFcStepSearcher">
            <summary>
            Encapsulates an <b>nishio forcing chains</b> (<b>Nishio FCs</b>) technique searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.NishioFcStepSearcher.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.Chaining.NishioFcStepSearcher"/> instance.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo">
            <summary>
            Provides a usage of <b>region forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region.</param>
            <param name="Digit">The digit.</param>
            <param name="Chains">All branches.</param>
            <param name="IsDynamic">Indicates whether the chain is dynamic.</param>
            <param name="Level">Indicates the depth level of the dynamic chains.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Int32,Sudoku.Data.Node},System.Boolean,System.Int32)">
            <summary>
            Provides a usage of <b>region forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region.</param>
            <param name="Digit">The digit.</param>
            <param name="Chains">All branches.</param>
            <param name="IsDynamic">Indicates whether the chain is dynamic.</param>
            <param name="Level">Indicates the depth level of the dynamic chains.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.RegionChainingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.EliminatedReason">
            <summary>
            Encapsulates a type that represents the reason why the eliminations can be removed.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.Basic">
            <summary>
            Indicates the elimination is the basic elimination (Target eliminations).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.TargetInference">
            <summary>
            Indicates the target inference eliminations (that is eliminated via mirror cells).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.Mirror">
            <summary>
            Indicates the mirror eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.BiBiPattern">
            <summary>
            Indicates the bi-bi pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.TargetPair">
            <summary>
            Indicates the target pair eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.GeneralizedSwordfish">
            <summary>
            Indicates the generalized swordfish eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.TrueBase">
            <summary>
            Indicates the true base eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.EliminatedReason.CompatibilityTest">
            <summary>
            Indicates the compatibility test eliminations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Elimination">
            <summary>
            Encapsulates an instance to represent a series of eliminations in JE or SE.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Elimination.#ctor(Sudoku.Data.Candidates@,Sudoku.Solving.Manual.Exocets.EliminatedReason)">
            <summary>
            Initializes an instance with the eliminations and the reason.
            </summary>
            <param name="eliminations">The eliminations.</param>
            <param name="reason">The reason why those candidates can be eliminated.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Elimination.Count">
            <summary>
            Indicates how many eliminations the instance contains.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Elimination.Eliminations">
            <summary>
            Indicates the eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Elimination.Reason">
            <summary>
            Indicates the reason why these candidates can be eliminated.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Elimination.Header">
            <summary>
            Indicates the header of the reason.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Elimination.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Elimination.AsSpan">
            <summary>
            Converts all elements to <see cref="T:Sudoku.Data.Conclusion"/>.
            </summary>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> of type <see cref="T:Sudoku.Data.Conclusion"/>.</returns>
            <seealso cref="T:System.ReadOnlySpan`1"/>
            <seealso cref="T:Sudoku.Data.Conclusion"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Elimination.op_BitwiseOr(Sudoku.Solving.Manual.Exocets.Elimination@,Sudoku.Solving.Manual.Exocets.Elimination@)">
            <summary>
            To merge two different instances, and return the merged result.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>
            The merged result. The result will contain all eliminations from two instances, and
            the reason should be same.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws when two instances contains different eliminated reason.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Elimination.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Elimination.Deconstruct(Sudoku.Data.Candidates@,Sudoku.Solving.Manual.Exocets.EliminatedReason@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.ExocetStepInfo">
            <summary>
            Provides a usage of <b>exocet</b> technique.
            </summary>
            <param name="Views">All views.</param>
            <param name="Exocet">The exocet.</param>
            <param name="Digits">All digits.</param>
            <param name="LockedMemberQ">The locked member Q.</param>
            <param name="LockedMemberR">The locked member R.</param>
            <param name="Eliminations">The eliminations.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Exocets.Pattern@,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.Exocets.Elimination})">
            <summary>
            Provides a usage of <b>exocet</b> technique.
            </summary>
            <param name="Views">All views.</param>
            <param name="Exocet">The exocet.</param>
            <param name="Digits">All digits.</param>
            <param name="LockedMemberQ">The locked member Q.</param>
            <param name="LockedMemberR">The locked member R.</param>
            <param name="Eliminations">The eliminations.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.DigitsStr">
            <summary>
            Indiactes the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.BaseMapStr">
            <summary>
            Indicates the base map string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.TargetMapStr">
            <summary>
            Indicates the target map string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.LockedMemberQStr">
            <summary>
            Indicates the locked member Q string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.LockedMemberRStr">
            <summary>
            Indicates the locked member R string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.BaseMap">
            <summary>
            Indicates the map of the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.TargetMap">
            <summary>
            Indicates the map of the target cells.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.ToFullString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetStepInfo.GatherConclusions(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.Exocets.Elimination})">
            <summary>
            Gather conclusions.
            </summary>
            <returns>The gathered result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.ExocetStepSearcher">
            <summary>
            Encapsulates an <b>exocet</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetStepSearcher.Patterns">
            <summary>
            Indicates all patterns.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetStepSearcher.CheckAdvanced">
            <summary>
            Indicates whether the searcher will find advanced eliminations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.JeStepInfo">
            <summary>
            Provides a usage of <b>junior exocet</b> (JE) technique.
            </summary>
            <param name="Views">All views.</param>
            <param name="Exocet">The exocet.</param>
            <param name="Digits">All digits.</param>
            <param name="LockedMemberQ">The locked member Q.</param>
            <param name="LockedMemberR">The locked member R.</param>
            <param name="Eliminations">All eliminations.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JeStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Exocets.Pattern@,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.Exocets.Elimination})">
            <summary>
            Provides a usage of <b>junior exocet</b> (JE) technique.
            </summary>
            <param name="Views">All views.</param>
            <param name="Exocet">The exocet.</param>
            <param name="Digits">All digits.</param>
            <param name="LockedMemberQ">The locked member Q.</param>
            <param name="LockedMemberR">The locked member R.</param>
            <param name="Eliminations">All eliminations.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.MirrorDifficulty">
            <summary>
            Indicates extra difficulty on mirror eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.BiBiDifficulty">
            <summary>
            Indicates extra difficulty on Bi-Bi pattern eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.TargetPairDifficulty">
            <summary>
            Indicates extra difficulty on target pair eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepInfo.GeneralizedSwordfishDifficulty">
            <summary>
            Indicates extra difficulty on generalized swordfish eliminations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.JeStepSearcher">
            <summary>
            Encapsulates a <b>junior exocet</b> (JE) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JeStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JeStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JeStepSearcher.GatherBasic(Sudoku.Data.SudokuGrid@,Sudoku.Data.Candidates@,System.Int32,System.Int16,System.Int16)">
            <summary>
            Gathering basic eliminations.
            </summary>
            <param name="grid">The grid.</param>
            <param name="elims">The elimination set.</param>
            <param name="cell">The cell to check eliminations.</param>
            <param name="baseCands">The mask that holds the digits in the base cells.</param>
            <param name="baseCandsWithAhsOrConjugatePair">
            The extra digits mask that holds in AHS or conjugate pair structure.
            </param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JeStepSearcher.CheckCrossline(Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check the cross-line cells.
            </summary>
            <param name="crossline">The cross line cells.</param>
            <param name="needChecking">The digits that need checking.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the structure passed the validation.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JeStepSearcher.CheckTarget(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,System.Int32,System.Int16@)">
            <summary>
            Check the target cells.
            </summary>
            <param name="grid">The grid.</param>
            <param name="pos1">The cell 1 to determine.</param>
            <param name="pos2">The cell 2 to determine.</param>
            <param name="baseCands">The candidates that is from base two cells.</param>
            <param name="ahsOrConjugatePairCands">
            The other candidate mask. If failed to check,
            the value will be -1.
            </param>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Pattern">
            <summary>
            <para>
            Indicates an exocet pattern. The pattern will be like:
            <code>
            .-------.-------.-------.
            | B B E | E . . | E . . |
            | . . E | Q . . | R . . |
            | . . E | Q . . | R . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            '-------'-------'-------'
            </code>
            Where:
            <list type="table">
            <item><term>B</term><description>Base Cells.</description></item>
            <item><term>Q</term><description>1st Object Pair (Target cells pair 1).</description></item>
            <item><term>R</term><description>2nd Object Pair (Target cells pair 2).</description></item>
            <item><term>S</term><description>Cross-line Cells.</description></item>
            <item><term>E</term><description>Escape Cells.</description></item>
            </list>
            </para>
            <para>
            In the data structure, all letters will be used as the same one in this exemplar.
            In addition, if senior exocet, one of two target cells will lie in cross-line cells,
            and the lines of two target cells lying on can't contain any base digits.
            </para>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Initializes an instance with the specified cells.
            </summary>
            <param name="base1">The base cell 1.</param>
            <param name="base2">The base cell 2.</param>
            <param name="tq1">The target Q1 cell.</param>
            <param name="tq2">The target Q2 cell.</param>
            <param name="tr1">The target R1 cell.</param>
            <param name="tr2">The target R2 cell.</param>
            <param name="crossline">The cross line cells.</param>
            <param name="mq1">The mirror Q1 cell.</param>
            <param name="mq2">The mirror Q2 cell.</param>
            <param name="mr1">The mirror R1 cell.</param>
            <param name="mr2">The mirror R2 cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.Base1">
            <summary>
            Indicates the base cell 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.Base2">
            <summary>
            Indicates the base cell 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetQ1">
            <summary>
            Indicates the target Q1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetQ2">
            <summary>
            Indicates the target Q2 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetR1">
            <summary>
            Indicates the target R1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetR2">
            <summary>
            Indicates the target R2 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.CrossLine">
            <summary>
            Indicates the cross line cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorQ1">
            <summary>
            Indicates the mirror Q1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorQ2">
            <summary>
            Indicates the mirror Q2 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorR1">
            <summary>
            Indicates the mirror R1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorR2">
            <summary>
            Indicates the mirror R2 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.BaseCellsMap">
            <summary>
            Indicates the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetCellsMap">
            <summary>
            Indicates the target cells.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Deconstruct(Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.SeStepInfo">
            <summary>
            Provides a usage of <b>senior exocet</b> (SE) technique.
            </summary>
            <param name="Views">All views.</param>
            <param name="Exocet">The exocet.</param>
            <param name="Digits">All digits.</param>
            <param name="EndoTargetCell">The endo target cell.</param>
            <param name="ExtraRegionsMask">The extra regions mask.</param>
            <param name="Eliminations">All eliminations.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Exocets.Pattern@,System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32[],System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.Exocets.Elimination})">
            <summary>
            Provides a usage of <b>senior exocet</b> (SE) technique.
            </summary>
            <param name="Views">All views.</param>
            <param name="Exocet">The exocet.</param>
            <param name="Digits">All digits.</param>
            <param name="EndoTargetCell">The endo target cell.</param>
            <param name="ExtraRegionsMask">The extra regions mask.</param>
            <param name="Eliminations">All eliminations.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeStepInfo.ContainsExtraRegions">
            <summary>
            Indicates whether the specified instance contains any extra regions.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.SeStepSearcher">
            <summary>
            Encapsulates a <b>senior exocet</b> (SE) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeStepSearcher.CheckCrossline(Sudoku.Data.Cells@,System.Int16,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check the cross-line cells.
            </summary>
            <param name="tempCrossline">The cross-line map.</param>
            <param name="baseCandidatesMask">The base candidate mask.</param>
            <param name="t1">The target cell 1.</param>
            <param name="t2">The target cell 2.</param>
            <param name="isRow">Indicates whether the specified computation is for rows.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo">
            <summary>
            Provides a usage of <b>Hobiwan's fish</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseSets">The base sets.</param>
            <param name="CoverSets">The cover sets.</param>
            <param name="Exofins">All exo-fins.</param>
            <param name="Endofins">All endo-fins.</param>
            <param name="IsFranken">Indicates whether the current structure is a Franken fish.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is sashimi.
            The value can be:
            <list type="table">
            <item>
            <term><see langword="true"/></term><description>Sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term><description>Normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term><description>Normal fish.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Provides a usage of <b>Hobiwan's fish</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseSets">The base sets.</param>
            <param name="CoverSets">The cover sets.</param>
            <param name="Exofins">All exo-fins.</param>
            <param name="Endofins">All endo-fins.</param>
            <param name="IsFranken">Indicates whether the current structure is a Franken fish.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is sashimi.
            The value can be:
            <list type="table">
            <item>
            <term><see langword="true"/></term><description>Sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term><description>Normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term><description>Normal fish.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.BasicDiff">
            <summary>
            The basic difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FinnedDiff">
            <summary>
            The finned difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.SashimiDiff">
            <summary>
            The sashimi difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FrankenShapeDiffExtra">
            <summary>
            The Franken shape extra difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.MutantShapeDiffExtra">
            <summary>
            The mutant shape extra difficulty rating table.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.BaseDifficulty">
            <summary>
            Indicates the base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.SashimiExtraDifficulty">
            <summary>
            Indicates the extra difficulty on sashimi judgement.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.ShapeExtraDifficulty">
            <summary>
            Indicates the extra difficulty on shape.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.BaseHashCode">
            <summary>
            Indicates the base hash code.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.BaseSetHashCode">
            <summary>
            Indicates the base set hash code.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.CoverSetHashCode">
            <summary>
            Indicates the cover set hash code.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.InternalName">
            <summary>
            The internal name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FinModifier">
            <summary>
            Indicates the fin modifier.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.ShapeModifier">
            <summary>
            The shape modifier.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.Equals(Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FinModifiers">
            <summary>
            Indicates the fin modifiers.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FinModifiers.Normal">
            <summary>
            Indicates the normal fish (i.e. no fins).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FinModifiers.Finned">
            <summary>
            Indicates the finned fish
            (i.e. contains fins, but the fish may be regular when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FinModifiers.Sashimi">
            <summary>
            Indicates the sashimi fish
            (i.e. contains fins, and the fish may be degenerated to hidden singles when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.FinModifiers.Siamese">
            <summary>
            Indicates the siamese fish (i.e. two fish with different cover sets).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.ShapeModifiers">
            <summary>
            Indicates the shape modifiers.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.ShapeModifiers.Basic">
            <summary>
            Indicates the basic fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.ShapeModifiers.Franken">
            <summary>
            Indicates the franken fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.ShapeModifiers.Mutant">
            <summary>
            Indicates the mutant fish.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.ComplexFishStepInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.ComplexFishStepSearcher">
            <summary>
            Encapsulates a <b>Hobiwan's fish</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepSearcher.MaxSize">
            <summary>
            Indicates the max size to search.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.ComplexFishStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.ComplexFishStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.ComplexFishStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IList{Sudoku.Data.Conclusion}[],System.Int32)">
            <summary>
            Get all possible fish steps.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pomElims">The possible eliminations to check, specified as a dictionary.</param>
            <param name="digit">The current digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.ComplexFishStepSearcher.GetPomEliminationsFirstly(Sudoku.Data.SudokuGrid@)">
            <summary>
            Get POM technique eliminations at first.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The dictionary that contains all eliminations grouped by digit used.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.FishStepInfo">
            <summary>
            Provides a usage of <b>fish</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseSets">The base sets.</param>
            <param name="CoverSets">The cover sets.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.FishStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>fish</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseSets">The base sets.</param>
            <param name="CoverSets">The cover sets.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishStepInfo.Size">
            <summary>
            Indicates the size of this fish instance.
            </summary>
            <remarks>
            The name of the corresponding names are:
            <list type="table">
            <item>
            <term>1</term>
            <description>Cyclops (But out of use)</description>
            </item>
            <item>
            <term>2</term>
            <description>X-Wing</description>
            </item>
            <item>
            <term>3</term>
            <description>Swordfish</description>
            </item>
            <item>
            <term>4</term>
            <description>Jellyfish</description>
            </item>
            <item>
            <term>5</term>
            <description>Squirmbag or Starfish</description>
            </item>
            <item>
            <term>6</term>
            <description>Whale</description>
            </item>
            <item>
            <term>7</term>
            <description>Leviathan</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishStepInfo.Rank">
            <summary>
            Indicates the rank of the fish.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.FishStepInfo.GetComplexFishTechniqueCodeFromName(System.String)">
            <summary>
            Try to get the <see cref="T:Sudoku.Techniques.Technique"/> code instance from the specified name, where the name belongs
            to a complex fish name, such as "Finned Franken Swordfish".
            </summary>
            <param name="name">The name.</param>
            <returns>The <see cref="T:Sudoku.Techniques.Technique"/> code instance.</returns>
            <seealso cref="T:Sudoku.Techniques.Technique"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.FishStepSearcher">
            <summary>
            Encapsulates a <b>fish</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo">
            <summary>
            Provides a usage of <b>normal fish</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseSets">The base sets.</param>
            <param name="CoverSets">The cover sets.</param>
            <param name="Fins">All fin cells.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is sashimi.
            The value can be:
            <list type="table">
            <item>
            <term><see langword="true"/></term><description>Sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term><description>Normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term><description>Normal fish.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Data.Cells@,System.Nullable{System.Boolean})">
            <summary>
            Provides a usage of <b>normal fish</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseSets">The base sets.</param>
            <param name="CoverSets">The cover sets.</param>
            <param name="Fins">All fin cells.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is sashimi.
            The value can be:
            <list type="table">
            <item>
            <term><see langword="true"/></term><description>Sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term><description>Normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term><description>Normal fish.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.BaseDifficulty">
            <summary>
            Indicates the base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.SashimiExtraDifficulty">
            <summary>
            Indicates the extra difficulty on sashimi judgement.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepInfo.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.NormalFishStepSearcher">
            <summary>
            Encapsulates a <b>normal fish</b> technique searcher. Fins can also be found.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32**,System.Int32**,System.Boolean,System.Boolean)">
            <summary>
            Get all possible normal fishes.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="r">The possible row table to iterate.</param>
            <param name="c">The possible column table to iterate.</param>
            <param name="withFin">Indicates whether the searcher will check for the existence of fins.</param>
            <param name="searchRow">
            Indicates whether the searcher searches for fishes in the direction of rows.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishStepSearcher.GetDirectView(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32[],System.Int32[],Sudoku.Data.Cells@,System.Boolean)">
            <summary>
            Get the direct fish view with the specified grid and the base sets.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
            <param name="fins">
            The cells of the fin in the current fish.
            </param>
            <param name="searchRow">Indicates whether the current searcher searches row.</param>
            <returns>The view.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.AlcStepInfo">
            <summary>
            Provides a usage of <b>almost locked candidates</b> (ALC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="DigitsMask">The mask to represent all digits used.</param>
            <param name="BaseCells">All base cells.</param>
            <param name="TargetCells">All target cells.</param>
            <param name="HasValueCell">Indicates whether the current ALC contains value cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int16,Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Boolean)">
            <summary>
            Provides a usage of <b>almost locked candidates</b> (ALC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="DigitsMask">The mask to represent all digits used.</param>
            <param name="BaseCells">All base cells.</param>
            <param name="TargetCells">All target cells.</param>
            <param name="HasValueCell">Indicates whether the current ALC contains value cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.Size">
            <summary>
            Indicates the size.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.BaseDifficulty">
            <summary>
            Indicates the base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepInfo.ExtraDifficulty">
            <summary>
            Indicates the extra difficulty.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.AlcStepSearcher">
            <summary>
            Encapsulates an <b>almost locked candidates</b> (ALC) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepSearcher.CheckAlmostLockedQuadruple">
            <summary>
            Indicates whether the user checks the almost locked quadruple.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Process the calculation.
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="baseSet">The base set.</param>
            <param name="coverSet">The cover set.</param>
            <param name="a">The left grid map.</param>
            <param name="b">The right grid map.</param>
            <param name="c">The intersection.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.IntersectionStepInfo">
            <summary>
            Provides a usage of <b>intersection</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.IntersectionStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>intersection</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.IntersectionStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.IntersectionStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.IntersectionStepSearcher">
            <summary>
            Encapsulates an <b>intersection</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.LcStepInfo">
            <summary>
            Provides a usage of <b>locked candidates</b> (LC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit.</param>
            <param name="BaseSet">The base region.</param>
            <param name="CoverSet">The cover region.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LcStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>locked candidates</b> (LC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit.</param>
            <param name="BaseSet">The base region.</param>
            <param name="CoverSet">The cover region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.LcStepSearcher">
            <summary>
            Encapsulates a <b>locked candidates</b> (LC) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LcStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BfStepInfo">
            <summary>
            Provides a usage of <b>brute force</b> (<b>BF</b>) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BfStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>brute force</b> (<b>BF</b>) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BfStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BfStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BfStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BfStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BfStepSearcher">
            <summary>
            Encapsulates a <b>brute force</b> (<b>BF</b>) technique searcher.
            The searcher is not executed until all searchers whose priority
            is higher than this one can't find out any technique steps.
            </summary>
            <remarks>
            This searcher is a trick, because it will check the assignments on
            the terminal grid (I mean, the answer grid).
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BfStepSearcher.TryAndErrorOrder">
            <summary>
            The order of cell offsets to get values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BfStepSearcher.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.LastResorts.BfStepSearcher"/> with no arguments.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BfStepSearcher.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            A trick. Initializes an instance with the solution grid.
            This searcher will try to extract a value from the
            solution.
            </summary>
            <param name="solution">The solution.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BfStepSearcher.Solution">
            <summary>
            Indicates the solution grid.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BfStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BfStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BfStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo">
            <summary>
            Provides a usage of <b>Bowman's bingo</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="ContradictionSeries">Indicates all conclusions that occurs a contradiction.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion})">
            <summary>
            Provides a usage of <b>Bowman's bingo</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="ContradictionSeries">Indicates all conclusions that occurs a contradiction.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher">
            <summary>
            Encapsulates a <b>Bowman's bingo</b> technique searcher.
            </summary>
            <remarks>
            This searcher only uses hidden singles and naked singles as the iteration condition. Therefore,
            "Dynamic" Bowman's Bingo can't be found here.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher._searcher">
            <summary>
            The singles searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher._tempConclusions">
            <summary>
            All temporary conclusions.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.MaxLength">
            <summary>
            Indicates the maximum length of the bowman bingo you want to search for.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.LastResorts.BowmanBingoStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            Take all information recursively.
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="startCand">The start candidate.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.GetLinks">
            <summary>
            Get links.
            </summary>
            <returns>The links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.RecordUndoInfo(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            Record all information to be used in undo grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.UndoGrid(Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Int16)">
            <summary>
            Undo the grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="list">The list.</param>
            <param name="cell">The cell.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoStepSearcher.IsValidGrid(Sudoku.Data.SudokuGrid@,System.Int32)">
            <summary>
            To check the specified cell has a same digit filled in a cell
            which is same region with the current one.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.LastResortStepInfo">
            <summary>
            Provides a usage of <b>last resort</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.LastResortStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>last resort</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.LastResortStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.LastResortStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.LastResortStepSearcher">
            <summary>
            Encapsulates a <b>last resort</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.PomStepInfo">
            <summary>
            Provides a usage of <b>pattern overlay method</b> (POM) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>pattern overlay method</b> (POM) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.PomStepSearcher">
            <summary>
            Encapsulates a <b>pattern overlay method</b> (POM) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomStepSearcher.GetInvalidPos(Sudoku.Data.SudokuGrid@)">
            <summary>
            Get all invalid positions.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The 9 maps for invalid positions of each digit.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomStepSearcher.GetTemplates">
            <summary>
            Get templates.
            </summary>
            <returns>The templates.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.TemplateStepInfo">
            <summary>
            Provides a usage of <b>template</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="IsTemplateDeletion">Indicates whether the current instance is template deletion.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean)">
            <summary>
            Provides a usage of <b>template</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="IsTemplateDeletion">Indicates whether the current instance is template deletion.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher">
            <summary>
            Encapsulates a <b>template</b> technique searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher"/> instance with no arguments.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes an instance with the specified solution.
            </summary>
            <param name="solution">The solution.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher.TemplateDeleteOnly">
            <summary>
            Indicates whether the technique searcher only checks template deletes.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher.Solution">
            <summary>
            Indicates the solution grid.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo">
            <summary>
            Provides a usage of <b>bi-value oddagon</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>bi-value oddagon</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo.Code">
            <summary>
            Indicates the code.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo.Equals(Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher">
            <summary>
            Encapsulates a <b>bi-value oddagon</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher.IsValidLoop(Sudoku.Data.Cells@)">
            <summary>
            To check whether the loop is valid.
            </summary>
            <param name="cells">The loop.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},Sudoku.Data.Cells@)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepSearcher.CheckType3(System.Collections.Generic.IList{Sudoku.Solving.Manual.RankTheory.BivalueOddagonStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType1StepInfo">
            <summary>
            Provides a usage of <b>bi-value oddagon type 1</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraCell">The extra cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>bi-value oddagon type 1</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraCell">The extra cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType1StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType1StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType1StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType2StepInfo">
            <summary>
            Provides a usage of <b>bi-value oddagon type 2</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>bi-value oddagon type 2</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType2StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType3StepInfo">
            <summary>
            Provides a usage of <b>bi-value oddagon type 3</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraDigits">All extra digits.</param>
            <param name="ExtraCells">All extra cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int32,System.Int32,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>bi-value oddagon type 3</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraDigits">All extra digits.</param>
            <param name="ExtraCells">All extra cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType3StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.BivalueOddagonType3StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.GroupedBivalueOddagonStepInfo">
            <summary>
            Provides a usage of <b>grouped bi-value oddagon</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraDigits">The extra digits.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.GroupedBivalueOddagonStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int32,System.Int32,System.Int16)">
            <summary>
            Provides a usage of <b>grouped bi-value oddagon</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">The loop used.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ExtraDigits">The extra digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.GroupedBivalueOddagonStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.GroupedBivalueOddagonStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.GroupedBivalueOddagonStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.GroupedBivalueOddagonStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.GroupedBivalueOddagonStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.MslsStepInfo">
            <summary>
            Provides a usage of <b>multi-sector locked sets</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.MslsStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>multi-sector locked sets</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.MslsStepSearcher">
            <summary>
            Encapsulates a <b>multi-sector locked sets</b> (MSLS) technique. This searcher is
            the real technique, different with the abstract class <see cref="T:Sudoku.Solving.Manual.RankTheory.MslsStepSearcher"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.RankTheory.MslsStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.MslsStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.MslsStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.RankTheory.MslsStepSearcher.Patterns">
            <summary>
            Indicates the list initialized with the static constructor.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.RankTheoryStepInfo">
            <summary>
            Provides a usage of <b>rank theory</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.RankTheoryStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>rank theory</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.RankTheoryStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.RankTheoryStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.RankTheoryStepSearcher">
            <summary>
            Encapsulates a <b>rank theory</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.Sdc3dStepInfo">
            <summary>
            Provides a usage of <b>3-dimension sue de coq</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="RowDigitsMask">The row digits mask.</param>
            <param name="ColumnDigitsMask">The column digits mask.</param>
            <param name="BlockDigitsMask">The block digits mask.</param>
            <param name="RowCells">The row cells map.</param>
            <param name="ColumnCells">The column cells map.</param>
            <param name="BlockCells">The block cells map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.Sdc3dStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int16,System.Int16,System.Int16,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>3-dimension sue de coq</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="RowDigitsMask">The row digits mask.</param>
            <param name="ColumnDigitsMask">The column digits mask.</param>
            <param name="BlockDigitsMask">The block digits mask.</param>
            <param name="RowCells">The row cells map.</param>
            <param name="ColumnCells">The column cells map.</param>
            <param name="BlockCells">The block cells map.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.Sdc3dStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.Sdc3dStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.Sdc3dStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.Sdc3dStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.Sdc3dStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.Sdc3dStepSearcher">
            <summary>
            Encapsulates a <b>3-dimension sue de coq</b> technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.Sdc3dStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.Sdc3dStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.Sdc3dStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.SdcStepInfo">
            <summary>
            Provides a usage of <b>sue de coq</b> (SdC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the SdC is cannibalistic.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The map of block cells.</param>
            <param name="LineCells">The map of line cells.</param>
            <param name="IntersectionCells">The map of intersection cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int16,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>sue de coq</b> (SdC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the SdC is cannibalistic.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The map of block cells.</param>
            <param name="LineCells">The map of line cells.</param>
            <param name="IntersectionCells">The map of intersection cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.CannibalismExtraDifficulty">
            <summary>
            Indicates the extra difficulty on cannibalism.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepInfo.IsolatedExtraDifficulty">
            <summary>
            Indicates the extra difficulty on isolated digits.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.SdcStepSearcher">
            <summary>
            Encapsulates a <b>sue de coq</b> (SdC) technique searcher.
            Cannibalistic SdCs can be found also.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SdcStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.SdcStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo">
            <summary>
            Provides a usage of <b>domino loop</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>domino loop</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.RankTheory.SkLoopStepSearcher">
            <summary>
            Encapsulates a <b>domino loop</b> technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.RankTheory.SkLoopStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.RankTheory.SkLoopStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.RankTheory.SkLoopStepSearcher.SkLoopTable">
            <summary>
            The position table of all SK-loops.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.RankTheory.SkLoopStepSearcher.RegionMaps">
            <summary>
            The region maps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.ErStepInfo">
            <summary>
            Provides a usage of <b>empty rectangle</b> (<b>ER</b>) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="Block">The block that the empty rectangle lies in.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.ErStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.ConjugatePair@)">
            <summary>
            Provides a usage of <b>empty rectangle</b> (<b>ER</b>) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="Block">The block that the empty rectangle lies in.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.ErStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.ErStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.ErStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.ErStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.ErStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.ErStepSearcher">
            <summary>
            Encapsulates an <b>empty rectangle</b> (<b>ER</b>) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.ErStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.ErStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.ErStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Sdps.ErStepSearcher.LinkIds">
            <summary>
            Indicates all regions iterating on the specified block
            forming an empty rectangle.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.GuardianStepInfo">
            <summary>
            Provides a usage of <b>guardian</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="Loop">The loop.</param>
            <param name="Guardians">All guardians.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>guardian</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="Loop">The loop.</param>
            <param name="Guardians">All guardians.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.Equals(Sudoku.Solving.Manual.Sdps.GuardianStepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianStepInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.GuardianStepSearcher">
            <summary>
            Encapsulates a <b>guardian</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianStepSearcher.CreateGuardianMap(System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@)">
            <summary>
            Create the guardian map.
            </summary>
            <param name="cell1">The first cell.</param>
            <param name="cell2">The second cell.</param>
            <param name="digit">The current digit.</param>
            <param name="guardians">
            The current guardian cells.
            This map may not contain cells that lies in the region
            that <paramref name="cell1"/> and <paramref name="cell2"/> both lies in.
            </param>
            <returns>All guardians.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.SdpStepInfo">
            <summary>
            Provides a usage of <b>single-digit pattern</b> (SDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.SdpStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32)">
            <summary>
            Provides a usage of <b>single-digit pattern</b> (SDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.SdpStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.SdpStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.SdpStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.SdpStepSearcher">
            <summary>
            Encapsulates a <b>single-digit pattern</b> (SDP) technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepInfo">
            <summary>
            Provides a usage of <b>two strong links</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseRegion">The base region.</param>
            <param name="TargetRegion">The target region.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>two strong links</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit used.</param>
            <param name="BaseRegion">The base region.</param>
            <param name="TargetRegion">The target region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepSearcher">
            <summary>
            Encapsulates a <b>two strong links</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.FullHouseStepInfo">
            <summary>
            Indicates a usage of <b>full house</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.FullHouseStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <summary>
            Indicates a usage of <b>full house</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.FullHouseStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.FullHouseStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.HiddenSingleStepInfo">
            <summary>
            Indicates a using of <b>hidden single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
            <param name="Region">The region.</param>
            <param name="EnableAndIsLastDigit">Indicates whether the current technique is a last digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.HiddenSingleStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Indicates a using of <b>hidden single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
            <param name="Region">The region.</param>
            <param name="EnableAndIsLastDigit">Indicates whether the current technique is a last digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleStepInfo.Format">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.NakedSingleStepInfo">
            <summary>
            Indicates a usage of <b>naked single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.NakedSingleStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <summary>
            Indicates a usage of <b>naked single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.NakedSingleStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.NakedSingleStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.SingleStepInfo">
            <summary>
            Provides a usage of <b>single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cell">The cell.</param>
            <param name="Digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.SingleStepSearcher">
            <summary>
            Encapsulates a <b>single</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.EnableFullHouse">
            <summary>
            Indicates whether the solver enables the technique full house.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.EnableLastDigit">
            <summary>
            Indicates whether the solver enables the technique last digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.ShowDirectLines">
            <summary>
            Indicates whether the solver shows the direct lines (cross-hatching information).
            </summary>
            <remarks>
            <para>
            Direct lines is a concept that describes the crosshatching information of a hidden single.
            For example, in this following grid:
            <code>
            .---------.---------.---------.
            | .  .  . | .  .  . | .  .  . |
            | .  .  . | .  .  1 | .  .  . |
            | .  .  . | .  .  . | .  .  . |
            :---------+---------+---------:
            | .  .  1 | x  x  x | .  .  . |
            | .  .  . | x  .  x | .  .  . |
            | .  .  . | x  x  x | 1  .  . |
            :---------+---------+---------:
            | .  .  . | .  .  . | .  .  . |
            | .  .  . | 1  .  . | .  .  . |
            | .  .  . | .  .  . | .  .  . |
            '---------'---------'---------'
            </code>
            The start point of the direct lines are:
            <list type="bullet">
            <item><c>r4c3(1)</c>, removes the cases of digit 1 for cells <c>r4c456</c></item>
            <item><c>r2c6(1)</c>, removes the cases of digit 1 for cells <c>r456c6</c></item>
            <item><c>r6c7(1)</c>, removes the cases of digit 1 for cells <c>r6c456</c></item>
            <item><c>r8c4(1)</c>, removes the cases of digit 1 for cells <c>r456c4</c></item>
            </list>
            </para>
            <para>
            All the end points may be displayed using a cross mark (<c>'x'</c>), and the start
            point may be used a circle mark (<c>'o'</c>).
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.HiddenSubsetStepInfo">
            <summary>
            Provides a usage of <b>hidden subset</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="Digits">All digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.HiddenSubsetStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>hidden subset</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="Digits">All digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.NakedSubsetStepInfo">
            <summary>
            Provides a usage of <b>naked subset</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="Digits">All digits used.</param>
            <param name="IsLocked">Indicates whether the subset is locked.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.NakedSubsetStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Provides a usage of <b>naked subset</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="Digits">All digits used.</param>
            <param name="IsLocked">Indicates whether the subset is locked.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetStepInfo.BaseDifficulty">
            <summary>
            Indicates the base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetStepInfo.ExtraDifficulty">
            <summary>
            Indicates the extra difficulty.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.SubsetStepInfo">
            <summary>
            Provides a usage of <b>subset</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="Digits">All digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>subset</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="Digits">All digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetStepInfo.Size">
            <summary>
            Indicates the size.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.SubsetStepSearcher">
            <summary>
            Encapsulates a <b>subset</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.Gsp2StepInfo">
            <summary>
            Provides a usage of <b>Gurth's symmetrical placement 2</b> (GSP2) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SymmetryType">The symmetry type used.</param>
            <param name="SwappingTable">Indicates the swapping table.</param>
            <param name="MappingTable">
            The mapping table. The value is always not <see langword="null"/> unless the current instance
            contains multiple different symmetry types.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.Gsp2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.SymmetryType,System.Int32[][],System.Nullable{System.Int32}[])">
            <summary>
            Provides a usage of <b>Gurth's symmetrical placement 2</b> (GSP2) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SymmetryType">The symmetry type used.</param>
            <param name="SwappingTable">Indicates the swapping table.</param>
            <param name="MappingTable">
            The mapping table. The value is always not <see langword="null"/> unless the current instance
            contains multiple different symmetry types.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.Gsp2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.Gsp2StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.Gsp2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher">
            <summary>
            Encapsulates a <b>Gurth's symmetrical placement 2</b> (GSP2) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.R1">
            <summary>
            Indicates the iteration list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.R2">
            <summary>
            Indicates the iteration list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.R3">
            <summary>
            Indicates the iteration list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.C1">
            <summary>
            Indicates the iteration list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.C2">
            <summary>
            Indicates the iteration list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.C3">
            <summary>
            Indicates the iteration list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.Searcher">
            <summary>
            Indicates the step searcher for GSP technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.FullRestore(System.Int32@,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Full restore a cell.
            </summary>
            <param name="cell">The cell to restore.</param>
            <param name="r1">The region list 1 for a row.</param>
            <param name="r2">The region list 2 for a row.</param>
            <param name="r3">The region list 3 for a row.</param>
            <param name="c1">The region list 1 for a column.</param>
            <param name="c2">The region list 2 for a column.</param>
            <param name="c3">The region list 3 for a column.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.Gsp2StepSearcher.SwapTwoRegions(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            Swap values on two different regions.
            </summary>
            <param name="grid">The grid.</param>
            <param name="region1">The region 1.</param>
            <param name="region2">The region 2.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.GspStepInfo">
            <summary>
            Provides a usage of <b>Gurth's symmetrical placement</b> (GSP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SymmetryType">The symmetry type used.</param>
            <param name="MappingTable">
            The mapping table. The value is always not <see langword="null"/> unless the current instance
            contains multiple different symmetry types.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.SymmetryType,System.Nullable{System.Int32}[])">
            <summary>
            Provides a usage of <b>Gurth's symmetrical placement</b> (GSP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="SymmetryType">The symmetry type used.</param>
            <param name="MappingTable">
            The mapping table. The value is always not <see langword="null"/> unless the current instance
            contains multiple different symmetry types.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspStepInfo.op_BitwiseOr(Sudoku.Solving.Manual.Symmetry.GspStepInfo,Sudoku.Solving.Manual.Symmetry.GspStepInfo)">
            <summary>
            Merge two information, and reserve all conclusions from them two.
            </summary>
            <param name="left">The left information to merge.</param>
            <param name="right">The right information to merge.</param>
            <returns>The merge result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.GspStepSearcher">
            <summary>
            Encapsulates a <b>Gurth's symmetrical placement</b> (GSP) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspStepSearcher.CheckDiagonal(System.Collections.Generic.IList{Sudoku.Data.Conclusion},Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.Symmetry.GspStepInfo@)">
            <summary>
            Check diagonal symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="info">The step information result.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspStepSearcher.CheckAntiDiagonal(System.Collections.Generic.IList{Sudoku.Data.Conclusion},Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.Symmetry.GspStepInfo@)">
            <summary>
            Check anti-diagonal symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="info">The step information result.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspStepSearcher.CheckCentral(System.Collections.Generic.IList{Sudoku.Data.Conclusion},Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.Symmetry.GspStepInfo@)">
            <summary>
            Check central symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="info">The step information result.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.SymmetryStepInfo">
            <summary>
            Provides a usage of <b>symmetry</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.SymmetryStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>symmetry</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.SymmetryStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.SymmetryStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.SymmetryStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.SymmetryStepSearcher">
            <summary>
            Encapsulates a <b>symmetry</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleStepInfo">
            <summary>
            Provides a usage of <b>BUG + n</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Candidates">All candidates used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>BUG + n</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Candidates">All candidates used.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleStepInfo.ExtraDifficulty">
            <summary>
            The table of extra difficulty values.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleStepInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo">
            <summary>
            Provides a usage of <b>BUG + n with forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Candidates">All candidates.</param>
            <param name="Chains">The sub-chains.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyDictionary{System.Int32,Sudoku.Data.Node})">
            <summary>
            Provides a usage of <b>BUG + n with forcing chains</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Candidates">All candidates.</param>
            <param name="Chains">The sub-chains.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.CountDifficulty">
            <summary>
            The difficulty for the number of true candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.LengthDifficulty">
            <summary>
            The length difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.Complexity">
            <summary>
            The total length of all sub-chains gathered.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher">
            <summary>
            Encapsulates a <b>bivalue universal grave multiple</b> (BUG + n) with forcing chains
            technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.CheckMultipleWithForcingChains(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check BUG + n with forcing chains.
            </summary>
            <param name="accumulator">The result list.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.DoChaining(Sudoku.Data.SudokuGrid@,System.Collections.Generic.ISet{Sudoku.Data.Node},System.Collections.Generic.ISet{Sudoku.Data.Node})">
            <summary>
            Do chaining. This method is only called by
            <see cref="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.CheckMultipleWithForcingChains(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})"/>.
            </summary>
            <param name="grid">The grid.</param>
            <param name="toOn">All nodes to on.</param>
            <param name="toOff">All nodes to off.</param>
            <returns>The result nodes.</returns>
            <seealso cref="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.CheckMultipleWithForcingChains(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.CreateEliminationHint(System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Data.Node@,System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Collections.Generic.Set{Sudoku.Data.Node}})">
            <summary>
            Create the elimination hint. This method is only called by
            <see cref="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.CheckMultipleWithForcingChains(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})"/>.
            </summary>
            <param name="trueCandidates">The true candidates.</param>
            <param name="target">The target node.</param>
            <param name="outcomes">All outcomes.</param>
            <returns>The result information instance.</returns>
            <seealso cref="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleWithFcStepSearcher.CheckMultipleWithForcingChains(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher">
            <summary>
            Encapsulates a <b>bivalue universal grave</b> (BUG) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.SearchExtendedBugTypes">
            <summary>
            Indicates whether the searcher should call the extended BUG checker
            to search for all true candidates no matter how difficult searching.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The result list.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.CheckType3Naked(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 3 (with naked subsets).
            </summary>
            <param name="accumulator">The result.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The result.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.CheckMultiple(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check BUG + n.
            </summary>
            <param name="accumulator">The result list.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.CheckXz(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check BUG-XZ.
            </summary>
            <param name="accumulator">The result list.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher.CheckSingleDigit(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check whether all candidates in the list has same digit value.
            </summary>
            <param name="list">The list of all true candidates.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1StepInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 1 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 1 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2StepInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 2 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit.</param>
            <param name="Cells">All cell offsets.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 2 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit">The digit.</param>
            <param name="Cells">All cell offsets.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2StepInfo.ExtraDifficulty">
            <summary>
            The table of extra difficulty values.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3StepInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 3 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TrueCandidates">All true candidates.</param>
            <param name="Digits">All digits.</param>
            <param name="Cells">All cells.</param>
            <param name="IsNaked">Indicates whether the subset is naked.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 3 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TrueCandidates">All true candidates.</param>
            <param name="Digits">All digits.</param>
            <param name="Cells">All cells.</param>
            <param name="IsNaked">Indicates whether the subset is naked.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4StepInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 4 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digits">All digits.</param>
            <param name="Cells">All cells.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Data.ConjugatePair@)">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 4 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digits">All digits.</param>
            <param name="Cells">All cells.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzStepInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave XZ rule</b> (BUG-XZ) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="Cells">All cells.</param>
            <param name="ExtraCell">The extra cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Provides a usage of <b>bivalue universal grave XZ rule</b> (BUG-XZ) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="Cells">All cells.</param>
            <param name="ExtraCell">The extra cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo.DigitsStr">
            <summary>
            Indicates the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepInfo.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher">
            <summary>
            Encapsulates an <b>extended rectangle</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Int16,System.Int32)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="extraCells">The extra cells map.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Int16,System.Int32)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="extraCells">The extra cells map.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.CheckType3Naked(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,System.Int16,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigits">The extra digits mask.</param>
            <param name="extraCellsMap">The map of extra cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.CheckType14(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Check type 4 and a part of type 1 that
            <see cref="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Int16,System.Int32)"/>
            cannot be found.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraCellsMap">The map of extra cells.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher.Combinations">
            <summary>
            All combinations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1StepInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 1 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 1 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2StepInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 2 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 2 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3StepInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 3 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="ExtraDigitsMask">All extra digits mask.</param>
            <param name="Region">The region.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int16,System.Int32)">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 3 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="ExtraDigitsMask">All extra digits mask.</param>
            <param name="Region">The region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4StepInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 4 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,Sudoku.Data.ConjugatePair@)">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 4 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">All cells.</param>
            <param name="DigitsMask">All digits mask.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo">
            <summary>
            Provides a usage of <b>unique loop</b> (UL) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>unique loop</b> (UL) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.ExtraDifficulty">
            <summary>
            The difficulty extra.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.Type">
            <summary>
            Indicates the type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.LoopStr">
            <summary>
            Indicates the loop string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.Digit1Str">
            <summary>
            Indicates the digit 1 string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.Digit2Str">
            <summary>
            Indicates the digit 2 string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.BaseDifficulty">
            <summary>
            Indicates the base difficulty.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.Equals(Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher">
            <summary>
            Encapsulates a <b>unique loop</b> (UL) technique searcher.
            In fact the unique loop can also search for URs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},Sudoku.Data.Cells@)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher.CheckType3(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UlStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1StepInfo">
            <summary>
            Provides a usage of <b>unique loop type 1</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>unique loop type 1</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1StepInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1StepInfo.Equals(Sudoku.Solving.Manual.Uniqueness.Loops.UlType1StepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1StepInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2StepInfo">
            <summary>
            Provides a usage of <b>unique loop type 2</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Provides a usage of <b>unique loop type 2</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2StepInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2StepInfo.Equals(Sudoku.Solving.Manual.Uniqueness.Loops.UlType2StepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2StepInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3StepInfo">
            <summary>
            Provides a usage of <b>unique loop type 3</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
            <param name="SubsetDigitsMask">The subset digits mask.</param>
            <param name="SubsetCells">The subset cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>unique loop type 3</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
            <param name="SubsetDigitsMask">The subset digits mask.</param>
            <param name="SubsetCells">The subset cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3StepInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3StepInfo.Equals(Sudoku.Solving.Manual.Uniqueness.Loops.UlType3StepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3StepInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4StepInfo">
            <summary>
            Provides a usage of <b>unique loop type 4</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.Cells@,Sudoku.Data.ConjugatePair@)">
            <summary>
            Provides a usage of <b>unique loop type 4</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Loop">The loop.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4StepInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4StepInfo.Equals(Sudoku.Solving.Manual.Uniqueness.Loops.UlType4StepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4StepInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.DigitsStr">
            <summary>
            Indicates the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepInfo.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher">
            <summary>
            Encapsulates a <b>Borescoper's deadly pattern</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.Patterns">
            <summary>
            All different patterns.
            </summary>
            <remarks>
            All possible heptagons and octagons are in here.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern@,System.Int16,System.Int16,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <param name="cornerMask1">The corner mask 1.</param>
            <param name="cornerMask2">The corner mask 2.</param>
            <param name="centerMask">The center mask.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern@,System.Int16,System.Int16,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <param name="cornerMask1">The corner mask 1.</param>
            <param name="cornerMask2">The corner mask 2.</param>
            <param name="centerMask">The center mask.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.CheckType3(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern@,System.Int16,System.Int16,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <param name="cornerMask1">The corner mask 1.</param>
            <param name="cornerMask2">The corner mask 2.</param>
            <param name="centerMask">The center mask.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern@,System.Int16,System.Int16,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <param name="cornerMask1">The corner mask 1.</param>
            <param name="cornerMask2">The corner mask 2.</param>
            <param name="centerMask">The center mask.</param>
            <param name="map">The map.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType1StepInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 1</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 1</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType1StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2StepInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 2</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 2</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3StepInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 3</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraCells">The extra cells.</param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 3</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraCells">The extra cells.</param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4StepInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 4</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ConjugateRegion">
            <para>The so-called conjugate region.</para>
            <para>
            A <b>conjugate region</b> is a serial of cells that all lies in a same region, but only these cells
            can be filled with the digits specified, other cells in this region can't be filled with that digit.
            </para>
            <para>
            Although the name of this term is <b>conjugate "region"</b>, but a region can contain not only
            those cells at present.
            </para>
            </param>
            <param name="ExtraMask">Indicates the mask of digits that is the combination.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 4</b> (BDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Map">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ConjugateRegion">
            <para>The so-called conjugate region.</para>
            <para>
            A <b>conjugate region</b> is a serial of cells that all lies in a same region, but only these cells
            can be filled with the digits specified, other cells in this region can't be filled with that digit.
            </para>
            <para>
            Although the name of this term is <b>conjugate "region"</b>, but a region can contain not only
            those cells at present.
            </para>
            </param>
            <param name="ExtraMask">Indicates the mask of digits that is the combination.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern">
            <summary>
            Indicates the borescoper's deadly pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern._mask">
            <summary>
            Indicates the internal structure.
            </summary>
            <remarks>
            <para>
            This mask is of type <see cref="T:System.Int64"/>:
            <code>
            0      7     14     21     28     35     42     49     56
            ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓
            |-------|-------|-------|-------|-------|-------|-------|-------|
            </code>
            where the bit [0..56] is for 8 cells, the last 7 bits determine the pattern is a
            heptagon or a octagon. If the value is 127 (not available), the pattern will be a heptagon.
            </para>
            <para>
            Due to the rendering engine, you have to check this file rather than the tip window.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.#ctor(System.Int64)">
            <summary>
            Initializes an instance with the specified mask.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.IsHeptagon">
            <summary>
            Indicates whether the specified pattern is a heptagon.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair1Map">
            <summary>
            Indicates the map of pair 1 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair2Map">
            <summary>
            Indicates the map of pair 2 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.CenterCellsMap">
            <summary>
            The map of other three (or four) cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Map">
            <summary>
            The map.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair1">
            <summary>
            Indicates the pair 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair2">
            <summary>
            Indicates the pair 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.CenterCells">
            <summary>
            Indicates the other three (or four) cells.
            </summary>
            <remarks>
            <b>If and only if</b> the fourth value in the returned quadruple is available.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern">
            <summary>
            Encapsulates a pattern for Qiu's deadly pattern (QDP).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.#ctor(Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Initializes an instance with the specified maps.
            </summary>
            <param name="square">The square.</param>
            <param name="baseLine">The base line.</param>
            <param name="pair">The pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Square">
            <summary>
            Indicates the square.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.BaseLine">
            <summary>
            Indicates the base line.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Pair">
            <summary>
            Indicates the pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.FullMap">
            <summary>
            Indicates the full map.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Deconstruct(Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeStepInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern locked type</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="Candidates">The candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern locked type</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="Candidates">The candidates.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@)">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepInfo.PatternStr">
            <summary>
            Indicates the pattern string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher">
            <summary>
            Encapsulates a <b>Qiu's deadly pattern</b> technique searcher.
            <code>
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | P P . | . . . | . . . |
            :-------+-------+-------:
            | S S B | B B B | B B B |
            | S S B | B B B | B B B |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            </code>
            Where:
            <list type="table">
            <item><term>P</term><description>Pair Cells.</description></item>
            <item><term>S</term><description>Square Cells.</description></item>
            <item><term>B</term><description>Base Line Cells.</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.Patterns">
            <summary>
            All different patterns.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Boolean,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int16,System.Int16)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="isRow">Indicates whether the searching is for rows.</param>
            <param name="pair">The pair cells.</param>
            <param name="square">The square cells.</param>
            <param name="baseLine">The base line cells.</param>
            <param name="pattern">The pattern.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="otherDigitsMask">Other digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Boolean,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int16,System.Int16)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="isRow">Indicates whether the searching is for rows.</param>
            <param name="pair">The pair cells.</param>
            <param name="square">The square cells.</param>
            <param name="baseLine">The base line cells.</param>
            <param name="pattern">The pattern.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="otherDigitsMask">Other digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.CheckType3(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Boolean,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int16,System.Int16)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="isRow">Indicates whether the searching is for rows.</param>
            <param name="pair">The pair cells.</param>
            <param name="square">The square cells.</param>
            <param name="baseLine">The base line cells.</param>
            <param name="pattern">The pattern.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="otherDigitsMask">Other digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},System.Boolean,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int16)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="isRow">Indicates whether the searching is for rows.</param>
            <param name="pair">The pair cells.</param>
            <param name="square">The square cells.</param>
            <param name="baseLine">The base line cells.</param>
            <param name="pattern">The pattern.</param>
            <param name="comparer">The mask comparer.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher.CheckLockedType(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,System.Boolean,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int16)">
            <summary>
            Check locked type.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="isRow">Indicates whether the searching is for rows.</param>
            <param name="pair">The pair cells.</param>
            <param name="square">The square cells.</param>
            <param name="baseLine">The base line cells.</param>
            <param name="pattern">The pattern.</param>
            <param name="comparer">The mask comparer.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1StepInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 1</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="Candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int32)">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 1</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="Candidate">The candidate.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2StepInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 2</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int32)">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 2</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3StepInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 3</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
            <param name="ExtraCells">The extra cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 3</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
            <param name="ExtraCells">The extra cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4StepInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 4</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern@,Sudoku.Data.ConjugatePair@)">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 4</b> (QDP) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pattern">The pattern.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.ArWithHiddenSingleStepInfo">
            <summary>
            Provides a usage of <b>avoidable rectangle + hidden single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All AR cells.</param>
            <param name="BaseCell">The base cell.</param>
            <param name="TargetCell">The target cell.</param>
            <param name="TargetRegion">The target region.</param>
            <param name="AbsoluteOffset">The absolute offset.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.ArWithHiddenSingleStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>avoidable rectangle + hidden single</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All AR cells.</param>
            <param name="BaseCell">The base cell.</param>
            <param name="TargetCell">The target cell.</param>
            <param name="TargetRegion">The target region.</param>
            <param name="AbsoluteOffset">The absolute offset.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.ArWithHiddenSingleStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.ArWithHiddenSingleStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.ArWithHiddenSingleStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.HiddenUrStepInfo">
            <summary>
            Provides a usage of <b>hidden unique rectangle</b> (HUR) or
            <b>hidden avoidable rectangle</b> (HAR) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ConjugatePairs">All conjugate pairs.</param>
            <param name="AbsoluteOffset">The absolute offset used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.HiddenUrStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Boolean,System.Collections.Generic.IReadOnlyList{Sudoku.Data.ConjugatePair},System.Int32)">
            <summary>
            Provides a usage of <b>hidden unique rectangle</b> (HUR) or
            <b>hidden avoidable rectangle</b> (HAR) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ConjugatePairs">All conjugate pairs.</param>
            <param name="AbsoluteOffset">The absolute offset used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.HiddenUrStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XStepInfo">
            <summary>
            Provides a usage of <b>unique rectangle + 2D (or 3X)</b> or
            <b>avoidable rectangle + 2D (or 3X)</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="XDigit">The X digit.</param>
            <param name="YDigit">The Y digit.</param>
            <param name="XyCell">The cell that only contains X and Y digit.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Techniques.Technique,System.Int32,System.Int32,System.Int32[],System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle + 2D (or 3X)</b> or
            <b>avoidable rectangle + 2D (or 3X)</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="XDigit">The X digit.</param>
            <param name="YDigit">The Y digit.</param>
            <param name="XyCell">The cell that only contains X and Y digit.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusStepInfo">
            <summary>
            Provides a usage of <b>unique rectangle plus</b> (UR+) or
            <b>avoidable rectangle plus</b> (AR+) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ConjugatePairs">All conjugate pairs.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Techniques.Technique,System.Int32,System.Int32,System.Int32[],System.Boolean,System.Collections.Generic.IReadOnlyList{Sudoku.Data.ConjugatePair},System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle plus</b> (UR+) or
            <b>avoidable rectangle plus</b> (AR+) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ConjugatePairs">All conjugate pairs.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusStepInfo.ConjPairsStr">
            <summary>
            Indicates the conjugate pair string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or <b>avoidable rectangle</b> (AR) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">
            <para>The technique code.</para>
            <para>
            Limited by the C# language, here we creates a new property <see cref="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueCode2"/>
            to pass the value and assign it to the property <see cref="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueCode"/>. If write code
            to place the property <see cref="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueCode"/> into the primary constructor as a parameter,
            the default member named <c>TechniqueCode</c> may be duplicate with this parameter's,
            which isn't allowed in <see langword="record"/> types in the langugae design.
            </para>
            </param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Techniques.Technique,System.Int32,System.Int32,System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or <b>avoidable rectangle</b> (AR) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">
            <para>The technique code.</para>
            <para>
            Limited by the C# language, here we creates a new property <see cref="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueCode2"/>
            to pass the value and assign it to the property <see cref="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueCode"/>. If write code
            to place the property <see cref="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueCode"/> into the primary constructor as a parameter,
            the default member named <c>TechniqueCode</c> may be duplicate with this parameter's,
            which isn't allowed in <see langword="record"/> types in the langugae design.
            </para>
            </param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.D1Str">
            <summary>
            Indicates the digit 1 string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.D2Str">
            <summary>
            Indicates the digit 2 string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher">
            <summary>
            Encapsulates an <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.AllowIncompleteUniqueRectangles">
            <summary>
            Indicates whether the UR can be incomplete. In other words,
            some of UR candidates can be removed before the pattern forms.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.SearchForExtendedUniqueRectangles">
            <summary>
            Indicates whether the searcher can search for extended URs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Boolean)">
            <summary>
            Get all possible hints from the grid.
            </summary>
            <param name="gathered">The list stored the result.</param>
            <param name="grid">The grid.</param>
            <param name="arMode">Indicates whether the current mode is searching for ARs.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckPreconditions(Sudoku.Data.SudokuGrid@,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Check preconditions.
            </summary>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is searching for ARs.</param>
            <returns>Indicates whether the UR is passed to check.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.IsConjugatePair(System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            To determine whether the specified region forms a conjugate pair
            of the specified digit, and the cells where they contain the digit
            is same as the given map contains.
            </summary>
            <param name="digit">The digit.</param>
            <param name="map">The map.</param>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.IsIncompleteUr(System.Collections.Generic.IEnumerable{Sudoku.Models.DrawingInfo})">
            <summary>
            Check whether the highlight UR candidates is incomplete.
            </summary>
            <param name="list">The list to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.GetDiagonalCell(System.Int32[],System.Int32)">
            <summary>
            Get a cell that can't see each other.
            </summary>
            <param name="urCells">The UR cells.</param>
            <param name="cell">The current cell.</param>
            <returns>The diagonal cell.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the specified argument <paramref name="cell"/> is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.IsSameRegionCell(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a cell that is in the same region of the specified cell lies in.
            </summary>
            <param name="currentCell">The current cell.</param>
            <param name="anotherCell">Another cell to check.</param>
            <param name="region">
            The result regions that both cells lie in.
            If the cell can't be found, the parameter will be an empty array of type <see cref="T:System.Int32"/>.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> value indicating whether the another cell is same region as the current one.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.GetHighlightCells(System.Int32[])">
            <summary>
            Get all highlight cells.
            </summary>
            <param name="urCells">The all UR cells used.</param>
            <returns>The list of highlight cells.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckType3Naked(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckType5(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check type 5.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckType6(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check type 6.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckHidden(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check hidden UR.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check2D(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+2D.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check2B1SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+2B/1SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check2D1SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+2D/1SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check3X(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+3X.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check3X2SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+3X/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check3N2SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+3N/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check3U2SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+3U/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check3E2SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+3E/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check4X3SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+4X/3SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.Check4C3SL(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+4C/3SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckWing(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32,System.Int32)">
            <summary>
            Check UR-XY-Wing, UR-XYZ-Wing, UR-WXYZ-Wing and AR-XY-Wing, AR-XYZ-Wing and AR-WXYZ-Wing.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="size">The size of the wing to search.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckSdc(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check UR+SdC.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckUnknownCoveringUnique(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check UR+Unknown covering.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The comparer.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckGuardianUnique(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check UR+Guardian.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.CheckHiddenSingleAvoidable(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rects.UrStepInfo},Sudoku.Data.SudokuGrid@,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check AR+Hidden single.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher.PossibleUrList">
            <summary>
            <para>The table of all UR cells.</para>
            <para>You <b>can't</b> modify any values in this table.</para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1StepInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 1 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 1 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2StepInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 2 (or type 5) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ExtraDigit">The extra digit.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Techniques.Technique,System.Int32,System.Int32,System.Int32[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 2 (or type 5) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ExtraDigit">The extra digit.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3StepInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 3 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ExtraDigits">All extra digits.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Region">The region.</param>
            <param name="IsNaked">Indicates whether the subset is naked.</param>
             <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Boolean,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 3 technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ExtraDigits">All extra digits.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Region">The region.</param>
            <param name="IsNaked">Indicates whether the subset is naked.</param>
             <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3StepInfo.BaseDifficulty">
            <summary>
            Indicates the base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3StepInfo.SizeExtraDifficulty">
            <summary>
            Indicates the extra difficulty on size.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithGuardianStepInfo">
            <summary>
            Provides a usage of <b>unique rectangle + guardian</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="GuardianDigit">The guardian digit.</param>
            <param name="GuardianCells">The guardians.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithGuardianStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Int32,Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle + guardian</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="GuardianDigit">The guardian digit.</param>
            <param name="GuardianCells">The guardians.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithGuardianStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithGuardianStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithGuardianStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo">
            <summary>
            Provides a usage of <b>unique rectangle + sue de coq</b> (UR + SDC) or
            <b>avoidable rectangle + sue de coq</b> (AR + SDC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells used.</param>
            <param name="IsAvoidable">Indicates whether the instance is an AR.</param>
            <param name="AbsoluteOffset">The absolute offset.</param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the current SdC used is cannibal.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The block cells.</param>
            <param name="LineCells">The line cells.</param>
            <param name="IntersectionCells">The intersection cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Boolean,System.Int32,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int16,Sudoku.Data.Cells@,Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>unique rectangle + sue de coq</b> (UR + SDC) or
            <b>avoidable rectangle + sue de coq</b> (AR + SDC) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells used.</param>
            <param name="IsAvoidable">Indicates whether the instance is an AR.</param>
            <param name="AbsoluteOffset">The absolute offset.</param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the current SdC used is cannibal.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The block cells.</param>
            <param name="LineCells">The line cells.</param>
            <param name="IntersectionCells">The intersection cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.SdCDifficulty">
            <summary>
            The extra difficulty that assesses the size of SdC.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.IsolatedDifficulty">
            <summary>
            The extra difficulty that assesses isolated digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.CannibalDifficulty">
            <summary>
            The extra difficulty that assesses cannibalism.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithSdcStepInfo.ArDifficulty">
            <summary>
            The extra difficulty that assesses whether the structure is an AR.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithUnknownCoveringStepInfo">
            <summary>
            Provides a usage of <b>unique rectangle + unknown covering</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="TargetCell">The target cell.</param>
            <param name="ExtraDigit">The extra digit.</param>
            <param name="Cells">All UR cells.</param>
            <param name="AbsoluteOffset">The absolute offset.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithUnknownCoveringStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle + unknown covering</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="TargetCell">The target cell.</param>
            <param name="ExtraDigit">The extra digit.</param>
            <param name="Cells">All UR cells.</param>
            <param name="AbsoluteOffset">The absolute offset.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithUnknownCoveringStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithUnknownCoveringStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithUnknownCoveringStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) with wings technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ExtraCells">The extra cells.</param>
            <param name="ExtraDigits">The extra digits.</param>
            <param name="Pivots">The pivot cells.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Techniques.Technique,System.Int32,System.Int32,System.Int32[],System.Boolean,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) with wings technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="TechniqueCode2">The technique code.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="Cells">All cells.</param>
            <param name="IsAvoidable">Indicates whether the structure is an AR.</param>
            <param name="ExtraCells">The extra cells.</param>
            <param name="ExtraDigits">The extra digits.</param>
            <param name="Pivots">The pivot cells.</param>
            <param name="AbsoluteOffset">The absolute offset that used in sorting.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.ExtraDifficulty">
            <summary>
            Indicates the difficulty rating extra.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.Acronym">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.AvoidableExtraDifficulty">
            <summary>
            Indicates the extra difficulty on whether the UR is an AR.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingStepInfo.WingSizeExtraDifficulty">
            <summary>
            Indicates the extra difficulty on wing size.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="Digit1">Indicates the digit 1.</param>
            <param name="Digit2">Indicates the digit 2.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="Digit1">Indicates the digit 1.</param>
            <param name="Digit2">Indicates the digit 2.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo.DigitsStr">
            <summary>
            Indicates the digits string.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo.Equals(Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher">
            <summary>
            Encapsulates a <b>reverse bi-value universal grave</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher.FindPossibleLoops(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find all possible loops used for checking each type.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell1">The cell 1.</param>
            <param name="cell2">The cell 2.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <returns>All possible loops.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Int32,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},System.Int16)">
            <summary>
            Check the type 1.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1 to check.</param>
            <param name="d2">The digit 2 to check.</param>
            <param name="loop">The cells of that loop.</param>
            <param name="extraCell">Indicates the extra cell.</param>
            <param name="links">The links.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepInfo},Sudoku.Data.SudokuGrid@,System.Int32,System.Int32,Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Link},System.Int16)">
            <summary>
            Check the type 2.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1 to check.</param>
            <param name="d2">The digit 2 to check.</param>
            <param name="loop">The cells of that loop.</param>
            <param name="extraCells">The cells of all extra cells.</param>
            <param name="links">The links.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType1StepInfo">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 1</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="Anchor">Indicates the anchor cell that produces the conclusion.</param>
            <param name="AnchorLastDigit">
            Indicates the digit when the anchor cell is filled with it, then the structure may
            form a deadly pattern.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 1</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="Anchor">Indicates the anchor cell that produces the conclusion.</param>
            <param name="AnchorLastDigit">
            Indicates the digit when the anchor cell is filled with it, then the structure may
            form a deadly pattern.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType1StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType1StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType1StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType2StepInfo">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 2</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 2</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType2StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType3StepInfo">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 3</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="DigitsMask">All extra digits used.</param>
            <param name="IsNaked">Indicates whether the subset is naked.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Int32,System.Int32,System.Int16,System.Boolean)">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 3</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="DigitsMask">All extra digits used.</param>
            <param name="IsNaked">Indicates whether the subset is naked.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType3StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType3StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType4StepInfo">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 4</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="ConjugatePair">Indicates the conjugate pair.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType4StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,Sudoku.Data.Cells@,System.Int32,System.Int32,Sudoku.Data.ConjugatePair@)">
            <summary>
            Provides a usage of <b>reverse bi-value universal grave type 4</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Loop">All cells used.</param>
            <param name="ExtraCells">All extra cells.</param>
            <param name="Digit1">The digit 1 used.</param>
            <param name="Digit2">The digit 2 used.</param>
            <param name="ConjugatePair">Indicates the conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType4StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType4StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugType4StepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo">
            <summary>
            Provides a usage of <b>unique square</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides a usage of <b>unique square</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.DigitsStr">
            <summary>
            Indicates the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepInfo.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher">
            <summary>
            Encapsulates a <b>uniqueness square</b> (US) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.Patterns">
            <summary>
            Indicates the patterns.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.CheckType1(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="pattern">The pattern.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.CheckType3(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@,Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pattern">The pattern.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType1StepInfo">
            <summary>
            Provides a usage of <b>unique square type 1</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="Candidate">Indicates the true candidate.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType1StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides a usage of <b>unique square type 1</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="Candidate">Indicates the true candidate.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType1StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType2StepInfo">
            <summary>
            Provides a usage of <b>unique square type 2</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType2StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides a usage of <b>unique square type 2</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType2StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType2StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType3StepInfo">
            <summary>
            Provides a usage of <b>unique square type 3</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
            <param name="ExtraCells">The extra cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType3StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>unique square type 3</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
            <param name="ExtraCells">The extra cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType3StepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType3StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType3StepInfo.ExtraDifficulty">
            <summary>
            Indicates the extra difficulty.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType4StepInfo">
            <summary>
            Provides a usage of <b>unique square type 4</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ConjugateRegion">The so-called conjugate region.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType4StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Cells@,System.Int16,System.Int32,System.Int32,Sudoku.Data.Cells@)">
            <summary>
            Provides a usage of <b>unique square type 4</b> (US) technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Cells">The cells.</param>
            <param name="DigitsMask">The digits mask.</param>
            <param name="Digit1">The digit 1.</param>
            <param name="Digit2">The digit 2.</param>
            <param name="ConjugateRegion">The so-called conjugate region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType4StepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.UniquenessStepInfo">
            <summary>
            Provides a usage of <b>uniqueness</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.UniquenessStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>uniqueness</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.UniquenessStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.UniquenessStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.UniquenessStepSearcher">
            <summary>
            Encapsulates a <b>uniqueness</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingStepInfo">
            <summary>
            Encapsulates a usage of <b>irregular wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Encapsulates a usage of <b>irregular wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingStepSearcher">
            <summary>
            Encapsulates an <b>irregular wing</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
            <remarks>
            In fact, <c>Hybrid-Wing</c>s, <c>Local-Wing</c>s, <c>Split-Wing</c>s and <c>M-Wing</c>s can
            be found in another searcher. In addition, these wings are not elementary and necessary techniques
            so we doesn't need to list them.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.WWingStepInfo">
            <summary>
            Provides a usage of <b>W-Wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="StartCell">The start cell.</param>
            <param name="EndCell">The end cell.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.WWingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.ConjugatePair@)">
            <summary>
            Provides a usage of <b>W-Wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="StartCell">The start cell.</param>
            <param name="EndCell">The end cell.</param>
            <param name="ConjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo">
            <summary>
            Provides a usage of <b>regular wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pivot">The pivot cell.</param>
            <param name="PivotCandidatesCount">The number of candidates that is in the pivot.</param>
            <param name="DigitsMask">The mask of all digits used.</param>
            <param name="Cells">The cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides a usage of <b>regular wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
            <param name="Pivot">The pivot cell.</param>
            <param name="PivotCandidatesCount">The number of candidates that is in the pivot.</param>
            <param name="DigitsMask">The mask of all digits used.</param>
            <param name="Cells">The cells used.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.DifficultyRating">
            <summary>
            The difficulty rating.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.IsIncomplete">
            <summary>
            Indicates whether the structure is incomplete.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.Size">
            <summary>
            Indicates the size of this regular wing.
            </summary>
            <remarks>
            All names are:
            <list type="table">
            <item>
            <term>2</term>
            <description>XY-Wing</description>
            </item>
            <item>
            <term>3</term>
            <description>XYZ-Wing</description>
            </item>
            <item>
            <term>4</term>
            <description>WXYZ-Wing</description>
            </item>
            <item>
            <term>5</term>
            <description>VWXYZ-Wing</description>
            </item>
            <item>
            <term>6</term>
            <description>UVWXYZ-Wing</description>
            </item>
            <item>
            <term>7</term>
            <description>TUVWXYZ-Wing</description>
            </item>
            <item>
            <term>8</term>
            <description>STUVWXYZ-Wing</description>
            </item>
            <item>
            <term>9</term>
            <description>RSTUVWXYZ-Wing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepInfo.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepSearcher">
            <summary>
            Encapsulates a <b>regular wing</b> technique solver.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size the searcher will search for. The maximum possible value is 9.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepSearcher.Properties">
            <summary>
            Indicates the searcher properties.
            </summary>
            <remarks>
            Please note that all technique searches should contain
            this static property in order to display on settings window. If the searcher doesn't contain,
            when we open the settings window, it'll throw an exception to report about this.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.WingStepInfo">
            <summary>
            Provides a usage of <b>wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.WingStepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides a usage of <b>wing</b> technique.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.WingStepInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.WingStepInfo.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.WingStepInfo.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.WingStepSearcher">
            <summary>
            Encapsulates a <b>wing</b> technique solver.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.SearchingOptions">
            <summary>
            Indicates the options aiming to <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>s while searching, which is the newer
            implementation of the type <see cref="T:Sudoku.Solving.Manual.TechniqueProperties"/>.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledAreas">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/> and <see cref="F:Sudoku.Solving.Manual.EnabledAreas.FullSearching"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on <see cref="T:Sudoku.Solving.Manual.AllStepSearcher"/>.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </param>
            <param name="Stableness">
            <para>Indicates how stable the technique behaves.</para>
            <para>
            In the future, if the technique is unstable, we may modify the order slightly via algorithm to
            find some special techniques, such as exocets.
            </para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.TechniqueProperties"/>.
            <seealso cref="T:Sudoku.Solving.Manual.AllStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.SearchingOptions.#ctor(System.Int16,Sudoku.Solving.Manual.DisplayingLevel,Sudoku.Solving.Manual.EnabledAreas,Sudoku.Solving.Manual.DisabledReason,Sudoku.Solving.Manual.Stableness)">
            <summary>
            Indicates the options aiming to <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>s while searching, which is the newer
            implementation of the type <see cref="T:Sudoku.Solving.Manual.TechniqueProperties"/>.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledAreas">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/> and <see cref="F:Sudoku.Solving.Manual.EnabledAreas.FullSearching"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on <see cref="T:Sudoku.Solving.Manual.AllStepSearcher"/>.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </param>
            <param name="Stableness">
            <para>Indicates how stable the technique behaves.</para>
            <para>
            In the future, if the technique is unstable, we may modify the order slightly via algorithm to
            find some special techniques, such as exocets.
            </para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.TechniqueProperties"/>.
            <seealso cref="T:Sudoku.Solving.Manual.AllStepSearcher"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Solvings">
            <summary>
            Provides extension methods to be used while solving.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Solvings.Clean(Sudoku.Data.SudokuGrid@)">
            <summary>
            To clean the grid.
            </summary>
            <param name="this">The grid.</param>
            <remarks>
            "To clean a grid" means we process this grid to fill with singles that is found
            in <see cref="T:Sudoku.Solving.Manual.Singles.SingleStepSearcher"/>, and remove eliminations that is found
            in <see cref="T:Sudoku.Solving.Manual.Intersections.LcStepSearcher"/> and <see cref="T:Sudoku.Solving.Manual.Subsets.SubsetStepSearcher"/>.
            The process won't stop until the puzzle cannot use these techniques.
            </remarks>
            <seealso cref="T:Sudoku.Solving.Manual.Singles.SingleStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.Intersections.LcStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.Subsets.SubsetStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Solvings.IsSingleWhenRemoved(Sudoku.Data.SudokuGrid@,System.Int32)">
            <summary>
            Checks whether the next step is "single" technique after the specified candidate is removed.
            The "single" techniques are:
            <list type="bullet">
            <item><see cref="F:Sudoku.Techniques.Technique.HiddenSingleBlock"/></item>
            <item><see cref="F:Sudoku.Techniques.Technique.HiddenSingleRow"/></item>
            <item><see cref="F:Sudoku.Techniques.Technique.HiddenSingleColumn"/></item>
            <item><see cref="F:Sudoku.Techniques.Technique.NakedSingle"/></item>
            </list>
            Full houses and last digits may not be found in this method due to the limitation of the algorithm.
            </summary>
            <param name="this">The grid to check.</param>
            <param name="candidateRemoved">The candidate removed.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Stableness">
            <summary>
            Defines a stableness of a technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.Stable">
            <summary>
            Indicates the stableness is stable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.LessStable">
            <summary>
            Indicates the stableness is less stable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.LessUnstable">
            <summary>
            Indicates the stableness is less unstable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.Unstable">
            <summary>
            Indicates the stableness is unstable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.MostUnstable">
            <summary>
            Indicates the stableness is most unstable.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.StepInfo">
            <summary>
            Encapsulates all information after searched a solving step,
            which include the conclusion, the difficulty and so on.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Encapsulates all information after searched a solving step,
            which include the conclusion, the difficulty and so on.
            </summary>
            <param name="Conclusions">All conclusions.</param>
            <param name="Views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.ShowDifficulty">
            <summary>
            <para>
            Indicates whether the difficulty rating of this technique should be
            shown in the output screen. Some techniques such as <b>Gurth's symmetrical placement</b>
            doesn't need to show the difficulty (because the difficulty of this technique
            is unstable).
            </para>
            <para>
            If the value is <see langword="true"/>, the analysis result won't show the difficulty
            of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.Name">
            <summary>
            Indicates the technique name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.Acronym">
            <summary>
            Indicates the acronym of the step name. For example, the acronym of the technique
            "Almost Locked Candidates" is ALC.
            </summary>
            <remarks>
            This property only contains the result in English. Other languages doesn't contain any
            abbreviations by default. On the other hand, this is really an easier way to implement
            than storing values in resource dictionary files.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.Format">
            <summary>
            Gets the format of the current instance.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> result. If the resource dictionary doesn't contain
            any valid formats here, the result value will be <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            A <b>format</b> is the better way to format the result text of this technique information instance,
            It'll be represented by the normal characters and the placeholders, e.g.
            <code>
            <![CDATA["{Name}: Cells {CellsStr} => {ElimsStr}"]]>
            </code>
            Here the string result <b>shouldn't</b> be with the leading <c>'$'</c> character, because this is a
            format string, rather than a interpolated string.
            </para>
            <para>
            Here the property <c>Name</c>, <c>CellsStr</c> and <c>ElimsStr</c> should be implemented before
            the property invoked, you should creates those 3 properties, returns the corresponding correct string
            result, makes them <see langword="private"/> or <see langword="protected"/> and marks the attribute
            <see cref="T:Sudoku.Solving.Text.FormatItemAttribute"/> to help the code analyzer (if the code analyzer is available).
            The recommended implementation pattern is:
            <code><![CDATA[
            [FormatItem]
            private string CellsStr
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => Cells.ToString();
            }
            ]]></code>
            You can use the code snippet <c>fitem</c> to create the pattern, whose corresponding file is added
            into the <c>required/vssnippets</c> folder. For more information, please open the markdown file
            <see href="#">README.md</see> in the <c>required</c> folder to learn more information.
            </para>
            <para>
            Because this property will get the value from the resource dictionary, the property supports
            multiple language switching, which is better than the normal methods <see cref="M:Sudoku.Solving.Manual.StepInfo.ToString"/>
            and <see cref="M:Sudoku.Solving.Manual.StepInfo.ToFullString"/>. Therefore, this property is the substitution plan of those two methods.
            </para>
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.StepInfo.ToString"/>
            <seealso cref="M:Sudoku.Solving.Manual.StepInfo.ToFullString"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.NameAlias">
            <summary>
            Indicates the technique name alias.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.Difficulty">
            <summary>
            The difficulty or this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.TechniqueCode">
            <summary>
            The technique code of this instance used for comparison
            (e.g. search for specified puzzle that contains this technique).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.TechniqueTags">
            <summary>
            The technique tags of this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.TechniqueGroup">
            <summary>
            The technique group that this technique instance belongs to.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.DifficultyLevel">
            <summary>
            The difficulty level of this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.IsAlmostLockedSets">
            <summary>
            Indicates whether the corresponding technique of the current step is an Almost Locked Sets
            (ALS in abbreviation).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.IsChaining">
            <summary>
            Indicates whether the corresponding technique of the current step is a chain. The chain techiques are:
            <list type="bullet">
            <item>
            Wings
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Wings.Regular.RegularWingStepSearcher">Regular wings</see> (XY-Wing, XYZ-Wing, WXYZ-Wing, etc.)</item>
            <item>
            <see cref="T:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingStepSearcher">Irregular wings</see>
            (W-Wing, M-Wing, Split-Wing, Local-Wing, Hybrid-Wing)
            </item>
            </list>
            </item>
            <item>
            Short chains
            <list type="bullet">
            <item>
            <see cref="T:Sudoku.Solving.Manual.Sdps.TwoStrongLinksStepSearcher">Two strong links</see>
            (Skyscraper, Two-string kite, Turbot fish)
            </item>
            <item>
            ALS chaining-like techniques
            (<see cref="T:Sudoku.Solving.Manual.Alses.AlsXzStepSearcher">ALS-XZ</see>,
            <see cref="T:Sudoku.Solving.Manual.Alses.AlsXyWingStepSearcher">ALS-XY-Wing</see>,
            <see cref="T:Sudoku.Solving.Manual.Alses.AlsWWingStepSearcher">ALS-W-Wing</see>)
            </item>
            <item><see cref="T:Sudoku.Solving.Manual.Sdps.ErStepSearcher">Empty rectangle</see></item>
            </list>
            </item>
            <item>
            Long chains
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Chaining.MultipleFcStepSearcher">Forcing chains</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Chaining.DynamicMultipleFcStepSearcher">Dynamic forcing chains</see></item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.IsDeadlyPattern">
            <summary>
            Indicates whether the corresponding technique of the current step is a deadly pattern.
            The deadly pattern techniques are:
            <list type="bullet">
            <item>
            Bi-value patterns
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrStepSearcher">Unique rectangle</see> (i.e. Uniqueness test)</item>
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlStepSearcher">Unique loop</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugStepSearcher">Bi-value universal grave</see></item>
            </list>
            </item>
            <item>
            Multi-value patterns
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrStepSearcher">Extended rectangle</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Square.UsStepSearcher">Unique square</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpStepSearcher">Borescoper's deadly pattern</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpStepSearcher">Qiu's deadly pattern</see></item>
            </list>
            </item>
            <item>
            Other deadly patterns
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Uniqueness.Reversal.ReverseBugStepSearcher">Reverse bi-value universal grave</see></item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepInfo.ElimStr">
            <summary>
            Indicates the string representation of the conclusions.
            </summary>
            <remarks>
            Most of techniques uses eliminations
            so this property is named <c>ElimStr</c>. In other words, if the conclusion is an assignment one,
            the property will still use this name rather than <c>AssignmentStr</c>.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.ApplyTo(Sudoku.Data.SudokuGrid@)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.HasTag(Sudoku.Techniques.TechniqueTags)">
            <summary>
            Determine whether the current step information instance with the specified flags.
            </summary>
            <param name="flags">
            The flags. If the argument contains more than one set bit, all flags will be checked
            one by one.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.ToString">
            <summary>
            Returns a string that only contains the name and the basic information.
            </summary>
            <returns>The string instance.</returns>
            <remarks>
            From version 0.7, this method will use <see langword="sealed record"/> <c>ToString</c>
            method to prevent the compiler overriding the method; the default behavior is changed to
            output as the method <see cref="M:Sudoku.Solving.Manual.StepInfo.Formatize(System.Boolean)"/> invoking.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.StepInfo.Formatize(System.Boolean)"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.ToSimpleString">
            <summary>
            Returns a string that only contains the name and the conclusions.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.ToFullString">
            <summary>
            Returns a string that contains the name, the conclusions and its all details.
            This method is used for displaying details in text box control.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.Manual.DifficultyLevel@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.Manual.DifficultyLevel@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion}@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.Manual.DifficultyLevel@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion}@,System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View}@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepInfo.Formatize(System.Boolean)">
            <summary>
            Formatizes the <see cref="P:Sudoku.Solving.Manual.StepInfo.Format"/> property string and output the result.
            </summary>
            <param name="handleEscaping">Indicates whether the method will handle the escaping characters.</param>
            <returns>The result string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the format is invalid. The possible cases are:
            <list type="bullet">
            <item>The format is null.</item>
            <item>The interpolation part contains the empty value.</item>
            <item>Missing the closed brace character <c>'}'</c>.</item>
            <item>The number of interpolations failed to match.</item>
            </list>
            </exception>
            <seealso cref="P:Sudoku.Solving.Manual.StepInfo.Format"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.StepSearcher">
            <summary>
            Encapsulates a step finder that used in solving in <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.StepSearcher.NecessaryPropertyName">
            <summary>
            Indicates the necessary property name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepSearcher.AllStepSearchers">
            <summary>
            Indicates all step searchers and their type info used in the current solution.
            </summary>
            <remarks>
            Please note that the return value is a list of elements that contain its type and its
            searcher properties.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepSearcher.GetAll(System.Collections.Generic.IList{Sudoku.Solving.Manual.StepInfo},Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepSearcher.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepSearcher.GetOne(Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.TechniqueProperties">
            <summary>
            Indicates the properties while searching aiming to <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>s.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="DisplayLabel">
            <para>
            Indicates the display label of this technique. The program will process and handle the
            value to the specified technique name.
            </para>
            <para>Note that the property is different with <see cref="P:Sudoku.Solving.Manual.TechniqueProperties.DisplayLevel"/>.</para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueProperties.#ctor(System.Int32,System.String)">
            <summary>
            Indicates the properties while searching aiming to <see cref="T:Sudoku.Solving.Manual.StepSearcher"/>s.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="DisplayLabel">
            <para>
            Indicates the display label of this technique. The program will process and handle the
            value to the specified technique name.
            </para>
            <para>Note that the property is different with <see cref="P:Sudoku.Solving.Manual.TechniqueProperties.DisplayLevel"/>.</para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.StepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.TechniqueProperties.IsEnabled">
            <summary>
            Indicates whether the technique is enabled. The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.TechniqueProperties.IsReadOnly">
            <summary>
            Indicates whether the property is read-only, which can't be modified.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.TechniqueProperties.OnlyEnableInAnalysis">
            <summary>
            Indicates whether the searcher is only used in analyzing a sudoku grid.
            If <see langword="true"/>, when in find-all-step mode, this searcher will be disabled.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.TechniqueProperties.DisplayLevel">
            <summary>
            Indicates the display level of this technique.
            </summary>
            <remarks>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            This attribute is used on <see cref="T:Sudoku.Solving.Manual.AllStepSearcher"/>. For example, if Alternating Inference Chain (AIC)
            is at level 1 and Forcing Chains (FC) is at level 2, when we find any AIC technique instances,
            FC won't be checked at the same time in order to enhance the performance.
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            <para>
            Note that the property is different with <see cref="P:Sudoku.Solving.Manual.TechniqueProperties.DisplayLabel"/>.
            </para>
            </remarks>
            <seealso cref="T:Sudoku.Solving.Manual.AllStepSearcher"/>
            <seealso cref="P:Sudoku.Solving.Manual.TechniqueProperties.DisplayLabel"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.TechniqueProperties.DisabledReason">
            <summary>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            The default value is <see cref="F:Sudoku.Solving.Manual.DisabledReason.None"/>.
            </summary>
            <seealso cref="F:Sudoku.Solving.Manual.DisabledReason.None"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueProperties.FromSearcher(Sudoku.Solving.Manual.StepSearcher)">
            <summary>
            Get the specified properties using reflection.
            </summary>
            <param name="searcher">The searcher.</param>
            <returns>
            The properties instance. If the searcher is <see langword="abstract"/> type,
            the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueProperties.FromType(System.Type)">
            <summary>
            Get the specified properties using reflection.
            </summary>
            <param name="type">The type of the specified searcher.</param>
            <returns>
            The properties instance. If the searcher is <see langword="abstract"/> type
            or not <see cref="T:Sudoku.Solving.Manual.StepSearcher"/> at all,
            the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueProperties.Deconstruct(System.Boolean@,System.Boolean@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueProperties.Deconstruct(System.Boolean@,System.Boolean@,System.Int32@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueProperties.Deconstruct(System.Boolean@,System.Boolean@,System.Int32@,Sudoku.Solving.Manual.DisabledReason@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueProperties.Deconstruct(System.Boolean@,System.Boolean@,System.Int32@,Sudoku.Solving.Manual.DisabledReason@,System.Boolean@,System.Int32@,System.String@)">
            <summary>
            Deconstruct the instance to multiple values, which allows you use the value tuple syntax
            to get the properties from an instance like:
            <code>
            var (variable1, variable2, variable3) = instance;
            </code>
            or like
            <code>
            (int variable1, double variable2, string? variable3) = instance;
            </code>
            </summary>
            <remarks>
            <para>
            The method should be declared manually when the type is a normal <see langword="struct"/>
            or <see langword="class"/>. If the method is in a <see langword="record"/>
            (or a <see langword="record struct"/>), the deconstruct method will be generated
            by the compiler automatically and returns <b>all properties</b>
            to those <see langword="out"/> parameters.
            </para>
            <para>
            Please note: If the deconstruct method is automatically generated by the compiler,
            you can't create a deconstruct method manually with the same number of the parameters
            than that auto method; otherwise, the method can't be called normally.
            </para>
            <para>
            In addition, the deconstruct methods can take <b>more than</b> 8 <see langword="out"/> parameters,
            although a normal <see cref="T:System.ValueTuple"/> can only contain at most 8 parameters.
            </para>
            </remarks>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.WrongStepException">
            <summary>
            Indicates an error that throws when a solving step is wrong (may be due to wrong algorithm, bug, etc.).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.#ctor(Sudoku.Data.SudokuGrid@,Sudoku.Solving.Manual.StepInfo)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.WrongStepException"/> with the specified invalid grid and the wrong step.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
            <param name="wrongStep">The wrong step.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.InvalidGrid">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.WrongStep">
            <summary>
            Indicates the wrong step.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.MaskSubsetExtractor">
            <summary>
            Provides the algorithms about the subset that uses the mask from sudoku grids.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.MaskSubsetExtractor.GetMaskSubsets(System.Int16)">
            <summary>
            Get all mask combinations.
            </summary>
            <param name="value">The mask.</param>
            <returns>The result list.</returns>
        </member>
        <member name="M:Sudoku.Solving.MaskSubsetExtractor.GetMaskSubsets(System.Int16,System.Int32)">
            <summary>
            Get all mask combinations.
            </summary>
            <param name="value">The mask.</param>
            <param name="size">The size.</param>
            <returns>The result list.</returns>
        </member>
        <member name="M:Sudoku.Solving.MaskSubsetExtractor.CreateBitsInt16(System.Int32[])">
            <summary>
            Create a <see cref="T:System.Int16"/> value, whose set bits are specified in the parameter
            <paramref name="values"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The mask result.</returns>
            <remarks>
            For example, if the <paramref name="values"/> are <c>{ 3, 6 }</c>, the return value
            will be <c><![CDATA[1 << 3 | 1 << 6]]></c>.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.MaskSubsetExtractor.CreateBitsInt16(System.Int16[])">
            <inheritdoc cref="M:Sudoku.Solving.MaskSubsetExtractor.CreateBitsInt16(System.Int32[])"/>
        </member>
        <member name="T:Sudoku.Solving.Text.FormatItemAttribute">
            <summary>
            Marks on a property to tell the user the property is only used for the formatting.
            </summary>
        </member>
    </members>
</doc>
