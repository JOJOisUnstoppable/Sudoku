<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Solving</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Generating.HardPatternPuzzleGenerator">
            <summary>
            Defines a puzzle generator that makes the given pattern as a hard one. However,
            a <b>hard pattern</b> doesn't mean the puzzle will be hard or fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.BlockFactor">
            <summary>
            Indicates the block factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.SwappingFactor">
            <summary>
            Indicates the swapping factor.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.Generate(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.GenerateAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.GenerateAnswerGrid(System.Char*,System.Char*)">
            <summary>
            Generates the answer sudoku grid via the specified puzzle and the solution variable pointer.
            </summary>
            <param name="pPuzzle">The pointer that points to the puzzle.</param>
            <param name="pSolution">
            The pointer that points to the solution. The result value will be changed here.
            </param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CreatePattern(System.Int32*)">
            <summary>
            Creates a start pattern based on a base pattern.
            </summary>
            <param name="pattern">The base pattern.</param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.RecreatePattern(System.Int32*)">
            <summary>
            To re-create the pattern.
            </summary>
            <param name="pattern">The pointer that points to an array of the pattern values.</param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CheckDuplicate(System.Char*,System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="ptrGrid">The pointer that pointes to a grid.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Generating.IPuzzleGenerator">
            <summary>
            Defines a puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.IPuzzleGenerator.Solver">
            <summary>
            Provides a default fast solver to solve the puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.Generate(System.Threading.CancellationToken)">
            <summary>
            Creates a sudoku grid puzzle.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>
            The result puzzle generated. If cancelled, the return value will be <see cref="F:Sudoku.Collections.Grid.Undefined"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.GenerateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a sudoku grid puzzle asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>
            The task of the operation that includes the result puzzle generated.
            If cancelled, the inner result sudoku grid of the return value will be <see cref="F:Sudoku.Collections.Grid.Undefined"/>.
            </returns>
        </member>
        <member name="T:Sudoku.Generating.SymmetricPuzzleGenerator">
            <summary>
            Defines a symmetric puzzle generator, that is, a generator than can include the symmetrical placement
            of all givens while generating puzzles.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.Generate(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.GenerateAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.Generate(System.Int32,Sudoku.SymmetryType,System.Threading.CancellationToken)">
            <summary>
            Generates a sudoku puzzle, via the specified number of givens used, the symmetry type, and
            a cancellation token to cancel the operation.
            </summary>
            <param name="max">The maximum number of givens generated.</param>
            <param name="symmetryType">The symmetry type.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The result sudoku puzzle.</returns>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.GenerateAnswerGrid(System.Char*,System.Char*)">
            <summary>
            Generates the answer sudoku grid via the specified puzzle and the solution variable pointer.
            </summary>
            <param name="pPuzzle">The pointer that points to the puzzle.</param>
            <param name="pSolution">
            The pointer that points to the solution. The result value will be changed here.
            </param>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.GetCells(Sudoku.SymmetryType,System.Int32,System.Int32)">
            <summary>
            Get the cells that is used for swapping via the specified symmetry type, and the specified row
            and column value.
            </summary>
            <param name="symmetryType">The symmetry type.</param>
            <param name="row">The row value.</param>
            <param name="column">The column value.</param>
            <returns>The cells.</returns>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.CheckDuplicate(System.Char*,System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="ptrGrid">The pointer that pointes to a grid.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.ModuleInitializer">
            <target name="type">
				<summary>
					<para>
						Provides with the type that contains a module initializer method, called automatically by the CLR
						(Common Language Runtime) to initialize some values.
					</para>
					<para>
						<i>
							The type is called by the compiler and the CLR (Common Language Runtime),
							which means you cannot use any members in this type manually.
						</i>
					</para>
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.Solving.ModuleInitializer.Initialize">
            <target name="method">
				<summary>
					Called by the runtime automatically while booting on this solution to initialize the values,
					data members or any other things that can or should be initialized here.
				</summary>
				<remarks>
					The concept <b>module</b> is different with <b>assembly</b>.
					The solution can contain multiple assemblies, while each assembly can contain multiple modules.
					However, due to the design of Visual Studio project file system, each assembly will only contain
					one module by default.
				</remarks>
			</target>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.BacktrackingSolver">
            <summary>
            Provides a solver using backtracking method.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.BacktrackingSolver._grid">
            <summary>
            The temporary grid to solve.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.Solve(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.SolveAsync(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.InternalSolve(System.Int32@,System.Int32[]@,System.Int32[],System.Int32)">
            <summary>
            Solve the puzzle backtrackingly.
            </summary>
            <param name="solutionsCount">The number of solutions.</param>
            <param name="result">The result array.</param>
            <param name="gridValues">All grid values.</param>
            <param name="finishedCellsCount">The number of cells had finished.</param>
            <exception cref="T:System.InvalidOperationException">Throws when the puzzle contains multiple solutions.</exception>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.BruteForceSolverResult">
            <summary>
            Encapsulates a solver result information that is created by a brute force solver.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
            <param name="IsSolved">
            <para><inheritdoc/></para>
            <para>The default value is <see langword="true"/>.</para>
            </param>
            <param name="FailedReason">
            <para><inheritdoc/></para>
            <para>The default value is <see cref="F:Sudoku.Solving.FailedReason.Nothing"/>.</para>
            </param>
            <param name="Solution">
            <para><inheritdoc/></para>
            <para>The default value is <see cref="F:Sudoku.Collections.Grid.Undefined"/>.</para>
            </param>
            <param name="ElapsedTime">
            <para><inheritdoc/></para>
            <para>The default value is <see cref="F:System.TimeSpan.Zero"/>.</para>
            </param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BruteForceSolverResult.#ctor(Sudoku.Collections.Grid@,System.Boolean,Sudoku.Solving.FailedReason,Sudoku.Collections.Grid@,System.TimeSpan)">
            <summary>
            Encapsulates a solver result information that is created by a brute force solver.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
            <param name="IsSolved">
            <para><inheritdoc/></para>
            <para>The default value is <see langword="true"/>.</para>
            </param>
            <param name="FailedReason">
            <para><inheritdoc/></para>
            <para>The default value is <see cref="F:Sudoku.Solving.FailedReason.Nothing"/>.</para>
            </param>
            <param name="Solution">
            <para><inheritdoc/></para>
            <para>The default value is <see cref="F:Sudoku.Collections.Grid.Undefined"/>.</para>
            </param>
            <param name="ElapsedTime">
            <para><inheritdoc/></para>
            <para>The default value is <see cref="F:System.TimeSpan.Zero"/>.</para>
            </param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BruteForceSolverResult.ToDisplayString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BruteForceSolverResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.FastSolver">
            <summary>
            Defines a fast solver.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.BitwiseSolver">
            <summary>
            The inner solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Solve(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.SolveAsync(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Solve(System.Char*,System.Char*,System.Int32)">
            <inheritdoc cref="M:Sudoku.Solving.BitwiseSolver.Solve(System.Char*,System.Char*,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.Char*)">
            <inheritdoc cref="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.Char*)"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.String)">
            <inheritdoc cref="M:Sudoku.Solving.BitwiseSolver.CheckValidity(System.String)"/>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.LinqSolver">
            <summary>
            Provides a solver using LINQ method.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.LinqSolver.Solve(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.LinqSolver.SolveAsync(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.LinqSolver.SolveStrings(System.String)">
            <summary>
            Internal solving method.
            </summary>
            <param name="puzzle">The puzzle string, with placeholder character '0'.</param>
            <returns>The result strings (i.e. All solutions).</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.LinqSolver.SolveStrings(System.Text.StringHandler@)">
            <summary>
            Internal solving method.
            </summary>
            <param name="handler">The puzzle string, with placeholder character '0'.</param>
            <returns>The result strings (i.e. All solutions).</returns>
        </member>
        <member name="T:Sudoku.Solving.Collections.AlmostLockedSet">
            <summary>
            Encapsulates a normal almost locked set (ALS as its abberivation).
            </summary>
            <param name="DigitsMask">Indicates the mask of each digit.</param>
            <param name="Map">Indicates the map that ALS lying on.</param>
            <param name="PossibleEliminationSet">Indicates the possible elimination set.</param>
            <param name="IsBivalueCell">Indicates whether this instance is a bi-value-cell ALS.</param>
            <param name="Region">Indicates the region that the instance lies in.</param>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.#ctor(System.Int16,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Boolean,System.Int32)">
            <summary>
            Encapsulates a normal almost locked set (ALS as its abberivation).
            </summary>
            <param name="DigitsMask">Indicates the mask of each digit.</param>
            <param name="Map">Indicates the map that ALS lying on.</param>
            <param name="PossibleEliminationSet">Indicates the possible elimination set.</param>
            <param name="IsBivalueCell">Indicates whether this instance is a bi-value-cell ALS.</param>
            <param name="Region">Indicates the region that the instance lies in.</param>
        </member>
        <member name="F:Sudoku.Solving.Collections.AlmostLockedSet.StrongRelationsCount">
            <summary>
            Indicates an array of the total number of the strong relations in an ALS of the different size.
            The field is only unsed in the property <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.StrongLinksMask"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Collections.AlmostLockedSet.StrongLinksMask"/>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.#ctor(System.Int16,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@)">
            <summary>
            Initializes an instance with the specified digit mask and the map of cells.
            </summary>
            <param name="digitMask">The digit mask.</param>
            <param name="map">The map.</param>
            <param name="possibleEliminationSet">The possible elimination set.</param>
        </member>
        <member name="P:Sudoku.Solving.Collections.AlmostLockedSet.StrongLinksMask">
            <summary>
            Indicates all strong links in this ALS. The result will be represented
            as a <see cref="T:System.Int16"/> mask of 9 bits indicating which bits used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.Equals(Sudoku.Solving.Collections.AlmostLockedSet@)">
            <summary>
            Determine whether the specified <see cref="T:Sudoku.Solving.Collections.AlmostLockedSet"/> instance holds the same
            <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.DigitsMask"/> and <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.Map"/> property values as the current instance.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.ContainsDigit(Sudoku.Collections.Grid@,System.Int32,Sudoku.Collections.Cells@)">
            <summary>
            Indicates whether the specified grid contains the digit.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="result">The result.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <remarks>
            If you want to determine the equality of two instance, I recommend you
            <b>should</b> use method <see cref="M:Sudoku.Solving.Collections.AlmostLockedSet.Equals(Sudoku.Solving.Collections.AlmostLockedSet@)"/> instead of this method.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.Gather(Sudoku.Collections.Grid@)">
            <summary>
            To search for all ALSes from the specified grid.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All ALSes searched.</returns>
            <remarks>
            <see cref="T:Sudoku.Solving.Collections.AlmostLockedSet"/> is a large-object type. If you want to iterate them,
            you can use the new feature '<see langword="ref"/> and <see langword="ref readonly"/> iteration variable' to do so, just call
            the extension method <see cref="M:System.ArrayExtensions.EnumerateRef``1(``0[])"/>. Then you can get:
            <code><![CDATA[
            var collection = GetAllAlses(grid);
            foreach (ref readonly var als in collection.EnumerateRef())
            {
                // ...
            }
            ]]></code>
            </remarks>
            <seealso cref="M:System.ArrayExtensions.EnumerateRef``1(``0[])"/>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.InitRegionProperty(Sudoku.Collections.Cells@)">
            <summary>
            To initialize the property <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.Region"/>.
            </summary>
            <param name="map">The value of property <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.Map"/>.</param>
            <returns>The region value.</returns>
            <seealso cref="P:Sudoku.Solving.Collections.AlmostLockedSet.Region"/>
            <seealso cref="P:Sudoku.Solving.Collections.AlmostLockedSet.Map"/>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.op_Equality(Sudoku.Solving.Collections.AlmostLockedSet@,Sudoku.Solving.Collections.AlmostLockedSet@)">
            <summary>
            Determine whether two <see cref="T:Sudoku.Solving.Collections.AlmostLockedSet"/>s hold a same <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.DigitsMask"/>
            and <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.Map"/> property values.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Collections.AlmostLockedSet.op_Inequality(Sudoku.Solving.Collections.AlmostLockedSet@,Sudoku.Solving.Collections.AlmostLockedSet@)">
            <summary>
            Determine whether two <see cref="T:Sudoku.Solving.Collections.AlmostLockedSet"/>s don't hold a same <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.DigitsMask"/>
            and <see cref="P:Sudoku.Solving.Collections.AlmostLockedSet.Map"/> property values.
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Collections.ExocetEliminatedReason">
            <summary>
            Encapsulates a type that represents the reason why the exocet eliminations can be removed.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.Basic">
            <summary>
            Indicates the elimination is the basic elimination (Target eliminations).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.TargetInference">
            <summary>
            Indicates the target inference eliminations (that is eliminated via mirror cells).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.Mirror">
            <summary>
            Indicates the mirror eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.BiBiPattern">
            <summary>
            Indicates the bi-bi pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.TargetPair">
            <summary>
            Indicates the target pair eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.GeneralizedSwordfish">
            <summary>
            Indicates the generalized swordfish eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.TrueBase">
            <summary>
            Indicates the true base eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Collections.ExocetEliminatedReason.CompatibilityTest">
            <summary>
            Indicates the compatibility test eliminations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Collections.ExocetElimination">
            <summary>
            Defines an elimination that is created by searchers
            <see cref="T:Sudoku.Solving.Manual.Searchers.IJuniorExocetStepSearcher"/> and <see cref="T:Sudoku.Solving.Manual.Searchers.ISeniorExocetStepSearcher"/>.
            </summary>
            <param name="Eliminations">Indicates the eliminations.</param>
            <param name="Reason">Indicates the reason why these candidates can be eliminated.</param>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IJuniorExocetStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.ISeniorExocetStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetElimination.#ctor(Sudoku.Collections.Candidates@,Sudoku.Solving.Collections.ExocetEliminatedReason)">
            <summary>
            Defines an elimination that is created by searchers
            <see cref="T:Sudoku.Solving.Manual.Searchers.IJuniorExocetStepSearcher"/> and <see cref="T:Sudoku.Solving.Manual.Searchers.ISeniorExocetStepSearcher"/>.
            </summary>
            <param name="Eliminations">Indicates the eliminations.</param>
            <param name="Reason">Indicates the reason why these candidates can be eliminated.</param>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IJuniorExocetStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.ISeniorExocetStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Collections.ExocetElimination.Count">
            <summary>
            Indicates how many eliminations the instance contains.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.ExocetElimination.Header">
            <summary>
            Indicates the header of the reason.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetElimination.Equals(Sudoku.Solving.Collections.ExocetElimination@)">
            <summary>
            Determine whether the specified <see cref="T:Sudoku.Solving.Collections.ExocetElimination"/> instance holds a same set of eliminations
            and the eliminated reason as the current instance.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetElimination.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetElimination.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetElimination.GetEnumerator">
            <summary>
            Gets the enumerator of the current instance in order to use <see langword="foreach"/> loop.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetElimination.AsSpan">
            <summary>
            Converts all elements to <see cref="T:Sudoku.Conclusion"/>.
            </summary>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> of type <see cref="T:Sudoku.Conclusion"/>.</returns>
            <seealso cref="T:System.ReadOnlySpan`1"/>
            <seealso cref="T:Sudoku.Conclusion"/>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetElimination.op_BitwiseOr(Sudoku.Solving.Collections.ExocetElimination@,Sudoku.Solving.Collections.ExocetElimination@)">
            <summary>
            To merge two different instances, and return the merged result.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>
            The merged result. The result will contain all eliminations from two instances, and
            the reason should be same.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws when two instances contains different eliminated reason.
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Collections.ExocetPattern">
            <summary>
            <para>
            Indicates an exocet pattern. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | B B E | E . . | E . . |
            | . . E | Q . . | R . . |
            | . . E | Q . . | R . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>B</term><description>Base Cells.</description></item>
            <item><term>Q</term><description>1st Object Pair (Target cells pair 1).</description></item>
            <item><term>R</term><description>2nd Object Pair (Target cells pair 2).</description></item>
            <item><term>S</term><description>Cross-line Cells.</description></item>
            <item><term>E</term><description>Escape Cells.</description></item>
            </list>
            </para>
            <para>
            In the data structure, all letters will be used as the same one in this exemplar.
            In addition, if senior exocet, one of two target cells will lie in cross-line cells,
            and the lines of two target cells lying on can't contain any base digits.
            </para>
            </summary>
            <param name="Base1">Indicates the first base cell.</param>
            <param name="Base2">Indicates the second base cell.</param>
            <param name="TargetQ1">Indicates the first target cell in the Q part.</param>
            <param name="TargetQ2">Indicates the second target cell in the Q part.</param>
            <param name="TargetR1">Indicates the first target cell in the R part.</param>
            <param name="TargetR2">Indicates the second target cell in the R part.</param>
            <param name="MirrorQ1">Indicates the first mirror cell in the Q part.</param>
            <param name="MirrorQ2">Indicates the second mirror cell in the Q part.</param>
            <param name="MirrorR1">Indicates the first mirror cell in the R part.</param>
            <param name="MirrorR2">Indicates the second mirror cell in the R part.</param>
            <param name="CrossLine">Indicates the cross-line cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetPattern.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@)">
            <summary>
            <para>
            Indicates an exocet pattern. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | B B E | E . . | E . . |
            | . . E | Q . . | R . . |
            | . . E | Q . . | R . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>B</term><description>Base Cells.</description></item>
            <item><term>Q</term><description>1st Object Pair (Target cells pair 1).</description></item>
            <item><term>R</term><description>2nd Object Pair (Target cells pair 2).</description></item>
            <item><term>S</term><description>Cross-line Cells.</description></item>
            <item><term>E</term><description>Escape Cells.</description></item>
            </list>
            </para>
            <para>
            In the data structure, all letters will be used as the same one in this exemplar.
            In addition, if senior exocet, one of two target cells will lie in cross-line cells,
            and the lines of two target cells lying on can't contain any base digits.
            </para>
            </summary>
            <param name="Base1">Indicates the first base cell.</param>
            <param name="Base2">Indicates the second base cell.</param>
            <param name="TargetQ1">Indicates the first target cell in the Q part.</param>
            <param name="TargetQ2">Indicates the second target cell in the Q part.</param>
            <param name="TargetR1">Indicates the first target cell in the R part.</param>
            <param name="TargetR2">Indicates the second target cell in the R part.</param>
            <param name="MirrorQ1">Indicates the first mirror cell in the Q part.</param>
            <param name="MirrorQ2">Indicates the second mirror cell in the Q part.</param>
            <param name="MirrorR1">Indicates the first mirror cell in the R part.</param>
            <param name="MirrorR2">Indicates the second mirror cell in the R part.</param>
            <param name="CrossLine">Indicates the cross-line cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Collections.ExocetPattern.Map">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Collections.ExocetPattern.MapWithMirrors">
            <summary>
            Indicates the full map, with mirror cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.ExocetPattern.BaseCellsMap">
            <summary>
            Indicates the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.ExocetPattern.TargetCellsMap">
            <summary>
            Indicates the target cells.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetPattern.Equals(Sudoku.Solving.Collections.ExocetPattern@)">
            <summary>
            Determine whether the specified <see cref="T:Sudoku.Solving.Collections.ExocetPattern"/> instance holds the same cell maps
            as the current instance.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetPattern.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Collections.ExocetPattern.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.Collections.IPattern`1">
            <summary>
            Defines a normal pattern.
            </summary>
            <typeparam name="T">The type of the pattern itself.</typeparam>
        </member>
        <member name="P:Sudoku.Solving.Collections.IPattern`1.Map">
            <summary>
            Indicates the summary map that holds all cells of this pattern.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Collections.QiuDeadlyPattern">
            <summary>
            Defines a pattern that is a Qiu's deadly pattern technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | P P . | . . . | . . . |
            :-------+-------+-------:
            | S S B | B B B | B B B |
            | S S B | B B B | B B B |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>Pair Cells.</description></item>
            <item><term>S</term><description>Square Cells.</description></item>
            <item><term>B</term><description>Base-line Cells.</description></item>
            </list>
            </summary>
            <param name="Square">The square cells that is <c>S</c> in that sketch.</param>
            <param name="BaseLine">The base-line cells that is <c>B</c> in that sketch.</param>
            <param name="Pair">The pair cells that is <c>P</c> in that sketch.</param>
        </member>
        <member name="M:Sudoku.Solving.Collections.QiuDeadlyPattern.#ctor(Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@)">
            <summary>
            Defines a pattern that is a Qiu's deadly pattern technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | P P . | . . . | . . . |
            :-------+-------+-------:
            | S S B | B B B | B B B |
            | S S B | B B B | B B B |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>Pair Cells.</description></item>
            <item><term>S</term><description>Square Cells.</description></item>
            <item><term>B</term><description>Base-line Cells.</description></item>
            </list>
            </summary>
            <param name="Square">The square cells that is <c>S</c> in that sketch.</param>
            <param name="BaseLine">The base-line cells that is <c>B</c> in that sketch.</param>
            <param name="Pair">The pair cells that is <c>P</c> in that sketch.</param>
        </member>
        <member name="P:Sudoku.Solving.Collections.QiuDeadlyPattern.Map">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Collections.QiuDeadlyPattern.Equals(Sudoku.Solving.Collections.QiuDeadlyPattern@)">
            <summary>
            Determine whether the specified <see cref="T:Sudoku.Solving.Collections.QiuDeadlyPattern"/> instance holds the same
            cell maps as the current instance.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Collections.QiuDeadlyPattern.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Collections.QiuDeadlyPattern.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.Collections.UniquePolygonPattern">
            <summary>
            Defines a pattern that is a unique polygon technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | P P . |
            :-------+-------+-------:
            | . . . | . . Q | S S . |
            | . . . | . . Q | S(S). |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>The first group of cells.</description></item>
            <item><term>Q</term><description>The second group of cells.</description></item>
            <item>
            <term>S</term>
            <description>
            The square cells of size 3 or 4. The cell with the bracket (r8c8 in the picture)
            is optional.
            </description>
            </item>
            </list>
            </summary>
            <param name="Mask">The mask that forms a structure.</param>
            <remarks>
            <para>
            This <see cref="P:Sudoku.Solving.Collections.UniquePolygonPattern.Mask"/> is of type <see cref="T:System.Int64"/>,
            where the distribution of each bit is as follows:
            <code><![CDATA[
            0      7     14     21     28     35     42     49     56
            ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓
            |-------|-------|-------|-------|-------|-------|-------|-------|
            ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑
            0       8      16      24      32      40      48      56      64
            ]]></code>
            where the bit <c>[0..56]</c> is for 8 cells, the last 7 bits determine the pattern is a
            heptagon or a octagon. If the value is 127 (not available), the pattern will be a heptagon.
            </para>
            <para>
            Due to the rendering engine, you have to check this file rather than the tip window.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Collections.UniquePolygonPattern.#ctor(System.Int64)">
            <summary>
            Defines a pattern that is a unique polygon technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | P P . |
            :-------+-------+-------:
            | . . . | . . Q | S S . |
            | . . . | . . Q | S(S). |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>The first group of cells.</description></item>
            <item><term>Q</term><description>The second group of cells.</description></item>
            <item>
            <term>S</term>
            <description>
            The square cells of size 3 or 4. The cell with the bracket (r8c8 in the picture)
            is optional.
            </description>
            </item>
            </list>
            </summary>
            <param name="Mask">The mask that forms a structure.</param>
            <remarks>
            <para>
            This <see cref="P:Sudoku.Solving.Collections.UniquePolygonPattern.Mask"/> is of type <see cref="T:System.Int64"/>,
            where the distribution of each bit is as follows:
            <code><![CDATA[
            0      7     14     21     28     35     42     49     56
            ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓
            |-------|-------|-------|-------|-------|-------|-------|-------|
            ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑
            0       8      16      24      32      40      48      56      64
            ]]></code>
            where the bit <c>[0..56]</c> is for 8 cells, the last 7 bits determine the pattern is a
            heptagon or a octagon. If the value is 127 (not available), the pattern will be a heptagon.
            </para>
            <para>
            Due to the rendering engine, you have to check this file rather than the tip window.
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.IsHeptagon">
            <summary>
            Indicates whether the specified pattern is a heptagon.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.Pair1Map">
            <summary>
            Indicates the map of pair 1 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.Pair2Map">
            <summary>
            Indicates the map of pair 2 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.CenterCellsMap">
            <summary>
            The map of other three (or four) cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.Map">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.Pair1">
            <summary>
            Indicates the pair 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.Pair2">
            <summary>
            Indicates the pair 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Collections.UniquePolygonPattern.CenterCells">
            <summary>
            Indicates the other three (or four) cells.
            </summary>
            <remarks>
            <b>If and only if</b> the fourth value in the returned quadruple is available.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Collections.UniquePolygonPattern.Deconstruct(System.ValueTuple{System.Int32,System.Int32}@,System.ValueTuple{System.Int32,System.Int32}@,System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}@)">
            <summary>
            Deconstruct the instance to multiple values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Collections.UniquePolygonPattern.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Collections.UniquePolygonPattern.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.FailedReason">
            <summary>
            Defines a reason why the <see cref="T:Sudoku.Solving.IPuzzleSolver"/> is failed to solve a puzzle.
            </summary>
            <seealso cref="T:Sudoku.Solving.IPuzzleSolver"/>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.Nothing">
            <summary>
            Indicates nothing goes wrong.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleIsInvalid">
            <summary>
            Indicates the failed reason is that the puzzle doesn't contain a valid unique solution.
            Different with <see cref="F:Sudoku.Solving.FailedReason.PuzzleHasMultipleSolutions"/> and <see cref="F:Sudoku.Solving.FailedReason.PuzzleHasNoSolution"/>,
            this field will include more generic cases. If the puzzle doesn't pass the pre-process operation
            before solving, we should use this field.
            </summary>
            <seealso cref="F:Sudoku.Solving.FailedReason.PuzzleHasNoSolution"/>
            <seealso cref="F:Sudoku.Solving.FailedReason.PuzzleHasMultipleSolutions"/>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleHasNoSolution">
            <summary>
            Indicates the failed reason is that the puzzle doesn't contain a valid solution.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleHasMultipleSolutions">
            <summary>
            Indicates the failed reason is that the puzzle contains multiple valid solutions.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.UserCancelled">
            <summary>
            Indicates the failed reason is that the user has cancelled the task.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.NotImplemented">
            <summary>
            Indicates the failed reason is that the solver doesn't implemented some function
            that causes the operation can't be finished.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.ExceptionThrown">
            <summary>
            Indicates the failed reason is that the solver has encountered an error and couldn't solve,
            then an exception thrown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.WrongStep">
            <summary>
            Indicates the failed reason is that the solver has found a wrong step that cause the grid become invalid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleIsTooHard">
            <summary>
            Indicates the failed reason is that the puzzle is too hard to solve. The solver gave up.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.Unknown">
            <summary>
            Indicates the other reason to cause the error.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.IPuzzleSolver">
            <summary>
            Defines and provides with a solver that used for solving a sudoku puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.IPuzzleSolver.Solve(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <summary>
            To solve the specified puzzle.
            </summary>
            <param name="puzzle">The puzzle to be solved.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The solver result that provides the information after solving.</returns>
        </member>
        <member name="M:Sudoku.Solving.IPuzzleSolver.SolveAsync(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <summary>
            To solve the specified puzzle asynchronously.
            </summary>
            <param name="puzzle">The puzzle to be solved.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>
            A task that holds the operation to solve the puzzle, whose inner value is the solver result
            that provides the information after solving.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.ISolverResult">
            <summary>
            Defines a result that created by a solver to represent a result of analysis after the solver calculated.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.IsSolved">
            <summary>
            Indicates whether the solver has solved the puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.FailedReason">
            <summary>
            Indicates why the solving operation is failed. This property is useless when <see cref="P:Sudoku.Solving.ISolverResult.IsSolved"/>
            keeps the <see langword="true"/> value.
            </summary>
            <seealso cref="P:Sudoku.Solving.ISolverResult.IsSolved"/>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.OriginalPuzzle">
            <summary>
            Indicates the original sudoku puzzle to solve.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.Solution">
            <summary>
            Indicates the result sudoku grid solved. If the solver can't solve this puzzle, the value will be
            <see cref="F:Sudoku.Collections.Grid.Undefined"/>.
            </summary>
            <seealso cref="F:Sudoku.Collections.Grid.Undefined"/>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.ElapsedTime">
            <summary>
            Indicates the elapsed time used during solving the puzzle. The value may not be an useful value.
            Some case if the puzzle doesn't contain a valid unique solution, the value may be
            <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
            <seealso cref="F:System.TimeSpan.Zero"/>
        </member>
        <member name="M:Sudoku.Solving.ISolverResult.ToDisplayString">
            <summary>
            Get the string representation of the current instance.
            </summary>
            <returns>The string representation of the current instance.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Buffer.FastProperties">
            <summary>
            Provides and encapsulates the fast properties that is used in solving and analyzing a sudoku puzzle.
            </summary>
            <remarks>
            <para>
            The whole class is a <see langword="static"/> one, which means you can't use <see langword="new"/>
            clause to create a new instance of this type. In contrast, the class is used for providing with
            <see langword="static"/> properties used in a cyclic manual searching
            (i.e. in <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>).
            </para>
            <para>
            Some step searchers rely on this type. If you want to call them separately, you should ensure the method
            <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/> in this type must be called before using these properties.
            </para>
            <para>
            If a step searcher doesn't rely on this class, it'll be <see langword="true"/> for the property named
            <see cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>.
            If you find that the step searcher marks that attribute,
            you can call it everywhere safely; however, if the searcher isn't marked that attribute, you
            can't call it everywhere unless you call the method <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>.
            </para>
            <para>
            Please note, all names of properties in this class can also be found in <see cref="T:Sudoku.Collections.Grid"/>,
            which means you can also call the property by <see cref="T:Sudoku.Collections.Grid"/>. Of course, some of them
            doesn't contain the same one in <see cref="T:Sudoku.Collections.Grid"/>, but you can find a same property whose
            execution logic (handling logic) is totally same.
            For example, <see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap"/> is same as <see cref="P:Sudoku.Collections.Grid.EmptyCells"/>. The difference
            between them is that you shouldn't use <see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap"/> until you have called
            <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>, while <see cref="P:Sudoku.Collections.Grid.EmptyCells"/> can be used
            everywhere, because it isn't an instant property (which means the calculation begins
            when you called them, i.e. lazy ones; in contrast, some properties only store values directly,
            so their values can be got instantly, i.e. instant ones).
            </para>
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>
            <seealso cref="T:Sudoku.Collections.Grid"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap">
            <summary>
            The empty cells map.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.BivalueMap">
            <summary>
            The bi-value cells map.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.CandMaps">
            <summary>
            The candidate maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.DigitMaps">
            <summary>
            The digit maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.ValueMaps">
            <summary>
            The value maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)">
            <summary>
            Initialize the maps that used later.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Buffer.StepSearcherPool">
            <summary>
            Indicates a pool that stores the <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Buffer.StepSearcherPool.Collection">
            <summary>
            The step searchers to find steps to apply to a certain puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.StepSearcherPool.Searchers">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Checkers.MissingCandidateSearcher">
            <summary>
            Provides a searcher that checks the missing candidate for a sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Checkers.MissingCandidateSearcher.Solver">
            <summary>
            Indicates the inner solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.MissingCandidateSearcher.GetMissingCandidate(Sudoku.Collections.Grid@)">
            <summary>
            Gets the missing candidate that makes the grid have unique solution when it's restored.
            Returns <c>-1</c> when this metohd doesn't find out any possible missing candidates.
            </summary>
            <param name="grid">The grid to be checked.</param>
            <returns>
            The candidate found and confirmed being missing, whose valid range is from 0 to 728.
            <c>-1</c> will be returned if no possible missing candidate found. For example,
            at least two missing candidates should be checked.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the puzzle contain no solution or a unique solution.
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Manual.Checkers.PuzzleChecker">
            <summary>
            Defines a puzzle checker.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Checkers.PuzzleChecker.Solver">
            <summary>
            Indicates the inner solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.PuzzleChecker.IsValid(Sudoku.Collections.Grid@)">
            <summary>
            Checks whether the specified grid contains a valid unique solution.
            </summary>
            <param name="this">The grid to be checked.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.PuzzleChecker.IsValid(Sudoku.Collections.Grid@,Sudoku.Collections.Grid@,System.Nullable{System.Boolean}@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="solutionIfValid">
            The solution if the puzzle is valid; otherwise, <see cref="F:Sudoku.Collections.Grid.Undefined"/>.
            </param>
            <param name="sukaku">
            Indicates whether the current mode is sukaku mode.
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The puzzle is a sukaku puzzle.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The puzzle is a normal sudoku puzzle.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The puzzle is invalid.</description>
            </item>
            </list>
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="F:Sudoku.Collections.Grid.Undefined"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher">
            <summary>
            Defines a searcher that searches for the true candidates of the current sudoku grid.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.#ctor(Sudoku.Collections.Grid@)">
            <summary>
            Initializes an instance with the specified grid.
            </summary>
            <param name="grid">The current puzzle grid.</param>
            <exception cref="T:System.InvalidOperationException">Throws when the puzzle is invalid.</exception>
        </member>
        <member name="P:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.IsBugPattern">
            <summary>
            Indicates the current grid is a BUG+n pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.Puzzle">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.TrueCandidates">
            <summary>
            Indicates all true candidates (non-BUG candidates).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.GetAllTrueCandidates(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all true candidates when the number of empty cells
            is below than the argument.
            </summary>
            <param name="maximumEmptyCells">The maximum number of the empty cells.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>All true candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.GetAllTrueCandidatesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all true candidates when the number of empty cells
            is below than the argument asynchronously.
            </summary>
            <param name="maximumEmptyCells">The maximum number of the empty cells.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task to get all true candidates.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.ConclusionGathering">
            <summary>
            Provides the extension methods that used and called while gathering the conclusions.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.ConclusionGathering.ToConclusions(Sudoku.Collections.Cells@,System.Int32,Sudoku.ConclusionType)">
            <summary>
            Creates an array of <see cref="T:Sudoku.Conclusion"/>s
            that uses the specified conclusion type and the digit used.
            </summary>
            <param name="this">The current instance.</param>
            <param name="digit">The digit.</param>
            <param name="conclusionType">
            The conclusion type. The default value is <see cref="F:Sudoku.ConclusionType.Elimination"/>.
            </param>
            <returns>The array of <see cref="T:Sudoku.Conclusion"/>s.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ConclusionGathering.ToImmutableConclusions(Sudoku.Collections.Cells@,System.Int32,Sudoku.ConclusionType)">
            <summary>
            Creates an immutable array of <see cref="T:Sudoku.Conclusion"/>s
            that uses the specified conclusion type and the digit used.
            </summary>
            <param name="this">The current instance.</param>
            <param name="digit">The digit.</param>
            <param name="conclusionType">
            The conclusion type. The default value is <see cref="F:Sudoku.ConclusionType.Elimination"/>.
            </param>
            <returns>The immutable array of <see cref="T:Sudoku.Conclusion"/>s.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Constants">
            <summary>
            Provides with the constants.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.InvalidFirstSet">
            <summary>
            Indicates the invalid first set value
            after called <see cref="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)"/> and <see cref="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)"/>.
            </summary>
            <remarks>
            For more details you want to learn about, please visit
            <see href="https://github.com/dotnet/runtime/blob/a67d5680186ead0c9afdab7e004389c979d5fc1f/src/libraries/System.Private.CoreLib/src/System/Numerics/BitOperations.cs#L467">this link</see>
            to get the inner code.
            </remarks>
            <seealso cref="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)"/>
            <seealso cref="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.UniqueSquareTemplatesCount">
            <summary>
            Indicates the total number of unique square patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.QiuDeadlyPatternTemplatesCount">
            <summary>
            Indicates the total number of Qiu's deadly patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.ExocetTemplatesCount">
            <summary>
            Indicates the total number of exocet patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.BdpTemplatesSize3Count">
            <summary>
            Indicates the total number of Unique Polygon (Heptagon) possible templates of size 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.BdpTemplatesSize4Count">
            <summary>
            Indicates the total number of Unique Polygon (Octagon) possible templates of size 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.MultisectorLockedSetsTemplatesCount">
            <summary>
            Indicates the total number of multi-sector locked sets possible templates.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.AllRowsMask">
            <summary>
            Indicates the mask that means all rows.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.AllColumnsMask">
            <summary>
            Indicates the mask that means all columns.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.AllRegionsMask">
            <summary>
            Indicates the mask that means all regions.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.SubsetNames">
            <summary>
            <para>The names of all subsets by their sizes.</para>
            <para>
            For example, if you want to get the name of the size 3, the code will be
            <code><![CDATA[string name = SubsetNames[3];]]></code>
            Here the digit <c>3</c> is the size you want to get.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.FishNames">
            <summary>
            The names of all fishes by their sizes.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Constants.RegularWingNames">
            <summary>
            <para>The names of all regular wings by their sizes.</para>
            <para>
            For example, if you want to get the name of the size 3, the code will be
            <code><![CDATA[string name = RegularWingNames[3];]]></code>
            Here the digit <c>3</c> is the size you want to get.
            </para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DifficultyLevel">
            <summary>
            Provides a difficulty kind for a puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Unknown">
            <summary>
            Indicates the difficulty level is unknown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Easy">
            <summary>
            Indicates the difficulty is easy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Moderate">
            <summary>
            Indicates the difficulty is moderate.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Hard">
            <summary>
            Indicates the difficulty is hard.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Fiendish">
            <summary>
            Indicates the difficulty is fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Nightmare">
            <summary>
            Indicates the difficulty is nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.LastResort">
            <summary>
            Indicates the puzzle can't be solved
            unless using last resort methods.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DisabledReason">
            <summary>
            Indicates a reason why the searcher is disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.None">
            <summary>
            Indicates the searcher is normal one and isn't disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.LastResort">
            <summary>
            Indicates the searcher searches for last resorts, which don't need to show.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.HasBugs">
            <summary>
            Indicates the searcher has bugs while searching.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.TooSlow">
            <summary>
            Indicates the searcher runs so slowly that the author himself can't stand to use it.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DisplayingLevel">
            <summary>
            Indicates the difficulty level of the step.
            This enumeration type is used for the displaying of the step information list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.None">
            <summary>
            Indicates the level is none.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.A">
            <summary>
            Indicates the level is easy (Level A).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.B">
            <summary>
            Indicates the level is medium (Level B).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.C">
            <summary>
            Indicates the level is hard (Level C).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.D">
            <summary>
            Indicates the level is fiendish (Level D).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.E">
            <summary>
            Indicates the level is nightmare (Level E).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.EnabledAreas">
            <summary>
            Represents the data about where a step searcher can be enabled and used.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.None">
            <summary>
            Indicates all modes are disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.Default">
            <summary>
            Indicates the default mode (Sudoku Explainer or Hodoku mode).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.Gathering">
            <summary>
            Indicates the gathering mode (All steps will be found here).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.Experimental">
            <summary>
            Indicates the experimental function can use the step searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.IManualSolverOptions">
            <summary>
            Defines an instance that stores the options that bound with a <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IManualSolverOptions.IsHodokuMode">
            <summary>
            Indicates whether the solver uses Hodoku mode to solve a sudoku.
            </summary>
            <remarks>
            <para>
            <b>Hodoku mode</b> is a mode that imitates a sudoku-solving program called <i>Hodoku</i>
            to solve a puzzle. In this case, all enabled step searchers will be in ascending order via their's own
            priority, i.e. the value of the property <see cref="P:Sudoku.Solving.Manual.SearchingOptions.Priority"/>. On the other hand,
            this option provides a basic and normal processing behavior of a <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> instance.
            </para>
            <para>
            However, in this case the difficulty order (ascending or descending order) of steps
            won't be guaranteed. For example, the possible difficulty rating of a step searched via a UR searcher
            is between 4.5 and 4.8, and another rating of a step via a chain searcher is between 4.6 and 5.1.
            If the UR searcher has a larger priority than chain searcher, the solver may find all UR steps firsly
            in this case, and secondly searches for chains. In some cases, some UR steps found
            has a larger difficulty rating value than some chain steps found, so the difficulty ratings
            are unstrictly-handled (i.e. steps are out of ordered).
            </para>
            <para>
            If you want to strictly handle the difficulty rating, we recommend you set this property value
            as <see langword="false"/>, but the solver will be processed slower than the case setting the
            <see langword="true"/> value.
            </para>
            </remarks>
            <seealso cref="P:Sudoku.Solving.Manual.SearchingOptions.Priority"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IManualSolverOptions.IsFastSearching">
            <summary>
            Indicates whether the solver will use fast searching mode to solve puzzles.
            If the value is <see langword="true"/>, the solver will apply all steps after gathered.
            In the normal case, solver only fetches the first found step to apply.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IManualSolverOptions.OptimizedApplyingOrder">
            <summary>
            Indicates whether the solver will apply the steps via the asecending order.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.IStep">
            <summary>
            Provides a basic manual solving step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.ShowDifficulty">
            <summary>
            <para>
            Indicates whether the difficulty rating of this technique should be
            shown in the output screen. Some techniques such as <b>Gurth's symmetrical placement</b>
            doesn't need to show the difficulty (because the difficulty of this technique
            is unstable).
            </para>
            <para>
            If the value is <see langword="true"/>, the analysis result won't show the difficulty
            of this instance.
            </para>
            <para>The default value is <see langword="true"/>.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.IsElementary">
            <summary>
            <para>Indicates whether the step is an EST (i.e. Elementary Sudoku Technique) step.</para>
            <para>
            Here we define that the techniques often appearing and commonly to be used as below are ESTs:
            <list type="bullet">
            <item>Full House, Last Digit, Hidden Single, Naked Single</item>
            <item>Pointing, Claiming</item>
            <item>Naked Pair, Naked Triple, Naked Quarduple</item>
            <item>Naked Pair (+), Naked Triple (+), Naked Quarduple (+)</item>
            <item>Hidden Pair, Hidden Triple, Hidden Quarduple</item>
            <item>Locked Pair, Locked Triple</item>
            </list>
            </para>
            <para>The default value of this property is <see langword="false"/>.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.Name">
            <summary>
            Indicates the technique name. The default value is in the resource dictionary.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.Format">
            <summary>
            Gets the format of the current instance.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> result. If the resource dictionary doesn't contain
            any valid formats here, the result value will be <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            A <b>format</b> is the better way to format the result text of this technique information instance,
            It'll be represented by the normal characters and the placeholders, e.g.
            <code><![CDATA["{Name}: Cells {CellsStr} => {ElimsStr}"]]></code>
            Here the string result <b>shouldn't</b> be with the leading <c>'$'</c> character, because this is a
            format string, rather than a interpolated string.
            </para>
            <para>
            Here the property <c>Name</c>, <c>CellsStr</c> and <c>ElimsStr</c> should be implemented before
            the property invoked, you should creates those 3 properties, returns the corresponding correct string
            result, makes them <see langword="private"/> or <see langword="protected"/> and marks the attribute
            <see cref="T:Sudoku.Solving.Manual.Text.FormatItemAttribute"/> to help the code analyzer (if the code analyzer is available).
            The recommended implementation pattern is:
            <code><![CDATA[
            [FormatItem]
            private string CellsStr
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => Cells.ToString();
            }
            ]]></code>
            You can use the code snippet <c>fitem</c> to create the pattern, whose corresponding file is added
            into the <c>required/vssnippets</c> folder. For more information, please open the markdown file
            <see href="https://github.com/SunnieShine/Sudoku/blob/main/required/README.md">README.md</see>
            in the <c>required</c> folder to learn more information.
            </para>
            <para>
            Because this property will get the value from the resource dictionary, the property supports
            multiple language switching, which is better than the normal methods <see cref="M:Sudoku.Solving.Manual.IStep.ToString"/>
            and <see cref="M:Sudoku.Solving.Manual.IStep.ToFullString"/>. Therefore, this property is the substitution plan of those two methods.
            </para>
            <para>
            If you want to use the values in the resource documents, just use the property
            <see cref="F:Sudoku.Resources.ResourceManager.Shared"/> is okay:
            <code>
            public override string Format => ResourceDocumentManager.Shared["TheKeyYouWantToSearch"];
            </code>
            </para>
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.IStep.ToString"/>
            <seealso cref="M:Sudoku.Solving.Manual.IStep.ToFullString"/>
            <seealso cref="F:Sudoku.Resources.ResourceManager.Shared"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.Difficulty">
            <summary>
            The difficulty or this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.TechniqueCode">
            <summary>
            The technique code of this instance used for comparison
            (e.g. search for specified puzzle that contains this technique).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.TechniqueTags">
            <summary>
            The technique tags of this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.TechniqueGroup">
            <summary>
            The technique group that this technique instance belongs to.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.DifficultyLevel">
            <summary>
            The difficulty level of this step.
            </summary>
            <remarks>
            Although the type of this property is marked <see cref="T:System.FlagsAttribute"/>,
            we still can't set multiple flag values into the result. The flags are filtered
            during generting puzzles.
            </remarks>
            <seealso cref="T:System.FlagsAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.Stableness">
            <summary>
            Indicates the stableness of this technique. The default value is <see cref="F:Sudoku.Solving.Manual.Stableness.Stable"/>.
            </summary>
            <remarks>
            Although the type of this property is marked <see cref="T:System.FlagsAttribute"/>,
            we still can't set multiple flag values into the result. The flags are filtered
            during generting puzzles.
            </remarks>
            <seealso cref="F:Sudoku.Solving.Manual.Stableness.Stable"/>
            <seealso cref="T:System.FlagsAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.Rarity">
            <summary>
            Indicates the rarity of this technique appears.
            </summary>
            <remarks>
            Although the type of this property is marked <see cref="T:System.FlagsAttribute"/>,
            we still can't set multiple flag values into the result. The flags are filtered
            during generting puzzles.
            </remarks>
            <seealso cref="T:System.FlagsAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.Conclusions">
            <summary>
            Indicates the conclusions that the step can be eliminated or assigned to.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.Views">
            <summary>
            Indicates the views of the step that may be displayed onto the screen using pictures.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStep.ElimStr">
            <summary>
            Indicates the string representation of the conclusions.
            </summary>
            <remarks>
            Most of techniques uses eliminations
            so this property is named <c>ElimStr</c>. In other words, if the conclusion is an assignment one,
            the property will still use this name rather than <c>AssignmentStr</c>.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.IStep.ApplyTo(Sudoku.Collections.Grid@)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.IStep.ToString">
            <summary>
            Returns a string that only contains the name and the basic information.
            </summary>
            <returns>The string instance.</returns>
            <remarks>
            This method uses <see langword="sealed"/> and <see langword="override"/> modifiers
            to prevent the compiler overriding the method; in additional, the default behavior is changed to
            output as the method <see cref="M:Sudoku.Solving.Manual.IStep.Formatize(System.Boolean)"/> invoking.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.IStep.Formatize(System.Boolean)"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.IStep.ToSimpleString">
            <summary>
            Returns a string that only contains the name and the conclusions.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.IStep.ToFullString">
            <summary>
            Returns a string that contains the name, the conclusions and its all details.
            This method is used for displaying details in text box control.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.IStep.Formatize(System.Boolean)">
            <summary>
            Formatizes the <see cref="P:Sudoku.Solving.Manual.IStep.Format"/> property string and output the result.
            </summary>
            <param name="handleEscaping">Indicates whether the method will handle the escaping characters.</param>
            <returns>The result string.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the format is invalid. The possible cases are:
            <list type="bullet">
            <item>The format is <see langword="null"/>.</item>
            <item>The interpolation part contains the empty value.</item>
            <item>Missing the closed brace character <c>'}'</c>.</item>
            <item>The number of interpolations failed to match.</item>
            </list>
            </exception>
            <seealso cref="P:Sudoku.Solving.Manual.IStep.Format"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.IStepsGathererOptions">
            <summary>
            Defines an instance that stores the options that bound with a <see cref="T:Sudoku.Solving.Manual.StepsGatherer"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.StepsGatherer"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStepsGathererOptions.OnlyShowSameLevelTechniquesInFindAllSteps">
            <summary>
            Indicates whether the solver only displays the techniques with the same displaying level.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolver">
            <summary>
            Provides a manual solver that solves a sudoku puzzle using the human minds and ways
            to check and solve a sudoku puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveAsync(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve_HodokuMode(Sudoku.Collections.Grid@,Sudoku.Collections.Grid@,System.Boolean,Sudoku.Solving.Manual.ManualSolverResult,System.Threading.CancellationToken)">
            <summary>
            The inner solving operation method.
            </summary>
            <param name="puzzle">The original puzzle to be solved.</param>
            <param name="solution">The solution of the puzzle. Some step searchers will use this value.</param>
            <param name="isSukaku">A <see cref="T:System.Boolean"/> value indicating whether the puzzle is a sukaku.</param>
            <param name="baseSolverResult">The base solver result already included the base information.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The solver result.</returns>
            <exception cref="T:Sudoku.Solving.Manual.WrongStepException">Throws when found wrong steps to apply.</exception>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.RecordStep(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Solving.Manual.Step,Sudoku.Collections.Grid@,System.Diagnostics.Stopwatch,System.Collections.Generic.ICollection{Sudoku.Collections.Grid},Sudoku.Solving.Manual.ManualSolverResult,System.Threading.CancellationToken,Sudoku.Solving.Manual.ManualSolverResult@)">
            <summary>
            <para>
            Records the current found and valid step into the specified collection. This method will also
            check the validity of <paramref name="cancellationToken"/>. If user has cancelled the operation,
            here we'll throw an exception and exit the operation directly.
            </para>
            <para>
            Please note that if the argument <paramref name="result"/> isn't <see langword="null"/>, it'll mean
            that the puzzle has been already solved, so this method will stop the stopwatch. Therefore, you don't
            need to stop that stopwatch manually like the code <c>stopwatch.Stop();</c>.
            </para>
            </summary>
            <param name="steps">The steps.</param>
            <param name="step">The step.</param>
            <param name="playground">The playground.</param>
            <param name="stopwatch">The stopwatch.</param>
            <param name="stepGrids">The step grids.</param>
            <param name="baseSolverResult">Indicates the base solver result.</param>
            <param name="cancellationToken">The cancellation token that is used to cancel the operation.</param>
            <param name="result">The analysis result.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.OperationCanceledException">
            Throws when the current operation is cancelled.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.AreConclusionsValid(Sudoku.Collections.Grid@,Sudoku.Solving.Manual.Step)">
            <summary>
            Peeks the validity of step, to check whether all conclusions are possibly correct.
            </summary>
            <param name="solution">The solution.</param>
            <param name="step">The step to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.IsHodokuMode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.IsFastSearching">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolverResult">
            <summary>
            Provides the solver result after <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> solves a puzzle.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.#ctor(Sudoku.Collections.Grid@)">
            <summary>
            Provides the solver result after <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> solves a puzzle.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.IsSolved">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.FailedReason">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Solution">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.ElapsedTime">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.WrongStep">
            <summary>
            <para>
            Indicates the wrong step found. In general cases, if the property <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.IsSolved"/> keeps
            <see langword="false"/> value, it'll mean the puzzle is invalid to solve, or the solver has found
            one error step to apply, that causes the original puzzle <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.OriginalPuzzle"/> become invalid.
            In this case we can check this property to get the wrong information to debug the error,
            or tell the author himself directly, with the inner value of this property held.
            </para>
            <para>
            However, if the puzzle is successful to be solved, the property won't contain any value,
            so it'll keep the <see langword="null"/> reference. Therefore, please check the nullability
            of this property before using.
            </para>
            <para>
            In general, this table will tell us the nullability of this property:
            <list type="table">
            <listheader>
            <term>Nullability</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Not <see langword="null"/></term>
            <description>The puzzle is failed to solve, and the solver has found an invalid step to apply.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>Other cases.</description>
            </item>
            </list>
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.IsSolved"/>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.OriginalPuzzle"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.StepGrids">
            <summary>
            Indicates a list, whose element is the intermediate grid for each step.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Steps">
            <summary>
            Indicates all solving steps that the solver has recorded.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.StepGrids"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.MaxDifficulty">
            <summary>
            <para>Indicates the maximum difficulty of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the maximum value among all difficulty
            ratings in solving steps. If the puzzle has not been solved,
            or else the puzzle is solved by other solvers, this value will
            be always <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.TotalDifficulty">
            <summary>
            <para>Indicates the total difficulty rating of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the sum of all difficulty ratings of steps. If
            the puzzle has not been solved, the value will be the sum of all
            difficulty ratings of steps recorded in <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>.
            However, if the puzzle is solved by other solvers, this value will
            be <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.PearlDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first solving step. If the puzzle has not solved or
            the puzzle is solved by other solvers, this value will be always <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.DiamondDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first step before the first one whose conclusion is
            <see cref="F:Sudoku.ConclusionType.Assignment"/>. If the puzzle has not solved
            or solved by other solvers, this value will be <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="T:Sudoku.ConclusionType"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.SolvingStepsCount">
            <summary>
            Indicates the number of all solving steps recorded.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.DifficultyLevel">
            <summary>
            Indicates the difficulty level of the puzzle.
            If the puzzle has not solved or solved by other solvers,
            this value will be <see cref="F:Sudoku.Solving.Manual.DifficultyLevel.Unknown"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Bottleneck">
            <summary>
            Gets the bottleneck during the whole grid solving. Returns <see langword="null"/> if the property
            <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/> is default case (not initialized or empty).
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Manual.Step"/> instance at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The step information.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/> is <see langword="null"/> or empty.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">Throws when the index is out of range.</exception>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Item(Sudoku.Techniques.Technique)">
            <summary>
            Gets the first <see cref="T:Sudoku.Solving.Manual.Step"/> instance that matches the specified technique.
            </summary>
            <param name="code">The technique code to check and fetch.</param>
            <returns>The step information instance as the result.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the list doesn't contain any valid instance to get.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString(Sudoku.Solving.SolverResultFormattingOptions)">
            <inheritdoc cref="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(Sudoku.Solving.SolverResultFormattingOptions)"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToDisplayString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.GetEnumerator">
            <summary>
            Gets the enumerator of the current instance in order to use <see langword="foreach"/> loop.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Evaluator(,System.Decimal)">
            <summary>
            The inner executor to get the difficulty value (total, average).
            </summary>
            <param name="executor">The execute method.</param>
            <param name="d">
            The default value as the return value when <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/> is <see langword="null"/> or empty.
            </param>
            <returns>The result.</returns>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolverResult.Formatter">
            <summary>
            Provides operations for analysis result formatting.
            </summary>
            <param name="Result">Indicates the analysis result.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.#ctor(Sudoku.Solving.Manual.ManualSolverResult)">
            <summary>
            Provides operations for analysis result formatting.
            </summary>
            <param name="Result">Indicates the analysis result.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the specified format string.
            </summary>
            <param name="format">
            The format. If available, the parameter can be <see langword="null"/>.
            </param>
            <returns>The string result.</returns>
            <exception cref="T:System.FormatException">
            Throws when the specified format contains other invalid characters
            and the format provider can't work.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(Sudoku.Solving.SolverResultFormattingOptions)">
            <summary>
            Get the string result with the specified formatting options.
            </summary>
            <param name="options">The options.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.MaskMarshal">
            <summary>
            Provides with a serial of methods that handles with masks.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.MaskMarshal.GetMaskSubsets(System.Int16)">
            <summary>
            Get all mask combinations.
            </summary>
            <param name="value">The mask.</param>
            <returns>The result list.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.MaskMarshal.GetMaskSubsets(System.Int16,System.Int32)">
            <summary>
            Get all mask combinations.
            </summary>
            <param name="value">The mask.</param>
            <param name="size">The size.</param>
            <returns>The result list.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Rarity">
            <summary>
            Indicates the rarity of the technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Unknown">
            <summary>
            Indicates the technique can't be confirmed for its rarity.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Always">
            <summary>
            Indicates the technique always appears, such as <b>Hidden Single</b>.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Often">
            <summary>
            Indicates the rarity is often appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Sometimes">
            <summary>
            Indicates the rarity is sometimes appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Seldom">
            <summary>
            Indicates the rarity is seldom appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.HardlyEver">
            <summary>
            Indicates the rarity is hardly ever appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.OnlyForSpecialPuzzles">
            <summary>
            Indicates the technique only appears in the special puzzles designed on purpose.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.ReplacedByOtherTechniques">
            <summary>
            Indicates the technique can't appear because the technique will be replaced with another technique.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsWWingStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Sets W-Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Almost Locked Sets W-Wing</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsWWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsWWingStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXyWingStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Sets XY-Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Almost Locked Sets XY-Wing</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXyWingStepSearcher.AllowCollision">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXyWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXyWingStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXzStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Sets XZ</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Extended Subset Principle</item>
            <item>Singly-linked Almost Locked Sets XZ</item>
            <item>Doubly-linked Almost Locked Sets XZ</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXzStepSearcher.AllowCollision">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXzStepSearcher.AllowLoopedPatterns">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXzStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.AlmostLockedSetsXzStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.EmptyRectangleIntersectionPairStepSearcher">
            <summary>
            Provides with an <b>Empty Rectangle Intersection Pair</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Empty Rectangle Intersection Pair</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.EmptyRectangleIntersectionPairStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.EmptyRectangleIntersectionPairStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsStepSearcher">
            <summary>
            Defines a step searcher that searches for almost locked sets steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsWWingStepSearcher">
            <summary>
            Defines a step searcher that searches for almost locked sets W-Wing steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsXyWingStepSearcher">
            <summary>
            Defines a step searcher that searches for almost locked sets XY-Wing steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsXyWingStepSearcher.AllowCollision">
            <summary>
            Indicates whether two ALSes make an collision, which means they share the some same cells. 
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsXzStepSearcher">
            <summary>
            Defines a step searcher that searches for almost locked sets XZ steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsXzStepSearcher.AllowCollision">
            <summary>
            Indicates whether two ALSes make an collision, which means they share the some same cells. 
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsXzStepSearcher.AllowLoopedPatterns">
            <summary>
            Indicates whether the searcher will enhance the searching to find all possible eliminations
            for looped-ALS eliminations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IEmptyRectangleIntersectionPairStepSearcher">
            <summary>
            Defines a step searcher that searches for empty rectangle intersection pair steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.AlternatingInferenceChainStepSearcher">
            <summary>
            Provides with an <b>Alternating Inference Chain</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Irregular Wings:
            <list type="bullet">
            <item>M-Wing</item>
            <item>Local-Wing</item>
            <item>Split-Wing</item>
            <item>Hybrid-Wing</item>
            <!--<item>Purple Cow</item>-->
            </list>
            </item>
            <item>
            Basic techniques:
            <list type="bullet">
            <item>
            Alternating Infercence Chains:
            <list type="bullet">
            <item>X-Chain</item>
            <item>XY-Chain</item>
            <item>XY-X-Chain</item>
            <item>Discontinuous Nice Loop</item>
            <item>Normal Alternating Inference Chain</item>
            </list>
            </item>
            <item>
            Continuous Nice Loops:
            <list type="bullet">
            <item>Fishy Cycle (X-Cycle)</item>
            <item>XY-Cycle</item>
            <item>Normal Continuous Nice Loop</item>
            </list>
            </item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlternatingInferenceChainStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.AlternatingInferenceChainStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher">
            <summary>
            Provides with a <b>Forcing Chains</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Multiple Forcing Chains:
            <list type="bullet">
            <item>Cell Forcing Chains</item>
            <item>Region Forcing Chains</item>
            </list>
            </item>
            <item>
            Dynamic Multiple Forcing Chains:
            <list type="bullet">
            <item>Dynamic Cell Forcing Chains</item>
            <item>Dynamic Region Forcing Chains</item>
            </list>
            </item>
            <item>
            Dynamic Verifying Forcing Chains:
            <list type="bullet">
            <item>Dynamic Contradiction Forcing Chains</item>
            <item>Dynamic Double Forcing Chains</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher._temp">
            <summary>
            Indicates the grid that is used in processing.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.IsNishio">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.IsMultiple">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.IsDynamic">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.Level">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.ChainStep},Sudoku.Collections.Grid@)">
            <summary>
            Search for chains of each type.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.DoBinaryChaining(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.ChainStep},Sudoku.Collections.Grid@,Sudoku.Node@,Sudoku.Node@,Sudoku.Collections.NodeSet@,Sudoku.Collections.NodeSet@,System.Boolean,System.Boolean)">
            <summary>
            Do binary chaining.
            </summary>
            <param name="accumulator">The current accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pOn">The on node.</param>
            <param name="pOff">The off node.</param>
            <param name="onToOn">The list for <c>on</c> nodes to <c>on</c> nodes.</param>
            <param name="onToOff">The list for <c>on</c> nodes to <c>off</c> nodes.</param>
            <param name="doReduction">Indicates whether the method executes double chaining.</param>
            <param name="doContradiction">Indicates whether the method executes contradiction chaining.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.DoRegionChaining(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.ChainStep},Sudoku.Collections.Grid@,System.Byte,System.Byte,Sudoku.Collections.NodeSet@,Sudoku.Collections.NodeSet@)">
            <summary>
            Do region chaining.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid"></param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="onToOn">The list for <c>on</c> nodes to <c>on</c> nodes.</param>
            <param name="onToOff">The list for <c>on</c> nodes to <c>off</c> nodes.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.DoChaining(Sudoku.Collections.Grid@,Sudoku.Collections.NodeSet@,Sudoku.Collections.NodeSet@)">
            <summary>
            Do chaining (i.e. multiple chaining).
            </summary>
            <param name="grid">The grid.</param>
            <param name="toOn">The list to <c>on</c> nodes.</param>
            <param name="toOff">The list to <c>off</c> nodes.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.CreateChainingOnHint(Sudoku.Node@,Sudoku.Node@,Sudoku.Node@,Sudoku.Node@,System.Boolean)">
            <summary>
            Create a chaining hint whose conclusion is an on result.
            </summary>
            <param name="destOn">The destination on node.</param>
            <param name="destOff">The destination off node.</param>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <param name="isAbsurd">Indicates whether the chain is absurd.</param>
            <returns>The hint.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.CreateChainingOffHint(Sudoku.Node@,Sudoku.Node@,Sudoku.Node@,Sudoku.Node@,System.Boolean)">
            <summary>
            Create a chaining hint whose conclusion is an off result.
            </summary>
            <param name="destOn">The destination on node.</param>
            <param name="destOff">The destination off node.</param>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <param name="isAbsurd">Indicates whether the chain is absurd.</param>
            <returns>The hint.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.CreateCellFcHint(Sudoku.Collections.Grid@,System.Int32,Sudoku.Node@,System.Collections.Generic.Dictionary{System.Int32,Sudoku.Collections.NodeSet})">
            <summary>
            Create the hint for cell forcing chains.
            </summary>
            <param name="grid">The grid.</param>
            <param name="sourceCell">The source cell.</param>
            <param name="target">The target elimination node.</param>
            <param name="outcomes">All outcomes (conclusions).</param>
            <returns>The information instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ForcingChainStepSearcher.CreateRegionFcHint(System.Int32,System.Int32,Sudoku.Node@,System.Collections.Generic.Dictionary{System.Int32,Sudoku.Collections.NodeSet})">
            <summary>
            Create a hint of region forcing chains.
            </summary>
            <param name="region">The region.</param>
            <param name="digit">The digit.</param>
            <param name="target">The target node.</param>
            <param name="outcomes">All outcomes (conclusions).</param>
            <returns>The technique information instance.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IDynamicForcingChainStepSearcher">
            <summary>
            Defines a step searcher that searches for dynamic forcing chain steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IDynamicForcingChainStepSearcher.IsDynamic">
            <summary>
            Indicates whether the step searcher will search for dynamic forcing chains.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IDynamicForcingChainStepSearcher.Level">
            <summary>
            Indicates the level of the dynamic case. The dynamic level contains 6 possible values, which is corresponding
            to the digit 0, 1, 2, 3, 4 and 5.
            <list type="table">
            <item>
            <term>Level 0</term>
            <description>The dynamic case is disabled. The chain isn't a dynamic chain at all.</description>
            </item>
            <item>
            <term>Level 1</term>
            <description>The chain is a normal dynamic forcing chains.</description>
            </item>
            <item>
            <term>Level 2</term>
            <description>
            The chain is a dynamic forcing chains with grouped nodes, such as an X-Wing.
            (i.e. <b>Dynamic Forcing Chains + Generalized Structure</b>)
            </description>
            </item>
            <item>
            <term>Level 3</term>
            <description>
            The chain is a dynamic forcing chains with normal AICs as grouped nodes.
            (i.e. <b>Dynamic Forcing Chains + Alternating Inference Chain</b>)
            </description>
            </item>
            <item>
            <term>Level 4</term>
            <description>
            The chain is a dynamic forcing chains with normal forcing chains as grouped nodes.
            (i.e. <b>Dynamic Forcing Chains + Forcing Chains</b>)
            </description>
            </item>
            <item>
            <term>Level 5</term>
            <description>
            The chain is a dynamic forcing chains with dynamic forcing chains as grouped nodes.
            (i.e. <b>Dynamic Forcing Chains + Dynamic Forcing Chains</b>)
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IForcingChainStepSearcher">
            <summary>
            Defines a step searcher that searches for forcing chain steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IForcingChainStepSearcher.IsNishio">
            <summary>
            Indicates whether the step searcher will search for nishio forcing chains.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IForcingChainStepSearcher.IsMultiple">
            <summary>
            Indicates whether the step searcher will search for multiple forcing chains.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IAlternatingInferenceChainStepSearcher">
            <summary>
            Defines a step searcher that searches for alternating inference chain steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IChainStepSearcher">
            <summary>
            Defines a step searcher that searches for chain steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IChainStepSearcher.GetCandidateOffsets(Sudoku.Node,System.Boolean)">
            <summary>
            Get highlight candidate offsets through the specified target node.
            </summary>
            <param name="target">The target node.</param>
            <param name="isSimpleAic">
            Indicates whether the current caller is in <see cref="T:Sudoku.Solving.Manual.Searchers.IAlternatingInferenceChainStepSearcher"/>.
            The default value is <see langword="false"/>.
            </param>
            <returns>The candidate offsets.</returns>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IAlternatingInferenceChainStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IChainStepSearcher.GetLinks(Sudoku.Node,System.Boolean)">
            <summary>
            Get the links through the specified target node.
            </summary>
            <param name="target">The target node.</param>
            <param name="showAllLinks">
            Indicates whether the current chain will display all chains (even contains the weak links
            from the elimination node). The default value is <see langword="false"/>. If you want to
            draw the AIC, the elimination weak links don't need drawing.
            </param>
            <returns>The link.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IChainStepSearcher.GetOnToOff(Sudoku.Collections.Grid@,Sudoku.Node,System.Boolean)">
            <summary>
            Get all available weak links.
            </summary>
            <param name="grid">The grid.</param>
            <param name="p">The current node.</param>
            <param name="yEnabled">Indicates whether the Y-Chains are enabled.</param>
            <returns>All possible weak links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IChainStepSearcher.GetOffToOn(Sudoku.Collections.Grid@,Sudoku.Node,System.Boolean,System.Boolean,System.Boolean,Sudoku.Collections.Grid@,Sudoku.Collections.NodeSet,System.Boolean)">
            <summary>
            Get all available strong links.
            </summary>
            <param name="grid">The grid.</param>
            <param name="p">The current node.</param>
            <param name="xEnabled">Indicates whether the X-Chains are enabled.</param>
            <param name="yEnabled">Indicates whether the Y-Chains are enabled.</param>
            <param name="enableFastProperties">
            Indicates whether the caller has enabled <see cref="T:Sudoku.Solving.Manual.Buffer.FastProperties"/>.
            </param>
            <param name="source">The source grid.</param>
            <param name="offNodes">All off nodes.</param>
            <param name="isDynamic">
            Indicates whether the current searcher is searching for dynamic chains. If so,
            we can't use those static properties to optimize the performance.
            </param>
            <returns>All possible strong links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IChainStepSearcher.AddHiddenParentsOfCell(Sudoku.Node@,Sudoku.Collections.Grid@,Sudoku.Collections.Grid@,Sudoku.Collections.NodeSet@)">
            <summary>
            Add hidden parents of a cell.
            </summary>
            <param name="p">The node.</param>
            <param name="grid">The grid.</param>
            <param name="source">The source grid.</param>
            <param name="offNodes">All off nodes.</param>
            <exception cref="T:System.Exception">Throws when the parent node of the specified node cannot be found.</exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IChainStepSearcher.AddHiddenParentsOfRegion(Sudoku.Node@,Sudoku.Collections.Grid@,Sudoku.Collections.Grid@,Sudoku.Region,Sudoku.Collections.NodeSet@)">
            <summary>
            Add hidden parents of a region.
            </summary>
            <param name="p">The node.</param>
            <param name="grid">The grid.</param>
            <param name="source">The source grid.</param>
            <param name="currRegion">The current region label.</param>
            <param name="offNodes">All off nodes.</param>
            <exception cref="T:System.Exception">Throws when the parent node of the specified node cannot be found.</exception>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher">
            <summary>
            Provides with an <b>Extended Rectangle</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Extended Rectangle Type 1</item>
            <item>Extended Rectangle Type 2</item>
            <item>Extended Rectangle Type 3</item>
            <item>Extended Rectangle Type 4</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.PatternInfos">
            <summary>
            Indicates all possible extended rectangle pattern combinations.
            </summary>
            <remarks>
            <para>The list contains two types of <b>Extended Rectangle</b>s:</para>
            <para>
            Fit type (2 blocks spanned):
            <code><![CDATA[
            ab | ab
            bc | bc
            ac | ac
            ]]></code>
            </para>
            <para>
            Fat type (3 blocks spanned):
            <code><![CDATA[
            ab | ac | bc
            ab | ac | bc
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This construtcor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Int16,System.Int32,System.Boolean)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="extraCells">The extra cells map.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Int16,System.Int32,System.Boolean)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="extraCells">The extra cells map.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.CheckType3Naked(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,Sudoku.Collections.Cells@,System.Int16,System.Int16,Sudoku.Collections.Cells@,System.Boolean)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigits">The extra digits mask.</param>
            <param name="extraCellsMap">The map of extra cells.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.CheckType14(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,Sudoku.Collections.Cells@,System.Int16,Sudoku.Collections.Cells@,System.Boolean)">
            <summary>
            Check type 4 and a part of type 1 that the method
            <see cref="M:Sudoku.Solving.Manual.Searchers.ExtendedRectangleStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Int16,System.Int32,System.Boolean)"/>
            cannot be found.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraCellsMap">The map of extra cells.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IExtendedRectangleStepSearcher">
            <summary>
            Defines a searcher that searches for extended rectangle steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IDeadlyPatternStepSearcher">
            <summary>
            Defines a step searcher that searches for deadly pattern steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IUniqueLoopStepSearcher">
            <summary>
            Defines a step searcher that searches for unique loop steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IUniqueLoopStepSearcher.IsValidLoop(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Checks whether the specified loop of cells is a valid loop.
            </summary>
            <param name="loopCells">The loop cells.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.UniqueLoopStepSearcher">
            <summary>
            Provides with a <b>Unique Loop</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Unique Loop Type 1</item>
            <item>Unique Loop Type 2</item>
            <item>Unique Loop Type 3</item>
            <item>Unique Loop Type 4</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.UniqueLoopStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueLoopStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueLoopStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueLoopStep},Sudoku.Collections.Grid@,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Collections.Generic.IList{System.ValueTuple{Sudoku.Link,Sudoku.Presentation.ColorIdentifier}},Sudoku.Collections.Cells@,System.Boolean)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueLoopStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueLoopStep},Sudoku.Collections.Grid@,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Collections.Generic.IList{System.ValueTuple{Sudoku.Link,Sudoku.Presentation.ColorIdentifier}},Sudoku.Collections.Cells@,System.Int16,System.Boolean)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueLoopStepSearcher.CheckType3(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueLoopStep},Sudoku.Collections.Grid@,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Collections.Generic.IList{System.ValueTuple{Sudoku.Link,Sudoku.Presentation.ColorIdentifier}},Sudoku.Collections.Cells@,System.Int16,System.Boolean)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueLoopStepSearcher.CheckType4(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueLoopStep},Sudoku.Collections.Grid@,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Collections.Generic.IList{System.ValueTuple{Sudoku.Link,Sudoku.Presentation.ColorIdentifier}},Sudoku.Collections.Cells@,System.Int16,System.Boolean)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="links">The links.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IUniquePolygonStepSearcher">
            <summary>
            Defines a step that searches for unique polygon steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.UniquePolygonStepSearcher">
            <summary>
            Provides with a <b>Unique Polygon</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Unique Polygon Type 1</item>
            <item>Unique Polygon Type 2</item>
            <item>Unique Polygon Type 3</item>
            <item>Unique Polygon Type 4</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.UniquePolygonStepSearcher.Patterns">
            <summary>
            Indicates all possible patterns to iterate.
            </summary>
            <remarks>
            Please note that all possible heptagons and octagons are in here.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniquePolygonStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This construtcor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.UniquePolygonStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniquePolygonStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IQiuDeadlyPatternStepSearcher">
            <summary>
            Defines a step searcher that searches for Qiu's deadly pattern steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.QiuDeadlyPatternStepSearcher">
            <summary>
            Provides with a <b>Qiu's Deadly Pattern</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Qiu's Deadly Pattern Type 1</item>
            <item>Qiu's Deadly Pattern Type 2</item>
            <item>Qiu's Deadly Pattern Type 3</item>
            <item>Qiu's Deadly Pattern Type 4</item>
            <item>Qiu's Deadly Pattern Locked Type</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.QiuDeadlyPatternStepSearcher.Patterns">
            <summary>
            All different patterns.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.QiuDeadlyPatternStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This construtcor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.QiuDeadlyPatternStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.QiuDeadlyPatternStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IUniqueRectangleStepSearcher">
            <summary>
            Defines a step searcher that searches for unique rectangle steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IUniqueRectangleStepSearcher.AllowIncompleteUniqueRectangles">
            <summary>
            Indicates whether the UR can be incomplete. In other words,
            some of UR candidates can be removed before the pattern forms.
            </summary>
            <remarks>
            For example, the complete pattern is:
            <code><![CDATA[
            ab  |  ab
            ab  |  ab
            ]]></code>
            This is a complete pattern, and we may remove an <c>ab</c> in a certain corner.
            The incomplete pattern may not contain all four <c>ab</c>s in the structure.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IUniqueRectangleStepSearcher.SearchForExtendedUniqueRectangles">
            <summary>
            Indicates whether the searcher can search for extended URs.
            </summary>
            <remarks>
            The basic types are type 1 to type 6, all other types are extended ones.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher">
            <summary>
            Provides with a <b>Unique Rectangle</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Basic types:
            <list type="bullet">
            <item>Unique/Avoidable Rectangle Type 1, 2, 3, 5</item>
            <item>Unique Rectangle Type 4, 6</item>
            <item>Hidden Unique/Avoidable Rectangle</item>
            </list>
            </item>
            <item>
            Unique Rectangle with structures:
            <list type="bullet">
            <item>Unique Rectangle with Conjugate Pair</item>
            <item>Avoidable Rectangle with Hidden Single</item>
            <item>Unique Rectangle with Unknown Covering</item>
            <item>Unique Rectangle with Sue de Coq</item>
            <item>Unique Rectangle with Guardian</item>
            </list>
            </item>
            <item>
            Miscellaneous:
            <list type="bullet">
            <item>Unique Rectangle 2D, 3X</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.AllowIncompleteUniqueRectangles">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.SearchForExtendedUniqueRectangles">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Boolean)">
            <summary>
            Get all possible hints from the grid.
            </summary>
            <param name="gathered">The list stored the result.</param>
            <param name="grid">The grid.</param>
            <param name="arMode">Indicates whether the current mode is searching for ARs.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckPreconditions(Sudoku.Collections.Grid@,System.Int32[],System.Boolean)">
            <summary>
            Check preconditions.
            </summary>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is searching for ARs.</param>
            <returns>Indicates whether the UR is passed to check.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.IsConjugatePair(System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            To determine whether the specified region forms a conjugate pair
            of the specified digit, and the cells where they contain the digit
            is same as the given map contains.
            </summary>
            <param name="digit">The digit.</param>
            <param name="map">The map.</param>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.IsIncompleteUr(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,Sudoku.Presentation.ColorIdentifier}})">
            <summary>
            Check whether the highlight UR candidates is incomplete.
            </summary>
            <param name="list">The list to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.GetDiagonalCell(System.Int32[],System.Int32)">
            <summary>
            Get a cell that can't see each other.
            </summary>
            <param name="urCells">The UR cells.</param>
            <param name="cell">The current cell.</param>
            <returns>The diagonal cell.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the specified argument <paramref name="cell"/> is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.IsSameRegionCell(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get whether two cells are in a same region.
            </summary>
            <param name="cell1">The cell 1 to check.</param>
            <param name="cell2">The cell 2 to check.</param>
            <param name="region">
            The result regions that both two cells lie in. If the cell can't be found, this argument will be 0.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> value indicating whether the another cell is same region as the current one.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.GetHighlightCells(System.Int32[])">
            <summary>
            Get all highlight cells.
            </summary>
            <param name="urCells">The all UR cells used.</param>
            <returns>The list of highlight cells.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ cornerCell
            (abc) ab
             ab   ab
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1, corner2
            (abc) (abc)
             ab    ab
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckType3Naked(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ corner1, corner2
            (ab ) (ab )
             abx   aby
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckType4(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ corner1, corner2
            (ab ) ab
             abx  aby
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckType5(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check type 5.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab ) abc
             abc  abc
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckType6(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check type 6.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ corner1
            (ab )  aby
             abx  (ab)
                   ↑corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckHidden(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check hidden UR.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab ) abx
             aby  abz
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check2D(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+2D.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1
            (ab )  abx
             aby  (ab )  xy  *
                    ↑ corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check2B1SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+2B/1SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1, corner2
            (ab )  (ab )
             |
             | a
             |
             abx    aby
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check2D1SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+2D/1SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1
            (ab )   aby
             |
             | a
             |
             abx   (ab )
                     ↑ corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check3X(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+3X.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab )  abx
             aby   abz   xy  *
            ]]></code>
            Note: <c>z</c> is <c>x</c> or <c>y</c>.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check3X2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+3X/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab )    abx
                      |
                      | b
                  a   |
             aby-----abz
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check3N2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+3N/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab )-----abx
                   a   |
                       | b
                       |
             aby      abz
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check3U2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
             <summary>
             Check UR+3U/2SL.
             </summary>
             <param name="accumulator">The technique accumulator.</param>
             <param name="grid">The grid.</param>
             <param name="urCells">All UR cells.</param>
             <param name="arMode">Indicates whether the current mode is AR mode.</param>
             <param name="comparer">The mask comparer.</param>
             <param name="d1">The digit 1 used in UR.</param>
             <param name="d2">The digit 2 used in UR.</param>
             <param name="cornerCell">The corner cell.</param>
             <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
             <param name="index">The index.</param>
             <remarks>
             The structure:
             <code><![CDATA[
              ↓ cornerCell
             (ab )-----abx
                    a
            
                    b
              aby -----abz
             ]]></code>
             </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check3E2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
             <summary>
             Check UR+3E/2SL.
             </summary>
             <param name="accumulator">The technique accumulator.</param>
             <param name="grid">The grid.</param>
             <param name="urCells">All UR cells.</param>
             <param name="arMode">Indicates whether the current mode is AR mode.</param>
             <param name="comparer">The mask comparer.</param>
             <param name="d1">The digit 1 used in UR.</param>
             <param name="d2">The digit 2 used in UR.</param>
             <param name="cornerCell">The corner cell.</param>
             <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
             <param name="index">The index.</param>
             <remarks>
             The structure:
             <code><![CDATA[
               ↓ cornerCell
             (ab )-----abx
                    a
            
                    a
              aby -----abz
             ]]></code>
             </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check4X3SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+4X/3SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1, corner2
            (abx)-----(aby)
                   a    |
                        | b
                   a    |
             abz ----- abw
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Check4C3SL(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+4C/3SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            <para>The structures:</para>
            <para>
            Subtype 1:
            <code><![CDATA[
              ↓ corner1, corner2
            (abx)-----(aby)
                   a    |
                        | a
                   b    |
             abz ----- abw
            ]]></code>
            </para>
            <para>
            Subtype 2:
            <code><![CDATA[
              ↓ corner1, corner2
            (abx)-----(aby)
              |    a    |
              | b       | a
              |         |
             abz       abw
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckWing(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32,System.Int32)">
            <summary>
            Check UR-XY-Wing, UR-XYZ-Wing, UR-WXYZ-Wing and AR-XY-Wing, AR-XYZ-Wing and AR-WXYZ-Wing.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="size">The size of the wing to search.</param>
            <param name="index">The index.</param>
            <remarks>
            <para>The structures:</para>
            <para>
            Subtype 1:
            <code><![CDATA[
              ↓ corner1
            (ab )  abxy  yz  xz
            (ab )  abxy  *
              ↑ corner2
            ]]></code>
            Note that the pair of cells <c>abxy</c> should be in the same region.
            </para>
            <para>
            Subtype 2:
            <code><![CDATA[
              ↓ corner1
            (ab )  abx   xz
             aby  (ab )  *   yz
                    ↑ corner2
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckSdc(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check UR+SdC.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
                      |   xyz
             ab+ ab+  | abxyz abxyz
                      |   xyz
            ----------+------------
            (ab)(ab)  |
             ↑ corner1, corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckUnknownCoveringUnique(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32)">
             <summary>
             Check UR+Unknown covering.
             </summary>
             <param name="accumulator">The technique accumulator.</param>
             <param name="grid">The grid.</param>
             <param name="urCells">All UR cells.</param>
             <param name="comparer">The comparer.</param>
             <param name="d1">The digit 1.</param>
             <param name="d2">The digit 2.</param>
             <param name="index">The index.</param>
             <remarks>
             <para>The structures:</para>
             <para>
             Subtype 1:
             <code><![CDATA[
                  ↓urCellInSameBlock
             ab  abc      abc  ←anotherCell
            
                 abcx-----abcy ←resultCell
                       c
                  ↑targetCell
             ]]></code>
             Where the digit <c>a</c> and <c>b</c> in the down-left cell <c>abcx</c> can be removed.
             </para>
             <para>
             Subtype 2:
             <code><![CDATA[
             abcx   | ab  abc
              |     |
              | c   |
              |     |
             abcy   |     abc
             ]]></code>
             </para>
             </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckGuardianUniqueStandard(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check UR+Guardian.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckGuardianUniqueSubset(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check UR+Guardian, with the external subset.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.CheckHiddenSingleAvoidable(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.UniqueRectangleStep},Sudoku.Collections.Grid@,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check AR+Hidden single.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
            <remarks>
            <para>The structure:</para>
            <para>
            <code><![CDATA[
            ↓corner1
            a   | aby  -  -
            abx | a    -  b
                | -    -  -
                  ↑corner2(cell 'a')
            ]]></code>
            There's only one cell can be filled with the digit 'b' besides the cell 'aby'.
            </para>
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.UniqueRectangleStepSearcher.Patterns">
            <summary>
            The table of all <b>Unique Rectangle</b> cells.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IUniqueSquareStepSearcher">
            <summary>
            Defines a step searcher that searches for unique sqaure steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.UniqueSquareStepSearcher">
            <summary>
            Provides with a <b>Unique Square</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Unique Square Type 1</item>
            <item>Unique Square Type 2</item>
            <item>Unique Square Type 3</item>
            <item>Unique Square Type 4</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.UniqueSquareStepSearcher.Patterns">
            <summary>
            Indicates the patterns.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueSquareStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This construtcor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.UniqueSquareStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.UniqueSquareStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.BivalueUniversalGraveStepSearcher">
            <summary>
            Provides with a <b>Bivalue Universal Grave</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Bivalue Universal Grave Type 1</item>
            <item>Bivalue Universal Grave Type 2</item>
            <item>Bivalue Universal Grave Type 3</item>
            <item>Bivalue Universal Grave Type 4</item>
            <item>Bivalue Universal Grave + n</item>
            <item>Bivalue Universal Grave XZ</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.BivalueUniversalGraveStepSearcher.SearchExtendedTypes">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.BivalueUniversalGraveStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BivalueUniversalGraveStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BivalueUniversalGraveStepSearcher.CheckSingleDigit(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check whether all candidates in the list has same digit value.
            </summary>
            <param name="list">The list of all true candidates.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IBivalueUniversalGraveStepSearcher">
            <summary>
            Defines a step searcher that searches for bi-value universal grave steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IBivalueUniversalGraveStepSearcher.SearchExtendedTypes">
            <summary>
            Indicates whether the searcher should call the extended BUG checker
            to search for all true candidates no matter how difficult searching.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IBivalueUniversalGraveStepSearcher.FindTrueCandidates(Sudoku.Collections.Grid@,System.Collections.Generic.IReadOnlyList{System.Int32}@,System.Int32)">
            <summary>
            Finds all possible true candidates in this current grid.
            </summary>
            <param name="grid">The grid to find all possible true candidates.</param>
            <param name="trueCandidates">All possible true candidates returned.</param>
            <param name="maximumCellsToCheck">Indicates the maximum number of possible cells to check.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the grid contains any possible true candidates.
            If so, the argument <paramref name="trueCandidates"/> won't be <see langword="null"/>.
            </returns>
            <remarks>
            A <b>true candidate</b> is a candidate that makes the puzzle containing no valid solution
            if it is eliminated from the current puzzle. It is a strict concept, which means sometimes the puzzle
            doesn't contain any satisfied candidate to make the puzzle containing no solution if being eliminated.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the puzzle contains multiple solutions or even no solution.
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IUniversalStepSearcher">
            <summary>
            Defines a step searcher that searches for universal steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IExocetStepSearcher">
            <summary>
            Defines a step searcher that searches for exocet steps.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.IExocetStepSearcher.Patterns">
            <summary>
            Indicates all patterns.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IExocetStepSearcher.CheckAdvanced">
            <summary>
            Indicates whether the searcher will find advanced eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IExocetStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This construtcor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IJuniorExocetStepSearcher">
            <summary>
            Defines a step searcher that searches for junior exocet steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ISeniorExocetStepSearcher">
            <summary>
            Defines a step searcher that searches for senior exocet steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.JuniorExocetStepSearcher">
            <summary>
            Provides with a <b>Junior Exocet</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Junior Exocet</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.JuniorExocetStepSearcher.CheckAdvanced">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.JuniorExocetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.JuniorExocetStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.SeniorExocetStepSearcher">
            <summary>
            Provides with a <b>Senior Exocet</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Senior Exocet</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SeniorExocetStepSearcher.CheckAdvanced">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SeniorExocetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.SeniorExocetStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ComplexFishStepSearcher">
            <summary>
            Provides with a <b>Complex Fish</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Franken Fishes
            <list type="bullet">
            <item>Finned Franken Fish</item>
            <item>Sashimi Franken Fish</item>
            </list>
            </item>
            <item>
            Mutant Fishes
            <list type="bullet">
            <item>Finned Mutant Fish</item>
            <item>Sashimi Mutant Fish</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ComplexFishStepSearcher.MaxSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ComplexFishStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ComplexFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ComplexFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Steps.ComplexFishStep},Sudoku.Collections.Grid@,System.Collections.Generic.IList{Sudoku.Conclusion}[],System.Int32,System.Boolean)">
            <summary>
            Get all possible fish steps.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pomElims">The possible eliminations to check, specified as a dictionary.</param>
            <param name="digit">The current digit used.</param>
            <param name="onlyFindOne">Indicates whether the method only find one possible step.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ComplexFishStepSearcher.GetPomEliminationsFirstly(Sudoku.Collections.Grid@)">
            <summary>
            Get POM technique eliminations at first.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The dictionary that contains all eliminations grouped by digit used.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IComplexFishStepSearcher">
            <summary>
            Defines a step searcher that searches for complex fish steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IFishStepSearcher">
            <summary>
            Defines a step searcher that searches for fish steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IFishStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size the searcher can search for.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IFishStepSearcher.IsSashimi(System.Int32[],Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Check whether the fish is sashimi.
            </summary>
            <param name="baseSets">The base sets.</param>
            <param name="fins">All fins.</param>
            <param name="digit">The digit.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating that. All cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>If the fish is sashimi.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>If the fish is a normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>If the fish doesn't contain any fin.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.INormalFishStepSearcher">
            <summary>
            Defines a step searcher that searches for normal fish steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher">
            <summary>
            Provides with a <b>Normal Fish</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>X-Wing</item>
            <item>Swordfish</item>
            <item>Jellyfish</item>
            <item>Finned X-Wing</item>
            <item>Finned Swordfish</item>
            <item>Finned Jellyfish</item>
            <item>Sashimi X-Wing</item>
            <item>Sashimi Swordfish</item>
            <item>Sashimi Jellyfish</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.Sudoku#Solving#Manual#Searchers#IFishStepSearcher#MaxSize">
            <inheritdoc/>
            <remarks>
            I hide this member on purpose because 4 is the maximum size of subsets found in practice.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Int32,System.Int32**,System.Int32**,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get all possible normal fishes.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="r">The possible row table to iterate.</param>
            <param name="c">The possible column table to iterate.</param>
            <param name="withFin">Indicates whether the searcher will check for the existence of fins.</param>
            <param name="searchRow">
            Indicates whether the searcher searches for fishes in the direction of rows.
            </param>
            <param name="onlyFindOne">Indicates whether the method only searches for one step.</param>
            <returns>The first found step.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.GetDirectView(Sudoku.Collections.Grid@,System.Int32,System.Int32[],System.Int32[],Sudoku.Collections.Cells@,System.Boolean)">
            <summary>
            Get the direct fish view with the specified grid and the base sets.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
            <param name="fins">
            The cells of the fin in the current fish.
            </param>
            <param name="searchRow">Indicates whether the current searcher searches row.</param>
            <returns>The view.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ILoopLikeStepSearcher">
            <summary>
            Defines a step searcher that searches for loop-like steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.ILoopLikeStepSearcher.GetLinks(System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Converts all cells to the links that is used in drawing ULs or Reverse BUGs.
            </summary>
            <param name="this">The list of cells.</param>
            <param name="offset">The offset. The default value is <c>4</c>.</param>
            <returns>All links.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.AlmostLockedCandidatesStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Candidates</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Almost Locked Pair</item>
            <item>Almost Locked Triple</item>
            <item>Almost Locked Quadruple</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedCandidatesStepSearcher.CheckAlmostLockedQuadruple">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedCandidatesStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.AlmostLockedCandidatesStepSearcher.Sudoku#Solving#Manual#Searchers#IAlmostLockedCandidatesStepSearcher#CheckForValues">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.AlmostLockedCandidatesStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.AlmostLockedCandidatesStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Boolean)">
             <summary>
             Process the calculation.
             </summary>
             <param name="result">The result.</param>
             <param name="grid">The grid.</param>
             <param name="size">The size.</param>
             <param name="baseSet">The base set.</param>
             <param name="coverSet">The cover set.</param>
             <param name="a">The left grid map.</param>
             <param name="b">The right grid map.</param>
             <param name="c">The intersection.</param>
             <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
             <remarks>
             <para>
             The diagrams:
             <code><![CDATA[
             ALP:
             abx aby | ab
             abz     |
            
             ALT:
             abcw abcx | abc abc
             abcy abcz |
             ]]></code>
             </para>
             <para>Algorithm:</para>
             <para>
             If the cell <c>ab</c> (in ALP) or <c>abc</c> (in ALT) is filled with the digit <c>p</c>,
             then the cells <c>abx</c> and <c>aby</c> (in ALP) and <c>abcw</c> and <c>abcx</c> (in ALT) can't
             fill the digit <c>p</c>. Therefore the digit <c>p</c> can only be filled into the left-side block.
             </para>
             <para>
             If the block only contains those cells that can contain the digit <c>p</c>, the ALP or ALT will be formed,
             and the elimination is <c>z</c> (in ALP) and <c>y</c> and <c>z</c> (in ALT).
             </para>
             </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedCandidatesStepSearcher">
            <summary>
            Defines a step searcher that searches for almost locked candidates steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IAlmostLockedCandidatesStepSearcher.CheckAlmostLockedQuadruple">
            <summary>
            Indicates whether the user checks the almost locked quadruple.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IAlmostLockedCandidatesStepSearcher.CheckForValues">
            <summary>
            Indicates whether the searcher checks for values (givens and modifiables)
            to form an almost locked candidates. If the value is <see langword="true"/>,
            some possible Sue de Coqs steps will be replaced with Almost Locked Candidates ones.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IIntersectionStepSearcher">
            <summary>
            Defines a step searcher that searches for intersection steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ILockedCandidatesStepSearcher">
            <summary>
            Defines a step searcher that searches for locked candidates steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.LockedCandidatesStepSearcher">
            <summary>
            Provides with a <b>Locked Candidates</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Pointing</item>
            <item>Claiming</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.LockedCandidatesStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.LockedCandidatesStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
            <remarks>
            <para>
            The main idea of this searching operation:
            </para>
            <para>
            <code><![CDATA[
            .-------.-------.-------.
            | C C C | A A A | A A A |
            | B B B | . . . | . . . |
            | B B B | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            For example, if the cells C form a locked candidates, there'll be two cases:
            <list type="number">
            <item><b>Pointing (Type 1)</b>: Cells A contains the digit, but cells B doesn't.</item>
            <item><b>Claiming (Type 2)</b>: Cells B contains the digit, but cells A doesn't.</item>
            </list>
            </para>
            <para>
            <para>Therefore, the algorithm is:</para>
            Use bitwise-or <c>operator |</c> to gather all candidate masks from cells A, cells B and cells C,
            and suppose the notation <c>a</c> is the mask result for cells A, <c>b</c> is the mask result for cells B,
            and <c>c</c> is the mask result for cells C. If the equation <c><![CDATA[(c & (a ^ b)) != 0]]></c>
            is correct, the locked candidates exists, and the result of the expression
            <c><![CDATA[c & (a ^ b)]]></c> is a mask that holds the digits of the locked candidates.
            </para>
            <para>
            Why this expression? <c>a ^ b</c> means the digit can only appear in either cells A or cells B.
            If both or neither, the digit won't contain the locked candidates structure.
            Because of the optimization of the performance, we use the predefined table to iterate on
            all possible location where may form a locked candidate.
            </para>
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IStepSearcher">
            <summary>
            Defines a step searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IStepSearcher.Options">
            <summary>
            Indicates the step searching options.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <summary>
            Accumulate all possible steps into the argument <paramref name="accumulator"/> if
            the argument <paramref name="onlyFindOne"/> is <see langword="false"/>,
            or return the first found step if the argument <paramref name="onlyFindOne"/>
            is <see langword="true"/>.
            </summary>
            <param name="accumulator">
            <para>
            <para>The accumulator to store each step.</para>
            </para>
            <para>
            If <paramref name="onlyFindOne"/> is set to <see langword="true"/>,
            this argument will become useless because we only finding one step is okay,
            so we may not use the accumulator to store all possible steps, in order to optimize the performance.
            Therefore, this argument can be <see langword="null"/>
            (i.e. the expression <c><see langword="null"/>!</c>) when the argument
            <paramref name="onlyFindOne"/> is <see langword="true"/>.
            </para>
            </param>
            <param name="grid">The grid to search for techniques.</param>
            <param name="onlyFindOne">
            Indicates whether the method only searches for one <see cref="T:Sudoku.Solving.Manual.Step"/> instance.
            </param>
            <returns>
            Returns the first found step. The nullability of the return value are as belows:
            <list type="bullet">
            <item>
            <see langword="null"/>:
            <list type="bullet">
            <item><c><paramref name="onlyFindOne"/> == <see langword="false"/></c>.</item>
            <item><c><paramref name="onlyFindOne"/> == <see langword="true"/></c>, but <b>nothing</b> found.</item>
            </list>
            </item>
            <item>
            Not <see langword="null"/>:
            <list type="bullet">
            <item>
            <c><paramref name="onlyFindOne"/> == <see langword="true"/></c>, and found <b>at least one step</b>.
            In this case the return value is the first found step.
            </item>
            </list>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IUniqueLoopOrBivalueOddagonStepSearcher">
            <summary>
            Defines a step searcher that searches for unique loop or bi-value oddagon steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IUniqueLoopOrBivalueOddagonStepSearcher.SearchForPossibleLoopPatterns(Sudoku.Collections.Grid@,System.Int32,System.Int32,System.Int32,Sudoku.Region,System.Int16,System.Int32,Sudoku.Collections.Cells@,System.Collections.Generic.List{System.Int32},System.Func{System.Boolean},System.Collections.Generic.List{System.ValueTuple{Sudoku.Collections.Cells,System.Collections.Generic.IList{System.ValueTuple{Sudoku.Link,Sudoku.Presentation.ColorIdentifier}}}})">
            <summary>
            Searches for possible bi-value oddagon or unique loop patterns.
            </summary>
            <param name="grid">The sudoku grid.</param>
            <param name="d1">The first digit used.</param>
            <param name="d2">The second digit used.</param>
            <param name="cell">The current cell calculated.</param>
            <param name="lastRegion">Indicates the last region type used.</param>
            <param name="exDigitsMask">The extra digits mask.</param>
            <param name="allowedExtraCellsCount">Indicates the number of cells can be with extra digits.</param>
            <param name="loopMap">Indicates the map of the loop.</param>
            <param name="tempLoop">Indicates the cells used of the loop, queued.</param>
            <param name="predicate">
            Indicates the condition that checks whether the procedured structure is a valid loop.
            </param>
            <param name="loops">The possible loops found.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher">
            <summary>
            Provides with a <b>Bowman's Bingo</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Bowman's Bingo</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher._searcher">
            <summary>
            The singles searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher._tempConclusions">
            <summary>
            All temporary conclusions.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher.MaxLength">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher.GetLinks">
            <summary>
            Get links.
            </summary>
            <returns>The links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher.RecordUndoInfo(Sudoku.Collections.Grid@,System.Int32,System.Int32)">
            <summary>
            Record all information to be used in undo grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher.UndoGrid(Sudoku.Collections.Grid@,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Int16)">
            <summary>
            Undo the grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="list">The list.</param>
            <param name="cell">The cell.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BowmanBingoStepSearcher.IsValidGrid(Sudoku.Collections.Grid@,System.Int32)">
            <summary>
            To check the specified cell has a same digit filled in a cell
            which is same region with the current one.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.BruteForceStepSearcher">
            <summary>
            Provides with a <b>Brute Force</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Brute Force</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.BruteForceStepSearcher.TryAndErrorOrder">
            <summary>
            The order of cell offsets to get values.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.BruteForceStepSearcher.Solution">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.BruteForceStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BruteForceStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IBowmanBingoStepSearcher">
            <summary>
            Defines a step searcher that searches for bowman's bingo steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IBowmanBingoStepSearcher.MaxLength">
            <summary>
            Indicates the maximum length of the bowman bingo you want to search for.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IBruteForceStepSearcher">
            <summary>
            Defines a step searcher that searches for brute force steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IBruteForceStepSearcher.Solution">
            <summary>
            Indicates the solution grid. The grid will be used for validating the result.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ILastResortStepSearcher">
            <summary>
            Defines a step searcher that searches for last resort steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IPatternOverlayStepSearcher">
            <summary>
            Defines a step searcher that searches for pattern overlay steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IPatternOverlayStepSearcher.GetInvalidPos(Sudoku.Collections.Grid@)">
            <summary>
            Get all invalid positions.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The 9 maps for invalid positions of each digit.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IPatternOverlayStepSearcher.GetTemplates">
            <summary>
            Get all possible templates. The total number of all possbile pattern overlay templates is 46656.
            </summary>
            <returns>The templates.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ITemplateStepSearcher">
            <summary>
            Defines a step searcher that searches for template steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ITemplateStepSearcher.TemplateDeleteOnly">
            <summary>
            Indicates whether the technique searcher only checks template deletes.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ITemplateStepSearcher.Solution">
            <summary>
            Indicates the reference of the solution sudoku grid.
            </summary>
            <remarks>
            Please note that the property will be received a pointer value that points to a <see cref="T:Sudoku.Collections.Grid"/>.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.PatternOverlayStepSearcher">
            <summary>
            Provides with a <b>Pattern Overlay</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Pattern Overlay</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.PatternOverlayStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.PatternOverlayStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.TemplateStepSearcher">
            <summary>
            Provides with a <b>Template</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Template Set</item>
            <item>Template Delete</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.TemplateStepSearcher.TemplateDeleteOnly">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.TemplateStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.TemplateStepSearcher.Solution">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.TemplateStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.BivalueOddagonStepSearcher">
            <summary>
            Provides with a <b>Bi-value Oddagon</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <!--<item>Bi-value Oddagon Type 1</item>-->
            <item>Bi-value Oddagon Type 2</item>
            <item>Bi-value Oddagon Type 3</item>
            <!--<item>Bi-value Oddagon Type 4</item>-->
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.BivalueOddagonStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.BivalueOddagonStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.DominoLoopStepSearcher">
            <summary>
            Provides with a <b>Domino Loop</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Domino Loop</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.DominoLoopStepSearcher.SkLoopTable">
            <summary>
            The position table of all SK-loops.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.DominoLoopStepSearcher.RegionMaps">
            <summary>
            The region maps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.DominoLoopStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This construtcor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.DominoLoopStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.DominoLoopStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IBivalueOddagonStepSearcher">
            <summary>
            Defines a step searcher that searches for bi-value oddagon steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IDominoLoopStepSearcher">
            <summary>
            Defines a step searcher that searches for domino loop steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IMultisectorLockedSetsStepSearcher">
            <summary>
            Defines a step searcher that searches for multi-sector locked sets steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IRankTheoryStepSearcher">
            <summary>
            Defines a step searcher that searches for rank theory steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ISueDeCoq3DemensionStepSearcher">
            <summary>
            Defines a step searcher that searches for 3-demensional sue de coq steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ISueDeCoqStepSearcher">
            <summary>
            Defines a step searcher that searches for bi-value oddagon steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.MultisectorLockedSetsStepSearcher">
            <summary>
            Provides with a <b>Multi-sector Locked Sets</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Multi-sector Locked Sets</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.MultisectorLockedSetsStepSearcher.Patterns">
            <summary>
            Indicates the list initialized with the static constructor.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.MultisectorLockedSetsStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This construtcor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.MultisectorLockedSetsStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.MultisectorLockedSetsStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.SueDeCoq3DemensionStepSearcher">
            <summary>
            Provides with a <b>3-demensional Sue de Coq</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>3-demensional Sue de Coq</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SueDeCoq3DemensionStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.SueDeCoq3DemensionStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.SueDeCoqStepSearcher">
            <summary>
            Provides with a <b>Sue de Coq</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Sue de Coq Basic Type</item>
            <item>Sue de Coq Isolated</item>
            <item>Cannibalistic Sue de Coq</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SueDeCoqStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.SueDeCoqStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.EmptyRectangleStepSearcher">
            <summary>
            Provides with an <b>Empty Rectangle</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Empty Rectangle</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.EmptyRectangleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.EmptyRectangleStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.EmptyRectangleStepSearcher.LinkIds">
            <summary>
            Indicates all regions iterating on the specified block
            forming an empty rectangle.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.GuardianStepSearcher">
            <summary>
            Provides with a <b>Guardian</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Guardian</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.GuardianStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.GuardianStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IEmptyRectangleStepSearcher">
            <summary>
            Defines a step searcher that searches for an empty rectangle step.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IEmptyRectangleStepSearcher.IsEmptyRectangle(Sudoku.Collections.Cells@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Check whether the cells form an empty rectangle.
            </summary>
            <param name="this">The empty cell grid map.</param>
            <param name="block">The block.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IGuardianStepSearcher">
            <summary>
            Defines a step searcher that searches for guardian steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IGuardianStepSearcher.GetLinks(System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Converts all cells to the links that is used in drawing ULs or Reverse BUGs.
            </summary>
            <param name="cells">The list of cells.</param>
            <param name="offset">The offset. The default value is 4.</param>
            <returns>All links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IGuardianStepSearcher.CreateGuardianMap(System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@)">
            <summary>
            Create the guardian map.
            </summary>
            <param name="cell1">The first cell.</param>
            <param name="cell2">The second cell.</param>
            <param name="digit">The current digit.</param>
            <param name="guardians">
            The current guardian cells.
            This map may not contain cells that lies in the region
            that <paramref name="cell1"/> and <paramref name="cell2"/> both lies in.
            </param>
            <returns>All guardians.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ISingleDigitPatternStepSearcher">
            <summary>
            Defines a step searcher that searches for single-digit-pattern steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ITwoStrongLinksStepSearcher">
            <summary>
            Defines a step searcher that searches for two-strong-link steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.TwoStrongLinksStepSearcher">
            <summary>
            Provides with a <b>Two-strong Links</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Skyscraper</item>
            <item>Two-string Kite</item>
            <item>Turbot Fish</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.TwoStrongLinksStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.TwoStrongLinksStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ISingleStepSearcher">
            <summary>
            Defines a step searcher that searches for single steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ISingleStepSearcher.EnableFullHouse">
            <summary>
            Indicates whether the solver enables the technique full house.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ISingleStepSearcher.EnableLastDigit">
            <summary>
            Indicates whether the solver enables the technique last digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ISingleStepSearcher.HiddenSinglesInBlockFirst">
            <summary>
            Indicates whether the solver checks for hidden single in block firstly.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ISingleStepSearcher.ShowDirectLines">
            <summary>
            Indicates whether the solver shows the direct lines (cross-hatching information).
            </summary>
            <remarks>
            <para>
            <b>Direct line</b>s is a concept that describes the crosshatching information of a hidden single.
            For example, in this following grid:
            <code><![CDATA[
            .---------.---------.---------.
            | .  .  . | .  .  . | .  .  . |
            | .  .  . | .  .  1 | .  .  . |
            | .  .  . | .  .  . | .  .  . |
            :---------+---------+---------:
            | .  .  1 | x  x  x | .  .  . |
            | .  .  . | x  .  x | .  .  . |
            | .  .  . | x  x  x | 1  .  . |
            :---------+---------+---------:
            | .  .  . | .  .  . | .  .  . |
            | .  .  . | 1  .  . | .  .  . |
            | .  .  . | .  .  . | .  .  . |
            '---------'---------'---------'
            ]]></code>
            The start point of the direct lines are:
            <list type="bullet">
            <item><c>r4c3(1)</c>, removes the cases of digit 1 for cells <c>r4c456</c>.</item>
            <item><c>r2c6(1)</c>, removes the cases of digit 1 for cells <c>r456c6</c>.</item>
            <item><c>r6c7(1)</c>, removes the cases of digit 1 for cells <c>r6c456</c>.</item>
            <item><c>r8c4(1)</c>, removes the cases of digit 1 for cells <c>r456c4</c>.</item>
            </list>
            </para>
            <para>
            All the end points may be displayed using a cross mark ('<c>x</c>'), and the start
            point may be used a circle mark ('<c>o</c>').
            </para>
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.SingleStepSearcher">
            <summary>
            Provides with a <b>Single</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>Full House</item>
            <item>Last Digit</item>
            <item>Hidden Single</item>
            <item>Naked Single</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.EnableFullHouse">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.EnableLastDigit">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.HiddenSinglesInBlockFirst">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.ShowDirectLines">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.ISubsetStepSearcher">
            <summary>
            Defines a step searcher that searches for subset steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.ISubsetStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size of the searcher can search for.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher">
            <summary>
            Provides with a <b>Subset</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>Locked Pair</item>
            <item>Locked Triple</item>
            <item>Naked Pair</item>
            <item>Naked Triple</item>
            <item>Naked Quadruple</item>
            <item>Naked Pair (+)</item>
            <item>Naked Triple (+)</item>
            <item>Naked Quadruple (+)</item>
            <item>Hidden Pair</item>
            <item>Hidden Triple</item>
            <item>Hidden Quadruple</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher.Sudoku#Solving#Manual#Searchers#ISubsetStepSearcher#MaxSize">
            <inheritdoc/>
            <remarks>
            I hide this member on purpose because 4 is the maximum size of subsets found in practice.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IIregularWingStepSearcher">
            <summary>
            Defines a step searcher that searches for irregular wing steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IRegularWingStepSearcher">
            <summary>
            Defines a step searcher that searches for regular wing steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IRegularWingStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size the searcher will search for. The maximum possible value is 9.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when <c>value</c> is greater than 9.</exception>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IWingStepSearcher">
            <summary>
            Defines a step searcher that searches for wing steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher">
            <summary>
            Provides with a <b>Regular Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>XY-Wing</item>
            <item>XYZ-Wing</item>
            <item>WXYZ-Wing</item>
            <item>VWXYZ-Wing</item>
            <item>UVWXYZ-Wing</item>
            <item>TUVWXYZ-Wing</item>
            <item>STUVWXYZ-Wing</item>
            <item>RSTUVWXYZ-Wing</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher._maxSize">
            <summary>
            The inner field of the property <see cref="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.MaxSize"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.MaxSize"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.MaxSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.WWingStepSearcher">
            <summary>
            Provides with a <b>W-Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>W-Wing (George Woods' Wing)</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.WWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.WWingStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)">
            <inheritdoc/>
            <remarks>
            In fact, <c>Hybrid-Wing</c>s, <c>Local-Wing</c>s, <c>Split-Wing</c>s and <c>M-Wing</c>s can
            be found in another searcher. In addition, these wings are not elementary and necessary techniques
            so we doesn't need to list them.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.SearchingOptions">
            <summary>
            Indicates the options aiming to <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s while searching.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledAreas">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/> and <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Gathering"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on <see cref="T:Sudoku.Solving.Manual.StepsGatherer"/>.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time.
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            <para>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </para>
            <para>
            The property <b>must</b> contain a value that differs with <see cref="F:Sudoku.Solving.Manual.DisabledReason.None"/>
            when the property <see cref="P:Sudoku.Solving.Manual.SearchingOptions.EnabledAreas"/> isn't <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/>.
            </para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.StepsGatherer"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.SearchingOptions.#ctor(System.Int32,Sudoku.Solving.Manual.DisplayingLevel,Sudoku.Solving.Manual.EnabledAreas,Sudoku.Solving.Manual.DisabledReason)">
            <summary>
            Indicates the options aiming to <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s while searching.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledAreas">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/> and <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Gathering"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on <see cref="T:Sudoku.Solving.Manual.StepsGatherer"/>.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time.
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            <para>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </para>
            <para>
            The property <b>must</b> contain a value that differs with <see cref="F:Sudoku.Solving.Manual.DisabledReason.None"/>
            when the property <see cref="P:Sudoku.Solving.Manual.SearchingOptions.EnabledAreas"/> isn't <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/>.
            </para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.StepsGatherer"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Stableness">
            <summary>
            Defines a stableness of a technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.Unknown">
            <summary>
            Indicates the stableness is unknown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.Stable">
            <summary>
            Indicates the stableness is stable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.LessUnstable">
            <summary>
            Indicates the stableness is less unstable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.Unstable">
            <summary>
            Indicates the stableness is unstable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.ExtremelyUnstable">
            <summary>
            Indicates the stableness is expremely unstable.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Step">
            <summary>
            Provides with a manual solving step that is a technique usage, and contains the conclusions.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a manual solving step that is a technique usage, and contains the conclusions.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsAlmostLockedSets">
            <summary>
            Indicates whether the corresponding technique of the current step is an Almost Locked Sets
            (ALS in abbreviation).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsChaining">
            <summary>
            Indicates whether the corresponding technique of the current step is a chain. The chain techiques are:
            <list type="bullet">
            <item>
            Wings
            <list type="bullet">
            <item>
            <see cref="T:Sudoku.Solving.Manual.Searchers.IRegularWingStepSearcher">Regular wings</see> (XY-Wing, XYZ-Wing, WXYZ-Wing, etc.)
            </item>
            <item>
            <see cref="T:Sudoku.Solving.Manual.Searchers.IIregularWingStepSearcher">Irregular wings</see>
            (W-Wing, M-Wing, Split-Wing, Local-Wing, Hybrid-Wing)
            </item>
            </list>
            </item>
            <item>
            Short chains
            <list type="bullet">
            <item>
            <see cref="T:Sudoku.Solving.Manual.Searchers.ITwoStrongLinksStepSearcher">Two strong links</see>
            (Skyscraper, Two-string kite, Turbot fish)
            </item>
            <item>
            ALS chaining-like techniques
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsXzStepSearcher">ALS-XZ</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsXyWingStepSearcher">ALS-XY-Wing</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IAlmostLockedSetsWWingStepSearcher">ALS-W-Wing</see></item>
            </list>
            </item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IEmptyRectangleStepSearcher">Empty rectangle</see></item>
            </list>
            </item>
            <item>
            Long chains
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IForcingChainStepSearcher">Forcing chains</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IDynamicForcingChainStepSearcher">Dynamic forcing chains</see></item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsDeadlyPattern">
            <summary>
            Indicates whether the corresponding technique of the current step is a deadly pattern.
            The deadly pattern techniques are:
            <list type="bullet">
            <item>
            Bi-value patterns
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IUniqueRectangleStepSearcher">Unique rectangle</see> (i.e. Uniqueness test)</item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IUniqueLoopStepSearcher">Unique loop</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IBivalueUniversalGraveStepSearcher">Bi-value universal grave</see></item>
            </list>
            </item>
            <item>
            Multi-value patterns
            <list type="bullet">
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IExtendedRectangleStepSearcher">Extended rectangle</see></item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IUniqueSquareStepSearcher">Unique square</see></item>
            <item>
            <see cref="T:Sudoku.Solving.Manual.Searchers.IUniquePolygonStepSearcher">Unique polygon</see> (Borescoper's deadly pattern as its alias)
            </item>
            <item><see cref="T:Sudoku.Solving.Manual.Searchers.IQiuDeadlyPatternStepSearcher">Qiu's deadly pattern</see></item>
            </list>
            </item>
            <!--
            <item>
            Other deadly patterns
            <list type="bullet">
            <item><see cref="#">Reverse bi-value universal grave</see></item>
            </list>
            </item>
            -->
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.ElimStr">
            <inheritdoc cref="P:Sudoku.Solving.Manual.IStep.ElimStr"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Sudoku#Solving#Manual#IStep#ElimStr">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ApplyTo(Sudoku.Collections.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.HasTag(Sudoku.Techniques.TechniqueTags)">
            <summary>
            Determine whether the current step information instance with the specified flags.
            </summary>
            <param name="flags">
            The flags. If the argument contains more than one set bit, all flags will be checked
            one by one.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ToSimpleString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ToFullString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.Formatize(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.StepSearcherAttribute">
            <summary>
            To mark onto a step searcher, to tell the runtime and the compiler that the type is a step searcher.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsOptionsFixed">
            <summary>
            <para>Indicates whether the option is fixed that can't be modified in UI.</para>
            <para><i>The default value is <see langword="false"/>.</i></para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepSearcherAttribute.IsDirect">
            <summary>
            <para>
            Indicates the technique searcher can or can't be used in some scenarios
            where they aren't in traversing mode to call
            <see cref="M:Sudoku.Solving.Manual.Searchers.IStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)"/>
            in <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s one by one.
            </para>
            <para>
            If <see langword="true"/>, the searcher can't use those <see langword="static"/>
            properties such as <see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.CandMaps"/> in its method
            <see cref="M:Sudoku.Solving.Manual.Searchers.IStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Collections.Grid@,System.Boolean)"/>.
            </para>
            <para><i>The default value is <see langword="false"/>.</i></para>
            </summary>
            <remarks>
            <para>
            All disallowed properties are:
            <list type="bullet">
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.DigitMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.ValueMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.CandMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.BivalueMap"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap"/></item>
            </list>
            The disallowed method is:
            <list type="bullet">
            <item><see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Collections.Grid@)"/></item>
            </list>
            </para>
            <para>
            Those properties or methods can optimize the performance to analyze a sudoku grid, but
            sometimes they may cause a potential bug that is hard to find and fix. The attribute
            is created and used for solving the problem.
            </para>
            </remarks>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.Buffer.FastProperties"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepSearcherAttribute.PuzzleNotRelying">
            <summary>
            <para>Indicates whether the specified step searcher doesn't rely on the puzzle.</para>
            <para><i>The default value is <see langword="false"/>.</i></para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.StepsGatherer">
            <summary>
            Defines a steps gatherer.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepsGatherer.Search(Sudoku.Collections.Grid@,System.Threading.CancellationToken)">
            <summary>
            Search for all possible steps in a grid.
            </summary>
            <param name="puzzle">The puzzle grid.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The result grouped by technique names.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepsGatherer.OnlyShowSameLevelTechniquesInFindAllSteps">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="ConjugatePair">Indiactes the conjugate pair used.</param>
            <param name="WDigitsMask">Indicates the mask that holds the W digit.</param>
            <param name="X">Indicates the X digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.AlmostLockedSet@,Sudoku.Solving.Collections.AlmostLockedSet@,Sudoku.ConjugatePair@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="ConjugatePair">Indiactes the conjugate pair used.</param>
            <param name="WDigitsMask">Indicates the mask that holds the W digit.</param>
            <param name="X">Indicates the X digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsWWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XY-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="Bridge">Indicates the ALS that is as a bridge.</param>
            <param name="XDigitsMask">Indicates the mask that holds the digits for the X value.</param>
            <param name="YDigitsMask">Indicates the mask that holds the digits for the Y value.</param>
            <param name="ZDigitsMask">Indicates the mask that holds the digits for the Z value.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.AlmostLockedSet@,Sudoku.Solving.Collections.AlmostLockedSet@,Sudoku.Solving.Collections.AlmostLockedSet@,System.Int16,System.Int16,System.Int16)">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XY-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="Bridge">Indicates the ALS that is as a bridge.</param>
            <param name="XDigitsMask">Indicates the mask that holds the digits for the X value.</param>
            <param name="YDigitsMask">Indicates the mask that holds the digits for the Y value.</param>
            <param name="ZDigitsMask">Indicates the mask that holds the digits for the Z value.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXyWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="XDigitsMask">Indicates the X digit used in this ALS-XZ pattern.</param>
            <param name="ZDigitsMask">Indicates the Z digit used in this ALS-XZ pattern.</param>
            <param name="IsDoublyLinked">Indicates whether the ALS-XZ is doubly-linked.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.AlmostLockedSet@,Sudoku.Solving.Collections.AlmostLockedSet@,System.Int16,System.Int16,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="XDigitsMask">Indicates the X digit used in this ALS-XZ pattern.</param>
            <param name="ZDigitsMask">Indicates the Z digit used in this ALS-XZ pattern.</param>
            <param name="IsDoublyLinked">Indicates whether the ALS-XZ is doubly-linked.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedSetsXzStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.EmptyRectangleIntersectionPairStep">
            <summary>
            Provides with a step that is an <b>Empty Rectangle Intersection Pair</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell used.</param>
            <param name="EndCell">Indicates the end cell used.</param>
            <param name="Region">The region that forms the dual empty rectangle.</param>
            <param name="Digit1">Indicates the digit 1 used in this pattern.</param>
            <param name="Digit2">Indicates the digit 2 used in this pattern.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.EmptyRectangleIntersectionPairStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is an <b>Empty Rectangle Intersection Pair</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell used.</param>
            <param name="EndCell">Indicates the end cell used.</param>
            <param name="Region">The region that forms the dual empty rectangle.</param>
            <param name="Digit1">Indicates the digit 1 used in this pattern.</param>
            <param name="Digit2">Indicates the digit 2 used in this pattern.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleIntersectionPairStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleIntersectionPairStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleIntersectionPairStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleIntersectionPairStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleIntersectionPairStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep">
            <summary>
            Provides with a step that is an <b>Alternating Inference Chain</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="XEnabled"><inheritdoc/></param>
            <param name="YEnabled"><inheritdoc/></param>
            <param name="Target">Indicates the target cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Boolean,System.Boolean,Sudoku.Node)">
            <summary>
            Provides with a step that is an <b>Alternating Inference Chain</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="XEnabled"><inheritdoc/></param>
            <param name="YEnabled"><inheritdoc/></param>
            <param name="Target">Indicates the target cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.IsXyChain">
            <summary>
            Indicates whether the specified chain is an XY-Chain.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.IsXChain">
            <summary>
            Indicates whether the specified chain is an X-Chain.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.IsMWing">
            <summary>
            Indicates whether the chain is M-Wing (<c>(x = y) - y = (y - x) = x</c>).
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.IsSplitWing">
            <summary>
            Indicates whether the chain is Split-Wing (<c>x = x - (x = y) - y = y</c>).
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.IsHybridWing">
            <summary>
            Indicates whether the chain is Hybrid-Wing.
            This wing has two types:
            <list type="bullet">
            <item><c>(x = y) - y = (y - z) = z</c></item>
            <item><c>(x = y) - (y = z) - z = z</c></item>
            </list>
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlternatingInferenceChainStep.IsLocalWing">
            <summary>
            Indicates whether the chain is Local-Wing (<c>x = (x - z) = (z - y) = y</c>).
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ChainStep">
            <summary>
            Provides with a step that is a <b>Chain</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="XEnabled">
            <para>A <see cref="T:System.Boolean"/> result indicating whether the chain contains X factor.</para>
            <para>An <b>X factor</b> represents a chain relation about two same-digit strong link.</para>
            </param>
            <param name="YEnabled">
            <para>A <see cref="T:System.Boolean"/> result indicating whether the chain contains Y factor.</para>
            <para>A <b>Y factor</b> represents a chain relation about two-digit strong link in a single cell.</para>
            </param>
            <param name="IsNishio">
            Indicates whether the chain is about the technique <b>Nishio Forcing Chains</b>.
            </param>
            <param name="IsMultiple">
            Indicates whether the chain is about the technique <b>Multiple Forcing Chains</b>.
            </param>
            <param name="IsDynamic">
            Indicates whether the chain is about the technique <b>Dynamic Forcing chains</b>.
            </param>
            <param name="Level">
            <para>
            Indicates the level of the dynamic case. The dynamic level contains 6 possible values
            corresponding to the digit 0, 1, 2, 3, 4 and 5.
            </para>
            <para>
            For more information, please visit the step searcher to check
            the property <see cref="P:Sudoku.Solving.Manual.Searchers.IDynamicForcingChainStepSearcher.Level"/>.
            </para>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ChainStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Provides with a step that is a <b>Chain</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="XEnabled">
            <para>A <see cref="T:System.Boolean"/> result indicating whether the chain contains X factor.</para>
            <para>An <b>X factor</b> represents a chain relation about two same-digit strong link.</para>
            </param>
            <param name="YEnabled">
            <para>A <see cref="T:System.Boolean"/> result indicating whether the chain contains Y factor.</para>
            <para>A <b>Y factor</b> represents a chain relation about two-digit strong link in a single cell.</para>
            </param>
            <param name="IsNishio">
            Indicates whether the chain is about the technique <b>Nishio Forcing Chains</b>.
            </param>
            <param name="IsMultiple">
            Indicates whether the chain is about the technique <b>Multiple Forcing Chains</b>.
            </param>
            <param name="IsDynamic">
            Indicates whether the chain is about the technique <b>Dynamic Forcing chains</b>.
            </param>
            <param name="Level">
            <para>
            Indicates the level of the dynamic case. The dynamic level contains 6 possible values
            corresponding to the digit 0, 1, 2, 3, 4 and 5.
            </para>
            <para>
            For more information, please visit the step searcher to check
            the property <see cref="P:Sudoku.Solving.Manual.Searchers.IDynamicForcingChainStepSearcher.Level"/>.
            </para>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.Complexity">
            <summary>
            The total complexity.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.BaseDifficulty">
            <summary>
            The base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ChainStep.LengthDifficulty">
            <summary>
            The length difficulty.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ChainStep.Equals(Sudoku.Solving.Manual.Steps.ChainStep,Sudoku.Solving.Manual.Steps.ChainStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep">
            <summary>
            Provides with a step that is a <b>Continuous Nice Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="XEnabled"><inheritdoc/></param>
            <param name="YEnabled"><inheritdoc/></param>
            <param name="Target">Indicates the target cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Boolean,System.Boolean,Sudoku.Node)">
            <summary>
            Provides with a step that is a <b>Continuous Nice Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="XEnabled"><inheritdoc/></param>
            <param name="YEnabled"><inheritdoc/></param>
            <param name="Target">Indicates the target cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.IsNice">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.Rarity">
            <inheritdoc/>
            <remarks>
            I separated them into three branches in that <see langword="switch"/> expression
            in order to extend the branches in the future.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.IsXyCycle">
            <summary>
            Indicates whether the specified chain is an XY-Cycle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ContinuousNiceLoopStep.IsXCycle">
            <summary>
            Indicates whether the specified cycle is an X-Cycle.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BinaryChainingStep">
            <summary>
            Provides with a step that is a <b>Binary Forcing Chains</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="SourceNode">Indicates the source node.</param>
            <param name="FromOnNode">Indicates the node that is the destination (on side).</param>
            <param name="FromOffNode">Indicates the node that is the destination (off side).</param>
            <param name="IsAbsurd">Indicates whether the chain is absurd.</param>
            <param name="IsMultiple"><inheritdoc/></param>
            <param name="IsNishio"><inheritdoc/></param>
            <param name="Level"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BinaryChainingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Node@,Sudoku.Node@,Sudoku.Node@,System.Boolean,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Provides with a step that is a <b>Binary Forcing Chains</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="SourceNode">Indicates the source node.</param>
            <param name="FromOnNode">Indicates the node that is the destination (on side).</param>
            <param name="FromOffNode">Indicates the node that is the destination (off side).</param>
            <param name="IsAbsurd">Indicates whether the chain is absurd.</param>
            <param name="IsMultiple"><inheritdoc/></param>
            <param name="IsNishio"><inheritdoc/></param>
            <param name="Level"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.Anchor">
            <summary>
            Indicates the anchor.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BinaryChainingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.CellChainingStep">
            <summary>
            Provides with a step that is a <b>Cell Forcing Chains</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="SourceCell">Indicates the source cell used.</param>
            <param name="Chains">Indicates the sub-chains that is grouped by each candidate in that cell.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="Level"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.CellChainingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Int32,Sudoku.Node},System.Boolean,System.Byte)">
            <summary>
            Provides with a step that is a <b>Cell Forcing Chains</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="SourceCell">Indicates the source cell used.</param>
            <param name="Chains">Indicates the sub-chains that is grouped by each candidate in that cell.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="Level"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.CellChainingStep.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.CellChainingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.CellChainingStep.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.CellChainingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.CellChainingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.CellChainingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.CellChainingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.RegionChainingStep">
            <summary>
            Provides with a step that is a <b>Region Foring Chains</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region">Indicates the region that the forcing chains occurs.</param>
            <param name="Digit">Indicates the digit used in that region.</param>
            <param name="Chains">IIndicates the regions that binds with the relative position in this region.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="Level"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.RegionChainingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Int32,Sudoku.Node},System.Boolean,System.Byte)">
            <summary>
            Provides with a step that is a <b>Region Foring Chains</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region">Indicates the region that the forcing chains occurs.</param>
            <param name="Digit">Indicates the digit used in that region.</param>
            <param name="Chains">IIndicates the regions that binds with the relative position in this region.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="Level"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegionChainingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegionChainingStep.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegionChainingStep.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegionChainingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegionChainingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegionChainingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegionChainingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ChainTypeCode">
            <summary>
            Indicates a type code for a chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.MWing">
            <summary>
            Indicates the M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.SplitWing">
            <summary>
            Indicates the split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.LocalWing">
            <summary>
            Indicates the local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.HybridWing">
            <summary>
            Indicates the hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.XChain">
            <summary>
            Indicates the X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.FishyCycle">
            <summary>
            Indicates the X-Cycle (Fishy Cycle).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.XyChain">
            <summary>
            Indicates the XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.XyCycle">
            <summary>
            Indicates the XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.ContinuousNiceLoop">
            <summary>
            Indicates the continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.XyXChain">
            <summary>
            Indicates the XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.DiscontinuousNiceLoop">
            <summary>
            Indicates the discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.Aic">
            <summary>
            Indicates the alternating inference chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.CellFc">
            <summary>
            Indicates the cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.RegionFc">
            <summary>
            Indicates the region forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.ContradictionFc">
            <summary>
            Indicates the contradiction forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.DoubleFc">
            <summary>
            Indicates the double forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.DynamicCellFc">
            <summary>
            Indicates the dynamic cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.DynamicRegionFc">
            <summary>
            Indicates the dynamic region forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.DynamicContradictionFc">
            <summary>
            Indicates the dynamic contradiction forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ChainTypeCode.DynamicDoubleFc">
            <summary>
            Indicates the dynamic double forcing chains.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.DeadlyPatternStep">
            <summary>
            Provides with a step that is a <b>Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is a <b>Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DeadlyPatternStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep">
            <summary>
            Provides with a step that is an <b>Extended Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.Type">
            <summary>
            Indicates the type of the step. The value must be between 1 and 4.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.DigitsStr">
            <summary>
            Indicates the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleStep.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ExtendedRectangleType1Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExtendedRectangleType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ExtendedRectangleType2Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExtendedRectangleType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType2Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ExtendedRectangleType3Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains the extra digits.</param>
            <param name="Region">Indicates the region that extra subset formed.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExtendedRectangleType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,Sudoku.Collections.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains the extra digits.</param>
            <param name="Region">Indicates the region that extra subset formed.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType3Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ExtendedRectangleType4Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExtendedRectangleType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,Sudoku.ConjugatePair@)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType4Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType4Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType4Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExtendedRectangleType4Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueLoopStep">
            <summary>
            Provides with a step that is a <b>Unique Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
            <param name="Loop">Indicates the loop that the instance used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueLoopStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Unique Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
            <param name="Loop">Indicates the loop that the instance used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.Type">
            <summary>
            Indicates the type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.LoopStr">
            <summary>
            Indicates the loop string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.Digit1Str">
            <summary>
            Indicates the digit 1 string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopStep.Digit2Str">
            <summary>
            Indicates the digit 2 string.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueLoopStep.Equals(Sudoku.Solving.Manual.Steps.UniqueLoopStep,Sudoku.Solving.Manual.Steps.UniqueLoopStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueLoopType1Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueLoopType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueLoopType2Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueLoopType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueLoopType3Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="SubsetDigitsMask">Indicates the mask that contains the subset digits used in this instance.</param>
            <param name="SubsetCells">Indicates the subset cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueLoopType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int16,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="SubsetDigitsMask">Indicates the mask that contains the subset digits used in this instance.</param>
            <param name="SubsetCells">Indicates the subset cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType3Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueLoopType4Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueLoopType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,Sudoku.ConjugatePair@)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType4Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueLoopType4Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniquePolygonStep">
            <summary>
            Provides with a step that is a <b>Unique Polygon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map">The map that contains the cells used for this technique.</param>
            <param name="DigitsMask">The mask that contains all digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniquePolygonStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map">The map that contains the cells used for this technique.</param>
            <param name="DigitsMask">The mask that contains all digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonStep.DigitsStr">
            <summary>
            Indicates the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonStep.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniquePolygonType1Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniquePolygonType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniquePolygonType2Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniquePolygonType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonType2Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniquePolygonType3Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used for forming the subset.</param>
            <param name="ExtraDigitsMask">Indicates the extra digits used for forming the subset.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniquePolygonType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used for forming the subset.</param>
            <param name="ExtraDigitsMask">Indicates the extra digits used for forming the subset.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniquePolygonType4Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugateRegion">Indicates the cells that forms the conjugate region.</param>
            <param name="ExtraMask">Indicates the extra digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniquePolygonType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugateRegion">Indicates the cells that forms the conjugate region.</param>
            <param name="ExtraMask">Indicates the extra digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonType4Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniquePolygonType4Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternLockedTypeStep">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Locked Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidates">Indicates the candidates used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternLockedTypeStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.QiuDeadlyPattern@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Locked Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidates">Indicates the candidates used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternLockedTypeStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternLockedTypeStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern">Indicates the pattern used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.QiuDeadlyPattern@)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern">Indicates the pattern used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternStep.PatternStr">
            <summary>
            Indicates the pattern string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType1Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidate">Indicates the extra candidate used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.QiuDeadlyPattern@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidate">Indicates the extra candidate used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType2Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.QiuDeadlyPattern@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType2Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType3Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigitsMask">Indicates the extra digits used to form the subset.</param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="IsNaked">Indicates whether the subset is a naked subset.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.QiuDeadlyPattern@,System.Int16,Sudoku.Collections.Cells@,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigitsMask">Indicates the extra digits used to form the subset.</param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="IsNaked">Indicates whether the subset is a naked subset.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType4Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.QiuDeadlyPattern@,Sudoku.ConjugatePair@)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType4Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.QiuDeadlyPatternType4Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.AvoidableRectangleWithHiddenSingleStep">
            <summary>
            Provides with a step that is an <b>Avoidable Rectangle with Hidden Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="BaseCell"></param>
            <param name="TargetCell"></param>
            <param name="Region"></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.AvoidableRectangleWithHiddenSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is an <b>Avoidable Rectangle with Hidden Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="BaseCell"></param>
            <param name="TargetCell"></param>
            <param name="Region"></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AvoidableRectangleWithHiddenSingleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AvoidableRectangleWithHiddenSingleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AvoidableRectangleWithHiddenSingleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AvoidableRectangleWithHiddenSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.HiddenUniqueRectangleStep">
            <summary>
            Provides with a step that is a <b>Hidden Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.HiddenUniqueRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Boolean,Sudoku.ConjugatePair[],System.Int32)">
            <summary>
            Provides with a step that is a <b>Hidden Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangle2DOr3XStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle 2D (or 3X)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="XDigit">Indicates the digit X.</param>
            <param name="YDigit">Indicates the digit Y.</param>
            <param name="XyCell">Indicates the cell XY.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangle2DOr3XStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Techniques.Technique,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle 2D (or 3X)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="XDigit">Indicates the digit X.</param>
            <param name="YDigit">Indicates the digit Y.</param>
            <param name="XyCell">Indicates the cell XY.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangle2DOr3XStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangle2DOr3XStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangle2DOr3XStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangle2DOr3XStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2">
            <para>Indicates the technique code.</para>
            <para>
            Limited by the C# language, here we creates a new property <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.TechniqueCode2"/>
            to pass the value and assign it to the property <see cref="P:Sudoku.Solving.Manual.Step.TechniqueCode"/>. If write code
            to place the property <see cref="P:Sudoku.Solving.Manual.Step.TechniqueCode"/> into the primary constructor as a parameter,
            the default member named <c>TechniqueCode</c> may be duplicate with this parameter's,
            which isn't allowed in <see langword="record"/> types in the langugae design.
            </para>
            </param>
            <param name="Digit1">Indicates the the first digit used in this unique rectangle pattern.</param>
            <param name="Digit2">Indicates the the second digit used in this unique rectangle pattern.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsAvoidable">
            <para>Indicates whether the current unique rectangle is avoidable rectangle.</para>
            <para>
            For the designation and the implementation, <b>Avoidable Rectangle</b> and <b>Unique Rectangle</b>
            are used as the same type.
            </para>
            </param>
            <param name="AbsoluteOffset">
            <para>Indicates the absolute offset.</para>
            <para>
            The value will be an <see cref="T:System.Int32"/> value to compare all possible cases
            of unique rectangle structures to be iterated. The greater the value is,
            the later the unique rectangle structure will be processed. The value must be between 0 and 485.
            Other values are invalid and useless. The number of all possible unique rectangle structures is 486.
            </para>
            </param>
            <seealso cref="P:Sudoku.Solving.Manual.Step.TechniqueCode"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Techniques.Technique,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2">
            <para>Indicates the technique code.</para>
            <para>
            Limited by the C# language, here we creates a new property <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.TechniqueCode2"/>
            to pass the value and assign it to the property <see cref="P:Sudoku.Solving.Manual.Step.TechniqueCode"/>. If write code
            to place the property <see cref="P:Sudoku.Solving.Manual.Step.TechniqueCode"/> into the primary constructor as a parameter,
            the default member named <c>TechniqueCode</c> may be duplicate with this parameter's,
            which isn't allowed in <see langword="record"/> types in the langugae design.
            </para>
            </param>
            <param name="Digit1">Indicates the the first digit used in this unique rectangle pattern.</param>
            <param name="Digit2">Indicates the the second digit used in this unique rectangle pattern.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsAvoidable">
            <para>Indicates whether the current unique rectangle is avoidable rectangle.</para>
            <para>
            For the designation and the implementation, <b>Avoidable Rectangle</b> and <b>Unique Rectangle</b>
            are used as the same type.
            </para>
            </param>
            <param name="AbsoluteOffset">
            <para>Indicates the absolute offset.</para>
            <para>
            The value will be an <see cref="T:System.Int32"/> value to compare all possible cases
            of unique rectangle structures to be iterated. The greater the value is,
            the later the unique rectangle structure will be processed. The value must be between 0 and 485.
            Other values are invalid and useless. The number of all possible unique rectangle structures is 486.
            </para>
            </param>
            <seealso cref="P:Sudoku.Solving.Manual.Step.TechniqueCode"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.D1Str">
            <summary>
            Indicates the digit 1 string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.D2Str">
            <summary>
            Indicates the digit 2 string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleStep.Equals(Sudoku.Solving.Manual.Steps.UniqueRectangleStep,Sudoku.Solving.Manual.Steps.UniqueRectangleStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleType1Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType1Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType1Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleType2Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Techniques.Technique,Sudoku.Collections.Cells@,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType2Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType2Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleType3Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
            <param name="Region">Indicates the region used.</param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
            <param name="IsNaked">
            <para>
            Indicates whether the current instance uses a naked subset instead of a hidden subset to form the type 3.
            </para>
            <para>
            In the default case, due to not having implemented the hidden subset cases,
            the argument always keeps the value <see langword="true"/>. The possible values are:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The type 3 is with a naked subset.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The type 3 is with a hidden subset.</description>
            </item>
            </list>
            </para>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Int16,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
            <param name="Region">Indicates the region used.</param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
            <param name="IsNaked">
            <para>
            Indicates whether the current instance uses a naked subset instead of a hidden subset to form the type 3.
            </para>
            <para>
            In the default case, due to not having implemented the hidden subset cases,
            the argument always keeps the value <see langword="true"/>. The possible values are:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The type 3 is with a naked subset.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The type 3 is with a hidden subset.</description>
            </item>
            </list>
            </para>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType3Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleWithConjugatePairStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Conjugate Pair(s)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs">Indicates the conjugate pairs used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleWithConjugatePairStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Techniques.Technique,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Boolean,Sudoku.ConjugatePair[],System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Conjugate Pair(s)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs">Indicates the conjugate pairs used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithConjugatePairStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithConjugatePairStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithConjugatePairStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithConjugatePairStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithConjugatePairStep.ConjPairsStr">
            <summary>
            Indicates the conjugate pair string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleWithGuardianStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Guardians</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="GuardianDigit">Indicates the digit that the guardians are used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleWithGuardianStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Guardians</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="GuardianDigit">Indicates the digit that the guardians are used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithGuardianStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithGuardianStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithGuardianStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithGuardianStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Block">Indicates the block that the Sue de Coq structure used.</param>
            <param name="Line">Indicates the line that the Sue de Coq structure used.</param>
            <param name="BlockMask">
            Indicates the mask that contains all digits from the block of the Sue de Coq structure.
            </param>
            <param name="LineMask">
            Indicates the mask that contains all digits from the line of the Sue de Coq structure.
            </param>
            <param name="IntersectionMask">
            Indicates the mask that contains all digits from the intersection
            of regions <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>
            </param>
            <param name="IsCannibalistic">Indicates whether the Sue de Coq structure is a cannibalism.</param>
            <param name="IsolatedDigitsMask">Indicates the mask that contains all isolated digtis.</param>
            <param name="BlockCells">Indicates the cells in the block of the Sue de Coq structure.</param>
            <param name="LineCells">Indicates the cells in the line of the Sue de Coq structure.</param>
            <param name="IntersectionCells">
            Indicates the cells in the intersection from regions <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>.
            </param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Boolean,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int16,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Block">Indicates the block that the Sue de Coq structure used.</param>
            <param name="Line">Indicates the line that the Sue de Coq structure used.</param>
            <param name="BlockMask">
            Indicates the mask that contains all digits from the block of the Sue de Coq structure.
            </param>
            <param name="LineMask">
            Indicates the mask that contains all digits from the line of the Sue de Coq structure.
            </param>
            <param name="IntersectionMask">
            Indicates the mask that contains all digits from the intersection
            of regions <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>
            </param>
            <param name="IsCannibalistic">Indicates whether the Sue de Coq structure is a cannibalism.</param>
            <param name="IsolatedDigitsMask">Indicates the mask that contains all isolated digtis.</param>
            <param name="BlockCells">Indicates the cells in the block of the Sue de Coq structure.</param>
            <param name="LineCells">Indicates the cells in the line of the Sue de Coq structure.</param>
            <param name="IntersectionCells">
            Indicates the cells in the intersection from regions <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>.
            </param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithSueDeCoqStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleWithUnknownCoveringStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Unknown Covering</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="TargetCell">Indicates the target cell.</param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleWithUnknownCoveringStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Unknown Covering</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="TargetCell">Indicates the target cell.</param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithUnknownCoveringStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithUnknownCoveringStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithUnknownCoveringStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithUnknownCoveringStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueRectangleWithWingStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Pivots">Indictaes the pivots used.</param>
            <param name="Petals">Indicates the petals used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueRectangleWithWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Techniques.Technique,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Boolean,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Pivots">Indictaes the pivots used.</param>
            <param name="Petals">Indicates the petals used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithWingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithWingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueRectangleWithWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueSquareStep">
            <summary>
            Provides with a step that is a <b>Unique Square</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueSquareStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Square</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.DigitsStr">
            <summary>
            Indicates the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareStep.CellsStr">
            <summary>
            Indicates the cells string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueSquareType1Step">
            <summary>
            Provides with a step that is a <b>Unique Square Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Candidate">Indicates the true candidate.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueSquareType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Square Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Candidate">Indicates the true candidate.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueSquareType2Step">
            <summary>
            Provides with a step that is a <b>Unique Square Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueSquareType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Square Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareType2Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueSquareType3Step">
            <summary>
            Provides with a step that is a <b>Unique Square Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">
            Indicates the extra digits that forms a subset with <paramref name="DigitsMask"/>.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueSquareType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,System.Int16,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Unique Square Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">
            Indicates the extra digits that forms a subset with <paramref name="DigitsMask"/>.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.UniqueSquareType4Step">
            <summary>
            Provides with a step that is a <b>Unique Square Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Digit1">Indicates the digit 1 used.</param>
            <param name="Digit2">Indicates the digit 2 used.</param>
            <param name="ConjugateRegion">Indicates the cells used as the conjugation region.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.UniqueSquareType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int16,System.Int32,System.Int32,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Unique Square Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Digit1">Indicates the digit 1 used.</param>
            <param name="Digit2">Indicates the digit 2 used.</param>
            <param name="ConjugateRegion">Indicates the cells used as the conjugation region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.UniqueSquareType4Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveMultipleStep">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave + n</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Candidates">Indicates the true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveMultipleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave + n</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Candidates">Indicates the true candidates.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveMultipleStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveMultipleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveMultipleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveMultipleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveStep">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType1Step">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType2Step">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType2Step.ExtraDifficulty">
            <summary>
            The table of extra difficulty values.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType2Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType3Step">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TrueCandidates">Indicates the true candidates.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsNaked">Indicates whether the specified subset is naked subset.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int16,Sudoku.Collections.Cells@,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TrueCandidates">Indicates the true candidates.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsNaked">Indicates whether the specified subset is naked subset.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType3Step.Size">
            <summary>
            Indicates the size of the subset.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType4Step">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int16,Sudoku.Collections.Cells@,Sudoku.ConjugatePair@)">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType4Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType4Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveType4Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveXzStep">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ExtraCell">Indicates the XZ cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveXzStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int16,Sudoku.Collections.Cells@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bivalue Universal Grave XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ExtraCell">Indicates the XZ cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveXzStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveXzStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueUniversalGraveXzStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ExocetStep">
            <summary>
            Provides with a step that is an <b>Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet">INdicates the exocet pattern.</param>
            <param name="DigitsMask">Indicates the mask that holds all possible digits used.</param>
            <param name="Eliminations">Indicates all possible eliminations.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExocetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.ExocetPattern@,System.Int16,System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Collections.ExocetElimination})">
            <summary>
            Provides with a step that is an <b>Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet">INdicates the exocet pattern.</param>
            <param name="DigitsMask">Indicates the mask that holds all possible digits used.</param>
            <param name="Eliminations">Indicates all possible eliminations.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.DigitsStr">
            <summary>
            Indiactes the digits string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.BaseMapStr">
            <summary>
            Indicates the base map string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.TargetMapStr">
            <summary>
            Indicates the target map string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.BaseMap">
            <summary>
            Indicates the map of the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ExocetStep.TargetMap">
            <summary>
            Indicates the map of the target cells.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExocetStep.ToFullString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ExocetStep.GatherConclusions(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Collections.ExocetElimination})">
            <summary>
            Gather conclusions.
            </summary>
            <returns>The gathered result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.JuniorExocetStep">
            <summary>
            Provides with a step that is a <b>Junior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="LockedMemberQ">Indicates the locked member bound with Q cells.</param>
            <param name="LockedMemberR">Indicates the locked member bound with R cells.</param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.JuniorExocetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.ExocetPattern@,System.Int16,System.Int16,System.Int16,System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Collections.ExocetElimination})">
            <summary>
            Provides with a step that is a <b>Junior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="LockedMemberQ">Indicates the locked member bound with Q cells.</param>
            <param name="LockedMemberR">Indicates the locked member bound with R cells.</param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.MirrorDifficulty">
            <summary>
            Indicates extra difficulty on mirror eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.BiBiDifficulty">
            <summary>
            Indicates extra difficulty on Bi-Bi pattern eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.TargetPairDifficulty">
            <summary>
            Indicates extra difficulty on target pair eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.GeneralizedSwordfishDifficulty">
            <summary>
            Indicates extra difficulty on generalized swordfish eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.LockedMemberQStr">
            <summary>
            Indicates the locked member Q string.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.JuniorExocetStep.LockedMemberRStr">
            <summary>
            Indicates the locked member R string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SeniorExocetStep">
            <summary>
            Provides with a step that is a <b>Senior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="EndoTargetCell">Indicates the target cell that is embedded into the cross-line cells.</param>
            <param name="ExtraRegionsMask">Indicates the mask tnat holds the extra regions used.</param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SeniorExocetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Solving.Collections.ExocetPattern@,System.Int16,System.Int32,System.Int32[],System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Collections.ExocetElimination})">
            <summary>
            Provides with a step that is a <b>Senior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="EndoTargetCell">Indicates the target cell that is embedded into the cross-line cells.</param>
            <param name="ExtraRegionsMask">Indicates the mask tnat holds the extra regions used.</param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SeniorExocetStep.ContainsExtraRegions">
            <summary>
            Indicates whether the specified instance contains any extra regions.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SeniorExocetStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SeniorExocetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ComplexFishStep">
            <summary>
            Provides with a step that is a <b>Complex Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Exofins">The exo-fins.</param>
            <param name="Endofins">The endo-fins.</param>
            <param name="IsFranken">Indicates whether the fish is a Franken fish.</param>
            <param name="IsSashimi">Indicates whether the fish is a Sashimi fish.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ComplexFishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is a <b>Complex Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Exofins">The exo-fins.</param>
            <param name="Endofins">The endo-fins.</param>
            <param name="IsFranken">Indicates whether the fish is a Franken fish.</param>
            <param name="IsSashimi">Indicates whether the fish is a Sashimi fish.</param>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.BasicDiff">
            <summary>
            The basic difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.FinnedDiff">
            <summary>
            The finned difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.SashimiDiff">
            <summary>
            The sashimi difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.FrankenShapeDiffExtra">
            <summary>
            The Franken shape extra difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.MutantShapeDiffExtra">
            <summary>
            The mutant shape extra difficulty rating table.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.BaseHashCode">
            <summary>
            Indicates the base hash code.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.BaseSetHashCode">
            <summary>
            Indicates the base set hash code.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.CoverSetHashCode">
            <summary>
            Indicates the cover set hash code.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.InternalName">
            <summary>
            The internal name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.FinModifier">
            <summary>
            Indicates the fin modifier.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.ShapeModifier">
            <summary>
            The shape modifier.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.BaseRegions">
            <summary>
            Indicates the base regions.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ComplexFishStep.CoverRegions">
            <summary>
            Indicates the cover regions.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.ComplexFishStep.Equals(Sudoku.Solving.Manual.Steps.ComplexFishStep,Sudoku.Solving.Manual.Steps.ComplexFishStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ComplexFishStep.FinModifiers">
            <summary>
            Indicates the fin modifiers.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.FinModifiers.Normal">
            <summary>
            Indicates the normal fish (i.e. no fins).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.FinModifiers.Finned">
            <summary>
            Indicates the finned fish
            (i.e. contains fins, but the fish may be regular when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.FinModifiers.Sashimi">
            <summary>
            Indicates the sashimi fish
            (i.e. contains fins, and the fish may be degenerated to hidden singles when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.FinModifiers.Siamese">
            <summary>
            Indicates the siamese fish (i.e. two fish with different cover sets).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ComplexFishStep.ShapeModifiers">
            <summary>
            Indicates the shape modifiers.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.ShapeModifiers.Basic">
            <summary>
            Indicates the basic fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.ShapeModifiers.Franken">
            <summary>
            Indicates the franken fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Steps.ComplexFishStep.ShapeModifiers.Mutant">
            <summary>
            Indicates the mutant fish.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.FishStep">
            <summary>
            Provides with a step that is a <b>Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSetsMask">Indicates the mask that contains the base sets.</param>
            <param name="CoverSetsMask">Indicates the mask that contains the cover sets.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.FishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSetsMask">Indicates the mask that contains the base sets.</param>
            <param name="CoverSetsMask">Indicates the mask that contains the cover sets.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FishStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FishStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FishStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FishStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FishStep.Size">
            <summary>
            Indicates the size of this fish instance.
            </summary>
            <remarks>
            The name of the corresponding names are:
            <list type="table">
            <item>
            <term>2</term>
            <description>X-Wing</description>
            </item>
            <item>
            <term>3</term>
            <description>Swordfish</description>
            </item>
            <item>
            <term>4</term>
            <description>Jellyfish</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FishStep.Rank">
            <summary>
            Indicates the rank of the fish.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FishStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.FishStep.GetComplexFishTechniqueCodeFromName(System.String)">
            <summary>
            Try to get the <see cref="T:Sudoku.Techniques.Technique"/> code instance from the specified name, where the name belongs
            to a complex fish name, such as "Finned Franken Swordfish".
            </summary>
            <param name="name">The name.</param>
            <returns>The <see cref="T:Sudoku.Techniques.Technique"/> code instance.</returns>
            <seealso cref="T:Sudoku.Techniques.Technique"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.NormalFishStep">
            <summary>
            Provides with a step that is an <b>Normal Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Fins">Indicates the fins.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is a sashimi fish. All possible values are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish is a normal fish without any fins.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.NormalFishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is an <b>Normal Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Fins">Indicates the fins.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is a sashimi fish. All possible values are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish is a normal fish without any fins.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NormalFishStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NormalFishStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NormalFishStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NormalFishStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NormalFishStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NormalFishStep.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.IChainLikeStep">
            <summary>
            Defines a step is chain-like one.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.IChainLikeStep.GetExtraDifficultyByLength(System.Int32)">
            <summary>
            Get extra difficulty rating for a chain node sequence.
            </summary>
            <param name="length">The length.</param>
            <returns>The difficulty.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.IChainStep">
            <summary>
            Defines a chain step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.IChainStep.FlatComplexity">
            <summary>
            Indicates the flat complexity.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.IChainStep.SortKey">
            <summary>
            Indicates the sort key. The result will be a <see cref="T:Sudoku.Solving.Manual.Steps.ChainTypeCode"/> instance to describe
            what and how the chain behaves. Please visit the type <see cref="T:Sudoku.Solving.Manual.Steps.ChainTypeCode"/>
            to learn about more details for a chain.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Steps.ChainTypeCode"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.IChainStep.ConclusionsEquals(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Boolean)">
            <summary>
            Determines whether two different list of <see cref="T:Sudoku.Conclusion"/>s holds the same values.
            </summary>
            <param name="lConclusions">The first conclusion list to compare.</param>
            <param name="rConclusions">The second conclusion list to compare.</param>
            <param name="shouldSort">Indicates whether the method will sort the lists firstly.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.IDistinctableStep`1">
            <summary>
            Defines a step that can be distinctable.
            </summary>
            <typeparam name="TStep">The type of the element to compare.</typeparam>
            <remarks>
            A <b>distinctable step</b> is a step that is with the unique information,
            in order that multiple steps of the same type can be recognized by the relative methods,
            to filter and remove same-value instances.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.IDistinctableStep`1.Equals(`0,`0)">
            <summary>
            To compare 2 instances of type <typeparamref name="TStep"/>,
            to determine whether 2 instances holds the same value.
            </summary>
            <param name="left">Indicates the first instance to compare.</param>
            <param name="right">Indicates the second instance to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating whether the elements are same.
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>Two elements are same.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>Two elements holds the different values.</description>
            </item>
            </list>
            </returns>
            <remarks>
            The method can be the same implemented as the method <see cref="M:System.Object.Equals(System.Object)"/>,
            but <see langword="record"/>s are automatically implemented the method, which is useless
            and unmeaningful.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.IDistinctableStep`1.Distinct``1(System.Collections.Generic.IList{``0})">
            <summary>
            Distinct the list, that is, remove all duplicate elements in this list, that uses the method
            <see cref="M:Sudoku.Solving.Manual.Steps.IDistinctableStep`1.Equals(`0,`0)"/> defined in this interface.
            </summary>
            <typeparam name="TDistinctableStep">The type of the steps.</typeparam>
            <param name="list">The list of steps to be processed.</param>
            <returns>The list of steps.</returns>
            <seealso cref="M:Sudoku.Solving.Manual.Steps.IDistinctableStep`1.Equals(`0,`0)"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.ILoopStep">
            <summary>
            Defines a loop step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.ILoopStep.IsNice">
            <summary>
            Indicates whether the loop is a nice loop.
            </summary>
            <remarks>
            A <b>Nice</b> loop is a loop that all weak links can be gathered to remove candidates
            (if possible removable candidates exist).
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
            <param name="BaseCells">Indicates the base cells.</param>
            <param name="TargetCells">Indicates the target cells.</param>
            <param name="HasValueCell">Indicates whether the step contains value cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int16,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,System.Boolean)">
            <summary>
            Provides with a step that is an <b>Almost Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
            <param name="BaseCells">Indicates the base cells.</param>
            <param name="TargetCells">Indicates the target cells.</param>
            <param name="HasValueCell">Indicates whether the step contains value cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep.Size">
            <summary>
            Indicates the size.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.AlmostLockedCandidatesStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.IntersectionStep">
            <summary>
            Provides with a step that is an <b>Intersection</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.IntersectionStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is an <b>Intersection</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.IntersectionStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.IntersectionStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.IntersectionStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.IntersectionStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.IntersectionStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.LockedCandidatesStep">
            <summary>
            Provides with a step that is a <b>Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSet">Indicates the region that the current locked candidates forms.</param>
            <param name="CoverSet">Indicates the region that the current locked candidates influences.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.LockedCandidatesStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSet">Indicates the region that the current locked candidates forms.</param>
            <param name="CoverSet">Indicates the region that the current locked candidates influences.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LockedCandidatesStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LockedCandidatesStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LockedCandidatesStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LockedCandidatesStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LockedCandidatesStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LockedCandidatesStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BowmanBingoStep">
            <summary>
            Provides with a step that is a <b>Bowman's Bingo</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="ContradictionLinks">Indicates the list of contradiction links.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BowmanBingoStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion})">
            <summary>
            Provides with a step that is a <b>Bowman's Bingo</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="ContradictionLinks">Indicates the list of contradiction links.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BowmanBingoStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BowmanBingoStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BowmanBingoStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BowmanBingoStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BowmanBingoStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BowmanBingoStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BruteForceStep">
            <summary>
            Provides with a step that is a <b>Brute Force</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BruteForceStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is a <b>Brute Force</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BruteForceStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BruteForceStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BruteForceStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BruteForceStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BruteForceStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.LastResortStep">
            <summary>
            Provides with a step that is a <b>Last Resort</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.LastResortStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is a <b>Last Resort</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LastResortStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.LastResortStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.PatternOverlayStep">
            <summary>
            Provides with a step that is a <b>Pattern Overlay</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.PatternOverlayStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion})">
            <summary>
            Provides with a step that is a <b>Pattern Overlay</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.PatternOverlayStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.PatternOverlayStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.PatternOverlayStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.PatternOverlayStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.PatternOverlayStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.PatternOverlayStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.PatternOverlayStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.TemplateStep">
            <summary>
            Provides with a step that is a <b>Template</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="IsTemplateDeletion">Indicates whether the step is a deletion.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.TemplateStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Boolean)">
            <summary>
            Provides with a step that is a <b>Template</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="IsTemplateDeletion">Indicates whether the step is a deletion.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TemplateStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TemplateStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TemplateStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TemplateStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TemplateStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TemplateStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueOddagonStep">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop">Indicates the loop used.</param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueOddagonStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop">Indicates the loop used.</param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueOddagonStep.Equals(Sudoku.Solving.Manual.Steps.BivalueOddagonStep,Sudoku.Solving.Manual.Steps.BivalueOddagonStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueOddagonType1Step">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCell">Indicates the extra cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueOddagonType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCell">Indicates the extra cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType1Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType1Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueOddagonType2Step">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueOddagonType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType2Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType2Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.BivalueOddagonType3Step">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.BivalueOddagonType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@,System.Int32,System.Int32,Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType3Step.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType3Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.BivalueOddagonType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.DominoLoopStep">
            <summary>
            Provides with a step that is a <b>Domino Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.DominoLoopStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells)">
            <summary>
            Provides with a step that is a <b>Domino Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DominoLoopStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DominoLoopStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DominoLoopStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DominoLoopStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DominoLoopStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.DominoLoopStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep">
            <summary>
            Provides with a step that is a <b>Multi-sector Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Multi-sector Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.MultisectorLockedSetsStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.RankTheoryStep">
            <summary>
            Provides with a step that is a <b>Rank Theory</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.RankTheoryStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is a <b>Rank Theory</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RankTheoryStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RankTheoryStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RankTheoryStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RankTheoryStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RankTheoryStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RankTheoryStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep">
            <summary>
            Provides with a step that is a <b>3-demensional Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="RowDigitsMask">The row digits mask.</param>
            <param name="ColumnDigitsMask">The column digits mask.</param>
            <param name="BlockDigitsMask">The block digits mask.</param>
            <param name="RowCells">The row cells map.</param>
            <param name="ColumnCells">The column cells map.</param>
            <param name="BlockCells">The block cells map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int16,System.Int16,System.Int16,Sudoku.Collections.Cells,Sudoku.Collections.Cells,Sudoku.Collections.Cells)">
            <summary>
            Provides with a step that is a <b>3-demensional Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="RowDigitsMask">The row digits mask.</param>
            <param name="ColumnDigitsMask">The column digits mask.</param>
            <param name="BlockDigitsMask">The block digits mask.</param>
            <param name="RowCells">The row cells map.</param>
            <param name="ColumnCells">The column cells map.</param>
            <param name="BlockCells">The block cells map.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoq3DemensionStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SueDeCoqStep">
            <summary>
            Provides with a step that is a <b>Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the SdC is cannibalistic.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The map of block cells.</param>
            <param name="LineCells">The map of line cells.</param>
            <param name="IntersectionCells">The map of intersection cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SueDeCoqStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int16,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the SdC is cannibalistic.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The map of block cells.</param>
            <param name="LineCells">The map of line cells.</param>
            <param name="IntersectionCells">The map of intersection cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoqStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoqStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoqStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoqStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoqStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SueDeCoqStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.EmptyRectangleStep">
            <summary>
            Provides with a step that is an <b>Empty Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Block">Indicates the block that the empty rectangle structure formed.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.EmptyRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.ConjugatePair@)">
            <summary>
            Provides with a step that is an <b>Empty Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Block">Indicates the block that the empty rectangle structure formed.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.EmptyRectangleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.GuardianStep">
            <summary>
            Provides with a step that is a <b>Guardian</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Loop">Indicates the loop cells used.</param>
            <param name="Guardians">Indicates the guardian cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.GuardianStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,Sudoku.Collections.Cells@,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Guardian</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Loop">Indicates the loop cells used.</param>
            <param name="Guardians">Indicates the guardian cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.GuardianStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.GuardianStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.GuardianStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.GuardianStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.GuardianStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.GuardianStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.GuardianStep.Equals(Sudoku.Solving.Manual.Steps.GuardianStep,Sudoku.Solving.Manual.Steps.GuardianStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32)">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatternStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.TwoStrongLinksStep">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseRegion">Indicates the base region used.</param>
            <param name="TargetRegion">Indicates the target region used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.TwoStrongLinksStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseRegion">Indicates the base region used.</param>
            <param name="TargetRegion">Indicates the target region used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TwoStrongLinksStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TwoStrongLinksStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TwoStrongLinksStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TwoStrongLinksStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.TwoStrongLinksStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.FullHouseStep">
            <summary>
            Provides with a step that is a <b>Full House</b> technique.
            </summary>
            <param name="Cell"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.FullHouseStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Full House</b> technique.
            </summary>
            <param name="Cell"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FullHouseStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FullHouseStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.FullHouseStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.HiddenSingleStep">
            <summary>
            Provides with a step that is a <b>Hidden Single</b> or <b>Last Digit</b> (for special cases) technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Region">Indicates the region used.</param>
            <param name="EnableAndIsLastDigit">
            Indicates whether the current step is a <b>Last Digit</b> technique usage.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.HiddenSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Hidden Single</b> or <b>Last Digit</b> (for special cases) technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Region">Indicates the region used.</param>
            <param name="EnableAndIsLastDigit">
            Indicates whether the current step is a <b>Last Digit</b> technique usage.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.HiddenSingleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.HiddenSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.HiddenSingleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.HiddenSingleStep.Format">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.NakedSingleStep">
            <summary>
            Provides with a step that is a <b>Naked Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.NakedSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Naked Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NakedSingleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NakedSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NakedSingleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SingleStep">
            <summary>
            Provides with a step that is a <b>Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell">Indicates the cell used.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell">Indicates the cell used.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.HiddenSubsetStep">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.HiddenSubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.HiddenSubsetStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.HiddenSubsetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.NakedSubsetStep">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="IsLocked">
            Indicates which locked type this subset is. The cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a locked subset.</description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a naked subset with at least one extra locked candidate.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The subset is a normal naked subset without any extra locked candidates.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.NakedSubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,Sudoku.Collections.Cells@,System.Int16,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="IsLocked">
            Indicates which locked type this subset is. The cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a locked subset.</description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a naked subset with at least one extra locked candidate.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The subset is a normal naked subset without any extra locked candidates.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NakedSubsetStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.NakedSubsetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SubsetStep">
            <summary>
            Provides with a step that is a <b>Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="DigitsMask">The maks that contains all digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,Sudoku.Collections.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="DigitsMask">The maks that contains all digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.Size">
            <summary>
            Indicates the size of the subset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SubsetStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.RegularWingStep">
            <summary>
            Provides with a step that is a <b>Regular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pivot">Indicates the cell that blossomed its petals.</param>
            <param name="PivotCandidatesCount">Indicates the number of digits in the pivot cell.</param>
            <param name="DigitsMask">Indicates a mask that contins all digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.RegularWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,System.Int16,Sudoku.Collections.Cells@)">
            <summary>
            Provides with a step that is a <b>Regular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pivot">Indicates the cell that blossomed its petals.</param>
            <param name="PivotCandidatesCount">Indicates the number of digits in the pivot cell.</param>
            <param name="DigitsMask">Indicates a mask that contins all digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.IsIncomplete">
            <summary>
            Indicates whether the structure is incomplete.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.Size">
            <summary>
            Indicates the size of this regular wing.
            </summary>
            <remarks>
            All names are:
            <list type="table">
            <item>
            <term>2</term>
            <description>XY-Wing</description>
            </item>
            <item>
            <term>3</term>
            <description>XYZ-Wing</description>
            </item>
            <item>
            <term>4</term>
            <description>WXYZ-Wing</description>
            </item>
            <item>
            <term>5</term>
            <description>VWXYZ-Wing</description>
            </item>
            <item>
            <term>6</term>
            <description>UVWXYZ-Wing</description>
            </item>
            <item>
            <term>7</term>
            <description>TUVWXYZ-Wing</description>
            </item>
            <item>
            <term>8</term>
            <description>STUVWXYZ-Wing</description>
            </item>
            <item>
            <term>9</term>
            <description>RSTUVWXYZ-Wing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.RegularWingStep.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.WingStep">
            <summary>
            Provides with a step that is a <b>Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.WingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData})">
            <summary>
            Provides with a step that is a <b>Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WingStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WingStep.IsElementary">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WingStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WingStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WingStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.WWingStep">
            <summary>
            Provides with a step that is a <b>W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell.</param>
            <param name="EndCell">Indicates the end cell.</param>
            <param name="ConjugatePair">
            Indicates the conjugate pair that connects cells <see cref="P:Sudoku.Solving.Manual.Steps.WWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Manual.Steps.WWingStep.EndCell"/>.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.WWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.PresentationData},System.Int32,System.Int32,Sudoku.ConjugatePair@)">
            <summary>
            Provides with a step that is a <b>W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell.</param>
            <param name="EndCell">Indicates the end cell.</param>
            <param name="ConjugatePair">
            Indicates the conjugate pair that connects cells <see cref="P:Sudoku.Solving.Manual.Steps.WWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Manual.Steps.WWingStep.EndCell"/>.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WWingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.WWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Text.FormatForwardAttribute">
            <summary>
            Marks onto a step type (inherited from <see cref="T:Sudoku.Solving.Manual.Step"/> and implemented the interface <see cref="T:Sudoku.Solving.Manual.IStep"/>),
            to tell the runtime that the property <see cref="P:Sudoku.Solving.Manual.Step.Format"/> will get the value
            through the specified identifier name.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Step"/>
            <seealso cref="P:Sudoku.Solving.Manual.Step.Format"/>
            <seealso cref="T:Sudoku.Solving.Manual.IStep"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Text.FormatForwardAttribute.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.Text.FormatForwardAttribute"/> instance via an identifier name.
            </summary>
            <param name="identifierName">The identifier name.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Text.FormatForwardAttribute.IdentifierName">
            <summary>
            Indicates the identifier that the name the runtime will get from the resource dictionary.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Text.FormatItemAttribute">
            <summary>
            Marks on a property to tell the user the property is only used for the formatting.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.WrongStepException">
            <summary>
            Indicates an error that throws when a solving step is wrong (may be due to wrong algorithm, bug, etc.).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.#ctor(Sudoku.Collections.Grid@,Sudoku.Solving.Manual.Step)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.WrongStepException"/> with the specified invalid grid and the wrong step.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
            <param name="wrongStep">The wrong step.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.InvalidPuzzle">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.WrongStep">
            <summary>
            Indicates the wrong step.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.SolverResultFormattingOptions">
            <summary>
            Indicates the formatting options of <see cref="T:Sudoku.Solving.ISolverResult"/> instance.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.None">
            <summary>
            Indicates the none of the formatting option.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowSeparators">
            <summary>
            Indicates the analysis result will append separators.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowStepLabel">
            <summary>
            Indicates the analysis result will append the step label.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowSimple">
            <summary>
            Indicates the analysis result will use simple mode to show steps.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowBottleneck">
            <summary>
            Indicates the analysis result will show the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowDifficulty">
            <summary>
            Indicates the analysis result will show the difficulty.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowStepsAfterBottleneck">
            <summary>
            Indicates the analysis result will show all steps after the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowAttributes">
            <summary>
            Indicates the analysis result will append the attributes of the grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowBackdoors">
            <summary>
            Indicates the analysis result will append the backdoors of the grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowStepDetail">
            <summary>
            Indicates the analysis result will show the step detail.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowSteps">
            <summary>
            Indicates the analysis result will show the steps.
            </summary>
        </member>
    </members>
</doc>
