<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Solving</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Generating.HardPatternPuzzleGenerator">
            <summary>
            Defines a puzzle generator that makes the given pattern as a hard one. However,
            a <b>hard pattern</b> doesn't mean the puzzle will be hard or fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.BlockFactor">
            <summary>
            Indicates the block factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.SwappingFactor">
            <summary>
            Indicates the swapping factor.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.Generate(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.GenerateAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.GenerateAnswerGrid(System.Char*,System.Char*)">
            <summary>
            Generates the answer sudoku grid via the specified puzzle and the solution variable pointer.
            </summary>
            <param name="pPuzzle">The pointer that points to the puzzle.</param>
            <param name="pSolution">
            The pointer that points to the solution. The result value will be changed here.
            </param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CreatePattern(System.Int32*)">
            <summary>
            Creates a start pattern based on a base pattern.
            </summary>
            <param name="pattern">The base pattern.</param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.RecreatePattern(System.Int32*)">
            <summary>
            To re-create the pattern.
            </summary>
            <param name="pattern">The pointer that points to an array of the pattern values.</param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CheckDuplicate(System.Char*,System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="ptrGrid">The pointer that pointes to a grid.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Generating.IPuzzleGenerator">
            <summary>
            Defines a puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.IPuzzleGenerator.Rng">
            <summary>
            Provides a random number generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.IPuzzleGenerator.Solver">
            <summary>
            Provides a default fast solver to solve the puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.Generate(System.Threading.CancellationToken)">
            <summary>
            Creates a sudoku grid puzzle.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>
            The result puzzle generated. If cancelled, the return value will be <see cref="F:Sudoku.Data.Grid.Undefined"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.GenerateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a sudoku grid puzzle asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>
            The task of the operation that includes the result puzzle generated.
            If cancelled, the inner result sudoku grid of the return value will be <see cref="F:Sudoku.Data.Grid.Undefined"/>.
            </returns>
        </member>
        <member name="T:Sudoku.Generating.SymmetricPuzzleGenerator">
            <summary>
            Defines a symmetric puzzle generator, that is, a generator than can include the symmetrical placement
            of all givens while generating puzzles.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.Generate(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.GenerateAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.Generate(System.Int32,Sudoku.Data.SymmetryType,System.Threading.CancellationToken)">
            <summary>
            Generates a sudoku puzzle, via the specified number of givens used, the symmetry type, and
            a cancellation token to cancel the operation.
            </summary>
            <param name="max">The maximum number of givens generated.</param>
            <param name="symmetryType">The symmetry type.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The result sudoku puzzle.</returns>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.GenerateAnswerGrid(System.Char*,System.Char*)">
            <summary>
            Generates the answer sudoku grid via the specified puzzle and the solution variable pointer.
            </summary>
            <param name="pPuzzle">The pointer that points to the puzzle.</param>
            <param name="pSolution">
            The pointer that points to the solution. The result value will be changed here.
            </param>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.GetCells(Sudoku.Data.SymmetryType,System.Int32,System.Int32)">
            <summary>
            Get the cells that is used for swapping via the specified symmetry type, and the specified row
            and column value.
            </summary>
            <param name="symmetryType">The symmetry type.</param>
            <param name="row">The row value.</param>
            <param name="column">The column value.</param>
            <returns>The cells.</returns>
        </member>
        <member name="M:Sudoku.Generating.SymmetricPuzzleGenerator.CheckDuplicate(System.Char*,System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="ptrGrid">The pointer that pointes to a grid.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.ModuleInitializer">
            <summary>
            Indicates the module initializer of this project.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.ModuleInitializer.Initialize">
            <summary>
            The initialize method.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.BacktrackingSolver">
            <summary>
            Provides a solver using backtracking method.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.BacktrackingSolver._grid">
            <summary>
            The temporary grid to solve.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.Solve(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.SolveAsync(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BacktrackingSolver.InternalSolve(System.Int32@,System.Int32[]@,System.Int32[],System.Int32)">
            <summary>
            Solve the puzzle backtrackingly.
            </summary>
            <param name="solutionsCount">The number of solutions.</param>
            <param name="result">The result array.</param>
            <param name="gridValues">All grid values.</param>
            <param name="finishedCellsCount">The number of cells had finished.</param>
            <exception cref="T:Sudoku.MultipleSolutionsException">Throws when the puzzle contains multiple solutions.</exception>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.BruteForceSolverResult">
            <summary>
            Encapsulates a solver result information that is created by a brute force solver.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BruteForceSolverResult.#ctor(Sudoku.Data.Grid@)">
            <summary>
            Encapsulates a solver result information that is created by a brute force solver.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.BruteForceSolverResult.IsSolved">
            <inheritdoc/>
            <remarks>The default value is <see langword="true"/>.</remarks>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.BruteForceSolverResult.FailedReason">
            <inheritdoc/>
            <remarks>The default value is <see cref="F:Sudoku.Solving.FailedReason.Nothing"/>.</remarks>
            <seealso cref="F:Sudoku.Solving.FailedReason.Nothing"/>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.BruteForceSolverResult.Solution">
            <inheritdoc/>
            <remarks>The default value is <see cref="F:Sudoku.Data.Grid.Undefined"/>.</remarks>
            <seealso cref="F:Sudoku.Data.Grid.Undefined"/>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.BruteForceSolverResult.ElapsedTime">
            <inheritdoc/>
            <remarks>The default value is <see cref="F:System.TimeSpan.Zero"/>.</remarks>
            <seealso cref="F:System.TimeSpan.Zero"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BruteForceSolverResult.ToDisplayString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BruteForceSolverResult.ToDisplayString(Sudoku.Globalization.CountryCode)">
            <summary>
            Get the string representataion of the current instance using the specified formatting options
            and the country code to specify the country information.
            </summary>
            <param name="countryCode">The country code.</param>
            <returns>The string representation of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.BruteForceSolverResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.FastSolver">
            <summary>
            Defines a fast solver.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.BitSet27">
            <summary>
            All pencil marks set - 27 bits per band.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.BufferLength">
            <summary>
            The buffer length of a solution puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver._stack">
            <summary>
            Stack to store current and previous states.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver._numSolutions">
            <summary>
            The number of solutions found so far.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver._limitSolutions">
            <summary>
            The max number of solution we're looking for.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver._singleApplied">
            <summary>
            Nasty global flag telling if <see cref="M:Sudoku.Solving.BruteForces.FastSolver.ApplySingleOrEmptyCells"/> found anything.
            </summary>
            <seealso cref="M:Sudoku.Solving.BruteForces.FastSolver.ApplySingleOrEmptyCells"/>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver._solution">
            <summary>
            Pointer to where to store the first solution. This value can be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver._g">
            <summary>
            Pointer to the currently active slot.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Solve(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.SolveAsync(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Solve(System.Char*,System.Char*,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The pointer to the puzzle.</param>
            <param name="solution">The solution. <see langword="null"/> if you don't want to use the value.</param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Solve(System.String,System.Char*,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">The solution. <see langword="null"/> if you don't want to use the value.</param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Solve(System.String,System.String@,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution. The value keeps <see langword="null"/>
            if you doesn't want to use this result.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Solve(System.String,System.Text.ValueStringBuilder@,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution receiver. This parameter is used when you want
            to use the solution string. The receiver is represented as a <see cref="T:System.Text.ValueStringBuilder"/>.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
            <seealso cref="T:System.Text.ValueStringBuilder"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.Char*)">
            <summary>
            Same as <see cref="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.String,System.String@)"/>, but doesn't contain
            any <see langword="out"/> parameters.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
            <seealso cref="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.String,System.String@)"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.String)">
            <summary>
            Same as <see cref="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.String,System.String@)"/>, but doesn't contain
            any <see langword="out"/> parameters.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
            <seealso cref="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.String,System.String@)"/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.CheckValidity(System.String,System.String@)">
            <summary>
            Check the validity of the puzzle.
            </summary>
            <param name="grid">The grid.</param>
            <param name="solutionIfUnique">The solution if the puzzle is unique.</param>
            <returns>The <see cref="T:System.Boolean"/> result. <see langword="true"/> for unique solution.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.SetSolvedDigit(System.Int32,System.Int32)">
            <summary>
            Set a cell as solved - used in <see cref="M:Sudoku.Solving.BruteForces.FastSolver.InitSudoku(System.Char*)"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.EliminateDigit(System.Int32,System.Int32)">
            <summary>
            Eliminate a digit - used in <see cref="M:Sudoku.Solving.BruteForces.FastSolver.InitSudoku(System.Char*)"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.SetSolvedMask(System.Int32,System.UInt32)">
            <summary>
            Set a cell as solved - used in various guess routines.
            </summary>
            <param name="band">The band.</param>
            <param name="mask">The mask.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.InitSudoku(System.Char*)">
            <summary>
            Setup everything and load the puzzle.
            </summary>
            <param name="puzzle">The pointer that points to a puzzle buffer.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Update">
            <summary>
            Core of fast processing.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.ApplySingleOrEmptyCells">
            <summary>
            Find singles, bi-value cells, and impossible cells.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.InternalSolve(System.Char*,System.Char*,System.Int32)">
            <summary>
            The internal solving method.
            </summary>
            <param name="puzzle">The pointer to the puzzle string.</param>
            <param name="solutionPtr">The pointer to the solution string.</param>
            <param name="limit">The limitation for the number of all final solutions.</param>
            <returns>The number of solutions found.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.ExtractSolution(System.Char*)">
            <summary>
            Extract solution as a string.
            </summary>
            <param name="solution">
            The solution pointer. <b>The buffer should be at least <see cref="F:Sudoku.Solving.BruteForces.FastSolver.BufferLength"/>
            of value of length.</b>
            </param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.GuessBiValueInCell">
            <summary>
            Try both options for cells with exactly two pencil marks.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.GuessFirstCell">
            <summary>
            Guess all possibilities in first unsolved cell.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.Guess">
            <summary>
            Either already solved, or guess and recurse.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.FullUpdate">
            <summary>
            Get as far as possible without guessing.
            </summary>
            <returns>An <see cref="T:System.Byte"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.FastSolver.BitPos(System.UInt32)">
            <summary>
            Get the bit position.
            </summary>
            <param name="map">The map.</param>
            <returns>The position.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.FastSolver.State">
            <summary>
            To describe a state for a current grid using binary values.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.State.Bands">
            <summary>
            Pencil marks in bands by digit.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.State.PrevBands">
            <summary>
            Value of bands last time it was calculated.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.State.UnsolvedCells">
            <summary>
            Bit vector of unsolved cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.State.UnsolvedRows">
            <summary>
            Bit vector of unsolved rows - three bits per band.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.State.Pairs">
            <summary>
            Bit vector of cells with exactly two pencil marks.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.TblComplexMask">
            <summary>
            To keep mini rows still valid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.TblMaskSingle">
            <summary>
            Kill in other blocks locked column/box.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.TblShrinkSingle">
            <summary>
            Keep only rows with single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.TblRowUniq">
            <remarks>
            1 is row not defined in block mode <c>1</c> to <c>111</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.TblColumnSingle">
            <summary>
            Single in column applied to shrunk block.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.FastSolver.TblRowMask">
            <summary>
            Rows where single found: <c>000</c> to <c>111</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.OneLineLinqSolver">
            <summary>
            Provides a solver using LINQ method.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.OneLineLinqSolver.Solve(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.OneLineLinqSolver.SolveAsync(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.OneLineLinqSolver.SolveStrings(System.String)">
            <summary>
            Internal solving method.
            </summary>
            <param name="puzzle">The puzzle string, with placeholder character '0'.</param>
            <returns>The result strings (i.e. All solutions).</returns>
        </member>
        <member name="T:Sudoku.Solving.FailedReason">
            <summary>
            Defines a reason why the <see cref="T:Sudoku.Solving.IPuzzleSolver"/> is failed to solve a puzzle.
            </summary>
            <seealso cref="T:Sudoku.Solving.IPuzzleSolver"/>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.Nothing">
            <summary>
            Indicates nothing goes wrong.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleIsInvalid">
            <summary>
            Indicates the failed reason is that the puzzle doesn't contain a valid unique solution.
            Different with <see cref="F:Sudoku.Solving.FailedReason.PuzzleHasMultipleSolutions"/> and <see cref="F:Sudoku.Solving.FailedReason.PuzzleHasNoSolution"/>,
            this field will include more generic cases. If the puzzle doesn't pass the pre-process operation
            before solving, we should use this field.
            </summary>
            <seealso cref="F:Sudoku.Solving.FailedReason.PuzzleHasNoSolution"/>
            <seealso cref="F:Sudoku.Solving.FailedReason.PuzzleHasMultipleSolutions"/>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleHasNoSolution">
            <summary>
            Indicates the failed reason is that the puzzle doesn't contain a valid solution.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleHasMultipleSolutions">
            <summary>
            Indicates the failed reason is that the puzzle contains multiple valid solutions.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.UserCancelled">
            <summary>
            Indicates the failed reason is that the user has cancelled the task.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.NotImplemented">
            <summary>
            Indicates the failed reason is that the solver doesn't implemented some function
            that causes the operation can't be finished.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.ExceptionThrown">
            <summary>
            Indicates the failed reason is that the solver has encountered an error and couldn't solve,
            then an exception thrown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.WrongStep">
            <summary>
            Indicates the failed reason is that the solver has found a wrong step that cause the grid become invalid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.PuzzleIsTooHard">
            <summary>
            Indicates the failed reason is that the puzzle is too hard to solve. The solver gave up.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.FailedReason.Unknown">
            <summary>
            Indicates the other reason to cause the error.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.IPuzzleSolver">
            <summary>
            Defines and provides with a solver that used for solving a sudoku puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.IPuzzleSolver.Solve(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <summary>
            To solve the specified puzzle.
            </summary>
            <param name="puzzle">The puzzle to be solved.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The solver result that provides the information after solving.</returns>
        </member>
        <member name="M:Sudoku.Solving.IPuzzleSolver.SolveAsync(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <summary>
            To solve the specified puzzle asynchronously.
            </summary>
            <param name="puzzle">The puzzle to be solved.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>
            A task that holds the operation to solve the puzzle, whose inner value is the solver result
            that provides the information after solving.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.ISolverResult">
            <summary>
            Defines a result that created by a solver to represent a result of analysis after the solver calculated.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.IsSolved">
            <summary>
            Indicates whether the solver has solved the puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.FailedReason">
            <summary>
            Indicates why the solving operation is failed. This property is useless when <see cref="P:Sudoku.Solving.ISolverResult.IsSolved"/>
            keeps the <see langword="true"/> value.
            </summary>
            <seealso cref="P:Sudoku.Solving.ISolverResult.IsSolved"/>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.OriginalPuzzle">
            <summary>
            Indicates the original sudoku puzzle to solve.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.Solution">
            <summary>
            Indicates the result sudoku grid solved. If the solver can't solve this puzzle, the value will be
            <see cref="F:Sudoku.Data.Grid.Undefined"/>.
            </summary>
            <seealso cref="F:Sudoku.Data.Grid.Undefined"/>
        </member>
        <member name="P:Sudoku.Solving.ISolverResult.ElapsedTime">
            <summary>
            Indicates the elapsed time used during solving the puzzle. The value may not be an useful value.
            Some case if the puzzle doesn't contain a valid unique solution, the value may be
            <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
            <seealso cref="F:System.TimeSpan.Zero"/>
        </member>
        <member name="M:Sudoku.Solving.ISolverResult.ToDisplayString">
            <summary>
            Get the string representation of the current instance.
            </summary>
            <returns>The string representation of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.ISolverResult.ToDisplayString(Sudoku.Globalization.CountryCode)">
            <summary>
            Get the string representataion of the current instance using the country code
            to specify the country information.
            </summary>
            <param name="countryCode">The country code.</param>
            <returns>The string representation of the current instance.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Buffer.FastProperties">
            <summary>
            Provides and encapsulates the fast properties that is used in solving and analyzing a sudoku puzzle.
            </summary>
            <remarks>
            <para>
            The whole class is a <see langword="static"/> one, which means you can't use <see langword="new"/>
            clause to create a new instance of this type. In contrast, the class is used for providing with
            <see langword="static"/> properties used in a cyclic manual searching
            (i.e. in <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>).
            </para>
            <para>
            Some step searchers rely on this class. If you want to call them alone, you should ensure the method
            <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/> in this class is called before using these properties.
            </para>
            <para>
            If a step searcher doesn't rely on this class, it'll be marked an attribute named
            <see cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>. If you find that the step searcher marks that attribute,
            you can call it everywhere safely; however, if the searcher isn't marked that attribute, you
            can't call it everywhere unless you call the method <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>.
            </para>
            <para>
            Please note, all names of properties in this class can also be found in <see cref="T:Sudoku.Data.Grid"/>,
            which means you can also call the property by <see cref="T:Sudoku.Data.Grid"/>. Of course, some of them
            doesn't contain the same one in <see cref="T:Sudoku.Data.Grid"/>, but you can find a same property whose
            execution logic (handling logic) is totally same.
            For example, <see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap"/> is same as <see cref="P:Sudoku.Data.Grid.EmptyCells"/>. The difference
            between them is that you shouldn't use <see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap"/> until you have called
            <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>, while <see cref="P:Sudoku.Data.Grid.EmptyCells"/> can be used
            everywhere, because it isn't an instant property (which means the calculation begins
            when you called them, i.e. lazy ones; in contrast, some properties only store values directly,
            so their values can be got instantly, i.e. instant ones).
            </para>
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>
            <seealso cref="T:Sudoku.Data.Grid"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap">
            <summary>
            The empty cells map.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.BivalueMap">
            <summary>
            The bi-value cells map.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.CandMaps">
            <summary>
            The candidate maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.DigitMaps">
            <summary>
            The digit maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.FastProperties.ValueMaps">
            <summary>
            The value maps.
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Manual.IsDirectAttribute"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)">
            <summary>
            Initialize the maps that used later.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Buffer.StepSearcherPool">
            <summary>
            Indicates a pool that stores the <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Buffer.StepSearcherPool.Collection">
            <summary>
            The step searchers to find steps to apply to a certain puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Buffer.StepSearcherPool.Searchers">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Checkers.PuzzleChecker">
            <summary>
            Defines a puzzle checker.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Checkers.PuzzleChecker.Solver">
            <summary>
            Indicates the inner solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.PuzzleChecker.IsValid(Sudoku.Data.Grid@)">
            <summary>
            Checks whether the specified grid contains a valid unique solution.
            </summary>
            <param name="this">The grid to be checked.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.PuzzleChecker.IsValid(Sudoku.Data.Grid@,Sudoku.Data.Grid@,System.Nullable{System.Boolean}@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">The puzzle to check.</param>
            <param name="solutionIfValid">
            The solution if the puzzle is valid; otherwise, <see cref="F:Sudoku.Data.SudokuGrid.Undefined"/>.
            </param>
            <param name="sukaku">
            Indicates whether the current mode is sukaku mode.
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The puzzle is a sukaku puzzle.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The puzzle is a normal sudoku puzzle.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The puzzle is invalid.</description>
            </item>
            </list>
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="F:Sudoku.Data.SudokuGrid.Undefined"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher">
            <summary>
            Defines a searcher that searches for the true candidates of the current sudoku grid.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.#ctor(Sudoku.Data.Grid@)">
            <summary>
            Initializes an instance with the specified grid.
            </summary>
            <param name="grid">The current puzzle grid.</param>
            <exception cref="T:Sudoku.InvalidPuzzleException">Throws when the puzzle is invalid.</exception>
        </member>
        <member name="P:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.IsBugPattern">
            <summary>
            Indicates the current grid is a BUG+n pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.Puzzle">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.TrueCandidates">
            <summary>
            Indicates all true candidates (non-BUG candidates).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.GetAllTrueCandidates(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all true candidates when the number of empty cells
            is below than the argument.
            </summary>
            <param name="maximumEmptyCells">The maximum number of the empty cells.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>All true candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Checkers.TrueCandidatesSearcher.GetAllTrueCandidatesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all true candidates when the number of empty cells
            is below than the argument asynchronously.
            </summary>
            <param name="maximumEmptyCells">The maximum number of the empty cells.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task to get all true candidates.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.DifficultyLevel">
            <summary>
            Provides a difficulty kind for a puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Unknown">
            <summary>
            Indicates the difficulty level is unknown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Easy">
            <summary>
            Indicates the difficulty is easy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Moderate">
            <summary>
            Indicates the difficulty is moderate.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Hard">
            <summary>
            Indicates the difficulty is hard.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Fiendish">
            <summary>
            Indicates the difficulty is fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.Nightmare">
            <summary>
            Indicates the difficulty is nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DifficultyLevel.LastResort">
            <summary>
            Indicates the puzzle can't be solved
            unless using last resort methods.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DisabledReason">
            <summary>
            Indicates a reason why the searcher is disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.None">
            <summary>
            Indicates the searcher is normal one and isn't disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.LastResort">
            <summary>
            Indicates the searcher searches for last resorts, which don't need to show.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.HasBugs">
            <summary>
            Indicates the searcher has bugs while searching.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisabledReason.TooSlow">
            <summary>
            Indicates the searcher runs so slowly that the author himself can't stand to use it.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.DisplayingLevel">
            <summary>
            Indicates the difficulty level of the step.
            This enumeration type is used for the displaying of the step information list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.None">
            <summary>
            Indicates the level is none.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.A">
            <summary>
            Indicates the level is the easy (Level A).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.B">
            <summary>
            Indicates the level is medium (Level B).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.C">
            <summary>
            Indicates the level is hard (Level C).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.D">
            <summary>
            Indicates the level is fiendish (Level D).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.DisplayingLevel.E">
            <summary>
            Indicates the level is nightmare (Level E).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.EnabledAreas">
            <summary>
            Represents the data about where a step searcher can be enabled and used.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.None">
            <summary>
            Indicates all modes are disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.Default">
            <summary>
            Indicates the default mode (Sudoku Explainer or Hodoku mode).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.Gathering">
            <summary>
            Indicates the gathering mode (All steps will be found here).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.EnabledAreas.Experimental">
            <summary>
            Indicates the experimental function can use the step searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.IManualSolverOptions">
            <summary>
            Defines an instance that stores the options that bound with a <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IManualSolverOptions.IsHodokuMode">
            <summary>
            Indicates whether the solver uses Hodoku mode to solve a sudoku.
            </summary>
            <remarks>
            <para>
            <b>Hodoku mode</b> is a mode that imitates a sudoku-solving program called <i>Hodoku</i>
            to solve a puzzle. In this case, all enabled step searchers will be in ascending order via their's own
            priority, i.e. the value of the property <see cref="P:Sudoku.Solving.Manual.SearchingOptions.Priority"/>. On the other hand,
            this option provides a basic and normal processing behavior of a <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> instance.
            </para>
            <para>
            However, in this case the difficulty order (ascending or descending order) of steps
            won't be guaranteed. For example, the possible difficulty rating of a step searched via a UR searcher
            is between 4.5 and 4.8, and another rating of a step via a chain searcher is between 4.6 and 5.1.
            If the UR searcher has a larger priority than chain searcher, the solver may find all UR steps firsly
            in this case, and secondly searches for chains. In some cases, some UR steps found
            has a larger difficulty rating value than some chain steps found, so the difficulty ratings
            are unstrictly-handled (i.e. steps are out of ordered).
            </para>
            <para>
            If you want to strictly handle the difficulty rating, we recommend you set this property value
            as <see langword="false"/>, but the solver will be processed slower than the case setting the
            <see langword="true"/> value.
            </para>
            </remarks>
            <seealso cref="P:Sudoku.Solving.Manual.SearchingOptions.Priority"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IManualSolverOptions.IsFastSearching">
            <summary>
            Indicates whether the solver will use fast searching mode to solve puzzles.
            If the value is <see langword="true"/>, the solver will apply all steps after gathered.
            In the normal case, solver only fetches the first found step to apply.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.IManualSolverOptions.OptimizedApplyingOrder">
            <summary>
            Indicates whether the solver will apply the steps via the asecending order.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.IsDirectAttribute">
            <summary>
            <para>
            Indicates the technique searcher can or can't be used in some scenarios
            where they aren't in traversing mode to call
            <see cref="M:Sudoku.Solving.Manual.Searchers.IStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)"/> in <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s one by one.
            </para>
            <para>
            If <see langword="true"/>, the searcher can't use those <see langword="static"/>
            properties such as <see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.CandMaps"/> in its method
            <see cref="M:Sudoku.Solving.Manual.Searchers.IStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)"/>.
            </para>
            </summary>
            <remarks>
            <para>
            All disallowed properties are:
            <list type="bullet">
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.DigitMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.ValueMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.CandMaps"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.BivalueMap"/></item>
            <item><see cref="P:Sudoku.Solving.Manual.Buffer.FastProperties.EmptyMap"/></item>
            </list>
            The disallowed method is:
            <list type="bullet">
            <item><see cref="M:Sudoku.Solving.Manual.Buffer.FastProperties.InitializeMaps(Sudoku.Data.Grid@)"/></item>
            </list>
            </para>
            <para>
            Those properties or methods can optimize the performance to analyze a sudoku grid, but
            sometimes they may cause a potential bug that is hard to find and fix. The attribute
            is created and used for solving the problem.
            </para>
            </remarks>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.Buffer.FastProperties"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.IsOptionsFixedAttribute">
            <summary>
            Marks onto a <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>, to let the compiler know the specified step searcher
            is fixed-ordering, and we can't modify the order in the settings UI.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.IStepsGathererOptions">
            <summary>
            Defines an instance that stores the options that bound with a <see cref="T:Sudoku.Solving.Manual.StepsGatherer"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.StepsGatherer"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.IStepsGathererOptions.OnlyShowSameLevelTechniquesInFindAllSteps">
            <summary>
            Indicates whether the solver only displays the techniques with the same displaying level.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolver">
            <summary>
            Provides a manual solver that solves a sudoku puzzle using the human minds and ways
            to check and solve a sudoku puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveAsync(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve_HodokuMode(Sudoku.Data.Grid@,Sudoku.Data.Grid@,System.Boolean,Sudoku.Solving.Manual.ManualSolverResult,System.Threading.CancellationToken)">
            <summary>
            The inner solving operation method.
            </summary>
            <param name="puzzle">The original puzzle to be solved.</param>
            <param name="solution">The solution of the puzzle. Some step searchers will use this value.</param>
            <param name="isSukaku">A <see cref="T:System.Boolean"/> value indicating whether the puzzle is a sukaku.</param>
            <param name="baseSolverResult">The base solver result already included the base information.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The solver result.</returns>
            <exception cref="T:Sudoku.Solving.Manual.WrongStepException">Throws when found wrong steps to apply.</exception>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.RecordStep(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Solving.Manual.Step,Sudoku.Data.Grid@,System.Diagnostics.Stopwatch,System.Collections.Generic.ICollection{Sudoku.Data.Grid},Sudoku.Solving.Manual.ManualSolverResult,System.Threading.CancellationToken,Sudoku.Solving.Manual.ManualSolverResult@)">
            <summary>
            <para>
            Records the current found and valid step into the specified collection. This method will also
            check the validity of <paramref name="cancellationToken"/>. If user has cancelled the operation,
            here we'll throw an exception and exit the operation directly.
            </para>
            <para>
            Please note that if the argument <paramref name="result"/> isn't <see langword="null"/>, it'll mean
            that the puzzle has been already solved, so this method will stop the stopwatch. Therefore, you don't
            need to stop that stopwatch manually like the code <c>stopwatch.Stop();</c>.
            </para>
            </summary>
            <param name="steps">The steps.</param>
            <param name="step">The step.</param>
            <param name="playground">The playground.</param>
            <param name="stopwatch">The stopwatch.</param>
            <param name="stepGrids">The step grids.</param>
            <param name="baseSolverResult">Indicates the base solver result.</param>
            <param name="cancellationToken">The cancellation token that is used to cancel the operation.</param>
            <param name="result">The analysis result.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.OperationCanceledException">
            Throws when the current operation is cancelled.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.AreConclusionsValid(Sudoku.Data.Grid@,Sudoku.Solving.Manual.Step)">
            <summary>
            Peeks the validity of step, to check whether all conclusions are possibly correct.
            </summary>
            <param name="solution">The solution.</param>
            <param name="step">The step to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.IsHodokuMode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.IsFastSearching">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolverResult">
            <summary>
            Provides the solver result after <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> solves a puzzle.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.#ctor(Sudoku.Data.Grid@)">
            <summary>
            Provides the solver result after <see cref="T:Sudoku.Solving.Manual.ManualSolver"/> solves a puzzle.
            </summary>
            <param name="OriginalPuzzle"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.IsSolved">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.FailedReason">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Solution">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.ElapsedTime">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.WrongStep">
            <summary>
            <para>
            Indicates the wrong step found. In general cases, if the property <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.IsSolved"/> keeps
            <see langword="false"/> value, it'll mean the puzzle is invalid to solve, or the solver has found
            one error step to apply, that causes the original puzzle <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.OriginalPuzzle"/> become invalid.
            In this case we can check this property to get the wrong information to debug the error,
            or tell the author himself directly, with the inner value of this property held.
            </para>
            <para>
            However, if the puzzle is successful to be solved, the property won't contain any value,
            so it'll keep the <see langword="null"/> reference. Therefore, please check the nullability
            of this property before using.
            </para>
            <para>
            In general, this table will tell us the nullability of this property:
            <list type="table">
            <listheader>
            <term>Nullability</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Not <see langword="null"/></term>
            <description>The puzzle is failed to solve, and the solver has found an invalid step to apply.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>Other cases.</description>
            </item>
            </list>
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.IsSolved"/>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.OriginalPuzzle"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.StepGrids">
            <summary>
            Indicates a list, whose element is the intermediate grid for each step.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Steps">
            <summary>
            Indicates all solving steps that the solver has recorded.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.StepGrids"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.MaxDifficulty">
            <summary>
            <para>Indicates the maximum difficulty of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the maximum value among all difficulty
            ratings in solving steps. If the puzzle has not been solved,
            or else the puzzle is solved by other solvers, this value will
            be always <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.TotalDifficulty">
            <summary>
            <para>Indicates the total difficulty rating of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the sum of all difficulty ratings of steps. If
            the puzzle has not been solved, the value will be the sum of all
            difficulty ratings of steps recorded in <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>.
            However, if the puzzle is solved by other solvers, this value will
            be <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.PearlDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first solving step. If the puzzle has not solved or
            the puzzle is solved by other solvers, this value will be always <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.DiamondDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first step before the first one whose conclusion is
            <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>. If the puzzle has not solved
            or solved by other solvers, this value will be <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="T:Sudoku.Data.ConclusionType"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.SolvingStepsCount">
            <summary>
            Indicates the number of all solving steps recorded.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.DifficultyLevel">
            <summary>
            Indicates the difficulty level of the puzzle.
            If the puzzle has not solved or solved by other solvers,
            this value will be <see cref="F:Sudoku.Solving.Manual.DifficultyLevel.Unknown"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Bottleneck">
            <summary>
            Gets the bottleneck during the whole grid solving. Returns <see langword="null"/> if the property
            <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/> is default case (not initialized or empty).
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Manual.Step"/> instance at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The step information.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/> is <see langword="null"/> or empty.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">Throws when the index is out of range.</exception>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolverResult.Item(Sudoku.Techniques.Technique)">
            <summary>
            Gets the first <see cref="T:Sudoku.Solving.Manual.Step"/> instance that matches the specified technique.
            </summary>
            <param name="code">The technique code to check and fetch.</param>
            <returns>The step information instance as the result.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the list doesn't contain any valid instance to get.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString(System.String,Sudoku.Globalization.CountryCode)">
            <summary>
            Get the analysis result string using the specified format and the country code.
            </summary>
            <param name="format">The format.</param>
            <param name="countryCode">The country code.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString(Sudoku.Solving.SolverResultFormattingOptions)">
            <inheritdoc cref="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(Sudoku.Solving.SolverResultFormattingOptions)"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString(Sudoku.Solving.SolverResultFormattingOptions,Sudoku.Globalization.CountryCode)">
            <inheritdoc cref="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(Sudoku.Solving.SolverResultFormattingOptions,Sudoku.Globalization.CountryCode)"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToDisplayString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToDisplayString(Sudoku.Globalization.CountryCode)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Evaluator(,System.Decimal)">
            <summary>
            The inner executor to get the difficulty value (total, average).
            </summary>
            <param name="executor">The execute method.</param>
            <param name="d">
            The default value as the return value when <see cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/> is <see langword="null"/> or empty.
            </param>
            <returns>The result.</returns>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolverResult.Steps"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolverResult.Formatter">
            <summary>
            Provides operations for analysis result formatting.
            </summary>
            <param name="Result">Indicates the analysis result.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.#ctor(Sudoku.Solving.Manual.ManualSolverResult)">
            <summary>
            Provides operations for analysis result formatting.
            </summary>
            <param name="Result">Indicates the analysis result.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the specified format string.
            </summary>
            <param name="format">
            The format. If available, the parameter can be <see langword="null"/>.
            </param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(System.String,System.IFormatProvider,Sudoku.Globalization.CountryCode)">
            <summary>
            Get the string result.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="countryCode">The country code.</param>
            <returns>The result.</returns>
            <exception cref="T:System.FormatException">
            Throws when the specified format contains other invalid characters
            and the format provider can't work.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(Sudoku.Solving.SolverResultFormattingOptions)">
            <summary>
            Get the string result with the specified formatting options.
            </summary>
            <param name="options">The options.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.Formatter.ToString(Sudoku.Solving.SolverResultFormattingOptions,Sudoku.Globalization.CountryCode)">
            <summary>
            Get the string result with the specified formatting options and the country code.
            </summary>
            <param name="options">The options.</param>
            <param name="countryCode">The country code.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolverResult.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the specified format string.
            </summary>
            <param name="format">
            The format. If available, the parameter can be <see langword="null"/>.
            </param>
            <returns>The string result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.MaskMarshal">
            <summary>
            Provides with a serial of methods that handles with masks.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.MaskMarshal.GetMaskSubsets(System.Int16)">
            <summary>
            Get all mask combinations.
            </summary>
            <param name="value">The mask.</param>
            <returns>The result list.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.MaskMarshal.GetMaskSubsets(System.Int16,System.Int32)">
            <summary>
            Get all mask combinations.
            </summary>
            <param name="value">The mask.</param>
            <param name="size">The size.</param>
            <returns>The result list.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Rarity">
            <summary>
            Indicates the rarity of the technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Always">
            <summary>
            Indicates the technique always appears, such as <b>Hidden Single</b>.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Often">
            <summary>
            Indicates the rarity is often appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Sometimes">
            <summary>
            Indicates the rarity is sometimes appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.Seldom">
            <summary>
            Indicates the rarity is seldom appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.HardlyEver">
            <summary>
            Indicates the rarity is hardly ever appears.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Rarity.OnlyForSpecialPuzzles">
            <summary>
            Indicates the technique only appears in the special puzzles designed on purpose.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.SearcherIdentifier">
            <summary>
            Encapsulates an enumeration type that stores all possible identifiers for <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.SearcherIdentifier.Single">
            <summary>
            Indicates the single step searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.SearcherIdentifier.LockedCandidates">
            <summary>
            Indicates the locked candidates searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.SearcherIdentifier.Subset">
            <summary>
            Indicates the subset searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.SearcherIdentifier.Fish">
            <summary>
            Indicates the fish searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.SearcherIdentifier.ElementaryChaining">
            <summary>
            Indiactes the elementary chain searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.SearcherIdentifier.RegularWing">
            <summary>
            Indicates the regular wing searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.SearcherIdentifier.DeadlyPattern">
            <summary>
            Indicates the deadly pattern searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.IStepSearcher">
            <summary>
            Defines a step searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IStepSearcher.Identifier">
            <summary>
            Indicates the value that identifies which type the step searcher is of.
            The value may be also used in UI rendering.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.IStepSearcher.Options">
            <summary>
            Indicates the step searching options.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.IStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)">
            <summary>
            Accumulate all possible steps into the specified accumulator.
            </summary>
            <param name="accumulator">The accumulator to store each step.</param>
            <param name="grid">The grid to search for techniques.</param>
            <param name="onlyFindOne">
            Indicates whether the method only searches for one <see cref="T:Sudoku.Solving.Manual.Step"/> instance.
            </param>
            <returns>
            Returns the first found step. The nullability of the return value are as belows:
            <list type="bullet">
            <item>
            <see langword="null"/>:
            <list type="bullet">
            <item><c><paramref name="onlyFindOne"/> == <see langword="false"/></c>.</item>
            <item><c><paramref name="onlyFindOne"/> == <see langword="true"/></c>, but <b>nothing</b> found.</item>
            </list>
            </item>
            <item>
            Not <see langword="null"/>:
            <list type="bullet">
            <item>
            <c><paramref name="onlyFindOne"/> == <see langword="true"/></c>, and found <b>at least one step</b>.
            In this case the return value is the first found step.
            </item>
            </list>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.LockedCandidatesStepSearcher">
            <summary>
            Provides with a <b>Locked Candidates</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Pointing</item>
            <item>Claiming</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.LockedCandidatesStepSearcher.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.LockedCandidatesStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.LockedCandidatesStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)">
            <inheritdoc/>
            <remarks>
            <para>
            The main idea of this searching operation:
            </para>
            <para>
            <code>
            .-------.-------.-------.
            | C C C | A A A | A A A |
            | B B B | . . . | . . . |
            | B B B | . . . | . . . |
            '-------'-------'-------'
            </code>
            For example, if the cells C form a locked candidates, there'll be two cases:
            <list type="number">
            <item><b>Pointing (Type 1)</b>: Cells A contains the digit, but cells B doesn't.</item>
            <item><b>Claiming (Type 2)</b>: Cells B contains the digit, but cells A doesn't.</item>
            </list>
            </para>
            <para>
            <para>Therefore, the algorithm is:</para>
            Use bitwise-or <c>operator |</c> to gather all candidate masks from cells A, cells B and cells C,
            and suppose the notation <c>a</c> is the mask result for cells A, <c>b</c> is the mask result for cells B,
            and <c>c</c> is the mask result for cells C. If the equation <c><![CDATA[(c & (a ^ b)) != 0]]></c>
            is correct, the locked candidates exists, and the result of the expression
            <c><![CDATA[c & (a ^ b)]]></c> is a mask that holds the digits of the locked candidates.
            </para>
            <para>
            Why this expression? <c>a ^ b</c> means the digit can only appear in either cells A or cells B.
            If both or neither, the digit won't contain the locked candidates structure.
            Because of the optimization of the performance, we use the predefined table to iterate on
            all possible location where may form a locked candidate.
            </para>
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher">
            <summary>
            Provides with a <b>Normal Fish</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>X-Wing</item>
            <item>Swordfish</item>
            <item>Jellyfish</item>
            <item>Finned X-Wing</item>
            <item>Finned Swordfish</item>
            <item>Finned Jellyfish</item>
            <item>Sashimi X-Wing</item>
            <item>Sashimi Swordfish</item>
            <item>Sashimi Jellyfish</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Int32,System.Int32**,System.Int32**,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get all possible normal fishes.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="r">The possible row table to iterate.</param>
            <param name="c">The possible column table to iterate.</param>
            <param name="withFin">Indicates whether the searcher will check for the existence of fins.</param>
            <param name="searchRow">
            Indicates whether the searcher searches for fishes in the direction of rows.
            </param>
            <param name="onlyFindOne">Indicates whether the method only searches for one step.</param>
            <returns>The first found step.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.IsSashimi(System.Int32[],Sudoku.Data.Cells@,System.Int32)">
            <summary>
            Check whether the fish is sashimi.
            </summary>
            <param name="baseSets">The base sets.</param>
            <param name="fins">All fins.</param>
            <param name="digit">The digit.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating that. All cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>If the fish is sashimi.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>If the fish is a normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>If the fish doesn't contain any fin.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.NormalFishStepSearcher.GetDirectView(Sudoku.Data.Grid@,System.Int32,System.Int32[],System.Int32[],Sudoku.Data.Cells@,System.Boolean)">
            <summary>
            Get the direct fish view with the specified grid and the base sets.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
            <param name="fins">
            The cells of the fin in the current fish.
            </param>
            <param name="searchRow">Indicates whether the current searcher searches row.</param>
            <returns>The view.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher">
            <summary>
            Provides with a <b>Regular Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>XY-Wing</item>
            <item>XYZ-Wing</item>
            <item>WXYZ-Wing</item>
            <item>VWXYZ-Wing</item>
            <item>UVWXYZ-Wing</item>
            <item>TUVWXYZ-Wing</item>
            <item>STUVWXYZ-Wing</item>
            <item>RSTUVWXYZ-Wing</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher._maxSize">
            <summary>
            The inner field of the property <see cref="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.MaxSize"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.MaxSize"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size the searcher will search for. The maximum possible value is 9.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when <c>value</c> is greater than 9.</exception>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.RegularWingStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.SingleStepSearcher">
            <summary>
            Provides with a <b>Single</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>Full House</item>
            <item>Last Digit</item>
            <item>Hidden Single</item>
            <item>Naked Single</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.EnableFullHouse">
            <summary>
            Indicates whether the solver enables the technique full house.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.EnableLastDigit">
            <summary>
            Indicates whether the solver enables the technique last digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.ShowDirectLines">
            <summary>
            Indicates whether the solver shows the direct lines (cross-hatching information).
            </summary>
            <remarks>
            <para>
            <b>Direct line</b>s is a concept that describes the crosshatching information of a hidden single.
            For example, in this following grid:
            <code>
            .---------.---------.---------.
            | .  .  . | .  .  . | .  .  . |
            | .  .  . | .  .  1 | .  .  . |
            | .  .  . | .  .  . | .  .  . |
            :---------+---------+---------:
            | .  .  1 | x  x  x | .  .  . |
            | .  .  . | x  .  x | .  .  . |
            | .  .  . | x  x  x | 1  .  . |
            :---------+---------+---------:
            | .  .  . | .  .  . | .  .  . |
            | .  .  . | 1  .  . | .  .  . |
            | .  .  . | .  .  . | .  .  . |
            '---------'---------'---------'
            </code>
            The start point of the direct lines are:
            <list type="bullet">
            <item><c>r4c3(1)</c>, removes the cases of digit 1 for cells <c>r4c456</c>.</item>
            <item><c>r2c6(1)</c>, removes the cases of digit 1 for cells <c>r456c6</c>.</item>
            <item><c>r6c7(1)</c>, removes the cases of digit 1 for cells <c>r6c456</c>.</item>
            <item><c>r8c4(1)</c>, removes the cases of digit 1 for cells <c>r456c4</c>.</item>
            </list>
            </para>
            <para>
            All the end points may be displayed using a cross mark ('<c>x</c>'), and the start
            point may be used a circle mark ('<c>o</c>').
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.SingleStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher">
            <summary>
            Provides with a <b>Subset</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>Locked Pair</item>
            <item>Locked Triple</item>
            <item>Naked Pair</item>
            <item>Naked Triple</item>
            <item>Naked Quadruple</item>
            <item>Naked Pair (+)</item>
            <item>Naked Triple (+)</item>
            <item>Naked Quadruple (+)</item>
            <item>Hidden Pair</item>
            <item>Hidden Triple</item>
            <item>Hidden Quadruple</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.SubsetStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Searchers.TwoStrongLinksStepSearcher">
            <summary>
            Provides with a <b>Two-strong Links</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Skyscraper</item>
            <item>Two-string Kite</item>
            <item>Turbot Fish</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.TwoStrongLinksStepSearcher.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Searchers.TwoStrongLinksStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Searchers.TwoStrongLinksStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Manual.Step},Sudoku.Data.Grid@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.SearchingOptions">
            <summary>
            Indicates the options aiming to <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s while searching.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledAreas">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/> and <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Gathering"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on <see cref="T:Sudoku.Solving.Manual.StepsGatherer"/>.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            <para>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </para>
            <para>
            The property <b>must</b> contain a value that differs with <see cref="F:Sudoku.Solving.Manual.DisabledReason.None"/>
            when the property <see cref="P:Sudoku.Solving.Manual.SearchingOptions.EnabledAreas"/> isn't <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/>.
            </para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.StepsGatherer"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.SearchingOptions.#ctor(System.Int32,Sudoku.Solving.Manual.DisplayingLevel,Sudoku.Solving.Manual.EnabledAreas,Sudoku.Solving.Manual.DisabledReason)">
            <summary>
            Indicates the options aiming to <see cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>s while searching.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledAreas">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/> and <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Gathering"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on <see cref="T:Sudoku.Solving.Manual.StepsGatherer"/>.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Solving.Manual.DisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            <para>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </para>
            <para>
            The property <b>must</b> contain a value that differs with <see cref="F:Sudoku.Solving.Manual.DisabledReason.None"/>
            when the property <see cref="P:Sudoku.Solving.Manual.SearchingOptions.EnabledAreas"/> isn't <see cref="F:Sudoku.Solving.Manual.EnabledAreas.Default"/>.
            </para>
            </param>
            <seealso cref="T:Sudoku.Solving.Manual.Searchers.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Manual.StepsGatherer"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Stableness">
            <summary>
            Defines a stableness of a technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.Stable">
            <summary>
            Indicates the stableness is stable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.LessUnstable">
            <summary>
            Indicates the stableness is less unstable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.Unstable">
            <summary>
            Indicates the stableness is unstable.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Stableness.ExtremelyUnstable">
            <summary>
            Indicates the stableness is expremely unstable.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Step">
            <summary>
            Provides with a possible step.
            </summary>
            <param name="Conclusions">Indicates the conclusions that the step can be eliminated or assigned to.</param>
            <param name="Views">
            Indicates the views of the step that may be displayed onto the screen using pictures.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@)">
            <summary>
            Provides with a possible step.
            </summary>
            <param name="Conclusions">Indicates the conclusions that the step can be eliminated or assigned to.</param>
            <param name="Views">
            Indicates the views of the step that may be displayed onto the screen using pictures.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.ShowDifficulty">
            <summary>
            <para>
            Indicates whether the difficulty rating of this technique should be
            shown in the output screen. Some techniques such as <b>Gurth's symmetrical placement</b>
            doesn't need to show the difficulty (because the difficulty of this technique
            is unstable).
            </para>
            <para>
            If the value is <see langword="true"/>, the analysis result won't show the difficulty
            of this instance.
            </para>
            <para>The default value is <see langword="true"/>.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsSstsStep">
            <summary>
            <para>Indicates whether the step is an SSTS (i.e. Simple Sudoku Technique Set) step.</para>
            <para>
            Here we define that the basic commonly appearing techniques are SSTS techniques:
            <list type="bullet">
            <item>Full House, Last Digit, Hidden Single, Naked Single</item>
            <item>Pointing, Claiming</item>
            <item>Naked Pair, Naked Triple, Naked Quarduple</item>
            <item>Naked Pair (+), Naked Triple (+), Naked Quarduple (+)</item>
            <item>Hidden Pair, Hidden Triple, Hidden Quarduple</item>
            <item>Locked Pair, Locked Triple</item>
            </list>
            </para>
            <para>The default value is <see langword="false"/>.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsAlmostLockedSets">
            <summary>
            Indicates whether the corresponding technique of the current step is an Almost Locked Sets
            (ALS in abbreviation).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsChaining">
            <summary>
            Indicates whether the corresponding technique of the current step is a chain. The chain techiques are:
            <list type="bullet">
            <item>
            Wings
            <list type="bullet">
            <item><see cref="!:#">Regular wings</see> (XY-Wing, XYZ-Wing, WXYZ-Wing, etc.)</item>
            <item>
            <see cref="!:#">Irregular wings</see>
            (W-Wing, M-Wing, Split-Wing, Local-Wing, Hybrid-Wing)
            </item>
            </list>
            </item>
            <item>
            Short chains
            <list type="bullet">
            <item>
            <see cref="!:#">Two strong links</see>
            (Skyscraper, Two-string kite, Turbot fish)
            </item>
            <item>
            ALS chaining-like techniques
            (<see cref="!:#">ALS-XZ</see>,
            <see cref="!:#">ALS-XY-Wing</see>,
            <see cref="!:#">ALS-W-Wing</see>)
            </item>
            <item><see cref="!:#">Empty rectangle</see></item>
            </list>
            </item>
            <item>
            Long chains
            <list type="bullet">
            <item><see cref="!:#">Forcing chains</see></item>
            <item><see cref="!:#">Dynamic forcing chains</see></item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.IsDeadlyPattern">
            <summary>
            Indicates whether the corresponding technique of the current step is a deadly pattern.
            The deadly pattern techniques are:
            <list type="bullet">
            <item>
            Bi-value patterns
            <list type="bullet">
            <item><see cref="!:#">Unique rectangle</see> (i.e. Uniqueness test)</item>
            <item><see cref="!:#">Unique loop</see></item>
            <item><see cref="!:#">Bi-value universal grave</see></item>
            </list>
            </item>
            <item>
            Multi-value patterns
            <list type="bullet">
            <item><see cref="!:#">Extended rectangle</see></item>
            <item><see cref="!:#">Unique square</see></item>
            <item><see cref="!:#">Borescoper's deadly pattern</see></item>
            <item><see cref="!:#">Qiu's deadly pattern</see></item>
            </list>
            </item>
            <item>
            Other deadly patterns
            <list type="bullet">
            <item><see cref="!:#">Reverse bi-value universal grave</see></item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Name">
            <summary>
            Indicates the technique name. The default value is in the resource dictionary.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Format">
            <summary>
            Gets the format of the current instance.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> result. If the resource dictionary doesn't contain
            any valid formats here, the result value will be <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            A <b>format</b> is the better way to format the result text of this technique information instance,
            It'll be represented by the normal characters and the placeholders, e.g.
            <code>
            <![CDATA["{Name}: Cells {CellsStr} => {ElimsStr}"]]>
            </code>
            Here the string result <b>shouldn't</b> be with the leading <c>'$'</c> character, because this is a
            format string, rather than a interpolated string.
            </para>
            <para>
            Here the property <c>Name</c>, <c>CellsStr</c> and <c>ElimsStr</c> should be implemented before
            the property invoked, you should creates those 3 properties, returns the corresponding correct string
            result, makes them <see langword="private"/> or <see langword="protected"/> and marks the attribute
            <see cref="T:Sudoku.Solving.Manual.Text.FormatItemAttribute"/> to help the code analyzer (if the code analyzer is available).
            The recommended implementation pattern is:
            <code><![CDATA[
            [FormatItem]
            private string CellsStr
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => Cells.ToString();
            }
            ]]></code>
            You can use the code snippet <c>fitem</c> to create the pattern, whose corresponding file is added
            into the <c>required/vssnippets</c> folder. For more information, please open the markdown file
            <see href="#">README.md</see> in the <c>required</c> folder to learn more information.
            </para>
            <para>
            Because this property will get the value from the resource dictionary, the property supports
            multiple language switching, which is better than the normal methods <see cref="M:Sudoku.Solving.Manual.Step.ToString"/>
            and <see cref="M:Sudoku.Solving.Manual.Step.ToFullString"/>. Therefore, this property is the substitution plan of those two methods.
            </para>
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Step.ToString"/>
            <seealso cref="M:Sudoku.Solving.Manual.Step.ToFullString"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Difficulty">
            <summary>
            The difficulty or this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.TechniqueCode">
            <summary>
            The technique code of this instance used for comparison
            (e.g. search for specified puzzle that contains this technique).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.TechniqueTags">
            <summary>
            The technique tags of this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.TechniqueGroup">
            <summary>
            The technique group that this technique instance belongs to.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.DifficultyLevel">
            <summary>
            The difficulty level of this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Stableness">
            <summary>
            Indicates the stableness of this technique. The default value is <see cref="F:Sudoku.Solving.Manual.Stableness.Stable"/>.
            </summary>
            <seealso cref="F:Sudoku.Solving.Manual.Stableness.Stable"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.Rarity">
            <summary>
            Indicates the rarity of this technique appears.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Step.ElimStr">
            <summary>
            Indicates the string representation of the conclusions.
            </summary>
            <remarks>
            Most of techniques uses eliminations
            so this property is named <c>ElimStr</c>. In other words, if the conclusion is an assignment one,
            the property will still use this name rather than <c>AssignmentStr</c>.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ApplyTo(Sudoku.Data.Grid@)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.HasTag(Sudoku.Techniques.TechniqueTags)">
            <summary>
            Determine whether the current step information instance with the specified flags.
            </summary>
            <param name="flags">
            The flags. If the argument contains more than one set bit, all flags will be checked
            one by one.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ToString">
            <summary>
            Returns a string that only contains the name and the basic information.
            </summary>
            <returns>The string instance.</returns>
            <remarks>
            This method uses <see langword="sealed"/> and <see langword="override"/> modifiers
            to prevent the compiler overriding the method; in additional, the default behavior is changed to
            output as the method <see cref="M:Sudoku.Solving.Manual.Step.Formatize(System.Boolean)"/> invoking.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Manual.Step.Formatize(System.Boolean)"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ToSimpleString">
            <summary>
            Returns a string that only contains the name and the conclusions.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.ToFullString">
            <summary>
            Returns a string that contains the name, the conclusions and its all details.
            This method is used for displaying details in text box control.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Step.Formatize(System.Boolean)">
            <summary>
            Formatizes the <see cref="P:Sudoku.Solving.Manual.Step.Format"/> property string and output the result.
            </summary>
            <param name="handleEscaping">Indicates whether the method will handle the escaping characters.</param>
            <returns>The result string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the format is invalid. The possible cases are:
            <list type="bullet">
            <item>The format is <see langword="null"/>.</item>
            <item>The interpolation part contains the empty value.</item>
            <item>Missing the closed brace character <c>'}'</c>.</item>
            <item>The number of interpolations failed to match.</item>
            </list>
            </exception>
            <seealso cref="P:Sudoku.Solving.Manual.Step.Format"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.StepsGatherer">
            <summary>
            Defines a steps gatherer.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.StepsGatherer.Search(Sudoku.Data.Grid@,System.Threading.CancellationToken)">
            <summary>
            Search for all possible steps in a grid.
            </summary>
            <param name="puzzle">The puzzle grid.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The result grouped by technique names.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="P:Sudoku.Solving.Manual.StepsGatherer.OnlyShowSameLevelTechniquesInFindAllSteps">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Fishes.FishStep">
            <summary>
            Provides with a step that is a <b>Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSetsMask">Indicates the mask that contains the base sets.</param>
            <param name="CoverSetsMask">Indicates the mask that contains the cover sets.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Fishes.FishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSetsMask">Indicates the mask that contains the base sets.</param>
            <param name="CoverSetsMask">Indicates the mask that contains the cover sets.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.FishStep.Size">
            <summary>
            Indicates the size of this fish instance.
            </summary>
            <remarks>
            The name of the corresponding names are:
            <list type="table">
            <item>
            <term>2</term>
            <description>X-Wing</description>
            </item>
            <item>
            <term>3</term>
            <description>Swordfish</description>
            </item>
            <item>
            <term>4</term>
            <description>Jellyfish</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.FishStep.Rank">
            <summary>
            Indicates the rank of the fish.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.FishStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.FishStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Fishes.FishStep.GetComplexFishTechniqueCodeFromName(System.String)">
            <summary>
            Try to get the <see cref="T:Sudoku.Techniques.Technique"/> code instance from the specified name, where the name belongs
            to a complex fish name, such as "Finned Franken Swordfish".
            </summary>
            <param name="name">The name.</param>
            <returns>The <see cref="T:Sudoku.Techniques.Technique"/> code instance.</returns>
            <seealso cref="T:Sudoku.Techniques.Technique"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep">
            <summary>
            Provides with a step that is an <b>Normal Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Fins">Indicates the fins.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is a sashimi fish. All possible values are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish is a normal fish without any fins.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32,System.Int32,Sudoku.Data.Cells@,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is an <b>Normal Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Fins">Indicates the fins.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is a sashimi fish. All possible values are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish is a normal fish without any fins.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Fishes.NormalFishStep.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Intersections.IntersectionStep">
            <summary>
            Provides with a step that is an <b>Intersection</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Intersections.IntersectionStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@)">
            <summary>
            Provides with a step that is an <b>Intersection</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.IntersectionStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.IntersectionStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep">
            <summary>
            Provides with a step that is a <b>Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSet">Indicates the region that the current locked candidates forms.</param>
            <param name="CoverSet">Indicates the region that the current locked candidates influences.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSet">Indicates the region that the current locked candidates forms.</param>
            <param name="CoverSet">Indicates the region that the current locked candidates influences.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.IsSstsStep">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Intersections.LockedCandidatesStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.SingleDigitPatternStep">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.SingleDigitPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.SingleDigitPatternStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.SingleDigitPatternStep.IsSstsStep">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.SingleDigitPatternStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.SingleDigitPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.SingleDigitPatternStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.TwoStrongLinksStep">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseRegion">Indicates the base region used.</param>
            <param name="TargetRegion">Indicates the target region used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.TwoStrongLinksStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseRegion">Indicates the base region used.</param>
            <param name="TargetRegion">Indicates the target region used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.TwoStrongLinksStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.TwoStrongLinksStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.TwoStrongLinksStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.TwoStrongLinksStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.SingleDigitPatterns.TwoStrongLinksStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Singles.FullHouseStep">
            <summary>
            Provides with a step that is a <b>Full House</b> technique.
            </summary>
            <param name="Cell"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Singles.FullHouseStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Full House</b> technique.
            </summary>
            <param name="Cell"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.FullHouseStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.FullHouseStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.FullHouseStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Singles.HiddenSingleStep">
            <summary>
            Provides with a step that is a <b>Hidden Single</b> or <b>Last Digit</b> (for special cases) technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Region">Indicates the region used.</param>
            <param name="EnableAndIsLastDigit">
            Indicates whether the current step is a <b>Last Digit</b> technique usage.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Singles.HiddenSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Hidden Single</b> or <b>Last Digit</b> (for special cases) technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Region">Indicates the region used.</param>
            <param name="EnableAndIsLastDigit">
            Indicates whether the current step is a <b>Last Digit</b> technique usage.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.HiddenSingleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.HiddenSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.HiddenSingleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.HiddenSingleStep.Format">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Singles.NakedSingleStep">
            <summary>
            Provides with a step that is a <b>Naked Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Singles.NakedSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Naked Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.NakedSingleStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.NakedSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.NakedSingleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Singles.SingleStep">
            <summary>
            Provides with a step that is a <b>Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell">Indicates the cell used.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Singles.SingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell">Indicates the cell used.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.SingleStep.IsSstsStep">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.SingleStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.SingleStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.SingleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.SingleStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Singles.SingleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Subsets.HiddenSubsetStep">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Subsets.HiddenSubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.HiddenSubsetStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.HiddenSubsetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Subsets.NakedSubsetStep">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="IsLocked">
            Indicates which locked type this subset is. The cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a locked subset.</description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a naked subset with at least one extra locked candidate.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The subset is a normal naked subset without any extra locked candidates.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Subsets.NakedSubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,Sudoku.Data.Cells@,System.Int16,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="IsLocked">
            Indicates which locked type this subset is. The cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a locked subset.</description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a naked subset with at least one extra locked candidate.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The subset is a normal naked subset without any extra locked candidates.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.NakedSubsetStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.NakedSubsetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep">
            <summary>
            Provides with a step that is a <b>Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="DigitsMask">The maks that contains all digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,Sudoku.Data.Cells@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Region">The region that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="DigitsMask">The maks that contains all digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.IsSstsStep">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.Size">
            <summary>
            Indicates the size of the subset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Subsets.SubsetStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep">
            <summary>
            Provides with a step that is a <b>Regular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pivot">Indicates the cell that blossomed its petals.</param>
            <param name="PivotCandidatesCount">Indicates the number of digits in the pivot cell.</param>
            <param name="DigitsMask">Indicates a mask that contins all digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@,System.Int32,System.Int32,System.Int16,Sudoku.Data.Cells@)">
            <summary>
            Provides with a step that is a <b>Regular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pivot">Indicates the cell that blossomed its petals.</param>
            <param name="PivotCandidatesCount">Indicates the number of digits in the pivot cell.</param>
            <param name="DigitsMask">Indicates a mask that contins all digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.IsIncomplete">
            <summary>
            Indicates whether the structure is incomplete.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.Size">
            <summary>
            Indicates the size of this regular wing.
            </summary>
            <remarks>
            All names are:
            <list type="table">
            <item>
            <term>2</term>
            <description>XY-Wing</description>
            </item>
            <item>
            <term>3</term>
            <description>XYZ-Wing</description>
            </item>
            <item>
            <term>4</term>
            <description>WXYZ-Wing</description>
            </item>
            <item>
            <term>5</term>
            <description>VWXYZ-Wing</description>
            </item>
            <item>
            <term>6</term>
            <description>UVWXYZ-Wing</description>
            </item>
            <item>
            <term>7</term>
            <description>TUVWXYZ-Wing</description>
            </item>
            <item>
            <term>8</term>
            <description>STUVWXYZ-Wing</description>
            </item>
            <item>
            <term>9</term>
            <description>RSTUVWXYZ-Wing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.Regular.RegularWingStep.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Steps.Wings.WingStep">
            <summary>
            Provides with a step that is a <b>Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Steps.Wings.WingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Data.Conclusion}@,System.Collections.Immutable.ImmutableArray{Sudoku.Models.PresentationData}@)">
            <summary>
            Provides with a step that is a <b>Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.WingStep.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.WingStep.IsSstsStep">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.WingStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.WingStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.WingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.WingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Steps.Wings.WingStep.Stableness">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Text.FormatItemAttribute">
            <summary>
            Marks on a property to tell the user the property is only used for the formatting.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.WrongStepException">
            <summary>
            Indicates an error that throws when a solving step is wrong (may be due to wrong algorithm, bug, etc.).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.#ctor(Sudoku.Data.Grid@,Sudoku.Solving.Manual.Step)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Manual.WrongStepException"/> with the specified invalid grid and the wrong step.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
            <param name="wrongStep">The wrong step.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.InvalidPuzzle">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.WrongStepException.WrongStep">
            <summary>
            Indicates the wrong step.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.WrongStepException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.SolverResultFormattingOptions">
            <summary>
            Indicates the formatting options of <see cref="T:Sudoku.Solving.ISolverResult"/> instance.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.None">
            <summary>
            Indicates the none of the formatting option.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowSeparators">
            <summary>
            Indicates the analysis result will append separators.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowStepLabel">
            <summary>
            Indicates the analysis result will append the step label.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowSimple">
            <summary>
            Indicates the analysis result will use simple mode to show steps.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowBottleneck">
            <summary>
            Indicates the analysis result will show the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowDifficulty">
            <summary>
            Indicates the analysis result will show the difficulty.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowStepsAfterBottleneck">
            <summary>
            Indicates the analysis result will show all steps after the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowAttributes">
            <summary>
            Indicates the analysis result will append the attributes of the grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowBackdoors">
            <summary>
            Indicates the analysis result will append the backdoors of the grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowStepDetail">
            <summary>
            Indicates the analysis result will show the step detail.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.SolverResultFormattingOptions.ShowSteps">
            <summary>
            Indicates the analysis result will show the steps.
            </summary>
        </member>
    </members>
</doc>
