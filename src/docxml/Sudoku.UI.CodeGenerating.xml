<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.UI.CodeGenerating</name>
    </assembly>
    <members>
        <member name="T:Sudoku.UI.CodeGenerating.ControlRouting">
            <summary>
            Indicates a routing method that makes the UI control and a preference item become a relation.
            </summary>
            <param name="context">The source generator context on generating source code.</param>
            <param name="propertyName">The property name of the preference item.</param>
            <param name="ctorArgs">The constructor arguments in attribute.</param>
            <param name="namedArgs">The named arguments in attribute.</param>
            <param name="controlName">The control name bound.</param>
        </member>
        <member name="T:Sudoku.UI.CodeGenerating.FormatOptions">
            <summary>
            Provides the format options.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CodeGenerating.FormatOptions.TypeFormat">
            <summary>
            Indicates the type format.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CodeGenerating.FormatOptions.PropertyTypeFormat">
            <summary>
            Indicates the property format. Sometimes the option can also be used on field member symbol output.
            </summary>
        </member>
        <member name="T:Sudoku.UI.CodeGenerating.PreferenceItemRouteAttribute">
            <summary>
            Defines an attribute that marks onto a preference item, to tell the source generator
            that the preference item is bound with a <c>ToggleSwitch</c>, and creates a method
            that delegated to the XAML file.
            </summary>
            <remarks>
            <para>
            For example, in the type <c>Preference</c> we can find many properties
            that can both be settable and gettable. If I mark this attribute onto one property such as:
            <code><![CDATA[
            [PreferenceItemRoute("ToggleSwitch_UseSizedFishName", "OptionItem_UseSizedFishName")]
            public bool UseSizedFishName { get; set; } = false;
            ]]></code>
            Then we will get the delegated method:
            <code><![CDATA[
            private void ToggleSwitch_UseSizedFishName_Toggled(object sender, RoutedEventArgs e)
            {
                if (sender is ToggleSwitch { IsOn: var isOn } && _pageIsInitialized)
                {
                    _boundSteps.Add(new(OptionItem_UseSizedFishName, () => _preference.UseSizedFishName = isOn));
                }
            }
            ]]></code>
            Where the field <c>_preference</c>, <c>_boundSteps</c> and <c>_pageIsInitialized</c>
            you can find them in the <c>SettingsPage</c>.
            </para>
            <para>
            Please note that the method is a <see langword="private partial"/> method,
            which means you must manually write the declaration into the type.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.UI.CodeGenerating.PreferenceItemRouteAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.CodeGenerating.PreferenceItemRouteAttribute"/> instance with the specified control name.
            </summary>
            <param name="controlName">The bound control name.</param>
            <param name="effectControlName">Indicates the effect control name.</param>
        </member>
        <member name="P:Sudoku.UI.CodeGenerating.PreferenceItemRouteAttribute.ControlName">
            <summary>
            Indicates the bound control name.
            </summary>
        </member>
        <member name="P:Sudoku.UI.CodeGenerating.PreferenceItemRouteAttribute.EffectControlName">
            <summary>
            Indicates the effect control name.
            </summary>
        </member>
        <member name="P:Sudoku.UI.CodeGenerating.PreferenceItemRouteAttribute.PreferenceSetterMethodName">
            <summary>
            Indicates the method name that executes the code, to assign the result.
            </summary>
        </member>
        <member name="T:Sudoku.UI.CodeGenerating.UIPreferenceItemRouteGenerator">
            <summary>
            Defines a source generator that generates the code for UI preference item.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CodeGenerating.UIPreferenceItemRouteGenerator._routers">
            <summary>
            Indicates the routers.
            </summary>
        </member>
        <member name="M:Sudoku.UI.CodeGenerating.UIPreferenceItemRouteGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.CodeGenerating.UIPreferenceItemRouteGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.UI.CodeGenerating.Version">
            <summary>
            Encapsulates the version values.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CodeGenerating.Version.CurrentVersion">
            <summary>
            Indicates the current version.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <param name="encoding">The encoding.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
