<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.CodeGenerating</name>
    </assembly>
    <members>
        <member name="T:Sudoku.CodeGenerating.AutoDeconstructAttribute">
            <summary>
            Allows the type can be deconstructed to multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.AutoDeconstructAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified member list.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoDeconstructAttribute.FieldOrPropertyList">
            <summary>
            All members to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.AutoDeconstructExtensionAttribute`1">
            <summary>
            Used on an assembly, to tell the compiler this assembly will generate a serial of extension methods called
            <c>Deconstruct</c> that used for deconstruction of an instance.
            </summary>
            <remarks>
            <para>
            For example, if you write the code like:
            <code><![CDATA[[assembly: AutoDeconstructExtension<Class>(nameof(Class.A), nameof(Class.B), nameof(Class.C))]]]></code>
            then you'll get the generated code:
            <code><![CDATA[
            public static partial class ClassExtensions
            {
                [CompilerGenerated, MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static void Deconstruct(this Class @this, out int a, out int b, out int c)
                {
                    a = @this.A;
                    b = @this.B;
                    c = @this.C;
                }
            }
            ]]></code>
            </para>
            <para>
            Please note that this attribute is a generic attribute, which is introduced in C# 10.
            If you don't know this feature (generic attribute), please visit
            <see href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/generic-attributes.md">
            this link
            </see>
            for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.CodeGenerating.AutoDeconstructExtensionAttribute`1.#ctor(System.String[])">
            <summary>
            Initializes an <see cref="T:Sudoku.CodeGenerating.AutoDeconstructAttribute"/> instance with the members.
            </summary>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoDeconstructExtensionAttribute`1.Namespace">
            <summary>
            Indicates the namespace that the output extension class stored. If the value is
            <see langword="null"/>, the namespace will use the basic namespace of the type itself.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoDeconstructExtensionAttribute`1.MemberNames">
            <summary>
            Indicates the member names.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.AutoEqualityAttribute">
            <summary>
            Indicates an attribute to mark a type, to indicate the type will be generated a default method
            called <c>Equals</c>.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.AutoEqualityAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified members.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoEqualityAttribute.FieldOrPropertyList">
            <summary>
            Indicates the field of property list.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.AutoFormattableAttribute">
            <summary>
            To mark on a type, to tell the user and the compiler that the source generator
            should automatically generate the <c>ToString</c> methods
            <see cref="M:System.Object.ToString"/> and <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>.
            </summary>
            <seealso cref="M:System.Object.ToString"/>
            <seealso cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="T:Sudoku.CodeGenerating.AutoGetEnumeratorAttribute">
            <summary>
            To mark on a type, to tell the compiler that the compiler will automatically generate
            <c>GetEnumerator</c> methods for that type.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.AutoGetEnumeratorAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified member name.
            </summary>
            <param name="memberName">
            The member name. If you want to pass "this" as the reference, just input "<c>@</c>".
            </param>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoGetEnumeratorAttribute.MemberName">
            <summary>
            Indicates the member name.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoGetEnumeratorAttribute.MemberConversion">
            <summary>
            Indicates the member conversion that is used for creation of the enumerator.
            </summary>
            <remarks>
            <para>
            This property should be stored a lambda body. One of possible syntaxes is:
            <code><![CDATA[[AutoGetEnumerator(nameof(MemberName), "((IEnumerable<int>)@).*")]]]></code>
            Where:
            <list type="table">
            <item>
            <term>'<c>@</c>'</term>
            <description>Equivalent to the member.</description>
            </item>
            <item>
            <term>'<c>*</c>'</term>
            <description>Equivalent to the code <c>GetEnumerator()</c>.</description>
            </item>
            </list>
            </para>
            <para>
            The default conversion is "<c>@</c>".
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoGetEnumeratorAttribute.ExtraNamespaces">
            <summary>
            Indicates the extra namespace should be imported.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoGetEnumeratorAttribute.ReturnType">
            <summary>
            Indicates the return type. If <see langword="null"/>, the source generator will uses
            <see cref="T:System.Collections.IEnumerable"/>&lt;<see cref="T:System.Int32"/>&gt; as the return type to generate the code.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="T:Sudoku.CodeGenerating.AutoHashCodeAttribute">
            <summary>
            Indicates an attribute that marks a <see langword="class"/> or a <see langword="struct"/>
            that tells the compiler the type should generate a default <c>GetHashCode</c> method.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.AutoHashCodeAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified member list.
            </summary>
            <param name="dataMembers">The data members.</param>
        </member>
        <member name="P:Sudoku.CodeGenerating.AutoHashCodeAttribute.DataMembers">
            <summary>
            All members to generate.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.AutoPrimaryConstructorAttribute">
            <summary>
            Indicates the marked <see langword="class"/> should generate primary constructor automatically.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.CodeAnalyzerAttribute">
            <summary>
            To mark on a code analyzer type, to tell the compiler and the source generator that
            the type should generate the default values.
            </summary>
            <remarks>
            The supported diagnostic IDs should satisfy the follow condition:
            <list type="number">
            <item>The ID should be combined with 2 upper-case letters and 4 numbers.</item>
            <item>The upper-case letters should be <c>SS</c> or <c>SD</c>.</item>
            <item>
            If the diagnostic result should fade out the code, just apply the suffix <c>"F"</c>, such as
            <c>SS0101F</c>, where the suffix <c>"F"</c> is the abbreviation of the phrase "fade out".
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Sudoku.CodeGenerating.CodeAnalyzerAttribute.#ctor(System.String[])">
            <summary>
            Initializes a <see cref="T:Sudoku.CodeGenerating.CodeAnalyzerAttribute"/> class instance
            using the specified diagnostic ID list.
            </summary>
            <param name="supportedDiagnosticIdList">The supported diagnostic ID list.</param>
        </member>
        <member name="P:Sudoku.CodeGenerating.CodeAnalyzerAttribute.SupportedDiagnosticIdList">
            <summary>
            Indicates the supported diagnostic IDs.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.CodeFixProviderAttribute">
            <summary>
            To mark on a code fixer type, to tell the compiler and the source generator that
            generates the code for the code fix defaults.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.CodeFixProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.CodeGenerating.CodeFixProviderAttribute"/> class instance using the specified ID.
            </summary>
            <param name="supportedDiagnosticId">The ID of all supported diagnostic result.</param>
        </member>
        <member name="P:Sudoku.CodeGenerating.CodeFixProviderAttribute.SupportedDiagnosticId">
            <summary>
            Indicates the supported diagnostic ID.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.PrimaryConstructorIgnoredMemberAttribute">
            <summary>
            Indicates the member should be ignored while generating primary constructors.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.PrimaryConstructorIncludedMemberAttribute">
            <summary>
            Indicates the member should be included while generating primary constructors.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.ProxyEqualityAttribute">
            <summary>
            Indicates an attribute instance which is marked on a method,
            to tell the users and the compiler that this method is an equality
            method to judge whether two instances contain the same value.
            </summary>
            <remarks>
            Because of the limitation of the algorithm and the source generator, the method marked this
            attribute must be <see langword="static"/>. If you marks on a method
            that isn't a <see langword="static"/> method, the source generator will do nothing.
            </remarks>
        </member>
        <member name="T:Sudoku.CodeGenerating.Collections.Cells">
            <summary>
            Encapsulates a lightweight data structure that is same as the collection type <c>Sudoku.Data.Cells</c>.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Collections.Cells.Empty">
            <summary>
            <para>Indicates an empty instance (all bits are 0).</para>
            <para>
            I strongly recommend you <b>should</b> use this instance instead of default constructor
            <see cref="M:Sudoku.CodeGenerating.Collections.Cells.#ctor"/> and <see langword="default"/>(<see cref="T:Sudoku.CodeGenerating.Collections.Cells"/>).
            </para>
            </summary>
            <seealso cref="M:Sudoku.CodeGenerating.Collections.Cells.#ctor"/>
        </member>
        <member name="F:Sudoku.CodeGenerating.Collections.Cells.Shifting">
            <summary>
            The value used for shifting.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Collections.Cells.BlockOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Collections.Cells.RowOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Collections.Cells.ColumnOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Collections.Cells.Limit">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Collections.Cells._high">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.CodeGenerating.Collections.Cells._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.CodeGenerating.Collections.Cells._low"/> represents the lower 41 bits.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Collections.Cells._low">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.CodeGenerating.Collections.Cells._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.CodeGenerating.Collections.Cells._low"/> represents the lower 41 bits.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.#ctor(System.Int32*,System.Int32)">
            <summary>
            Initializes an instance with the candidate list specified as a pointer.
            </summary>
            <param name="cells">The pointer points to an array of elements.</param>
            <param name="length">The length of the array.</param>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.#ctor(System.Int32[])">
            <summary>
            Initializes an instance with the specified array of cells.
            </summary>
            <param name="cells">All cells.</param>
            <remarks>
            This constructor is defined after another constructor with
            <see cref="T:System.ReadOnlySpan`1"/> had defined. Although this constructor
            doesn't initialize something (use the other one instead),
            while initializing with the type <see cref="T:System.Int32"/>[], the compiler
            gives me an error without this constructor (ambiguity of two
            constructors). However, unfortunately, <see cref="T:System.ReadOnlySpan`1"/>
            doesn't implemented the interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes an instance with two binary values.
            </summary>
            <param name="high">Higher 40 bits.</param>
            <param name="low">Lower 41 bits.</param>
        </member>
        <member name="P:Sudoku.CodeGenerating.Collections.Cells.Count">
            <summary>
            Indicates the total number of cells where the corresponding
            value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Collections.Cells.Offsets">
            <summary>
            Indicates all cell offsets whose corresponding value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Collections.Cells.Item(System.Int32)">
            <summary>
            Get the cell offset at the specified position index.
            </summary>
            <param name="index">The index of position of all set bits.</param>
            <returns>
            This cell offset at the specified position index. If the value is invalid,
            the return value will be <c>-1</c>.
            </returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.Contains(System.Int32)">
            <summary>
            Determine whether the map contains the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.ToArray">
            <summary>
            Get all set cell offsets and returns them as an array.
            </summary>
            <returns>An array of all set cell offsets.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.Add(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> or <see langword="false"/> value.
            </summary>
            <param name="offset">
            The cell offset. This value can be positive and negative. If 
            negative, the offset will be assigned <see langword="false"/>
            into the corresponding bit position of its absolute value.
            </param>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.AddAnyway(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.AddRange(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Set the specified cells as <see langword="true"/> value.
            </summary>
            <param name="offsets">The cells to add.</param>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Set the specified cells as <see langword="true"/> value.
            </summary>
            <param name="offsets">The cells to add.</param>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.Remove(System.Int32)">
            <summary>
            Set the specified cell as <see langword="false"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
            <remarks>
            Different with <see cref="M:Sudoku.CodeGenerating.Collections.Cells.Add(System.Int32)"/>, this method <b>can't</b> receive
            the negative value as the parameter.
            </remarks>
            <seealso cref="M:Sudoku.CodeGenerating.Collections.Cells.Add(System.Int32)"/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.InternalAdd(System.Int32,System.Boolean)">
            <summary>
            The internal operation for adding a cell.
            </summary>
            <param name="cell">The cell to add into.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.op_OnesComplement(Sudoku.CodeGenerating.Collections.Cells@)">
            <summary>
            Reverse status for all cells, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="gridMap">The instance to negate.</param>
            <returns>The negative result.</returns>
            <remarks>
            While reversing the higher 40 bits, the unused bits will be fixed and never be modified the state,
            that is why using the code "<c><![CDATA[higherBits & 0xFFFFFFFFFFL]]></c>".
            </remarks>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.op_Subtraction(Sudoku.CodeGenerating.Collections.Cells@,Sudoku.CodeGenerating.Collections.Cells@)">
            <summary>
            Get a <see cref="T:Sudoku.CodeGenerating.Collections.Cells"/> that contains all <paramref name="left"/> instance
            but not in <paramref name="right"/> instance.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.op_BitwiseAnd(Sudoku.CodeGenerating.Collections.Cells@,Sudoku.CodeGenerating.Collections.Cells@)">
            <summary>
            Get all cells that two <see cref="T:Sudoku.CodeGenerating.Collections.Cells"/> instances both contain.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.op_BitwiseOr(Sudoku.CodeGenerating.Collections.Cells@,Sudoku.CodeGenerating.Collections.Cells@)">
            <summary>
            Get all cells from two <see cref="T:Sudoku.CodeGenerating.Collections.Cells"/> instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.op_ExclusiveOr(Sudoku.CodeGenerating.Collections.Cells@,Sudoku.CodeGenerating.Collections.Cells@)">
            <summary>
            Get all cells that only appears once in two <see cref="T:Sudoku.CodeGenerating.Collections.Cells"/> instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The symmetrical difference result.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Collections.Cells.op_Implicit(System.Int32[])~Sudoku.CodeGenerating.Collections.Cells">
            <summary>
            Implicit cast from <see cref="T:System.Int32"/>[] to <see cref="T:Sudoku.CodeGenerating.Collections.Cells"/>.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="T:Sudoku.CodeGenerating.Constants">
            <summary>
            Defines the constants used in this project.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.VersionValue">
            <summary>
            Indictaes the version of this project.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.Constants.FormatOptions">
            <summary>
            Provides the format options.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.FormatOptions.TypeFormat">
            <summary>
            Indicates the type format.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.FormatOptions.PropertyTypeFormat">
            <summary>
            Indicates the property format. Sometimes the option can also be used on field member symbol output.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts">
            <summary>
            Indicates the shortcuts for the generated files.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.AutoGetHashCode">
            <summary>
            Indicates the source generator is for auto get hash code.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.BitOperations_GetAllSets">
            <summary>
            Indicates the source generator is for bit operations get all sets.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.BitOperations_GetEnumerator">
            <summary>
            Indicates the source generator is for bit operations get enumerator.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.BitOperations_GetNextSet">
            <summary>
            Indicates the source generator is for bit operations get next set.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.BitOperations_ReverseBits">
            <summary>
            Indicates the source generator is for bit operations reverse bits.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.BitOperations_SetAt">
            <summary>
            Indicates the source generator is for bit operations set at.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.BitOperations_SkipSetBit">
            <summary>
            Indicates the source generator is for bit operations skip set bit.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.CodeAnalyzer">
            <summary>
            Indicates the source generator is for code analyzer.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.CodeFixer">
            <summary>
            Indicates the source generator is for code fixer.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.CoreConstants">
            <summary>
            Indicates the source generator is for core constants.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.DeconstructionMethod">
            <summary>
            Indicates the source generator is for deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.EqualsMethod">
            <summary>
            Indicates the source generator is for auto equals methods.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.ExtensionDeconstructionMethod">
            <summary>
            Indicates the source generator is for extension deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.FormattedMethods">
            <summary>
            Indicates the source generator is for auto format methods.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.GeneratedFileShortcuts.GetEnumeratorMethod">
            <summary>
            Indicates the source generator is for auto get enumerator methods.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.Constants.OperatorNames">
            <summary>
            Indicates the operator names.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.OperatorNames.Equality">
            <summary>
            Indicates the name of the <see langword="operator"/> <c>==</c>.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.OperatorNames.Inequality">
            <summary>
            Indicates the name of the <see langword="operator"/> <c>!=</c>.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.Constants.ProjectNames">
            <summary>
            Indicates the project names.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.ProjectNames.SystemExtensions">
            <summary>
            Indicates the project <c>SystemExtensions</c>.
            The project uses the namespace <c>System</c> to store types.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.ProjectNames.Core">
            <summary>
            Indicates the project <c>Sudouk.Core</c>.
            The project uses the namespace <c>Sudoku</c> to store types.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.ProjectNames.CodeAnalysis">
            <summary>
            Indicates the project <c>Sudoku.Diagnostics.CodeAnalysis</c>.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Constants.ProjectNames.Solving">
            <summary>
            Indicates the project <c>Sudoku.Solving</c>.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.AutoGetHashCodeGenerator">
            <summary>
            Indicates the generator that generates the code that overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <seealso cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.AutoGetHashCodeGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.AutoGetHashCodeGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.AutoGetHashCodeGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.AutoGetHashCodeGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.AutoGetHashCodeGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.BitOperationsGenerator">
            <summary>
            Indicates the generator that generates the code about extended methods of type <c>BitOperations</c>.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.G_GlobalFile">
            <summary>
            Generates the global file.
            </summary>
            <returns>The string text of the code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.G_GetAllSets(System.String)">
            <summary>
            Generates the file of the method <c>GetAllSets</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.G_GetEnumerator(System.String)">
            <summary>
            Generates the file of the method <c>GetEnumerator</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.G_GetNextSet(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>GetNextSet</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.G_ReverseBits(System.String,System.Int32)">
            <summary>
            Generates the file of the method <c>ReverseBits</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="size">The size of the type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.G_SetAt(System.String)">
            <summary>
            Generates the file of the method <c>SetAt</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.G_SkipSetBit(System.String)">
            <summary>
            Generates the file of the method <c>SkipSetBit</c>.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.LeadingText">
            <summary>
            Indicates the leading text.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.TrailingText">
            <summary>
            Indicates the trailing text.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.GetAllSetsTypes">
            <summary>
            Indicates the type names of the method <c>GetAllSets</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.GetEnumeratorTypes">
            <summary>
            Indicates the type names of the method <c>GetEnumerator</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.GetNextSetTypes">
            <summary>
            Indicates the type names of the method <c>NextSetTypes</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.ReverseBitsTypes">
            <summary>
            Indicates the type names of the method <c>ReverseBits</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.SetAtTypes">
            <summary>
            Indicates the type names of the method <c>SetAt</c> to be used.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.BitOperationsGenerator.SkipSetBitTypes">
            <summary>
            Indicates the type names of the method <c>SkipSetBit</c> to be used.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator">
            <summary>
            A generator that generates the code for code analyzer and fix defaults.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.CsvTableName">
            <summary>
            Indicates the name that stores the diagnostic information.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.InfoRegex">
            <summary>
            Indicates the regular expression for extraction of the information.
            The regular expression is <c><![CDATA[(?<=\(")[A-Za-z]{2}\d{4}(?="\))]]></c>.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.Cut(System.String)">
            <summary>
            Cut the diagnostic ID and get the base ID part. This method will remove the suffix <c>"F"</c>
            if exists.
            </summary>
            <param name="id">The diagnostic ID.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.GetWhetherFadingOutTag(System.String)">
            <summary>
            Get the raw code when the ID contains the suffix <c>"F"</c>.
            </summary>
            <param name="id">The diagnostic ID.</param>
            <returns>The raw code for representing the option of fading out the code.</returns>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.GetDescription(System.String[][],System.String)">
            <summary>
            Get the description of from the split result.
            </summary>
            <param name="info">The info.</param>
            <param name="id">The diagnostic ID.</param>
            <returns>The description.</returns>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.SyntaxReceiver">
            <summary>
            Defines a syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CodeAnalyzerOrFixerDefaultsGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.CoreConstantsGenerator">
            <summary>
            Encapsulates a source generator that generates the source code for the constants initialization
            that is in the project <c>Sudoku.Core</c>.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.CoreConstantsGenerator.IntersectionBlockCoreValues">
            <summary>
            The table that used for the table <c>IntersectionBlockTable</c>.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.CoreConstantsGenerator.BlockTable">
            <summary>
            The block table.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.CoreConstantsGenerator.RowTable">
            <summary>
            The row table.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.CoreConstantsGenerator.ColumnTable">
            <summary>
            The column table.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CoreConstantsGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.CoreConstantsGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator">
            <summary>
            Provides a generator that generates the deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator.KeywordsToBclNames">
            <summary>
            Indicates the collection that stores the conversion relations from type keywords to their BCL names.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator.GetMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Try to get all possible fields or properties in the specified type.
            </summary>
            <param name="typeSymbol">The specified symbol.</param>
            <param name="attributeSymbol">The attribute symbol to check.</param>
            <param name="handleRecursively">
            A <see cref="T:System.Boolean"/> value indicating whether the method will handle the type recursively.
            </param>
            <returns>The result list that contains all member symbols.</returns>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.DeconstructMethodGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.DiagnosticInfoGenerator">
            <summary>
            Indicates the generator that generates the diagnostic information used in code analysis.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.DiagnosticInfoGenerator.CsvTableName">
            <summary>
            Indicates the name that stores the diagnostic information.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.DiagnosticInfoGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.DiagnosticInfoGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.EqualsMethodGenerator">
            <summary>
            Indicates the generator that generates the methods about the equality checking. The methods below
            will be generated:
            <list type="bullet">
            <item><c>bool Equals(object? obj)</c></item>
            <item><c>bool Equals(T comparer)</c></item>
            <item><c>bool ==(T left, T right)</c></item>
            <item><c>bool !=(T left, T right)</c></item>
            </list>
            </summary>
            <remarks>
            Please note that if the type is a <see langword="ref struct"/>, the first one won't be generated
            because this method is useless in the by-ref-like types.
            </remarks>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.EqualsMethodGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.EqualsMethodGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.EqualsMethodGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.EqualsMethodGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.EqualsMethodGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.ExtensionDeconstructMethodGenerator">
            <summary>
            Provides a generator that generates the deconstruction methods that are extension methods.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.ExtensionDeconstructMethodGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.ExtensionDeconstructMethodGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.FormattableMethodsGenerator">
            <summary>
            Defines a source generator that generates the code for <c>ToString</c> methods. The methods below
            will be generated:
            <list type="bullet">
            <item><c>string ToString()</c></item>
            <item><c>string ToString(string? format)</c></item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.FormattableMethodsGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.FormattableMethodsGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.FormattableMethodsGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.FormattableMethodsGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.FormattableMethodsGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.GetEnumeratorGenerator">
            <summary>
            Indicates a source generator that generates the code for the method <c>GetEnumerator</c>.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.GetEnumeratorGenerator.Replacements">
            <summary>
            All possible replacements.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.GetEnumeratorGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.GetEnumeratorGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.GetEnumeratorGenerator.SyntaxReceiver">
            <summary>
            Indicates the inner syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.GetEnumeratorGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.GetEnumeratorGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.KeyedTupleGenerator">
            <summary>
            Define a keyed tuple generator.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.KeyedTupleGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.KeyedTupleGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator">
            <summary>
            Indicates a generator that generates primary constructors for <see langword="class"/>es
            when they're marked <see cref="T:Sudoku.CodeGenerating.AutoPrimaryConstructorAttribute"/>.
            </summary>
            <remarks>
            This generator can <b>only</b> support non-nested <see langword="class"/>es.
            </remarks>
            <seealso cref="T:Sudoku.CodeGenerating.AutoPrimaryConstructorAttribute"/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.GetMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Try to get all possible fields or properties in the specified <see langword="class"/> type.
            </summary>
            <param name="type">The specified class symbol.</param>
            <param name="handleRecursively">
            A <see cref="T:System.Boolean"/> value indicating whether the method will handle the type recursively.</param>
            <param name="attributeSymbol">
            Indicates the attribute symbol of attribute <see cref="T:Sudoku.CodeGenerating.AutoPrimaryConstructorAttribute"/>.
            </param>
            <param name="addAttributeSymbol">
            Indicates the attribute symbol of attribute <see cref="T:Sudoku.CodeGenerating.PrimaryConstructorIncludedMemberAttribute"/>.
            </param>
            <param name="removeAttributeSymbol">
            Indicates the attribute symbol of attribute <see cref="T:Sudoku.CodeGenerating.PrimaryConstructorIgnoredMemberAttribute"/>.
            </param>
            <returns>The result list that contains all member symbols.</returns>
            <seealso cref="T:Sudoku.CodeGenerating.AutoPrimaryConstructorAttribute"/>
            <seealso cref="T:Sudoku.CodeGenerating.PrimaryConstructorIncludedMemberAttribute"/>
            <seealso cref="T:Sudoku.CodeGenerating.PrimaryConstructorIgnoredMemberAttribute"/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.SymbolInfo">
            <summary>
            Indicates the inner member symbol information quadruple.
            </summary>
            <param name="Type">Indicates the type name.</param>
            <param name="ParameterName">Indicates the parameter name.</param>
            <param name="Name">Indicates the name.</param>
            <param name="Attributes">Indicates all attributes that the type has marked.</param>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.SymbolInfo.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.AttributeData})">
            <summary>
            Indicates the inner member symbol information quadruple.
            </summary>
            <param name="Type">Indicates the type name.</param>
            <param name="ParameterName">Indicates the parameter name.</param>
            <param name="Name">Indicates the name.</param>
            <param name="Attributes">Indicates all attributes that the type has marked.</param>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.SyntaxReceiver.CandidateClasses">
            <summary>
            Indicates all possible candidate <see langword="class"/>es used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.PrimaryConstructorGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.ProxyEqualsMethodGenerator">
            <summary>
            Indicates a generator that generates the code about the equality method.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.ProxyEqualsMethodGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.ProxyEqualsMethodGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.ProxyEqualsMethodGenerator.SyntaxReceiver">
            <summary>
            Indicates the inner syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.ProxyEqualsMethodGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates the result types.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.ProxyEqualsMethodGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.RefStructDefaultImplGenerator">
            <summary>
            Indicates the generator that generates the default overriden methods in a <see langword="ref struct"/>.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.RefStructDefaultImplGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.RefStructDefaultImplGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.RefStructDefaultImplGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGenerating.Generators.RefStructDefaultImplGenerator.SyntaxReceiver.Types">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.RefStructDefaultImplGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.ResourceDictionaryGenerator">
            <summary>
            Indicates the source generator that generates the code for the resource dictionary.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Generators.ResourceDictionaryGenerator.Regex">
            <summary>
            Indicates the regular expression to match a key.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.ResourceDictionaryGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.ResourceDictionaryGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Generators.StepInfoFormatizeGenerator">
            <summary>
            Indicates the source generator that generates the code about the attributes to mark onto
            the method <c>Formatize</c> in the type <c>StepInfo</c>.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.StepInfoFormatizeGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGenerating.Generators.StepInfoFormatizeGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGenerating.Reflection.Accessibility">
            <summary>
            Indicates the accessibility of a member.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Reflection.Accessibility.None">
            <summary>
            Indicates the accessibility is none.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Reflection.Accessibility.Public">
            <summary>
            Indicates the <see langword="public"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Reflection.Accessibility.Internal">
            <summary>
            Indicates the <see langword="internal"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Reflection.Accessibility.Protected">
            <summary>
            Indicates the <see langword="protected"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Reflection.Accessibility.ProtectedInternal">
            <summary>
            Indicates the <see langword="protected internal"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Reflection.Accessibility.Private">
            <summary>
            Indicates the <see langword="private"/> modifier.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGenerating.Reflection.Accessibility.PrivateProtected">
            <summary>
            Indicates the <see langword="private protected"/> modifier.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AttributeDataExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.AttributeData"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.AttributeData"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AttributeDataExtensions.TryGetNamedArgument(Microsoft.CodeAnalysis.AttributeData,System.String,Microsoft.CodeAnalysis.TypedConstant@)">
            <summary>
            Try to get the named argument using the specified name.
            </summary>
            <param name="this">The attribute data instance.</param>
            <param name="namedArg">The named argument name.</param>
            <param name="result">The result got.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether the operation is successful.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CompilationExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.Compilation"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.Compilation"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CompilationExtensions.GetTypeByMetadataName``1(Microsoft.CodeAnalysis.Compilation)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Compilation.GetTypeByMetadataName(System.String)"/>
            <typeparam name="T">The type of the metadata type name to construct.</typeparam>
            <param name="this">The compilation.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntaxExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntaxExtensions.IsNameOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            To check whether the specified expression is a <see langword="nameof"/> expression.
            </summary>
            <param name="this">The expression node to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.IsNotInProject(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String[])">
            <summary>
            To check whether the context isn't executed on the specified projects.
            </summary>
            <param name="this">The context.</param>
            <param name="projectNames">The project names to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>,
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <param name="encoding">The encoding.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorInitializationContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorInitializationContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorInitializationContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorInitializationContextExtensions.FastRegister``1(Microsoft.CodeAnalysis.GeneratorInitializationContext@)">
            <summary>
            Fast invokes the method
            <see cref="M:Microsoft.CodeAnalysis.GeneratorInitializationContext.RegisterForSyntaxNotifications(Microsoft.CodeAnalysis.SyntaxReceiverCreator)"/>.
            </summary>
            <typeparam name="TSyntaxReceiver">The type of the syntax receiver.</typeparam>
            <param name="this">The current initialization context.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorInitializationContext.RegisterForSyntaxNotifications(Microsoft.CodeAnalysis.SyntaxReceiverCreator)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetTypeKindString(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get the type kind string.
            </summary>
            <param name="this">The symbol.</param>
            <returns>The type kind string.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.MemberShouldAppendReadOnly(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Indicates whether the member should append <see langword="readonly"/> modifier.
            </summary>
            <param name="this">The type symbol.</param>
            <param name="checkNotRefStruct">
            Indicates whether the method should check whether the type is a <see langword="ref struct"/>
            and not a <see langword="ref struct"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.MemberShouldAppendIn(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Indicates whether the member should append <see langword="in"/> modifier.
            </summary>
            <param name="this">The type symbol.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.DeconstructInfo(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            Get the detail information that represented as <see cref="T:System.String"/> values.
            </summary>
            <param name="this">The symbol.</param>
            <param name="checkNotRefStruct">
            Indicates whether the method will check whether the type is a <see langword="ref struct"/>.
            </param>
            <param name="fullTypeName">The full type name.</param>
            <param name="namespaceName">The namespace name.</param>
            <param name="genericParametersList">
            The generic parameter list. The type parameter constraint will also include,
            e.g. <c><![CDATA[Namespace.TypeName<T> where T : class?]]></c>.
            </param>
            <param name="genericParametersListWithoutConstraint">
            The generic parameter list without type parameter constraint,
            e.g. <c><![CDATA[Namespace.TypeName<T>]]></c>.
            </param>
            <param name="typeKind">The type kind, e.g. <c>struct</c>.</param>
            <param name="readonlyKeyword">The read-only keyword on members.</param>
            <param name="isGeneric">Indicates whether the type is a generic type.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.CheckAnyTypeArgumentIsMarked``1(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            <para>
            Check all type arguments recursively whether any types are marked specified attribute type.
            </para>
            <para>
            This method will check all type arguments for this type symbol.
            For example, if the type symbol is like this:
            <code><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></code>
            this method will check those parts:
            <list type="bullet">
            <item><c><![CDATA[IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<int>>>]]></c></item>
            <item><c>string</c></item>
            <item><c><![CDATA[IReadOnlyList<IReadOnlyList<int>>]]></c></item>
            <item><c><![CDATA[IReadOnlyList<int>]]></c></item>
            <item><c>int</c></item>
            </list>
            </para>
            </summary>
            <typeparam name="TAttribute">The type of the attribute to check.</typeparam>
            <param name="symbol">The symbol to check.</param>
            <param name="compilation">The compilation.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>
            The type symbol contains a argument that is marked <typeparamref name="TAttribute"/>.
            </description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>All type arguments aren't marked <typeparamref name="TAttribute"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetBaseTypes(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get all base types of this instance.
            </summary>
            <param name="this">The type.</param>
            <returns>All base types.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetAttributeString(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Get the attribute string representation from the specified type symbol.
            </summary>
            <param name="this">The type symbol.</param>
            <param name="attributeSymbol">The attribute symbol to check.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetAttributeStrings(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Get the attribute strings from the specified type symbol.
            </summary>
            <param name="this">The type symbol.</param>
            <param name="attributeSymbol">The attribute symbol to check.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.ToFileName(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get the file name of the type symbol.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The file name. Due to the limited file name and the algorithm, if:
            <list type="bullet">
            <item>
            The character is <c><![CDATA['<']]></c> or <c><![CDATA['>']]></c>:
            Change them to <c>'['</c> and <c>']'</c>.
            </item>
            <item>The character is <c>','</c>: Change it to <c>'_'</c>.</item>
            <item>The character is <c>' '</c>: Remove it.</item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ISymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ISymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ISymbolExtensions.HasInitializer(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            To determine whether the specified symbol (should be property or field members)
            has an initializer.
            </summary>
            <param name="this">The symbol to check.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ISymbolExtensions.GetMemberType(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the member type string representation.
            </summary>
            <param name="this">The symbol.</param>
            <returns>The result string.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ITypeSymbolExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ITypeSymbolExtensions.GetAllMembers(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Get all members that belongs to the type and its base types
            (but interfaces checks the property <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>).
            </summary>
            <param name="this">The symbol.</param>
            <returns>All members.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SyntaxReferenceExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>
        </member>
        <member name="T:System.Collections.Immutable.ImmutableArrayExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>
            </summary>
            <seealso cref="T:System.Collections.Immutable.ImmutableArray`1"/>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.NullableMatches(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}@,Microsoft.CodeAnalysis.NullableAnnotation[])">
            <summary>
            Matches the array of <see cref="T:Microsoft.CodeAnalysis.IParameterSymbol"/> instances, to check whether the
            types matches the nullable annotation list.
            </summary>
            <param name="this">The array of parameter symbols.</param>
            <param name="nullableAnnotations">The nullable annotation list to check.</param>
            <returns>
            Returns <see langword="true"/> when all parameters matches the corresponding nullable annotation;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws when the current length isn't equal to <paramref name="nullableAnnotations"/>.Length.
            </exception>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.GetPath(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText}@,System.Predicate{System.String})">
            <summary>
            Try to get the path in the additional file list that satisify the specified condition.
            </summary>
            <param name="this">The list of additional files.</param>
            <param name="predicate">The condition</param>
            <returns>
            The file name found. If none of all files satisfies the condition, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:System.Int32Extensions">
            <summary>
            Provides extension methods on <see cref="T:System.Int32"/>.
            </summary>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:System.Int32Extensions.GetOrderSuffix(System.Int32)">
            <summary>
            Get the order suffix.
            </summary>
            <param name="this">The value.</param>
            <returns>The order suffix.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:System.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Check whether the last character is the specified character.
            </summary>
            <param name="this">The string.</param>
            <param name="character">The character to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result</returns>
        </member>
        <member name="M:System.StringExtensions.CountOf(System.String,System.Char)">
            <summary>
            Count how many specified characters are in the current string.
            </summary>
            <param name="this">The current string.</param>
            <param name="character">The character to count.</param>
            <returns>The number of characters found.</returns>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the current string into the camel case.
            </summary>
            <param name="this">The string.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.StringExtensions.GetMemberValues(System.String,System.Int32)">
            <summary>
            Separate the attribute string representation into multiple elements.
            The attribute string will be like <c>Type({value1, value2, value3})</c>.
            </summary>
            <param name="this">The attribute string.</param>
            <param name="tokenStartIndex">The token start index.</param>
            <returns>The array of separated values.</returns>
        </member>
        <member name="M:System.StringExtensions.SplitInfo(System.String)">
            <summary>
            To split the info on the <c>*.csv</c> file line.
            </summary>
            <param name="this">A line of the file.</param>
            <returns>The <see cref="T:System.String"/>[] result.</returns>
            <exception cref="T:System.ArgumentException">Throws when the specified string is invalid to split.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
