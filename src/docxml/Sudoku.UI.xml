<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.UI</name>
    </assembly>
    <members>
        <member name="T:Sudoku.UI.App">
            <summary>
            Provides application-specific behavior to supplement the default <see cref="T:Microsoft.UI.Xaml.Application"/> class.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Application"/>
        </member>
        <member name="F:Sudoku.UI.App._window">
            <summary>
            Indicates the main window in this application in the current interaction logic.
            </summary>
        </member>
        <member name="M:Sudoku.UI.App.#ctor">
            <summary>
            <para>Initializes the singleton application object.</para>
            <para>
            This is the first line of authored code executed,
            and as such is the logical equivalent of <c>main()</c> or <c>WinMain()</c>.
            </para>
            </summary>
        </member>
        <member name="M:Sudoku.UI.App.OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs)">
            <summary>
            <para>Invoked when the application is launched normally by the end user.</para>
            <para>
            Other entry points will be used such as when the application is launched to open a specific file.
            </para>
            </summary>
            <param name="args">Details about the launch request and process.</param>
        </member>
        <member name="M:Sudoku.UI.App.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Sudoku.UI.App.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Sudoku.UI.App.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Sudoku.UI.App.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:Sudoku.UI.CommonFileExtensions">
            <summary>
            Defines the constants that are the common file extensions.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CommonFileExtensions.All">
            <summary>
            Indicates all file extensions are accepted.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CommonFileExtensions.Text">
            <summary>
            Indicates the plain-text format.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CommonFileExtensions.Sudoku">
            <summary>
            Indicates the sudoku file.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CommonFileExtensions.SudokuWithDrawing">
            <summary>
            Indicates the drawing file.
            </summary>
        </member>
        <member name="F:Sudoku.UI.CommonFileExtensions.Configuration">
            <summary>
            Indicates the configuration file.
            </summary>
        </member>
        <member name="T:Sudoku.UI.Drawing.PointConversions">
            <summary>
            Stores a set of methods on handling point conversions.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.GridSize(System.Double,System.Double)">
            <summary>
            Gets the grid size from the specified pane size and the outside offset.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset value. The value must be a positive value.</param>
            <returns>The grid size.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.BlockSize(System.Double,System.Double)">
            <summary>
            Gets the block size from the specified pane size and the outside offset.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset value. The value must be a positive value.</param>
            <returns>The block size.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.CellSize(System.Double,System.Double)">
            <summary>
            Gets the cell size from the specified pane size and the outside offset.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset value. The value must be a positive value.</param>
            <returns>The cell size.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.CandidateSize(System.Double,System.Double)">
            <summary>
            Gets the candidate size from the specified pane size and the outside offset.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset value. The value must be a positive value.</param>
            <returns>The candidate size.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.GetBlockLine(System.Double,System.Double,System.Byte)">
            <summary>
            Gets the start and end point that corresponds to the target block line at the specified index.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset.</param>
            <param name="order">The index of the target block line. The value must be between 0 and 3.</param>
            <returns>The two points indicating the start and end point of the line.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.GetCellLine(System.Double,System.Double,System.Byte)">
            <summary>
            Gets the start and end point that corresponds to the target cell line at the specified index.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset.</param>
            <param name="order">The index of the target cell line. The value must be between 0 and 9.</param>
            <returns>The two points indicating the start and end point of the line.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.GetCandidateLine(System.Double,System.Double,System.Byte)">
            <summary>
            Gets the start and end point that corresponds to the target candidate line at the specified index.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset.</param>
            <param name="order">The index of the target candidate line. The value must be between 0 and 27.</param>
            <returns>The two points indicating the start and end point of the line.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.PointConversions.GetLine(System.Double,System.Double,System.Byte,System.Int32)">
            <summary>
            Gets the start and end point that corresponds to the target line at the specified index,
            with the specified line weight.
            </summary>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset.</param>
            <param name="i">The index of the target line.</param>
            <param name="w">The weight of the line type. The value must be 3, 9 or 27.</param>
            <returns>The two points indicating the start and end point of the line.</returns>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.BlockLine">
            <summary>
            Defines a block line.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.BlockLine._line">
            <summary>
            The inner line.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.BlockLine._paneSize">
            <summary>
            Indicates the pane size, which is the backing field of the property <see cref="P:Sudoku.UI.Drawing.Shapes.BlockLine.PaneSize"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Drawing.Shapes.BlockLine.PaneSize"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.BlockLine._outsideOffset">
            <summary>
            Indicates the outside offset, which is the backing field of the property <see cref="P:Sudoku.UI.Drawing.Shapes.BlockLine.OutsideOffset"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Drawing.Shapes.BlockLine.OutsideOffset"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.BlockLine.#ctor(Windows.UI.Color,System.Double,System.Double,System.Double,System.Byte)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.BlockLine"/> instance via the specified details.
            </summary>
            <param name="strokeColor">The stroke color of the block line.</param>
            <param name="strokeThickness">The stroke thickness of the block line.</param>
            <param name="paneSize">Indicates the pane size.</param>
            <param name="outsideOffset">Indicates the outside offset.</param>
            <param name="order">
            The order. The value can only be between 0 and 19. For more details of the parameter,
            please see the property <see cref="P:Sudoku.UI.Drawing.Shapes.BlockLine.Order"/>.
            </param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.BlockLine.Order">
            <summary>
            The order of the block line. The value must be between 0 and 19.
            <list type="table">
            <listheader>
            <term>Range</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><![CDATA[>= 0 and < 4]]></term>
            <description>The block line is horizontal.</description>
            </item>
            <item>
            <term><![CDATA[>= 4 and < 8]]></term>
            <description>The block line is vertical.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.BlockLine.StrokeThickness">
            <summary>
            The stroke thickness of the block line.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.BlockLine.PaneSize">
            <summary>
            The pane size.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.BlockLine.OutsideOffset">
            <summary>
            The outside offset.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.BlockLine.StrokeColor">
            <summary>
            The stroke color of the block line.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.BlockLine.DebuggerDisplayView">
            <summary>
            Defines the debugger view.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.BlockLine.Equals(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.BlockLine.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.BlockLine.GetControl">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.CandidateDigit">
            <summary>
            Defines a drawing element that displays for a digit that is the candidate-levelled digit.
            The data structure represents for all possible candidates in a cell.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CandidateDigit._showDigits">
            <summary>
            Indicates whether the candidate block shows digits.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CandidateDigit._fontSize">
            <summary>
            Indicates the font size of each digit.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CandidateDigit._candidateMask">
            <summary>
            Indicates the candidate mask.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CandidateDigit._fontName">
            <summary>
            Indicates the font name of each digit.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CandidateDigit._grid">
            <summary>
            Indicates the inner grid.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CandidateDigit._digitBlocks">
            <summary>
            Indicates the digit blocks.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CandidateDigit.#ctor(System.Boolean,System.String,System.Double,Windows.UI.Color)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.CandidateDigit"/> instance via the details.
            </summary>
            <param name="showDigits">Indicates whether the candidate block shows the digits.</param>
            <param name="fontName">The font name.</param>
            <param name="fontSize">The font size.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CandidateDigit.#ctor(System.Int16,System.Boolean,System.String,System.Double,Windows.UI.Color)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.CandidateDigit"/> instance via the details.
            </summary>
            <param name="candidateMask">The candidate mask.</param>
            <param name="showDigits">Indicates whether the candidate block shows the digits.</param>
            <param name="fontName">The font name.</param>
            <param name="fontSize">The font size.</param>
            <param name="color">The color.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="candidateMask"/> is negative number or greater than 511.
            </exception>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CandidateDigit.ShowDigits">
            <summary>
            Gets or sets the value indicating whether the candidate block shows digits.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CandidateDigit.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CandidateDigit.CandidateMask">
            <summary>
            Indicates the candidate mask.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CandidateDigit.FontName">
            <summary>
            Gets or sets the font name.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CandidateDigit.Color">
            <summary>
            Indicates the color.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CandidateDigit.DebuggerDisplayView">
            <summary>
            Defines the debugger view.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CandidateDigit.Equals(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CandidateDigit.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CandidateDigit.GetControl">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.CellDigit">
            <summary>
            Defines a drawing element that displays for a digit that is the cell-levelled digit.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellDigit._textBlock">
            <summary>
            The inner text block.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellDigit._isGiven">
            <summary>
            Indicates the cell status.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellDigit._fontName">
            <summary>
            Indicates the font name.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellDigit._givenColor">
            <summary>
            Indicates the given color.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellDigit._modifiableColor">
            <summary>
            Indicates the modifiable color.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellDigit.#ctor(Windows.UI.Color,Windows.UI.Color,System.String,System.Double)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.CellDigit"/> instance via the details.
            </summary>
            <param name="givenColor">The color for displaying the given cells.</param>
            <param name="modifiableColor">The color for displaying the modifiable cells.</param>
            <param name="fontName">The font name.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellDigit.#ctor(System.Byte,System.Boolean,Windows.UI.Color,Windows.UI.Color,System.String,System.Double)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.CellDigit"/> instance via the details.
            </summary>
            <param name="digit">
            The digit value. If you want to hide the value, just assign 255;
            otherwise, using 0 to 8 to indicate the displaying value corresponding to the real digit 1 to 9.
            </param>
            <param name="isGiven">
            Indicates whether the cell is given. If <see langword="false"/>, modifiable value.
            </param>
            <param name="givenColor">The color for displaying the given cells.</param>
            <param name="modifiableColor">The color for displaying the modifiable cells.</param>
            <param name="fontName">The font name.</param>
            <param name="fontSize">The font size.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="digit"/> is not 255 and not in range 0 to 8.
            </exception>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.IsGiven">
            <summary>
            Indicates whether the current cell is the given cell.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.IsShown">
            <summary>
            Indicates whether the current element is shown.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <see langword="value"/> holds <see langword="true"/> value.
            </exception>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.Digit">
            <summary>
            Indicates the digit used.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.FontSize">
            <summary>
            The font size.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.FontName">
            <summary>
            The font name.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.GivenColor">
            <summary>
            The given color.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.ModifiableColor">
            <summary>
            The modifiable color.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellDigit.DebuggerDisplayView">
            <summary>
            Defines the debugger view.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellDigit.Equals(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellDigit.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellDigit.GetControl">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.CellLine">
            <summary>
            Defines a cell line.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellLine._line">
            <summary>
            The inner line.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellLine._paneSize">
            <summary>
            Indicates the pane size, which is the backing field of the property <see cref="P:Sudoku.UI.Drawing.Shapes.CellLine.PaneSize"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Drawing.Shapes.CellLine.PaneSize"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.CellLine._outsideOffset">
            <summary>
            Indicates the outside offset, which is the backing field of the property <see cref="P:Sudoku.UI.Drawing.Shapes.CellLine.OutsideOffset"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Drawing.Shapes.CellLine.OutsideOffset"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellLine.#ctor(Windows.UI.Color,System.Double,System.Double,System.Double,System.Byte)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.CellLine"/> instance via the specified details.
            </summary>
            <param name="strokeColor">The stroke color of the block line.</param>
            <param name="strokeThickness">The stroke thickness of the block line.</param>
            <param name="paneSize">Indicates the pane size.</param>
            <param name="outsideOffset">Indicates the outside offset.</param>
            <param name="order">
            The order. The value can only be between 0 and 19. For more details of the parameter,
            please see the property <see cref="P:Sudoku.UI.Drawing.Shapes.CellLine.Order"/>.
            </param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellLine.Order">
            <summary>
            The order of the block line. The value must be between 0 and 19.
            <list type="table">
            <listheader>
            <term>Range</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><![CDATA[>= 0 and < 10]]></term>
            <description>The block line is horizontal.</description>
            </item>
            <item>
            <term><![CDATA[>= 10 and < 20]]></term>
            <description>The block line is vertical.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellLine.StrokeThickness">
            <summary>
            The stroke thickness of the block line.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellLine.PaneSize">
            <summary>
            The pane size.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellLine.OutsideOffset">
            <summary>
            The outside offset.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellLine.StrokeColor">
            <summary>
            The stroke color of the block line.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.CellLine.DebuggerDisplayView">
            <summary>
            Defines the debugger view.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellLine.Equals(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellLine.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.CellLine.GetControl">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElement">
            <summary>
            Defines a drawing element that represents a sudoku information.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElement.DynamicAssign(System.Action{System.Object})">
            <summary>
            Provides a way to assign the inner properties using the reflection via the specified parameters.
            </summary>
            <param name="objectHandler">The handler that checks and changes the inner value.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElement.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElement.Equals(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElement.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElement.GetControl">
            <summary>
            To get the <see cref="T:Microsoft.UI.Xaml.UIElement"/> that is used for displaying the data structure,
            on the <see cref="T:Microsoft.UI.Xaml.Controls.Canvas"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.UI.Xaml.UIElement"/> control instance.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElement.op_Equality(Sudoku.UI.Drawing.Shapes.DrawingElement,Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <summary>
            Determines whether the two <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s are equal of both type and inner value. 
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElement.op_Inequality(Sudoku.UI.Drawing.Shapes.DrawingElement,Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <summary>
            Determines whether the two <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s aren't equal of both type and inner value. 
            </summary>
            <param name="left">The left-side instance to compare.</param>
            <param name="right">The right-side instance to compare.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag">
            <summary>
            Defines a custom collection that stores the <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag._elements">
            <summary>
            <para>Defines the inner elements.</para>
            <para>
            The reference of the current field may be modified if adding a new element into it
            but it being already full.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag._capacity">
            <summary>
            Indicates the capacity value.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/> instance with the default capacity value 16.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[])">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/> instance
            via the specified list of <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s to add into the current collection.
            </summary>
            <param name="elements">The list of <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.#ctor(System.Collections.Generic.IEnumerable{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/> instance
            via the specified list of <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s to add into the current collection.
            </summary>
            <param name="elements">The list of <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.#ctor(System.UInt32)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/> instance via the specified capacity.
            </summary>
            <param name="capacity">
            The capacity of the collection to be initialized. In other words, this parameter indicates
            how many elements can be stored into the current collection.
            </param>
            <remarks>
            The argument <paramref name="capacity"/> must be the power of 2;
            otherwise, the method will call <see cref="M:System.Numerics.BitOperations.RoundUpToPowerOf2(System.UInt32)"/> to make the value
            be the power of 2.
            </remarks>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Capacity">
            <summary>
            Indicates the capacity of the current collection. The value may be greater than <see cref="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Count"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Count"/>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Count">
            <summary>
            Indicates the number of <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>s being stored in the current collection.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/> instance at the specified index.
            </summary>
            <param name="index">The index. Should be less than <see cref="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Count"/>.</param>
            <returns>The <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/> element at the specified index.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Add(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <summary>
            Adds the specified element into the current collection.
            </summary>
            <param name="element">The element to be added.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.AddRange(System.Collections.Generic.IEnumerable{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Adds the specified list of elements into the current collection.
            </summary>
            <param name="elements">The elements to be added.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Contains``1(``0)">
            <summary>
            Determine whether the collection has been stored the instance whose value is equal to the specified one.
            </summary>
            <param name="element">The element to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Slice(System.Int32)">
            <summary>
            Slices the current collection and only gets the specified number of elements from the basic collection,
            from the first element.
            </summary>
            <param name="count">The desired number of elements.</param>
            <returns>The list of the collection.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Slice(System.Int32,System.Int32)">
            <summary>
            Slices the current collection and only gets the specified number of elements from the basic collection,
            at the specified index as the beginning.
            </summary>
            <param name="start">The desired start index.</param>
            <param name="count">The desired number of elements.</param>
            <returns>The list of the collection.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.System#Collections#Generic#IEnumerable{Sudoku#UI#Drawing#Shapes#DrawingElement}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.EnsureCapacity">
            <summary>
            Ensures the capacity, allowing new element being added into the current collection.
            If the collection has been already full, the method will re-allocate the memory to allow
            more elements stored into the current collection.
            </summary>
            <exception cref="T:System.OutOfMemoryException">
            Throws when the size of the collection is greater than or equals 32767.
            </exception>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator">
            <summary>
            Indicates the enumerator type that allows iterating on <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/> instances. 
            </summary>
            <seealso cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator._count">
            <summary>
            The number of elements to be iterated.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator._elements">
            <summary>
            The list of elements.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator._ptr">
            <summary>
            Indicates the index value that points to the current iterated value.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator"/> instance via the specified elements and the iteration length.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Enumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.First(System.Predicate{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Gets the first element that satisfies the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>The result.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when no elements satisfy the specified condition.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.First()">
            <summary>
            Gets the first element that satisfies the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>The result.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when no elements satisfy the specified condition.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.FirstOrDefault(System.Predicate{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Gets the first element that satisfies the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.FirstOrDefault()">
            <summary>
            Gets the first element that satisfies the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Single(System.Predicate{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Retrieve the collection, to get the only element that may satisfy the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>The only element that may satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Single()">
            <summary>
            Retrieve the collection, to get the only element that may satisfy the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>The only element that may satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SingleOrDefault(System.Predicate{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Retrieve the collection, to get the only element that may satisfy the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>
            The only element that may satisfy the condition; or <see langword="null"/> if the collection
            has multiple values satisfying the condition.
            </returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SingleOrDefault()">
            <summary>
            Retrieve the collection, to get the only element that may satisfy the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>
            The only element that may satisfy the condition; or <see langword="null"/> if the collection
            has multiple values satisfying the condition.
            </returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfType``1">
            <summary>
            Gets all possible elements that are all of type <typeparamref name="TDrawingElement"/>.
            </summary>
            <typeparam name="TDrawingElement">The type of the elements to be iterated.</typeparam>
            <returns>
            The enumerator instance that allows you using <see langword="foreach"/> loop to iterate on them.
            </returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfType``2">
            <summary>
            Gets all possible elements that are all of either type <typeparamref name="T1"/>
            or <typeparamref name="T2"/>.
            </summary>
            <typeparam name="T1">The first allowed type whose instances being iterated.</typeparam>
            <typeparam name="T2">The second allowed type whose instances being iterated.</typeparam>
            <returns>
            The enumerator instance that allows you using <see langword="foreach"/> loop to iterate on them.
            </returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfType``3">
            <summary>
            Gets all possible elements that are all of type <typeparamref name="T1"/>,
            <typeparamref name="T2"/> or <typeparamref name="T3"/>.
            </summary>
            <typeparam name="T1">The first allowed type whose instances being iterated.</typeparam>
            <typeparam name="T2">The second allowed type whose instances being iterated.</typeparam>
            <typeparam name="T3">The third allowed type whose instances being iterated.</typeparam>
            <returns>
            The enumerator instance that allows you using <see langword="foreach"/> loop to iterate on them.
            </returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Select``1(System.Func{Sudoku.UI.Drawing.Shapes.DrawingElement,``0})">
            <summary>
            Makes a projection that converts each element to the target value of type <typeparamref name="T"/>,
            using the specified method to convert.
            </summary>
            <typeparam name="T">The type of the target result that each element converted.</typeparam>
            <param name="selector">The selector to convert the element.</param>
            <returns>
            The enumerator that allows you using <see langword="select"/> clause to get the result.
            </returns>
            <remarks>
            The method can be used by the following two ways:
            <list type="number">
            <item>
            Using query expression syntax: <c>var controls = from e in list select e.GetControl();</c>.
            </item>
            <item>
            Using method invocation syntax: <c>var controls = list.Select(static e => e.GetControl());</c>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Select``1()">
            <summary>
            Makes a projection that converts each element to the target value of type <typeparamref name="T"/>,
            using the specified method to convert.
            </summary>
            <typeparam name="T">The type of the target result that each element converted.</typeparam>
            <param name="selector">The selector to convert the element.</param>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Where(System.Predicate{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Makes a filerting that removes the elements not satisfied the specified condition.
            </summary>
            <param name="predicate">The filtering condition method.</param>
            <returns>
            The enumerator that allows you using <see langword="where"/> clause to filter each element,
            but you cannot use <see langword="select"/> clause as the continuation to make the projection
            to another typed instance.
            </returns>
            <remarks>
            The method can be used by the following two ways:
            <list type="number">
            <item>
            Using query expression syntax: <c>var controls = from e in list where e is CellDigit select e;</c>.
            </item>
            <item>
            Using method invocation syntax: <c>var controls = list.Where(static e => e is CellDigit);</c>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.Where()">
            <summary>
            Makes a filerting that removes the elements not satisfied the specified condition.
            </summary>
            <param name="predicate">The filtering condition method.</param>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1">
            <summary>
            Indicates the enumerator type that allows iterating on <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/> instances,
            with the specified type parameter as the type of all iterated elements.
            </summary>
            <typeparam name="TDrawingElement">The type of the elements to be iterated.</typeparam>
            <seealso cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1._count">
            <summary>
            The number of elements to be iterated.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1._elements">
            <summary>
            The list of elements.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1._ptr">
            <summary>
            Indicates the index value that points to the current iterated value.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1"/> instance via the details.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1.Single">
            <summary>
            Gets the only element.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator can enumerate on multiple values, or the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`1.SingleOrDefault">
            <summary>
            Gets the only element, or <see langword="null"/> if the enumerator can iterates multiple values.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2">
            <summary>
            Indicates the enumerator type that allows iterating on <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/> instances,
            with 2 specified type parameters as the type of all iterated elements.
            If the type is either <typeparamref name="T1"/> or <typeparamref name="T2"/>, it'll be iterated.
            </summary>
            <typeparam name="T1">The first type of the elements to be iterated.</typeparam>
            <typeparam name="T2">The second type of the elements to be iterated.</typeparam>
            <seealso cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2._count">
            <summary>
            The number of elements to be iterated.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2._elements">
            <summary>
            The list of elements.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2._ptr">
            <summary>
            Indicates the index value that points to the current iterated value.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2"/> instance via the details.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2.Single">
            <summary>
            Gets the only element.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator can enumerate on multiple values, or the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`2.SingleOrDefault">
            <summary>
            Gets the only element, or <see langword="null"/> if the enumerator can iterates multiple values.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3">
            <summary>
            Indicates the enumerator type that allows iterating on <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/> instances,
            with 3 specified type parameters as the type of all iterated elements.
            If the type is either <typeparamref name="T1"/>, <typeparamref name="T2"/>
            or <typeparamref name="T3"/>, it'll be iterated.
            </summary>
            <typeparam name="T1">The type of the elements to be iterated.</typeparam>
            <typeparam name="T2">The type of the elements to be iterated.</typeparam>
            <typeparam name="T3">The type of the elements to be iterated.</typeparam>
            <seealso cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3._count">
            <summary>
            The number of elements to be iterated.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3._elements">
            <summary>
            The list of elements.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3._ptr">
            <summary>
            Indicates the index value that points to the current iterated value.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3"/> instance via the details.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3.Single">
            <summary>
            Gets the only element.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator can enumerate on multiple values, or the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.OfTypeEnumerator`3.SingleOrDefault">
            <summary>
            Gets the only element, or <see langword="null"/> if the enumerator can iterates multiple values.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1">
            <summary>
            Indicates the enumerator type that makes the projection from the <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/> to
            a specified target type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the projection result.</typeparam>
            <seealso cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1._count">
            <summary>
            The number of elements to be iterated.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1._elements">
            <summary>
            The list of elements.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1._selector">
            <summary>
            The selector.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1._selectorMethodPtr">
            <summary>
            The selector, but using function pointer.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1._ptr">
            <summary>
            Indicates the index value that points to the current iterated value.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32,System.Func{Sudoku.UI.Drawing.Shapes.DrawingElement,`0})">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1"/> instance via the details.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
            <param name="selector">
            The method that produces a projection from <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>
            to the target type <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32,)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1"/> instance via the details.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
            <param name="selector">
            The function pointer that points to a method, which produces a projection
            from <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/> to the target type <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="selector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32)">
            <summary>
            Initializes the items.
            </summary>
            <param name="elements">The elements.</param>
            <param name="count">The number of values to be iterated.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.Single">
            <summary>
            Gets the only element.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator can enumerate on multiple values, or the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.SelectEnumerator`1.SingleOrDefault">
            <summary>
            Gets the only element, or <see langword="null"/> if the enumerator can iterates multiple values.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator">
            <summary>
            Indicates the enumerator type that makes the filtering on each element
            of type <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>.
            </summary>
            <seealso cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator._count">
            <summary>
            The number of elements to be iterated.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator._elements">
            <summary>
            The list of elements.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator._predicate">
            <summary>
            The predicate.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator._predicateMethodPtr">
            <summary>
            The predicate, but using function pointer.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator._ptr">
            <summary>
            Indicates the index value that points to the current iterated value.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32,System.Predicate{Sudoku.UI.Drawing.Shapes.DrawingElement})">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator"/> instance via the details.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
            <param name="predicate">The filtering condition.</param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32,)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator"/> instance via the details.
            </summary>
            <param name="elements">The elements to be iterated.</param>
            <param name="count">The number of elements to be iterated.</param>
            <param name="predicate">The filerting condition.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="predicate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElement[],System.Int32)">
            <summary>
            Initializes the items.
            </summary>
            <param name="elements">The elements.</param>
            <param name="count">The number of values to be iterated.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.Select``1(System.Func{Sudoku.UI.Drawing.Shapes.DrawingElement,``0})">
            <summary>
            Makes a projection that converts each element to the target value of type <typeparamref name="T"/>,
            using the specified method to convert.
            </summary>
            <typeparam name="T">The type of the target result that each element converted.</typeparam>
            <param name="selector">The selector to convert the element.</param>
            <returns>
            The enumerator that allows you using <see langword="select"/> clause to get the result.
            </returns>
            <remarks>
            The method can be used by the following two ways:
            <list type="number">
            <item>
            Using query expression syntax:
            <c>
            var controls = from e in list where e is CellDigit select e.GetControl();
            </c>.
            </item>
            <item>
            Using method invocation syntax:
            <c>
            var controls = list.Where(static e => e is CellDigit).Select(static e => e.GetControl());
            </c>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.Select``1()">
            <summary>
            Makes a projection that converts each element to the target value of type <typeparamref name="T"/>,
            using the specified method to convert.
            </summary>
            <typeparam name="T">The type of the target result that each element converted.</typeparam>
            <param name="selector">The selector to convert the element.</param>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.Single">
            <summary>
            Gets the only element.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator can enumerate on multiple values, or the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SingleOrDefault">
            <summary>
            Gets the only element, or <see langword="null"/> if the enumerator can iterates multiple values.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1">
            <summary>
            Indicates the enumerator type that makes the projection from the <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/> to
            a specified target type <typeparamref name="T"/>, on the type <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator"/> iterating.
            </summary>
            <typeparam name="T">The type of the projection result.</typeparam>
            <seealso cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1._whereEnumerator">
            <summary>
            The enunmerator.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1._selector">
            <summary>
            The selector.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1._selectorMethodPtr">
            <summary>
            The selector, but using function pointer.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator,System.Func{Sudoku.UI.Drawing.Shapes.DrawingElement,`0})">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1"/> instance via the details.
            </summary>
            <param name="enumerator">The enumerator.</param>
            <param name="selector">
            The method that produces a projection from <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/>
            to the target type <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator,)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1"/> instance via the details.
            </summary>
            <param name="enumerator">The enumerator.</param>
            <param name="selector">
            The function pointer that points to a method, which produces a projection
            from <see cref="T:Sudoku.UI.Drawing.Shapes.DrawingElement"/> to the target type <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="selector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.#ctor(Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator)">
            <summary>
            Initializes the items.
            </summary>
            <param name="enumerator">The enumerator.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.Single">
            <summary>
            Gets the only element.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator can enumerate on multiple values, or the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.DrawingElementBag.WhereEnumerator.SelectEnumerator`1.SingleOrDefault">
            <summary>
            Gets the only element, or <see langword="null"/> if the enumerator can iterates multiple values.
            </summary>
            <returns>The only element.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumerator cannot step advanced.
            </exception>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.OutsideRectangle">
            <summary>
            Defines an outside rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.OutsideRectangle._rect">
            <summary>
            The inner rectangle.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.OutsideRectangle.#ctor(Windows.UI.Color,System.Double,System.Double)">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Drawing.Shapes.OutsideRectangle"/> instance via the specified details.
            </summary>
            <param name="strokeColor">The stroke color.</param>
            <param name="paneSize">The pane size.</param>
            <param name="strokeThickness">The stroke thickness.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.OutsideRectangle.RectangleSize">
            <summary>
            The size of the rectangle.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.OutsideRectangle.StrokeThickness">
            <summary>
            The stroke thickness of the block line.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.OutsideRectangle.StrokeColor">
            <summary>
            The stroke color of the block line.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.OutsideRectangle.Equals(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.OutsideRectangle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.OutsideRectangle.GetControl">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.UI.Drawing.Shapes.SudokuGrid">
            <summary>
            Defines a sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.SudokuGrid._gridLayout">
            <summary>
            Indicates the inner grid layout control.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.SudokuGrid._cellDigits">
            <summary>
            Indicates the cell digits.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.SudokuGrid._candidateDigits">
            <summary>
            Indicates the candidate digits.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.SudokuGrid._showCandidates">
            <summary>
            Indicates the status for displaying candidates.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.SudokuGrid._paneSize">
            <summary>
            Indicates the pane size.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.SudokuGrid._outsideOffset">
            <summary>
            Indicates the outside offset.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Drawing.Shapes.SudokuGrid._grid">
            <summary>
            Indicates the inner grid.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.SudokuGrid.#ctor(Sudoku.Collections.Grid@,System.Boolean,System.Double,System.Double,Windows.UI.Color,Windows.UI.Color,Windows.UI.Color,System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Drawing.Shapes.SudokuGrid"/> instance via the details.
            </summary>
            <param name="grid">The <see cref="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.Grid"/> instance.</param>
            <param name="showCandidates">Whether the grid displays candidates.</param>
            <param name="paneSize">The pane size.</param>
            <param name="outsideOffset">The outside offset.</param>
            <param name="givenColor">The given text color.</param>
            <param name="modifiableColor">The modifiable text color.</param>
            <param name="candidateColor">The candidate text color.</param>
            <param name="valueFontName">The given or modifiable font name.</param>
            <param name="candidateFontName">The candidate font name.</param>
            <param name="valueFontSize">The value font size.</param>
            <param name="candidateFontSize">The candidate font size.</param>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.ShowCandidates">
            <summary>
            Indicates whether the grid displays for candidates.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.OutsideOffset">
            <summary>
            Gets or sets the outside offset.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.PaneSize">
            <summary>
            Gets or sets the pane size.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.ValueFontSize">
            <summary>
            Gets or sets the given or modifiable font size.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.CandidateFontSize">
            <summary>
            Gets or sets the candidate font size.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.ValueFontName">
            <summary>
            Gets or sets the given or modifiable font name.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.CandidateFontName">
            <summary>
            Gets or sets the candidate font name.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.GivenColor">
            <summary>
            Gets or sets the given color.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.ModifiableColor">
            <summary>
            Gets or sets the modifiable color.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.CandidateColor">
            <summary>
            Gets or sets the candidate color.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Drawing.Shapes.SudokuGrid.Grid">
            <summary>
            Gets or sets the grid.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.SudokuGrid.Equals(Sudoku.UI.Drawing.Shapes.DrawingElement)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.SudokuGrid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.SudokuGrid.GetControl">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.UI.Drawing.Shapes.SudokuGrid.CoverGrid(Sudoku.Collections.Grid@)">
            <summary>
            To cover the grid info.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.UI.ControlFactory">
            <summary>
            Defines a control factory.
            </summary>
        </member>
        <member name="M:Sudoku.UI.ControlFactory.InfoBar(Microsoft.UI.Xaml.Controls.InfoBarSeverity)">
            <summary>
            Creates a <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/> instance.
            </summary>
            <param name="severity">The severity of the info bar.</param>
            <returns>The <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/> instance.</returns>
        </member>
        <member name="T:Sudoku.UI.BindingConversions">
            <summary>
            Provides a set of methods to convert the information.
            </summary>
        </member>
        <member name="M:Sudoku.UI.BindingConversions.License(System.String)">
            <summary>
            Indicates the license displaying value on <see cref="P:Sudoku.UI.RepositoryInfo.OpenSourceLicense"/>.
            </summary>
            <param name="input">The license name.</param>
            <returns>The converted result string.</returns>
            <seealso cref="P:Sudoku.UI.RepositoryInfo.OpenSourceLicense"/>
        </member>
        <member name="M:Sudoku.UI.BindingConversions.ForReference(System.Boolean)">
            <summary>
            Indicates the conversion on <see cref="P:Sudoku.UI.RepositoryInfo.IsForReference"/>.
            </summary>
            <param name="input">The input value.</param>
            <returns>The converted result string value.</returns>
            <seealso cref="P:Sudoku.UI.RepositoryInfo.IsForReference"/>
        </member>
        <member name="T:Sudoku.UI.Website">
            <summary>
            Provides methods on website visiting.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Website.Visit(System.String)">
            <summary>
            Visit the specified website.
            </summary>
            <param name="uri">The URI website.</param>
            <returns>The process.</returns>
        </member>
        <member name="T:Sudoku.UI.RepositoryInfo">
            <summary>
            Defines a set of properties to describe an image.
            </summary>
        </member>
        <member name="P:Sudoku.UI.RepositoryInfo.IsForReference">
            <summary>
            Indicates whether the repository code is for reference.
            </summary>
        </member>
        <member name="P:Sudoku.UI.RepositoryInfo.OpenSourceLicense">
            <summary>
            Indicates the open-source license being used for this repository.
            </summary>
        </member>
        <member name="P:Sudoku.UI.RepositoryInfo.Initials">
            <summary>
            Indicates the initials displaying on the <see cref="T:Microsoft.UI.Xaml.Controls.PersonPicture"/> control.
            </summary>
        </member>
        <member name="P:Sudoku.UI.RepositoryInfo.Name">
            <summary>
            Indicates the name of the image.
            </summary>
        </member>
        <member name="P:Sudoku.UI.RepositoryInfo.IconPath">
            <summary>
            Indicates the path of the image to show. The field can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.UI.RepositoryInfo.Site">
            <summary>
            Indicates the website which name is corresponding to.
            </summary>
        </member>
        <member name="T:Sudoku.UI.StringResource">
            <summary>
            Defines a <see langword="static class"/> that provides the method
            to get the <see cref="T:System.String"/>-typed resources.
            </summary>
        </member>
        <member name="M:Sudoku.UI.StringResource.Get(System.String)">
            <summary>
            Try to get the resource value via the specified string key.
            </summary>
            <param name="key">The <see cref="T:System.String"/>-typed resource key.</param>
            <returns>The resource value.</returns>
        </member>
        <member name="T:Sudoku.UI.UserPreference">
            <summary>
            Defines the user preferences in the program.
            </summary>
        </member>
        <member name="F:Sudoku.UI.UserPreference.ShowCandidates">
            <summary>
            Indicates whether the current grid displays the candidates.
            </summary>
            <remarks>
            The default value is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.OutsideBorderWidth">
            <summary>
            Indicates the outside border width. The value cannot be negative.
            </summary>
            <remarks>
            The default value is <c>0</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.BlockBorderWidth">
            <summary>
            Indicates the width of the block border lines. The value cannot be negative.
            </summary>
            <remarks>
            The default value is <c>4</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.CellBorderWidth">
            <summary>
            Indicates the width of the cell border lines. The value cannot be negative.
            </summary>
            <remarks>
            The default value is <c>1</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.ValueFontSize">
            <summary>
            Indicates the value font size.
            </summary>
            <remarks>
            The default value is <c>36</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.CandidateFontSize">
            <summary>
            Indicates the candidate font size.
            </summary>
            <remarks>
            The default value is <c>16</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.ValueFontName">
            <summary>
            Indicates the value font name.
            </summary>
            <remarks>
            The default value is <c>"Tahoma"</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.CandidateFontName">
            <summary>
            Indicates the candidate font name.
            </summary>
            <remarks>
            The default value is <c>"Tahoma"</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.OutsideBorderColor">
            <summary>
            Indicates the color of the outside borders.
            </summary>
            <remarks>
            The default value is <c>#FF000000</c> (i.e. Black).
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.BlockBorderColor">
            <summary>
            Indicates the color of the block borders.
            </summary>
            <remarks>
            The default value is <c>#FF000000</c> (i.e. Black).
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.CellBorderColor">
            <summary>
            Indicates the color of the cell borders.
            </summary>
            <remarks>
            The default value is <c>#FF000000</c> (i.e. Black).
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.GivenColor">
            <summary>
            Indicates the color of the given values.
            </summary>
            <remarks>
            The default value is <c>#FF000000</c> (i.e. Black).
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.ModifiableColor">
            <summary>
            Indicates the color of the modifiable values.
            </summary>
            <remarks>
            The default value is <c>#FF0000FF</c> (i.e. Blue).
            </remarks>
        </member>
        <member name="F:Sudoku.UI.UserPreference.CandidateColor">
            <summary>
            Indicates the color of the candidate values.
            </summary>
            <remarks>
            The default value is <c>#FF696969</c> (i.e. DimGray).
            </remarks>
        </member>
        <member name="T:Sudoku.UI.Views.Controls.SudokuPane">
            <summary>
            Defines a user control that interacts with a sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Views.Controls.SudokuPane.Epsilon">
            <summary>
            Indicates the delta that is used for checking whether two <see cref="T:System.Double"/> values are same
            or their difference is below to the delta value.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Views.Controls.SudokuPane._drawingElements">
            <summary>
            Indicates the inner collection that stores the drawing elements, and also influences the controls
            displaying in the window.
            </summary>
        </member>
        <member name="F:Sudoku.UI.Views.Controls.SudokuPane._userPreference">
            <summary>
            Indicates the user preferences.
            </summary>
            <!--Wait for new function that allows serializations or deserializations.-->
        </member>
        <member name="F:Sudoku.UI.Views.Controls.SudokuPane._size">
            <summary>
            Indicates the size that the current pane is, which is the backing field
            of the property <see cref="P:Sudoku.UI.Views.Controls.SudokuPane.Size"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Views.Controls.SudokuPane.Size"/>
        </member>
        <member name="F:Sudoku.UI.Views.Controls.SudokuPane._outsideOffset">
            <summary>
            Indicates the outside offset value, which is the backing field
            of the property <see cref="P:Sudoku.UI.Views.Controls.SudokuPane.OutsideOffset"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Views.Controls.SudokuPane.OutsideOffset"/>
        </member>
        <member name="F:Sudoku.UI.Views.Controls.SudokuPane._grid">
            <summary>
            Indicates the grid used, which is the backing field of the property <see cref="P:Sudoku.UI.Views.Controls.SudokuPane.Grid"/>.
            </summary>
            <seealso cref="P:Sudoku.UI.Views.Controls.SudokuPane.Grid"/>
        </member>
        <member name="M:Sudoku.UI.Views.Controls.SudokuPane.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Views.Controls.SudokuPane"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Views.Controls.SudokuPane.Size">
            <summary>
            Gets or sets the size of the pane.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Views.Controls.SudokuPane.OutsideOffset">
            <summary>
            Gets or sets the outside offset to the view model.
            </summary>
        </member>
        <member name="P:Sudoku.UI.Views.Controls.SudokuPane.Grid">
            <summary>
            Gets or sets the current grid used.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Controls.SudokuPane.GetGridByReference">
            <summary>
            Gets the reference of the sudoku grid.
            </summary>
            <returns>The reference of the sudoku grid.</returns>
        </member>
        <member name="M:Sudoku.UI.Views.Controls.SudokuPane.SudokuPane_Loaded(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Triggers when the current control is loaded.
            </summary>
            <param name="sender">The object to trigger the event. The instance is always itself.</param>
            <param name="e">The event arguments provided.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Controls.SudokuPane.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Controls.SudokuPane.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Controls.SudokuPane.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Sudoku.UI.Views.Pages.AboutPage">
            <summary>
            A page that can be used on its own or navigated to within a <see cref="T:Microsoft.UI.Xaml.Controls.Frame"/>.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Controls.Frame"/>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.AboutPage.#ctor">
            <summary>
            Initializes an <see cref="T:Sudoku.UI.Views.Pages.AboutPage"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.AboutPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.AboutPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.AboutPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Sudoku.UI.Views.Pages.MainPage">
            <summary>
            A page that can be used on its own or navigated to within a <see cref="T:Microsoft.UI.Xaml.Controls.Frame"/>.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Controls.Frame"/>
        </member>
        <member name="F:Sudoku.UI.Views.Pages.MainPage._navigationPairs">
            <summary>
            Indicates the navigation pairs that controls to route pages.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.MainPage.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Views.Pages.MainPage"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.MainPage.OnNavigate(System.String,Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Try to navigate the pages.
            </summary>
            <param name="tag">The specified tag of the navigate page item.</param>
            <param name="transitionInfo">The transition information.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.MainPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.MainPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.MainPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Sudoku.UI.Views.Pages.SettingsPage">
            <summary>
            A page that can be used on its own or navigated to within a <see cref="T:Microsoft.UI.Xaml.Controls.Frame"/>.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Controls.Frame"/>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SettingsPage.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Views.Pages.SettingsPage"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SettingsPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SettingsPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SettingsPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Sudoku.UI.Views.Pages.SudokuPage">
            <summary>
            An empty page that can be used on its own or navigated to within a Frame.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Views.Pages.SudokuPage"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.Page_Loaded(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Triggers when the current page is loaded.
            </summary>
            <param name="sender">The object that triggers the event.</param>
            <param name="e">The event arguments provided.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.OpenAppBarButton_ClickAsync(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Triggers when the button is clicked.
            </summary>
            <param name="sender">The object that triggers the event.</param>
            <param name="e">The event arguments provided.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.ClearAppBarButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Triggers when the button is clicked.
            </summary>
            <param name="sender">The object that triggers the event.</param>
            <param name="e">The event arguments provided.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.CopyAppBarButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Triggers when the button is clicked.
            </summary>
            <param name="sender">The object that triggers the event.</param>
            <param name="e">The event arguments provided.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.PasteAppBarButton_ClickAsync(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Triggers when the button is clicked.
            </summary>
            <param name="sender">The object that triggers the event.</param>
            <param name="e">The event arguments provided.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.ClearInfoBarsAppBarButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Triggers when the button is clicked.
            </summary>
            <param name="sender">The object that triggers the event.</param>
            <param name="e">The event arguments provided.</param>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Pages.SudokuPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Sudoku.UI.Views.Windows.MainWindow">
            <summary>
            An empty window that can be used on its own or navigated to within a <see cref="T:Microsoft.UI.Xaml.Controls.Frame"/>.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Controls.Frame"/>
        </member>
        <member name="F:Sudoku.UI.Views.Windows.MainWindow._appWindow">
            <summary>
            The app window instance. The method will be initialized by method <see cref="M:Sudoku.UI.Views.Windows.MainWindow.CustomizeTitleBar"/>,
            and be immutable after the method called.
            </summary>
            <seealso cref="M:Sudoku.UI.Views.Windows.MainWindow.CustomizeTitleBar"/>
        </member>
        <member name="M:Sudoku.UI.Views.Windows.MainWindow.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.UI.Views.Windows.MainWindow"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Windows.MainWindow.CustomizeTitleBar">
            <summary>
            Customize the title bar if available.
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Windows.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Windows.MainWindow.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Sudoku.UI.Views.Windows.MainWindow.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Sudoku.UI.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="T:Sudoku.UI.Sudoku_UI_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:Sudoku.UI.Sudoku_UI_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Sudoku.UI.Sudoku_UI_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Sudoku.UI.Sudoku_UI_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.FileOpenPickerExtensions">
            <summary>
            Provides the extension methods on <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/>.
            </summary>
            <seealso cref="T:Windows.Storage.Pickers.FileOpenPicker"/>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.FileOpenPickerExtensions.AddFileTypeFilter(Windows.Storage.Pickers.FileOpenPicker,System.String)">
            <summary>
            Adds the file type filter into the <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/> instance.
            </summary>
            <param name="this">The <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/> instance.</param>
            <param name="extension">The extension to be added.</param>
            <returns>The reference that is same as argument <paramref name="this"/>.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.FileOpenPickerExtensions.AddFileTypeFilters(Windows.Storage.Pickers.FileOpenPicker,System.String[])">
            <summary>
            Adds the file type filters into the <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/> instance.
            </summary>
            <param name="this">The <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/> instance.</param>
            <param name="extensions">The extensions to be added.</param>
            <returns>The reference that is same as argument <paramref name="this"/>.</returns>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.GridExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.UI.Xaml.Controls.Grid"/>.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Controls.Grid"/>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.GridExtensions.WithGridLayout``1(``0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the info on <see cref="T:Microsoft.UI.Xaml.Controls.Grid"/>, and returns the reference
            of the argument <paramref name="this"/>.
            </summary>
            <typeparam name="TFrameworkElement">The type of the control.</typeparam>
            <param name="this">The <typeparamref name="TFrameworkElement"/>-typed control.</param>
            <param name="row">
            The row value that is used for <see cref="M:Microsoft.UI.Xaml.Controls.Grid.SetRow(Microsoft.UI.Xaml.FrameworkElement,System.Int32)"/>.
            </param>
            <param name="column">
            The row value that is used for <see cref="M:Microsoft.UI.Xaml.Controls.Grid.SetColumn(Microsoft.UI.Xaml.FrameworkElement,System.Int32)"/>.
            </param>
            <param name="rowSpan">
            The row value that is used for <see cref="M:Microsoft.UI.Xaml.Controls.Grid.SetRowSpan(Microsoft.UI.Xaml.FrameworkElement,System.Int32)"/>.
            </param>
            <param name="columnSpan">
            The row value that is used for <see cref="M:Microsoft.UI.Xaml.Controls.Grid.SetColumnSpan(Microsoft.UI.Xaml.FrameworkElement,System.Int32)"/>.
            </param>
            <returns>The reference that is same as the argument <paramref name="this"/>.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.GridExtensions.WithRowDefinitionsCount(Microsoft.UI.Xaml.Controls.Grid,System.Int32)">
            <summary>
            Creates the specified number of new <see cref="T:Microsoft.UI.Xaml.Controls.RowDefinition"/> instances and adds into the target
            <see cref="T:Microsoft.UI.Xaml.Controls.Grid"/> instance.
            </summary>
            <param name="this">The <see cref="T:Microsoft.UI.Xaml.Controls.Grid"/> instance.</param>
            <param name="count">The number of <see cref="T:Microsoft.UI.Xaml.Controls.RowDefinition"/>s to be added.</param>
            <returns>The reference that is same as the argument <paramref name="this"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="count"/> is negative.
            </exception>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.GridExtensions.WithColumnDefinitionsCount(Microsoft.UI.Xaml.Controls.Grid,System.Int32)">
            <summary>
            Creates the specified number of new <see cref="T:Microsoft.UI.Xaml.Controls.ColumnDefinition"/> instances and adds into the target
            <see cref="T:Microsoft.UI.Xaml.Controls.Grid"/> instance.
            </summary>
            <param name="this">The <see cref="T:Microsoft.UI.Xaml.Controls.Grid"/> instance.</param>
            <param name="count">The number of <see cref="T:Microsoft.UI.Xaml.Controls.ColumnDefinition"/>s to be added.</param>
            <returns>The reference that is same as the argument <paramref name="this"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="count"/> is negative.
            </exception>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.InfoBarExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/>.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarExtensions.Open(Microsoft.UI.Xaml.Controls.InfoBar)">
            <summary>
            To open the <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/>.
            </summary>
            <param name="this">The <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/> instance.</param>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarExtensions.WithParentPanel``1(Microsoft.UI.Xaml.Controls.InfoBar,``0,System.Boolean)">
            <summary>
            Defines a parent panel that the current <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/> stored.
            </summary>
            <typeparam name="TPanel">The type of the panel.</typeparam>
            <param name="this">The <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/> instance.</param>
            <param name="panel">The panel.</param>
            <param name="insertAtFirstPlace">
            Indicates whether the control will be inserted at the first place into the parent panel.
            The default value is <see langword="true"/>.
            </param>
            <returns>The reference which is same as the argument <paramref name="this"/>.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarExtensions.WithMessage(Microsoft.UI.Xaml.Controls.InfoBar,System.String)">
            <summary>
            Sets the property <see cref="P:Microsoft.UI.Xaml.Controls.InfoBar.Content"/> to the target string value.
            </summary>
            <param name="this">The <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/> instance.</param>
            <param name="content">The content to replace with.</param>
            <returns>The reference that is same as the argument <paramref name="this"/>.</returns>
            <seealso cref="P:Microsoft.UI.Xaml.Controls.InfoBar.Content"/>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarExtensions.WithLinkButton(Microsoft.UI.Xaml.Controls.InfoBar,System.String,System.String)">
            <summary>
            Sets the property <see cref="P:Microsoft.UI.Xaml.Controls.InfoBar.ActionButton"/> to a <see cref="T:Microsoft.UI.Xaml.Controls.HyperlinkButton"/>.
            </summary>
            <param name="this">The <see cref="T:Microsoft.UI.Xaml.Controls.InfoBar"/> instance.</param>
            <param name="link">The link.</param>
            <param name="contentDescription">The content description.</param>
            <returns>The reference that is same as the argument <paramref name="this"/>.</returns>
            <seealso cref="P:Microsoft.UI.Xaml.Controls.InfoBar.ActionButton"/>
        </member>
        <member name="T:Microsoft.UI.Xaml.Shapes.LineExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.UI.Xaml.Shapes.Line"/>.
            </summary>
            <seealso cref="T:Microsoft.UI.Xaml.Shapes.Line"/>
        </member>
        <member name="M:Microsoft.UI.Xaml.Shapes.LineExtensions.Deconstruct(Microsoft.UI.Xaml.Shapes.Line,Windows.Foundation.Point@,Windows.Foundation.Point@)">
            <summary>
            Deconstruct the instance to multiple values.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Shapes.LineExtensions.Deconstruct(Microsoft.UI.Xaml.Shapes.Line,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Deconstruct the instance to multiple values.
            </summary>
        </member>
        <member name="T:Windows.Storage.Pickers.FileOpenPickerExtensions">
            <summary>
            Provides extension methods on <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/>.
            </summary>
            <seealso cref="T:Windows.Storage.Pickers.FileOpenPicker"/>
        </member>
        <member name="M:Windows.Storage.Pickers.FileOpenPickerExtensions.AwareHandleOnWin32(Windows.Storage.Pickers.FileOpenPicker)">
            <summary>
            To aware the handle of the window, and apply to the <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/> instance.
            </summary>
            <param name="this">The instance.</param>
            <returns>The reference that is same as the argument <paramref name="this"/>.</returns>
        </member>
        <member name="T:Windows.Foundation.PointExtensions">
            <summary>
            Provides extension methods on <see cref="T:Windows.Foundation.Point"/>.
            </summary>
            <seealso cref="T:Windows.Foundation.Point"/>
        </member>
        <member name="M:Windows.Foundation.PointExtensions.Deconstruct(Windows.Foundation.Point@,System.Double@,System.Double@)">
            <summary>
            Deconstruct the instance to multiple values.
            </summary>
        </member>
    </members>
</doc>
