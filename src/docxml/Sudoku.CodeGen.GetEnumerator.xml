<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.CodeGen.GetEnumerator</name>
    </assembly>
    <members>
        <member name="T:Sudoku.CodeGen.AutoGetEnumeratorAttribute">
            <summary>
            To mark on a type, to tell the compiler that the compiler will automatically generate
            <c>GetEnumerator</c> methods for that type.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.AutoGetEnumeratorAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified member name.
            </summary>
            <param name="memberName">The member name.</param>
        </member>
        <member name="P:Sudoku.CodeGen.AutoGetEnumeratorAttribute.MemberName">
            <summary>
            Indicates the member name.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGen.AutoGetEnumeratorAttribute.MemberConversion">
            <summary>
            Indicates the member conversion that is used for creation of the enumerator.
            </summary>
            <remarks>
            <para>
            This property should be stored a lambda body. One of possible syntaxes is:
            <code>
            [AutoGetEnumerator(nameof(MemberName), "((IEnumerable&lt;int&gt;)@).GetEnumerator()")]
            </code>
            Where the placeholder symbol '<c>@</c>' means the member name that creates and converts to the result.
            </para>
            <para>
            The default conversion is "<c>@</c>".
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.CodeGen.AutoGetEnumeratorAttribute.ReturnType">
            <summary>
            Indicates the return type. If <see langword="null"/>, the value of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            of <see cref="T:System.Int32"/> will be returned.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="T:Sudoku.CodeGen.GetEnumerator.GetEnumeratorGenerator">
            <summary>
            Indicates a source generator that generates the code for the method <c>GetEnumerator</c>.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGen.GetEnumerator.GetEnumeratorGenerator.TypeFormat">
            <summary>
            Indicates the type format, and the property type format.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.GetEnumerator.GetEnumeratorGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGen.GetEnumerator.GetEnumeratorGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGen.GetEnumerator.GetEnumeratorGenerator.SyntaxReceiver">
            <summary>
            Indicates the inner syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGen.GetEnumerator.GetEnumeratorGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates the types that satisfy the condition.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.GetEnumerator.GetEnumeratorGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
