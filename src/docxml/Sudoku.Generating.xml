<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Generating</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Generating.BasicPuzzleGenerator">
            <summary>
            Encapsulates a puzzle generator, which provides the symmetry type constraint
            and the maximum clues constraint.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.Generate(System.Int32,Sudoku.Data.SymmetryType,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generate a puzzle with the specified information.
            </summary>
            <param name="max">The maximum hints of the puzzle.</param>
            <param name="symmetricalType">
            The symmetry type flags. The <see cref="T:Sudoku.Data.SymmetryType"/> is
            a flag type, you can use bit operators to accumulate multiple
            symmetrical types such as
            <c><see cref="F:Sudoku.Data.SymmetryType.AntiDiagonal"/> | <see cref="F:Sudoku.Data.SymmetryType.Diagonal"/></c>,
            which means that the solver will generate anti-diagonal type or
            diagonal type puzzles.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The grid.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
            <seealso cref="T:Sudoku.Data.SymmetryType"/>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.GenerateAsync(System.Int32,Sudoku.Data.SymmetryType,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generate a puzzle with the specified information asynchronously.
            </summary>
            <param name="max">The maximum hints of the puzzle.</param>
            <param name="symmetricalType">
            The symmetry type flags. The <see cref="T:Sudoku.Data.SymmetryType"/> is
            a flag type, you can use bit operators to accumulate multiple
            symmetrical types such as
            <c><see cref="F:Sudoku.Data.SymmetryType.AntiDiagonal"/> | <see cref="F:Sudoku.Data.SymmetryType.Diagonal"/></c>,
            which means that the solver will generate anti-diagonal type or
            diagonal type puzzles.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The task.</returns>
            <seealso cref="T:Sudoku.Data.SymmetryType"/>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.CreatePattern(System.Span{System.Int32}@)">
            <inheritdoc/>
            <exception cref="T:System.NotImplementedException">Always throws.</exception>
        </member>
        <member name="T:Sudoku.Generating.DiggingPuzzleGenerator">
            <summary>
            Encapsulates a puzzle generator, whose basic algorithm is digging
            some values out of a random answer grid.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.DiggingPuzzleGenerator.FastSolver">
            <summary>
            The fast solver.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.GenerateAnswerGrid(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            To generate an answer grid.
            </summary>
            <param name="puzzle">The puzzle string.</param>
            <param name="solution">The solution string.</param>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.CreatePattern(System.Span{System.Int32}@)">
            <summary>
            To create the pattern.
            </summary>
            <param name="pattern">The pattern array.</param>
        </member>
        <member name="M:Sudoku.Generating.DiggingPuzzleGenerator.CheckDuplicate(System.Text.StringBuilder,System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="gridArray">The grid array.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Generating.HardPatternPuzzleGenerator">
            <summary>
            Provides an extended puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.BlockFactor">
            <summary>
            The block factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.SwappingFactor">
            <summary>
            Indicates the swapping factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.BackdoorSearcher">
            <summary>
            The backdoor searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.Generate(System.Int32,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Solving.Manual.DifficultyLevel,Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a sudoku grid with a backdoor filter depth.
            </summary>
            <param name="backdoorFilterDepth">
            The backdoor filter depth. When the value is -1, the generator won't check
            any backdoors.
            </param>
            <param name="progress">The progress.</param>
            <param name="difficultyLevel">The difficulty level.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The grid.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.GenerateAsync(System.Int32,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Solving.Manual.DifficultyLevel,Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a sudoku grid with a backdoor filter depth asynchronously.
            </summary>
            <param name="backdoorFilterDepth">
            The backdoor filter depth. When the value is -1, the generator won't check
            any backdoors.
            </param>
            <param name="progress">The progress.</param>
            <param name="difficultyLevel">The difficulty level.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CreatePattern(System.Span{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.RecreatePattern(System.Span{System.Int32}@)">
            <summary>
            To re-create the pattern.
            </summary>
            <param name="pattern">The pattern array.</param>
        </member>
        <member name="T:Sudoku.Generating.IPuzzleGenerator">
            <summary>
            Provides data for all derived puzzle generators.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.IPuzzleGenerator.Rng">
            <summary>
            The random number generator.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.Generate">
            <summary>
            Generates a puzzle.
            </summary>
            <returns>
            The puzzle. If the operation is cancelled, the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Generating.IPuzzleGenerator.GenerateAsync">
            <summary>
            Generates a puzzle asynchronously.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="T:Sudoku.Generating.TechniqueCodeFilter">
            <summary>
            Encapsulates a technique code filter that contains some of technique codes.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueCodeFilter._internalList">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.#ctor">
            <inheritdoc cref="T:Sudoku.DocComments.DefaultConstructor"/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.#ctor(Sudoku.Techniques.Technique[])">
            <summary>
            Initializes an instance with the specified technique codes.
            </summary>
            <param name="techniqueCodes">The technique codes.</param>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.#ctor(System.Collections.BitArray)">
            <summary>
            Initializes an instance with the specified bit array.
            </summary>
            <param name="bitArray">The bit array.</param>
        </member>
        <member name="P:Sudoku.Generating.TechniqueCodeFilter.Count">
            <summary>
            The total number of techniques.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Add(Sudoku.Techniques.Technique)">
            <summary>
            To add a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Techniques.Technique})">
            <summary>
            Add a serial of technique codes to this list.
            </summary>
            <param name="techniqueCodes">The codes.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Remove(Sudoku.Techniques.Technique)">
            <summary>
            To remove a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Contains(Sudoku.Techniques.Technique)">
            <summary>
            To determine whether the specified filter contains the technique.
            </summary>
            <param name="techniqueCode">The technique code to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueCodeFilter.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.TechniqueFilteringPuzzleGenerator">
            <summary>
            Provides a puzzle generator with the technique filter.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.DefaultFilter">
            <summary>
            Indicates the default filter.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.ManualSolver">
            <summary>
            The default manual solver.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.Generate(Sudoku.Generating.TechniqueCodeFilter,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a puzzle that contains the specified technique code.
            </summary>
            <param name="techniqueCodeFilter">
            The technique codes to filter. If the parameter is <see langword="null"/>,
            the process will use the default filter.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The country code.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The puzzle.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is cancelled.</exception>
        </member>
        <member name="M:Sudoku.Generating.TechniqueFilteringPuzzleGenerator.GenerateAsync(Sudoku.Generating.TechniqueCodeFilter,System.IProgress{Sudoku.Models.IProgressResult},Sudoku.Globalization.CountryCode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            To generate a puzzle that contains the specified technique code asynchronously.
            </summary>
            <param name="techniqueCodeFilter">
            The technique codes to filter. If the parameter is <see langword="null"/>,
            the process will use the default filter.
            </param>
            <param name="progress">The progress.</param>
            <param name="countryCode">The globalization string.</param>
            <param name="cancellationToken">The cancellation token used for cancelling an operation.</param>
            <returns>The task.</returns>
        </member>
    </members>
</doc>
