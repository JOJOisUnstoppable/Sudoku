<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Diagnostics</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Diagnostics.CSharpProjectUpdater">
            <summary>
            Defines a C# project file <c>*.csproj</c> information updater.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CSharpProjectUpdater.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Diagnostics.CSharpProjectUpdater"/> instance with the specified solution path.
            </summary>
            <param name="solutionPath">The solution path.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.CSharpProjectUpdater.SolutionPath">
            <summary>
            Indicates the solution path.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CSharpProjectUpdater.IncreaseVersionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            To increase <c><![CDATA[<Version>]]></c> block by 0.1.
            </summary>
            <param name="leadingString">The leading string.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CSharpProjectUpdater.UpdateNullableAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            To update <c><![CDATA[<Nullable>]]></c> block.
            </summary>
            <param name="nullableValue">The nullable value to update.</param>
            <param name="leadingString">The leading string.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.FileCounter">
            <summary>
            Encapsulates a file counter.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounter.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified root directory.
            </summary>
            <param name="root">The directory.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance with the specified root directory,
            and the filter pattern. The pattern is specified as a file extension,
            such as <c>"cs"</c>.
            </summary>
            <param name="root">The root.</param>
            <param name="extension">
            The file extension. This parameter can be <see langword="null"/>. If
            so, the counter will sum up all files with all extensions.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes an instance with the specified root directory,
            the file extension and a <see cref="T:System.Boolean"/> value indicating whether
            the counter will record the codes in directories <c>bin</c> and <c>obj</c>.
            </summary>
            <param name="root">The root.</param>
            <param name="extension">
            The file extension. This parameter can be <see langword="null"/>. If
            so, the counter will sum up all files with all extensions.
            </param>
            <param name="withBinOrObjDirectory">
            Indicates whether the counter will record the codes in directories
            <c>bin</c> and <c>obj</c>.
            </param>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounter.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes an instance with the specified root, extension, a <see cref="T:System.Boolean"/> value
            indicating whether the counter will searcher for bin or obj directory, and a file list.
            </summary>
            <param name="root">The root.</param>
            <param name="extension">The file extension.</param>
            <param name="withBinOrObjDirectory">
            A <see cref="T:System.Boolean"/> value indicating whether the counter will search for bin or obj directory.
            </param>
            <param name="fileList">A file list.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.FileCounter.Root">
            <summary>
            The root directory.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.FileCounter.Pattern">
            <summary>
            The pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.FileCounter.WithBinOrObjDirectory">
            <summary>
            Indicates whether the searcher will find directories <c>bin</c> or <c>obj</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Diagnostics.FileCounter.FileList">
            <summary>
            The file list.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounter.CountUp">
            <summary>
            Count up for all files in the specified root directory, and return the result.
            </summary>
            <returns>The result information.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounter.CountUpAsync">
            <summary>
            Count up for all files in the specified root directory, and return the result asynchronously.
            </summary>
            <returns>The task of the operation.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounter.CountUpAsync(System.Threading.CancellationToken)">
            <summary>
            Count up for all files in the specified root directory, and return the result asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task of the operation.</returns>
        </member>
        <member name="T:Sudoku.Diagnostics.FileCounterResult">
            <summary>
            Encapsulates a result after <see cref="T:Sudoku.Diagnostics.FileCounter"/>.
            </summary>
            <param name="ResultLines">The number of lines found.</param>
            <param name="FilesCount">The number of files found.</param>
            <param name="CharactersCount">The number of characters found.</param>
            <param name="Bytes">All bytes.</param>
            <param name="Elapsed">The elapsed time during searching.</param>
            <param name="FileList">
            The list of files. This property won't be output. If you want to use this property,
            please write this property explicitly.
            </param>
            <seealso cref="T:Sudoku.Diagnostics.FileCounter"/>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounterResult.#ctor(System.Int32,System.Int32,System.Int64,System.Int64,System.TimeSpan@,System.Collections.Generic.IList{System.String})">
            <summary>
            Encapsulates a result after <see cref="T:Sudoku.Diagnostics.FileCounter"/>.
            </summary>
            <param name="ResultLines">The number of lines found.</param>
            <param name="FilesCount">The number of files found.</param>
            <param name="CharactersCount">The number of characters found.</param>
            <param name="Bytes">All bytes.</param>
            <param name="Elapsed">The elapsed time during searching.</param>
            <param name="FileList">
            The list of files. This property won't be output. If you want to use this property,
            please write this property explicitly.
            </param>
            <seealso cref="T:Sudoku.Diagnostics.FileCounter"/>
        </member>
        <member name="M:Sudoku.Diagnostics.FileCounterResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException">
            <summary>
            Represents an exception to display the error information about a code is invalid to process.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.InvalidMessage">
            <summary>
            Indicates the message to represent the error.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException"/> instance without any items to pass.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException"/> instance with the specified code.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException"/> instance with the specified error message
            and the code.
            </summary>
            <param name="message">The error message.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException"/> instance
            with the specified code and the inner exception instance.
            </summary>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException"/> instance with the specified error message, the code
            and the inner exception instance.
            </summary>
            <param name="message">The error message.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Diagnostics.LanguageFeatures.CodeIsInvalidException.Code">
            <summary>
            Indicates the error code.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer">
            <summary>
            Introduces a syntax replacer that simplifies the syntax of the full namespace declaration
            to the file-scoped one.
            </summary>
            <remarks>
            Below C# 10, the namespace should be declared with a explicit block:
            <code><![CDATA[
            namespace TestProject
            {
                class Program
                {
                    static void Main()
                    {
                    }
                }
            }
            ]]></code>
            From C# 10, we can use a comma and ignore the indentation:
            <code><![CDATA[
            namespace TestProject;
            
            class Program
            {
                static void Main()
                {
                }
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer.RequiredStringsCount">
            <summary>
            Indicates the number of required match strings to replace.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer.NamespaceDeclaration">
            <summary>
            Indicates the regular expression to match the namespace declaration.
            </summary>
            <remarks>
            <para>
            The regular expression may match four captures:
            <list type="table">
            <item>
            <term>$0</term>
            <description>The whole string. <i>The value may not be useful.</i></description>
            </item>
            <item>
            <term>$1</term>
            <description>The namespace statement line (e.g. <c>"namespace A"</c>).</description>
            </item>
            <item>
            <term>$2</term>
            <description>
            The last part of the whole namespace (e.g. <c>".B"</c> in <c>"A.B"</c>).
            <i>The value may not be useful.</i>
            </description>
            </item>
            <item>
            <term>$3</term>
            <description>The open curly bracket character.</description>
            </item>
            <item>
            <term>$4</term>
            <description>The other code lines. Those lines should decrease the indent.</description>
            </item>
            <item>
            <term>$5</term>
            <description>The closed curly bracket character.</description>
            </item>
            </list>
            </para>
            <para>
            And please note that, this regular expression instance can't process the case that the file
            containing multiple namespace declarations because the part <c>([\s\S]+)</c> matches all characters.
            </para>
            </remarks>
        </member>
        <member name="F:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer.NamespaceStatementHeader">
            <summary>
            Indicates the regular expression instance to test the code to check whether the code contains
            the namespace declarations. If multiple exists, the code is invalid to process.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer.IsValid(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.FileScopedNamespaceSyntaxReplacer.Replace(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer">
            <summary>
            Presents a syntax replacer that changes the current code style to another.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.IsValid(System.String)">
            <summary>
            To check whether the code is valid to process.
            </summary>
            <returns>The code to check.</returns>
            <remarks>
            This method <b>shouldn't</b> be called at any other methods but the method <see cref="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.Replace(System.String)"/>.
            </remarks>
            <seealso cref="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.Replace(System.String)"/>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.Replace(System.String)">
            <summary>
            Replace the current syntax to another.
            </summary>
            <param name="code">The code.</param>
            <returns>
            The replaced result. If the code is invalid, the method should return <see langword="null"/>
            as the invalid result.
            </returns>
            <remarks>
            We recommend you should call the method <see cref="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.IsValid(System.String)"/> at first to check whether
            the code is valid, and then process it.
            </remarks>
            <seealso cref="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.IsValid(System.String)"/>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.ReplaceAsync(System.String)">
            <summary>
            Replace the current syntax to another asynchronously.
            </summary>
            <param name="code">The code.</param>
            <returns>
            The task of the current operation, returns the data of the result value. The inner data will be
            <see langword="null"/> if the code doesn't pass the validation.
            </returns>
        </member>
        <member name="M:Sudoku.Diagnostics.LanguageFeatures.ISyntaxReplacer.ReplaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Replace the current syntax to another asynchronously.
            </summary>
            <param name="code">The code.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>
            The task of the current operation, returns the data of the result value. The inner data will be
            <see langword="null"/> if the code doesn't pass the validation.
            </returns>
        </member>
        <member name="T:Sudoku.Diagnostics.SizeUnit">
            <summary>
            Indicates a unit for a file size.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.Byte">
            <summary>
            Indicates the size is of bytes.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.Kilobyte">
            <summary>
            Indicates the size is of kilobytes (KB).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.Megabyte">
            <summary>
            Indicates the size is of megabytes (MB).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.Gigabyte">
            <summary>
            Indicates the size is of gigabytes (GB).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.Terabyte">
            <summary>
            Indicates the size is of terabytes (TB).
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.IKilobyte">
            <summary>
            Indicates the size is of KiB.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.IMegabyte">
            <summary>
            Indicates the size is of MiB.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.IGigabyte">
            <summary>
            Indicates the size is of GiB.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.SizeUnit.ITerabyte">
            <summary>
            Indicates the size is of TiB.
            </summary>
        </member>
        <member name="T:Sudoku.Diagnostics.SizeUnitConverter">
            <summary>
            Encapsulates a size unit converter.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.SizeUnitConverter.ConvertTo(System.Int64,Sudoku.Diagnostics.SizeUnit)">
            <summary>
            To convert the size into the specified unit.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="sizeUnit">The size unit.</param>
            <returns>The value of the specified size unit.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="sizeUnit"/> is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Diagnostics.SizeUnitConverter.Convert(System.Int64,Sudoku.Diagnostics.SizeUnit@)">
            <summary>
            To convert the size into the appropriate size unit.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="unit">The unit.</param>
            <returns>The value of the specified size unit.</returns>
        </member>
    </members>
</doc>
