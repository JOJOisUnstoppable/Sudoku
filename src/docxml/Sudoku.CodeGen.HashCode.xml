<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.CodeGen.HashCode</name>
    </assembly>
    <members>
        <member name="T:Sudoku.CodeGen.AutoHashCodeAttribute">
            <summary>
            Indicates an attribute that marks a <see langword="class"/> or a <see langword="struct"/>
            that tells the compiler the type should generate a default <c>GetHashCode</c> method.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.AutoHashCodeAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified member list.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.CodeGen.AutoHashCodeAttribute.FieldOrPropertyList">
            <summary>
            All members to generate.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator">
            <summary>
            Indicates the generator that generates the code that overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <seealso cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="F:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.TypeFormat">
            <summary>
            Indicates the type format, and the property type format.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.PropertyTypeFormat">
            <summary>
            Indicates the type format, and the property type format.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.GetMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Try to get all possible fields or properties in the specified <see langword="class"/> type.
            </summary>
            <param name="symbol">The specified class symbol.</param>
            <param name="handleRecursively">
            A <see cref="T:System.Boolean"/> value indicating whether the method will handle the type recursively.</param>
            <returns>The result list that contains all member symbols.</returns>
        </member>
        <member name="T:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.HashCode.AutoGetHashCodeGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGen.HashCode.Extensions.ISymbolEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ISymbol"/>
        </member>
        <member name="M:Sudoku.CodeGen.HashCode.Extensions.ISymbolEx.Marks``1(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            To determine whether the symbol has marked the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of that attribute.</typeparam>
            <param name="this">The symbol to check.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.CodeGen.HashCode.Extensions.SyntaxReferenceEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>
        </member>
    </members>
</doc>
