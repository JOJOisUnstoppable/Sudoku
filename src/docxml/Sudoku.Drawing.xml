<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Drawing</name>
    </assembly>
    <members>
        <member name="T:System.Drawing.BitmapExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:System.Drawing.BitmapExtensions.ZoomTo(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Zoom a picture.
            </summary>
            <param name="this">The bitmap instance.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
            <returns>The new bitmap instance that has been zoomed.</returns>
        </member>
        <member name="T:System.Drawing.GraphicsExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawValue``1(System.Drawing.Graphics,``0,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF@)">
            <summary>
            Draw the string representation an instance onto the current <see cref="T:System.Drawing.Graphics"/> instance.
            </summary>
            <typeparam name="T">The type of the value to draw.</typeparam>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawValue``1(System.Drawing.Graphics,``0,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF@,System.Drawing.StringFormat)">
            <summary>
            Draw the string representation of an instance onto the current <see cref="T:System.Drawing.Graphics"/> instance.
            </summary>
            <typeparam name="T">The type of the value to draw.</typeparam>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="stringFormat">The string format instance.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCrossSign(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@)">
            <summary>
            Draw a cross sign (<c>x</c>).
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <remarks>
            This method will draw a cross sign and fill with the specified color, so you don't need
            to find any fill methods.
            </remarks>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCapsule(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@)">
            <summary>
            Draw a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillCapsule(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF@)">
            <summary>
            Fill a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@,System.Single)">
            <summary>
            Draw a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillRoundedRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF@,System.Single)">
            <summary>
            Fill a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle to fill.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="T:System.Drawing.PointExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Point"/>.
            </summary>
            <seealso cref="T:System.Drawing.Point"/>
        </member>
        <member name="M:System.Drawing.PointExtensions.WithOffset(System.Drawing.Point@,System.Int32)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/> and <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="offset">The offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="M:System.Drawing.PointExtensions.WithOffset(System.Drawing.Point@,System.Int32,System.Int32)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/> and <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="xOffset">The X offset.</param>
            <param name="yOffset">The Y offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="T:System.Drawing.PointFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <seealso cref="T:System.Drawing.PointF"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.Truncate(System.Drawing.PointF@)">
            <summary>
            To truncate the point.
            </summary>
            <param name="this">The point to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithOffset(System.Drawing.PointF@,System.Single)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/> and <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="offset">The offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithOffset(System.Drawing.PointF@,System.Single,System.Single)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/> and <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="xOffset">The X offset.</param>
            <param name="yOffset">The Y offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithX(System.Drawing.PointF@,System.Single)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="xOffset">The X offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithY(System.Drawing.PointF@,System.Single)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="yOffset">The Y offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="T:System.Drawing.RectangleExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.Zoom(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="T:System.Drawing.RectangleFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <seealso cref="T:System.Drawing.RectangleF"/>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Zoom(System.Drawing.RectangleF@,System.Single)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Truncate(System.Drawing.RectangleF@)">
            <summary>
            Truncate the specified rectangle.
            </summary>
            <param name="this">The rectangle.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:System.Drawing.RectangleMarshal">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleMarshal.CreateInstance(System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="leftUp">The left up point.</param>
            <param name="rightDown">The right down point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleMarshal.CreateInstance(System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="leftUp">The left up point.</param>
            <param name="rightDown">The right down point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="T:System.Drawing.SizeFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <seealso cref="T:System.Drawing.SizeF"/>
        </member>
        <member name="M:System.Drawing.SizeFExtensions.Truncate(System.Drawing.SizeF@)">
            <summary>
            To truncate the size.
            </summary>
            <param name="this">The size.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:System.Drawing.Color_DE446EEBA">
            <summary>
            Provides with extension deconstruction methods on this type.
            </summary>
        </member>
        <member name="M:System.Drawing.Color_DE446EEBA.Deconstruct(System.Drawing.Color,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Deconstruct the current instance into multiple values, which means you can use
            the value-tuple syntax to define your own deconstruction logic.
            </summary>
            <remarks>
            <para>
            For example,
            if you have defined a <see langword="static"/> deconstruction method <c>Deconstruct</c>
            in a <see langword="static class"/>, without any return value:
            <code><![CDATA[
            public static void Deconstruct(out string name, out int age)
            {
                name = Name;
                age = Age;
            }
            ]]></code>
            The following code will be legal.
            <code><![CDATA[
            // Use explicitly typed variables to get a deconstruction.
            (string name, int age) = student;
            
            // Or use the type inferring to omit the type of each variable having been deconstructed.
            var (name, age) = student;
            
            // Of course, you can also use the instance-method-like invocation to get values.
            student.Deconstruct(out string name, out int age);
            ]]></code>
            </para>
            <para>
            Static deconstruction methods also allow you using deconstruction patterns, like this:
            <code><![CDATA[
            if (student is (name: var name, age: >= 18))
            {
                Console.WriteLine(name);
            }
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="T:System.Drawing.Point_DEDB9A030A">
            <summary>
            Provides with extension deconstruction methods on this type.
            </summary>
        </member>
        <member name="M:System.Drawing.Point_DEDB9A030A.Deconstruct(System.Drawing.Point,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the current instance into multiple values, which means you can use
            the value-tuple syntax to define your own deconstruction logic.
            </summary>
            <remarks>
            <para>
            For example,
            if you have defined a <see langword="static"/> deconstruction method <c>Deconstruct</c>
            in a <see langword="static class"/>, without any return value:
            <code><![CDATA[
            public static void Deconstruct(out string name, out int age)
            {
                name = Name;
                age = Age;
            }
            ]]></code>
            The following code will be legal.
            <code><![CDATA[
            // Use explicitly typed variables to get a deconstruction.
            (string name, int age) = student;
            
            // Or use the type inferring to omit the type of each variable having been deconstructed.
            var (name, age) = student;
            
            // Of course, you can also use the instance-method-like invocation to get values.
            student.Deconstruct(out string name, out int age);
            ]]></code>
            </para>
            <para>
            Static deconstruction methods also allow you using deconstruction patterns, like this:
            <code><![CDATA[
            if (student is (name: var name, age: >= 18))
            {
                Console.WriteLine(name);
            }
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="T:System.Drawing.PointF_DEC101B1AA">
            <summary>
            Provides with extension deconstruction methods on this type.
            </summary>
        </member>
        <member name="M:System.Drawing.PointF_DEC101B1AA.Deconstruct(System.Drawing.PointF,System.Single@,System.Single@)">
            <summary>
            Deconstruct the current instance into multiple values, which means you can use
            the value-tuple syntax to define your own deconstruction logic.
            </summary>
            <remarks>
            <para>
            For example,
            if you have defined a <see langword="static"/> deconstruction method <c>Deconstruct</c>
            in a <see langword="static class"/>, without any return value:
            <code><![CDATA[
            public static void Deconstruct(out string name, out int age)
            {
                name = Name;
                age = Age;
            }
            ]]></code>
            The following code will be legal.
            <code><![CDATA[
            // Use explicitly typed variables to get a deconstruction.
            (string name, int age) = student;
            
            // Or use the type inferring to omit the type of each variable having been deconstructed.
            var (name, age) = student;
            
            // Of course, you can also use the instance-method-like invocation to get values.
            student.Deconstruct(out string name, out int age);
            ]]></code>
            </para>
            <para>
            Static deconstruction methods also allow you using deconstruction patterns, like this:
            <code><![CDATA[
            if (student is (name: var name, age: >= 18))
            {
                Console.WriteLine(name);
            }
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="T:System.Drawing.Size_DE267FA03A">
            <summary>
            Provides with extension deconstruction methods on this type.
            </summary>
        </member>
        <member name="M:System.Drawing.Size_DE267FA03A.Deconstruct(System.Drawing.Size,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the current instance into multiple values, which means you can use
            the value-tuple syntax to define your own deconstruction logic.
            </summary>
            <remarks>
            <para>
            For example,
            if you have defined a <see langword="static"/> deconstruction method <c>Deconstruct</c>
            in a <see langword="static class"/>, without any return value:
            <code><![CDATA[
            public static void Deconstruct(out string name, out int age)
            {
                name = Name;
                age = Age;
            }
            ]]></code>
            The following code will be legal.
            <code><![CDATA[
            // Use explicitly typed variables to get a deconstruction.
            (string name, int age) = student;
            
            // Or use the type inferring to omit the type of each variable having been deconstructed.
            var (name, age) = student;
            
            // Of course, you can also use the instance-method-like invocation to get values.
            student.Deconstruct(out string name, out int age);
            ]]></code>
            </para>
            <para>
            Static deconstruction methods also allow you using deconstruction patterns, like this:
            <code><![CDATA[
            if (student is (name: var name, age: >= 18))
            {
                Console.WriteLine(name);
            }
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="T:System.Drawing.SizeF_DE53C282DA">
            <summary>
            Provides with extension deconstruction methods on this type.
            </summary>
        </member>
        <member name="M:System.Drawing.SizeF_DE53C282DA.Deconstruct(System.Drawing.SizeF,System.Single@,System.Single@)">
            <summary>
            Deconstruct the current instance into multiple values, which means you can use
            the value-tuple syntax to define your own deconstruction logic.
            </summary>
            <remarks>
            <para>
            For example,
            if you have defined a <see langword="static"/> deconstruction method <c>Deconstruct</c>
            in a <see langword="static class"/>, without any return value:
            <code><![CDATA[
            public static void Deconstruct(out string name, out int age)
            {
                name = Name;
                age = Age;
            }
            ]]></code>
            The following code will be legal.
            <code><![CDATA[
            // Use explicitly typed variables to get a deconstruction.
            (string name, int age) = student;
            
            // Or use the type inferring to omit the type of each variable having been deconstructed.
            var (name, age) = student;
            
            // Of course, you can also use the instance-method-like invocation to get values.
            student.Deconstruct(out string name, out int age);
            ]]></code>
            </para>
            <para>
            Static deconstruction methods also allow you using deconstruction patterns, like this:
            <code><![CDATA[
            if (student is (name: var name, age: >= 18))
            {
                Console.WriteLine(name);
            }
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="T:System.Drawing.RectangleF_DE9A1735DA">
            <summary>
            Provides with extension deconstruction methods on this type.
            </summary>
        </member>
        <member name="M:System.Drawing.RectangleF_DE9A1735DA.Deconstruct(System.Drawing.RectangleF,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruct the current instance into multiple values, which means you can use
            the value-tuple syntax to define your own deconstruction logic.
            </summary>
            <remarks>
            <para>
            For example,
            if you have defined a <see langword="static"/> deconstruction method <c>Deconstruct</c>
            in a <see langword="static class"/>, without any return value:
            <code><![CDATA[
            public static void Deconstruct(out string name, out int age)
            {
                name = Name;
                age = Age;
            }
            ]]></code>
            The following code will be legal.
            <code><![CDATA[
            // Use explicitly typed variables to get a deconstruction.
            (string name, int age) = student;
            
            // Or use the type inferring to omit the type of each variable having been deconstructed.
            var (name, age) = student;
            
            // Of course, you can also use the instance-method-like invocation to get values.
            student.Deconstruct(out string name, out int age);
            ]]></code>
            </para>
            <para>
            Static deconstruction methods also allow you using deconstruction patterns, like this:
            <code><![CDATA[
            if (student is (name: var name, age: >= 18))
            {
                Console.WriteLine(name);
            }
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="T:Sudoku.Drawing.GridImageGenerator">
            <summary>
            Defines and encapsulates a data structure that provides the operations to draw a sudoku puzzle.
            </summary>
            <param name="Calculator">
            Indicates the <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance that calculates the pixels to help the inner
            methods to handle and draw the picture used for displaying onto the UI projects.
            </param>
            <param name="Preferences">
            Indicates the <see cref="T:Sudoku.Drawing.IPreference"/> instance that stores the default preferences
            that decides the drawing behavior.
            </param>
            <param name="Puzzle">Indicates the puzzle.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.#ctor(Sudoku.Drawing.IPointCalculator,Sudoku.Drawing.IPreference,Sudoku.Concepts.Collections.Grid@)">
            <summary>
            Defines and encapsulates a data structure that provides the operations to draw a sudoku puzzle.
            </summary>
            <param name="Calculator">
            Indicates the <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance that calculates the pixels to help the inner
            methods to handle and draw the picture used for displaying onto the UI projects.
            </param>
            <param name="Preferences">
            Indicates the <see cref="T:Sudoku.Drawing.IPreference"/> instance that stores the default preferences
            that decides the drawing behavior.
            </param>
            <param name="Puzzle">Indicates the puzzle.</param>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Calculator">
            <summary>
            Indicates the <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance that calculates the pixels to help the inner
            methods to handle and draw the picture used for displaying onto the UI projects.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Preferences">
            <summary>
            Indicates the <see cref="T:Sudoku.Drawing.IPreference"/> instance that stores the default preferences
            that decides the drawing behavior.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Puzzle">
            <summary>Indicates the puzzle.</summary>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Width">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Height">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.FocusedCells">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.View">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Conclusions">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawManually">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.Draw(System.Drawing.Image,System.Drawing.Graphics)">
            <summary>
            To draw the image.
            </summary>
            <param name="bitmap">The bitmap result.</param>
            <param name="g">The graphics instance.</param>
            <returns>
            The return value is the same as the parameter <paramref name="bitmap"/> when
            this parameter is not <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.GetColor(Sudoku.Presentation.Identifier)">
            <summary>
            Gets the color value.
            </summary>
            <param name="id">The identifier instance.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Throws when the specified value is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawGridAndBlockLines(System.Drawing.Graphics)">
            <summary>
            Draw grid lines and block lines.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draw the background, where the color is specified in <see cref="P:Sudoku.Drawing.IPreference.BackgroundColor"/>.
            </summary>
            <param name="g">The graphics.</param>
            <seealso cref="P:Sudoku.Drawing.IPreference.BackgroundColor"/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawValue(System.Drawing.Graphics)">
            <summary>
            Draw givens, modifiables and candidates, where the values are specified as a grid.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawFocusedCells(System.Drawing.Graphics)">
            <summary>
            Draw focused cells.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawView(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw custom view if <see cref="P:Sudoku.Drawing.GridImageGenerator.View"/> is not <see langword="null"/>.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
            <seealso cref="P:Sudoku.Drawing.GridImageGenerator.View"/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawEliminations(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw eliminations.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawCells(System.Drawing.Graphics)">
            <summary>
            Draw cells.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawCandidates(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw candidates.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offsets.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawRegions(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw regions.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
            <remarks>This method is simply implemented, using cell filling.</remarks>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawLinks(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw links.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawDirectLines(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw direct lines. The direct lines are the information for hidden singles and naked singles.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawUnknownValue(System.Drawing.Graphics)">
            <summary>
            Draw unknown values.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="T:Sudoku.Drawing.IGridImageGenerator">
            <summary>
            Defines a grid image generator that parses a sudoku grid and converts it to an image
            as the result representation.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.SqrtOf2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.RotateAngle">
            <summary>
            The rotate angle (45 degrees). This field is used for rotate the chains if some of them are overlapped.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.TextOffset">
            <summary>
            The text offset that corrects the pixel of the text output.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.DefaultStringFormat">
            <summary>
            Indicates the default string format.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.Width">
            <summary>
            Indicates the drawing width.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.Height">
            <summary>
            Indicates the drawing height.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.FocusedCells">
            <summary>
            Indicates the focused cells.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.View">
            <summary>
            Indicates the view.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.Conclusions">
            <summary>
            Indicates all conclusions.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.IGridImageGenerator.DrawManually">
            <summary>
            To draw the image manually.
            </summary>
            <returns>The result image.</returns>
            <remarks>
            The method may be called manually, because we can't control whether the value is modified.
            </remarks>
        </member>
        <member name="M:Sudoku.Drawing.IGridImageGenerator.GetFont(System.String,System.Single,System.Decimal,System.Drawing.FontStyle)">
            <summary>
            Get the font via the specified name, size and the scale.
            </summary>
            <param name="fontName">The font name that decides the font to use and presentation.</param>
            <param name="size">The size that decides the default font size.</param>
            <param name="scale">The scale that decides the result font size.</param>
            <param name="style">The style that decides the font style of the text in the picture.</param>
            <returns>The font.</returns>
            <exception cref="T:System.ArgumentNullException">
            Throws when <paramref name="fontName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Sudoku.Drawing.IPointCalculator">
            <summary>
            Provides a serial of methods for a point calculator that interacts with the UI projects.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IPointCalculator.DefaultOffset">
            <summary>
            Indicates the default offset value.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IPointCalculator.AnchorsCount">
            <summary>
            Indicates the number of anchors hold per region.
            </summary>
            <remarks>
            The sudoku grid painter will draw the outlines and the inner lines, and correct the point
            of each digits (candidates also included). Each row or column always contains 27 candidates,
            so this value is 27.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.Width">
            <summary>
            Indicates the width of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.Height">
            <summary>
            Indicates the height of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.Offset">
            <summary>
            Indicates the offset of the gap between the picture box outline and the sudoku grid outline.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.ControlSize">
            <summary>
            Indicates the control size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.GridSize">
            <summary>
            Indicates the grid size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.CellSize">
            <summary>
            Indicates the cell size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.CandidateSize">
            <summary>
            Indicates the candidate size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.GridPoints">
            <summary>
            Indicates the absolutely points in grid cross-lines.
            This property will be assigned later (and not <see langword="null"/>).
            </summary>
            <remarks>Note that the size of this 2D array is always 28 by 28.</remarks>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetCell(System.Drawing.PointF@)">
            <summary>
            Get the focus cell offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The cell offset. Returns -1 when the current point is invalid.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetCandidate(System.Drawing.PointF@)">
            <summary>
            Get the focus candidate offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseCenter(Sudoku.Concepts.Collections.Candidates@)">
            <summary>
            Get the center mouse point of all candidates.
            </summary>
            <param name="map">The map of candidates.</param>
            <returns>The center mouse point.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseCenter(Sudoku.Presentation.LockedTarget@)">
            <summary>
            Gets the center mouse point of the specified locked target.
            </summary>
            <param name="lockedTarget">The locked target.</param>
            <returns>The center mouse point.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangle(Sudoku.Concepts.Collections.Candidates@)">
            <summary>
            Get the rectangle from all candidates.
            </summary>
            <param name="map">The candidates.</param>
            <returns>The rectangle.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangleViaCell(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangle(System.Int32,System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) for the specified cell and digit of a candidate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangleViaRegion(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMousePointInCenter(System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset.
            </summary>
            <param name="cell">The cell offset.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMousePointInCenter(System.Int32,System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset and the digit.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetAnchorsViaRegion(System.Int32)">
            <summary>
            Gets two points that specifies and represents the anchors of this region.
            </summary>
            <param name="region">The region.</param>
            <returns>The anchor points.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.CreateConverter(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance with the specified size, and the offset.
            </summary>
            <param name="size">The size.</param>
            <param name="offset">The offset. The default value is <c>10</c>.</param>
            <returns>An <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance.</returns>
        </member>
        <member name="T:Sudoku.Drawing.IPreference">
            <summary>
            Defines the basic preferences.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ShowCandidates">
            <summary>
            Indicates whether the form shows candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ShowLightRegion">
            <summary>
            Indicates whether the grid painter will use new algorithm to render a region (lighter).
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ValueScale">
            <summary>
            Indicates the scale of values.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateScale">
            <summary>
            Indicates the scale of candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GridLineWidth">
            <summary>
            Indicates the grid line width of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.BlockLineWidth">
            <summary>
            Indicates the block line width of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GivenFontName">
            <summary>
            Indicates the font of given digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ModifiableFontName">
            <summary>
            Indicates the font of modifiable digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateFontName">
            <summary>
            Indicates the font of candidate digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GivenFontStyle">
            <summary>
            Indicates the font style of the givens.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ModifiableFontStyle">
            <summary>
            Indicates the font style of the modifiables.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateFontStyle">
            <summary>
            Indicates the font style of the candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.UnknownFontStyle">
            <summary>
            Indicates the font style of an unknown.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GivenColor">
            <summary>
            Indicates the given digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ModifiableColor">
            <summary>
            Indicates the modifiable digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateColor">
            <summary>
            Indicates the candidate digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.FocusedCellColor">
            <summary>
            Indicates the color used for painting for focused cells.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.EliminationColor">
            <summary>
            Indicates the elimination color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CannibalismColor">
            <summary>
            Indicates the cannibalism color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ChainColor">
            <summary>
            Indicates the chain color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.BackgroundColor">
            <summary>
            Indicates the background color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GridLineColor">
            <summary>
            Indicates the grid line color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.BlockLineColor">
            <summary>
            Indicates the block line color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CrosshatchingOutlineColor">
            <summary>
            Indicates the color of the crosshatching outline.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CrosshatchingInnerColor">
            <summary>
            Indicates the color of the crosshatching inner.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.UnknownIdentifierColor">
            <summary>
            Indicates the color of the unknown identifier color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CrossSignColor">
            <summary>
            Indicates the color of the cross sign.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color1">
            <summary>
            Indicates the color 1.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color2">
            <summary>
            Indicates the color 2.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color3">
            <summary>
            Indicates the color 3.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color4">
            <summary>
            Indicates the color 4.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color5">
            <summary>
            Indicates the color 5.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color6">
            <summary>
            Indicates the color 6.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color7">
            <summary>
            Indicates the color 7.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color8">
            <summary>
            Indicates the color 8.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color9">
            <summary>
            Indicates the color 9.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color10">
            <summary>
            Indicates the color 10.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color11">
            <summary>
            Indicates the color 11.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color12">
            <summary>
            Indicates the color 12.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color13">
            <summary>
            Indicates the color 13.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color14">
            <summary>
            Indicates the color 14.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color15">
            <summary>
            Indicates the color 15.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.IPreference.CoverBy(Sudoku.Drawing.IPreference)">
            <summary>
            Copies and covers the current instance via the newer instance.
            </summary>
            <param name="newPreferences">The newer instance to copy.</param>
        </member>
        <member name="M:Sudoku.Drawing.IPreference.TryGetColor(Sudoku.Presentation.Identifier,System.Drawing.Color@)">
            <summary>
            Try to get the result color value.
            </summary>
            <param name="colorIdentifier">The color identifier.</param>
            <param name="result">The result color got.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the ID is invalid.</exception>
        </member>
        <member name="T:Sudoku.Drawing.Perference">
            <summary>
            Indicates a perference instance.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Perference.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Drawing.Perference"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Perference.ShowCandidates">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.ShowLightRegion">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.ValueScale">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CandidateScale">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.GridLineWidth">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.BlockLineWidth">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.GivenFontName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.ModifiableFontName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CandidateFontName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.GivenFontStyle">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.ModifiableFontStyle">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CandidateFontStyle">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.UnknownFontStyle">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.GivenColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.ModifiableColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CandidateColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.FocusedCellColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.EliminationColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CannibalismColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.ChainColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.BackgroundColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.GridLineColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.BlockLineColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CrosshatchingOutlineColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CrosshatchingInnerColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.UnknownIdentifierColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.CrossSignColor">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color1">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color2">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color3">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color4">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color5">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color6">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color7">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color8">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color9">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color10">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color11">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color12">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color13">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color14">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Color15">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.Perference.Default">
            <summary>
            Indicates the default instance.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Perference.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Perference.CoverBy(Sudoku.Drawing.IPreference)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.PointCalculator">
            <summary>
            Defines a point calculator that interacts with the UI projects.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.#ctor(System.Drawing.SizeF@,System.Single)">
            <summary>
            Initializes a <see cref="T:Sudoku.Drawing.PointCalculator"/> instance with
            the specified picture size instance of type <see cref="T:System.Drawing.SizeF"/>, and an offset.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.SizeF"/> instance.</param>
            <param name="offset">
            Indicates the offset to set to allow the output items moving a little bit left or right,
            in order to correct the position on drawing. The default value is <c>10F</c>, which is specified
            in <see cref="F:Sudoku.Drawing.IPointCalculator.DefaultOffset"/>
            </param>
            <seealso cref="F:Sudoku.Drawing.IPointCalculator.DefaultOffset"/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.Width">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.Height">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.Offset">
            <inheritdoc/>
            <remarks>The default value is <c>10</c>.</remarks>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.ControlSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.GridSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.CellSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.CandidateSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.GridPoints">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetCell(System.Drawing.PointF@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetCandidate(System.Drawing.PointF@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseCenter(Sudoku.Concepts.Collections.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseCenter(Sudoku.Presentation.LockedTarget@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangle(Sudoku.Concepts.Collections.Candidates@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangleViaCell(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangle(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangleViaRegion(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetAnchorsViaRegion(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMousePointInCenter(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMousePointInCenter(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.CreateConverter(System.Single,System.Single)">
            <inheritdoc/>
        </member>
    </members>
</doc>
