<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Drawing</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Drawing.GridImageGenerator">
            <summary>
            Defines and encapsulates a data structure that provides the operations to draw a sudoku puzzle.
            </summary>
            <param name="Calculator">
            Indicates the <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance that calculates the pixels to help the inner
            methods to handle and draw the picture used for displaying onto the UI projects.
            </param>
            <param name="Preferences">
            Indicates the <see cref="T:Sudoku.Drawing.IPreference"/> instance that stores the default preferences
            that decides the drawing behavior.
            </param>
            <param name="Puzzle">Indicates the puzzle.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.#ctor(Sudoku.Drawing.IPointCalculator,Sudoku.Drawing.IPreference,Sudoku.Data.Grid@)">
            <summary>
            Defines and encapsulates a data structure that provides the operations to draw a sudoku puzzle.
            </summary>
            <param name="Calculator">
            Indicates the <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance that calculates the pixels to help the inner
            methods to handle and draw the picture used for displaying onto the UI projects.
            </param>
            <param name="Preferences">
            Indicates the <see cref="T:Sudoku.Drawing.IPreference"/> instance that stores the default preferences
            that decides the drawing behavior.
            </param>
            <param name="Puzzle">Indicates the puzzle.</param>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Width">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Height">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.FocusedCells">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.View">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.GridImageGenerator.Conclusions">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawManually">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.Draw(System.Drawing.Image,System.Drawing.Graphics)">
            <summary>
            To draw the image.
            </summary>
            <param name="bitmap">The bitmap result.</param>
            <param name="g">The graphics instance.</param>
            <returns>
            The return value is the same as the parameter <paramref name="bitmap"/> when
            this parameter is not <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawGridAndBlockLines(System.Drawing.Graphics)">
            <summary>
            Draw grid lines and block lines.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draw the background, where the color is specified in <see cref="!:Settings.BackgroundColor"/>.
            </summary>
            <param name="g">The graphics.</param>
            <seealso cref="!:Settings.BackgroundColor"/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawValue(System.Drawing.Graphics)">
            <summary>
            Draw givens, modifiables and candidates, where the values are specified as a grid.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawFocusedCells(System.Drawing.Graphics)">
            <summary>
            Draw focused cells.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawView(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw custom view if <see cref="P:Sudoku.Drawing.GridImageGenerator.View"/> is not <see langword="null"/>.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
            <seealso cref="P:Sudoku.Drawing.GridImageGenerator.View"/>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawEliminations(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw eliminations.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawCells(System.Drawing.Graphics)">
            <summary>
            Draw cells.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawCandidates(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw candidates.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offsets.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawRegions(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw regions.
            </summary>
            <param name="g">The graphics.</param>
            <param name="regions">The regions.</param>
            <param name="offset">The drawing offset.</param>
            <remarks>This method is simply implemented, using cell filling.</remarks>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawLinks(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw links.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawDirectLines(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw direct lines. The direct lines are the information for hidden singles and naked singles.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridImageGenerator.DrawUnknownValue(System.Drawing.Graphics)">
            <summary>
            Draw unknown values.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="T:Sudoku.Drawing.IGridImageGenerator">
            <summary>
            Defines a grid image generator that parses a sudoku grid and converts it to an image
            as the result representation.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.SqrtOf2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.RotateAngle">
            <summary>
            The rotate angle (45 degrees). This field is used for rotate the chains if some of them are overlapped.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.TextOffset">
            <summary>
            The text offset that corrects the pixel of the text output.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IGridImageGenerator.DefaultStringFormat">
            <summary>
            Indicates the default string format.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.Width">
            <summary>
            Indicates the drawing width.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.Height">
            <summary>
            Indicates the drawing height.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.FocusedCells">
            <summary>
            Indicates the focused cells.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.View">
            <summary>
            Indicates the view.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IGridImageGenerator.Conclusions">
            <summary>
            Indicates all conclusions.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.IGridImageGenerator.DrawManually">
            <summary>
            To draw the image manually.
            </summary>
            <returns>The result image.</returns>
            <remarks>
            The method may be called manually, because we can't control whether the value is modified.
            </remarks>
        </member>
        <member name="M:Sudoku.Drawing.IGridImageGenerator.GetFont(System.String,System.Single,System.Decimal,System.Drawing.FontStyle)">
            <summary>
            Get the font via the specified name, size and the scale.
            </summary>
            <param name="fontName">The font name that decides the font to use and presentation.</param>
            <param name="size">The size that decides the default font size.</param>
            <param name="scale">The scale that decides the result font size.</param>
            <param name="style">The style that decides the font style of the text in the picture.</param>
            <returns>The font.</returns>
        </member>
        <member name="T:Sudoku.Drawing.IPointCalculator">
            <summary>
            Provides a serial of methods for a point calculator that interacts with the UI projects.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IPointCalculator.DefaultOffset">
            <summary>
            Indicates the default offset value.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.IPointCalculator.AnchorsCount">
            <summary>
            Indicates the number of anchors hold per region.
            </summary>
            <remarks>
            The sudoku grid painter will draw the outlines and the inner lines, and correct the point
            of each digits (candidates also included). Each row or column always contains 27 candidates,
            so this value is 27.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.Width">
            <summary>
            Indicates the width of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.Height">
            <summary>
            Indicates the height of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.Offset">
            <summary>
            Indicates the offset of the gap between the picture box outline and the sudoku grid outline.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.ControlSize">
            <summary>
            Indicates the control size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.GridSize">
            <summary>
            Indicates the grid size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.CellSize">
            <summary>
            Indicates the cell size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.CandidateSize">
            <summary>
            Indicates the candidate size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPointCalculator.GridPoints">
            <summary>
            Indicates the absolutely points in grid cross-lines.
            This property will be assigned later (and not <see langword="null"/>).
            </summary>
            <remarks>Note that the size of this 2D array is always 28 by 28.</remarks>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetCell(System.Drawing.PointF@)">
            <summary>
            Get the focus cell offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The cell offset. Returns -1 when the current point is invalid.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetCandidate(System.Drawing.PointF@)">
            <summary>
            Get the focus candidate offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseCenter(Sudoku.Data.Candidates@)">
            <summary>
            Get the center mouse point of all candidates.
            </summary>
            <param name="map">The map of candidates.</param>
            <returns>The center mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangle(Sudoku.Data.Candidates@)">
            <summary>
            Get the rectangle from all candidates.
            </summary>
            <param name="map">The candidates.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangleViaCell(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangle(System.Int32,System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) for the specified cell and digit of a candidate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMouseRectangleViaRegion(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMousePointInCenter(System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset.
            </summary>
            <param name="cell">The cell offset.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetMousePointInCenter(System.Int32,System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset and the digit.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.GetAnchorsViaRegion(System.Int32)">
            <summary>
            Gets two points that specifies and represents the anchors of this region.
            </summary>
            <param name="region">The region.</param>
            <returns>The anchor points.</returns>
        </member>
        <member name="M:Sudoku.Drawing.IPointCalculator.CreateConverter(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance with the specified size, and the offset.
            </summary>
            <param name="size">The size.</param>
            <param name="offset">The offset. The default value is <c>10</c>.</param>
            <returns>An <see cref="T:Sudoku.Drawing.IPointCalculator"/> instance.</returns>
        </member>
        <member name="T:Sudoku.Drawing.IPreference">
            <summary>
            Defines the basic preferences.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ShowCandidates">
            <summary>
            Indicates whether the form shows candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ShowLightRegion">
            <summary>
            Indicates whether the grid painter will use new algorithm to render a region (lighter).
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ValueScale">
            <summary>
            Indicates the scale of values.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateScale">
            <summary>
            Indicates the scale of candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GridLineWidth">
            <summary>
            Indicates the grid line width of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.BlockLineWidth">
            <summary>
            Indicates the block line width of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GivenFontName">
            <summary>
            Indicates the font of given digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ModifiableFontName">
            <summary>
            Indicates the font of modifiable digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateFontName">
            <summary>
            Indicates the font of candidate digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GivenFontStyle">
            <summary>
            Indicates the font style of the givens.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ModifiableFontStyle">
            <summary>
            Indicates the font style of the modifiables.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateFontStyle">
            <summary>
            Indicates the font style of the candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.UnknownIdentfierFontStyle">
            <summary>
            Indicates the font style of an unknown identifier.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GivenColor">
            <summary>
            Indicates the given digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ModifiableColor">
            <summary>
            Indicates the modifiable digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CandidateColor">
            <summary>
            Indicates the candidate digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.FocusedCellColor">
            <summary>
            Indicates the color used for painting for focused cells.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.EliminationColor">
            <summary>
            Indicates the elimination color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CannibalismColor">
            <summary>
            Indicates the cannibalism color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.ChainColor">
            <summary>
            Indicates the chain color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.BackgroundColor">
            <summary>
            Indicates the background color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.GridLineColor">
            <summary>
            Indicates the grid line color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.BlockLineColor">
            <summary>
            Indicates the block line color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CrosshatchingOutlineColor">
            <summary>
            Indicates the color of the crosshatching outline.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CrosshatchingInnerColor">
            <summary>
            Indicates the color of the crosshatching inner.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.UnknownIdentifierColor">
            <summary>
            Indicates the color of the unknown identifier color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.CrossSignColor">
            <summary>
            Indicates the color of the cross sign.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color1">
            <summary>
            Indicates the color 1.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color2">
            <summary>
            Indicates the color 2.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color3">
            <summary>
            Indicates the color 3.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color4">
            <summary>
            Indicates the color 4.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color5">
            <summary>
            Indicates the color 5.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color6">
            <summary>
            Indicates the color 6.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color7">
            <summary>
            Indicates the color 7.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color8">
            <summary>
            Indicates the color 8.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color9">
            <summary>
            Indicates the color 9.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color10">
            <summary>
            Indicates the color 10.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color11">
            <summary>
            Indicates the color 11.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color12">
            <summary>
            Indicates the color 12.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color13">
            <summary>
            Indicates the color 13.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color14">
            <summary>
            Indicates the color 14.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.IPreference.Color15">
            <summary>
            Indicates the color 15.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.IPreference.CoverBy(Sudoku.Drawing.IPreference)">
            <summary>
            Copies and covers the current instance via the newer instance.
            </summary>
            <param name="newPreferences">The newer instance to copy.</param>
        </member>
        <member name="M:Sudoku.Drawing.IPreference.TryGetColor(Sudoku.Models.ColorIdentifier,System.Drawing.Color@)">
            <summary>
            Try to get the result color value.
            </summary>
            <param name="colorIdentifier">The color identifier.</param>
            <param name="result">The result color got.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Drawing.PointCalculator">
            <summary>
            Defines a point calculator that interacts with the UI projects.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.#ctor(System.Drawing.SizeF@,System.Single)">
            <summary>
            Initializes a <see cref="T:Sudoku.Drawing.PointCalculator"/> instance with
            the specified picture size instance of type <see cref="T:System.Drawing.SizeF"/>, and an offset.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.SizeF"/> instance.</param>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.Width">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.Height">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.Offset">
            <inheritdoc/>
            <remarks>The default value is <c>10</c>.</remarks>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.ControlSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.GridSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.CellSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.CandidateSize">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Drawing.PointCalculator.GridPoints">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetCell(System.Drawing.PointF@)">
            <summary>
            Get the focus cell offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The cell offset. Returns -1 when the current point is invalid.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetCandidate(System.Drawing.PointF@)">
            <summary>
            Get the focus candidate offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseCenter(Sudoku.Data.Candidates@)">
            <summary>
            Get the center mouse point of all candidates.
            </summary>
            <param name="map">The map of candidates.</param>
            <returns>The center mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangle(Sudoku.Data.Candidates@)">
            <summary>
            Get the rectangle from all candidates.
            </summary>
            <param name="map">The candidates.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangleViaCell(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangle(System.Int32,System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) for the specified cell
            and digit of a candidate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMouseRectangleViaRegion(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The rectangle.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the region is less than 0 or greater than 26.
            </exception>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetAnchorsViaRegion(System.Int32)">
            <summary>
            Gets two points that specifies and represents the anchors of this region.
            </summary>
            <param name="region">The region.</param>
            <returns>The anchor points.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMousePointInCenter(System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset.
            </summary>
            <param name="cell">The cell offset.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.GetMousePointInCenter(System.Int32,System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset and the digit.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointCalculator.CreateConverter(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Recognition.Constants">
            <summary>
            Define the internal settings.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.L2Gradient">
            <summary>
            Indicates the L2Gradient.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.MaxSize">
            <summary>
            Indicates the maximum size.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.RSize">
            <summary>
            Indicates the R-size.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.ThresholdMin">
            <summary>
            Indicates the minimum threshold.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.ThresholdMax">
            <summary>
            Indicates the maximum threshold.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.FontSize">
            <summary>
            Indicates the font size.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.FontSizePr">
            <summary>
            Indicates the font size pr.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.ThOcrMin">
            <summary>
            Indicates the ThOcrMin.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.ThOcrMax">
            <summary>
            Indicates the ThOcrMax.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.Font">
            <summary>
            Indicates the font.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.Constants.ChainApprox">
            <summary>
            Indicates the ChainApprox.
            </summary>
        </member>
        <member name="T:Sudoku.Recognition.FailedToFillValueException">
            <summary>
            Indicates the exception that throws when the value is failed to fill into a cell.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.FailedToFillValueException.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a <see cref="T:Sudoku.Recognition.FailedToFillValueException"/> instance
            with the specified cell and the digit.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Recognition.FailedToFillValueException.Cell">
            <summary>
            Indicates the wrong cell.
            </summary>
        </member>
        <member name="P:Sudoku.Recognition.FailedToFillValueException.Digit">
            <summary>
            Indicates the wrong digit.
            </summary>
        </member>
        <member name="P:Sudoku.Recognition.FailedToFillValueException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Recognition.FailedToFillValueException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognition.FailedToFillValueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Recognition.GridRecognizer">
            <summary>
            Provides a grid field recognizer. If you want to know what is a <b>field</b>,
            please see the 'remark' part of <see cref="T:Sudoku.Recognition.InternalServiceProvider"/>.
            </summary>
            <seealso cref="T:Sudoku.Recognition.InternalServiceProvider"/>
        </member>
        <member name="F:Sudoku.Recognition.GridRecognizer._image">
            <summary>
            The image.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.GridRecognizer.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes an instance with the specified photo.
            </summary>
            <param name="photo">The photo.</param>
        </member>
        <member name="M:Sudoku.Recognition.GridRecognizer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognition.GridRecognizer.Recognize">
            <summary>
            Recognize.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Recognition.GridRecognizer.FindField(Emgu.CV.UMat)">
            <summary>
            Find the field.
            </summary>
            <param name="edges">The edges.</param>
            <returns>The points.</returns>
        </member>
        <member name="M:Sudoku.Recognition.GridRecognizer.GetFourCornerPoints(System.Drawing.Point[])">
            <summary>
            Getting four corner points from contour points.
            </summary>
            <param name="points">The points.</param>
            <returns>The points.</returns>
        </member>
        <member name="M:Sudoku.Recognition.GridRecognizer.PrepareImage">
            <summary>
            Prepare the image.
            </summary>
            <returns>The <see cref="T:Emgu.CV.UMat"/> instance.</returns>
        </member>
        <member name="M:Sudoku.Recognition.GridRecognizer.CutField(System.Drawing.PointF[])">
            <summary>
            To cut the field.
            </summary>
            <param name="field">The field.</param>
            <returns>The image.</returns>
        </member>
        <member name="T:Sudoku.Recognition.ImageHandler">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <remarks>
            Some methods of this file is copied by 
            <see href="https://github.com/emgucv/emgucv/blob/6ee487ad2709d1258cc014103deab2719b026303/Emgu.CV.NativeImage/BitmapExtension.cs">
            the EmguCV's repository
            </see>.
            </remarks>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:Sudoku.Recognition.ImageHandler.IsRectangle(System.Drawing.PointF[],System.Int32,System.Int32,System.Double)">
            <summary>
            Get true if contour is rectangle with angles within <c>[lowAngle, upAngle]</c> degree.
            The default case is <c>[75, 105]</c> given by <paramref name="lowerAngle"/> and
            <paramref name="upperAngle"/>.
            </summary>
            <param name="contour">The contour.</param>
            <param name="lowerAngle">The lower angle. The default value is <c>75</c>.</param>
            <param name="upperAngle">The upper angle. The default value is <c>105</c>.</param>
            <param name="ratio">The ratio. The default value is <c>.35</c>.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Recognition.ImageHandler.CorrectOrientation(System.Drawing.Bitmap)">
            <summary>
            To correct the orientation.
            </summary>
            <param name="this">The bitmap.</param>
        </member>
        <member name="M:Sudoku.Recognition.ImageHandler.ToImage``2(System.Drawing.Bitmap)">
            <summary>
            Create an <see cref="T:Emgu.CV.Image`2"/> from <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <typeparam name="TColor">
            The type of the color model. The type should be implemented the interface <see cref="T:Emgu.CV.IColor"/>,
            and must be a <see langword="struct"/>.
            </typeparam>
            <typeparam name="TDepth">
            The type of the depth model. The only condition is the type should contain
            a parameterless constructor.
            </typeparam>
            <seealso cref="T:Emgu.CV.Image`2"/>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:Sudoku.Recognition.ImageHandler.ColorPaletteToLookupTable(System.Drawing.Imaging.ColorPalette,Emgu.CV.Matrix{System.Byte}@,Emgu.CV.Matrix{System.Byte}@,Emgu.CV.Matrix{System.Byte}@,Emgu.CV.Matrix{System.Byte}@)">
            <summary>
            Convert the color palette to four lookup tables.
            </summary>
            <param name="palette">The color palette to transform.</param>
            <param name="bTable">Lookup table for the B channel.</param>
            <param name="gTable">Lookup table for the G channel.</param>
            <param name="rTable">Lookup table for the R channel.</param>
            <param name="aTable">Lookup table for the A channel.</param>
        </member>
        <member name="M:Sudoku.Recognition.ImageHandler.CopyFromBitmap``2(Emgu.CV.Image{``0,``1},System.Drawing.Bitmap)">
            <summary>
            Utility function for converting <see cref="T:System.Drawing.Bitmap"/> to <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image">The image to copy data to.</param>
            <param name="bmp">the bitmap to copy data from.</param>
        </member>
        <member name="T:Sudoku.Recognition.InternalServiceProvider">
            <summary>
            Define a recognizer.
            </summary>
            <remarks>
            During the recognizing, the <b>field</b> indicates the whole outline of a grid.
            </remarks>
        </member>
        <member name="F:Sudoku.Recognition.InternalServiceProvider._ocr">
            <summary>
            The internal <see cref="T:Emgu.CV.OCR.Tesseract"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Recognition.InternalServiceProvider.Initialized">
            <summary>
            Indicates whether the current recognizer has already initialized.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.InternalServiceProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognition.InternalServiceProvider.RecognizeDigits(Emgu.CV.Image{Emgu.CV.Structure.Bgr,System.Byte})">
            <summary>
            Recognizes digits.
            </summary>
            <param name="field">The field.</param>
            <returns>The grid.</returns>
            <exception cref="T:Sudoku.Recognition.FailedToFillValueException">
            Throws when the processing is wrong or unhandleable.
            </exception>
        </member>
        <member name="M:Sudoku.Recognition.InternalServiceProvider.RecognizeCellNumber(Emgu.CV.Image{Emgu.CV.Structure.Bgr,System.Byte})">
            <summary>
            Recognize the number of a cell.
            </summary>
            <param name="cellImg">The image of a cell.</param>
            <returns>
            The result value (must be between 1 and 9). If the recognition is failed,
            the value will be <c>0</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            Throws when the inner tool isn't been initialized.
            </exception>
            <exception cref="T:Sudoku.Recognition.TesseractException">Throws when the OCR engine error.</exception>
        </member>
        <member name="M:Sudoku.Recognition.InternalServiceProvider.InitTesseract(System.String,System.String)">
            <summary>
            Initializes <see cref="T:Emgu.CV.OCR.Tesseract"/> instance.
            </summary>
            <param name="dir">The directory.</param>
            <param name="lang">The language. The default value is <c>"eng"</c>.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Throws when the file doesn't found.</exception>
        </member>
        <member name="T:Sudoku.Recognition.RecognitionServiceProvider">
            <summary>
            Define a sudoku recognition service provider.
            </summary>
        </member>
        <member name="F:Sudoku.Recognition.RecognitionServiceProvider._recognizingServiceProvider">
            <summary>
            Indicates the internal recognition service provider.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.RecognitionServiceProvider.#ctor">
            <summary>
            Initializes a default <see cref="T:Sudoku.Recognition.RecognitionServiceProvider"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Recognition.RecognitionServiceProvider.IsInitialized">
            <summary>
            Indicates whether the OCR tool has already initialized.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.RecognitionServiceProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognition.RecognitionServiceProvider.Recognize(System.Drawing.Bitmap)">
            <summary>
            Recognize the image.
            </summary>
            <param name="image">The image.</param>
            <returns>The grid.</returns>
            <exception cref="T:Sudoku.Recognition.RecognizerNotInitializedException">
            Throws when the tool has not initialized yet.
            </exception>
        </member>
        <member name="T:Sudoku.Recognition.RecognizerNotInitializedException">
            <summary>
            Indicates the exception that throws when the recognition tools hasn't been initialized
            before using a function.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.RecognizerNotInitializedException.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Recognition.RecognizerNotInitializedException"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.RecognizerNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Recognition.RecognizerNotInitializedException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Recognition.RecognizerNotInitializedException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Recognition.TesseractException">
            <summary>
            Indicates the exception that throws when the tesseract has encountered an error.
            </summary>
        </member>
        <member name="M:Sudoku.Recognition.TesseractException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Recognition.TesseractException"/> with the specified detail.
            </summary>
            <param name="detail">The detail.</param>
        </member>
        <member name="M:Sudoku.Recognition.TesseractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Recognition.TesseractException.Detail">
            <summary>
            Indicates the detail.
            </summary>
        </member>
        <member name="P:Sudoku.Recognition.TesseractException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Recognition.TesseractException.HelpLink">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognition.TesseractException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:System.Drawing.BitmapExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:System.Drawing.BitmapExtensions.ZoomTo(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Zoom a picture.
            </summary>
            <param name="this">The bitmap instance.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
            <returns>The new bitmap instance that has been zoomed.</returns>
        </member>
        <member name="T:System.Drawing.GraphicsExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawValue``1(System.Drawing.Graphics,``0,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF@)">
            <summary>
            Draw the string representation an instance onto the current <see cref="T:System.Drawing.Graphics"/> instance.
            </summary>
            <typeparam name="TNotNull">The type of the value to draw.</typeparam>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawValue``1(System.Drawing.Graphics,``0,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF@,System.Drawing.StringFormat)">
            <summary>
            Draw the string representation of an instance onto the current <see cref="T:System.Drawing.Graphics"/> instance.
            </summary>
            <typeparam name="TNotNull">The type of the value to draw.</typeparam>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="stringFormat">The string format instance.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCrossSign(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@)">
            <summary>
            Draw a cross sign (<c>x</c>).
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <remarks>
            This method will draw a cross sign and fill with the specified color, so you don't need
            to find any fill methods.
            </remarks>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCapsule(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@)">
            <summary>
            Draw a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillCapsule(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF@)">
            <summary>
            Fill a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@,System.Single)">
            <summary>
            Draw a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillRoundedRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF@,System.Single)">
            <summary>
            Fill a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle to fill.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="T:System.Drawing.PointExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Point"/>.
            </summary>
            <seealso cref="T:System.Drawing.Point"/>
        </member>
        <member name="M:System.Drawing.PointExtensions.WithOffset(System.Drawing.Point@,System.Int32)">
            <summary>
            Get a new <see cref="!:DPointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="!:DPointF.X"/> and <see cref="!:DPointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="offset">The offset.</param>
            <returns>The result point.</returns>
            <seealso cref="!:DPointF.X"/>
            <seealso cref="!:DPointF.Y"/>
        </member>
        <member name="M:System.Drawing.PointExtensions.WithOffset(System.Drawing.Point@,System.Int32,System.Int32)">
            <summary>
            Get a new <see cref="!:DPointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="!:DPointF.X"/> and <see cref="!:DPointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="xOffset">The X offset.</param>
            <param name="yOffset">The Y offset.</param>
            <returns>The result point.</returns>
            <seealso cref="!:DPointF.X"/>
            <seealso cref="!:DPointF.Y"/>
        </member>
        <member name="T:System.Drawing.PointFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <seealso cref="T:System.Drawing.PointF"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.Truncate(System.Drawing.PointF@)">
            <summary>
            To truncate the point.
            </summary>
            <param name="this">The point to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithOffset(System.Drawing.PointF@,System.Single)">
            <summary>
            Get a new <see cref="!:DPointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="!:DPointF.X"/> and <see cref="!:DPointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="offset">The offset.</param>
            <returns>The result point.</returns>
            <seealso cref="!:DPointF.X"/>
            <seealso cref="!:DPointF.Y"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithOffset(System.Drawing.PointF@,System.Single,System.Single)">
            <summary>
            Get a new <see cref="!:DPointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="!:DPointF.X"/> and <see cref="!:DPointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="xOffset">The X offset.</param>
            <param name="yOffset">The Y offset.</param>
            <returns>The result point.</returns>
            <seealso cref="!:DPointF.X"/>
            <seealso cref="!:DPointF.Y"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithX(System.Drawing.PointF@,System.Single)">
            <summary>
            Get a new <see cref="!:DPointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="xOffset">The X offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.WithY(System.Drawing.PointF@,System.Single)">
            <summary>
            Get a new <see cref="!:DPointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="yOffset">The Y offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="T:System.Drawing.RectangleExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.Zoom(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="T:System.Drawing.RectangleFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <seealso cref="T:System.Drawing.RectangleF"/>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Zoom(System.Drawing.RectangleF@,System.Single)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Truncate(System.Drawing.RectangleF@)">
            <summary>
            Truncate the specified rectangle.
            </summary>
            <param name="this">The rectangle.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:System.Drawing.RectangleMarshal">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleMarshal.CreateInstance(System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="leftUp">The left up point.</param>
            <param name="rightDown">The right down point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleMarshal.CreateInstance(System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="leftUp">The left up point.</param>
            <param name="rightDown">The right down point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="T:System.Drawing.SizeFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <seealso cref="T:System.Drawing.SizeF"/>
        </member>
        <member name="M:System.Drawing.SizeFExtensions.Truncate(System.Drawing.SizeF@)">
            <summary>
            To truncate the size.
            </summary>
            <param name="this">The size.</param>
            <returns>The result.</returns>
        </member>
    </members>
</doc>
