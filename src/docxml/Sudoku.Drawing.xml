<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Drawing</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Drawing.ColorId">
            <summary>
            Extracts the extension methods for color ID.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.ColorId.ToCustomColorId(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert the current quadruple to a custom color ID.
            </summary>
            <param name="a">The alpha.</param>
            <param name="r">The red.</param>
            <param name="g">The green.</param>
            <param name="b">The blue.</param>
            <returns>The custom color ID.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ColorId.IsCustomColorId(System.Int64,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Check whether the color ID holds a custom color.
            </summary>
            <param name="this">The color ID.</param>
            <param name="a">The alpha.</param>
            <param name="r">The red.</param>
            <param name="g">The green.</param>
            <param name="b">The blue.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <remarks>
            <see cref="T:Sudoku.Models.DrawingInfo"/> objects holds key and value two properties, where
            <see cref="P:Sudoku.Models.DrawingInfo.Id"/> is the key. Here ID can save a color value quadruple
            if the higher 32 bits are 0xDEAD. The last 32 bits are A, R, G, B value from one color.
            Otherwise the ID value is only between -4 and 10 (at present, who knows
            whether the range will be extended larger or not).
            </remarks>
            <seealso cref="T:Sudoku.Models.DrawingInfo"/>
            <seealso cref="P:Sudoku.Models.DrawingInfo.Id"/>
        </member>
        <member name="T:Sudoku.Drawing.ColorIdParser">
            <summary>
            Encapsulates the color ID parser that converts the string to an <see cref="T:System.Int64"/> value that
            represents a color ID used in <see cref="T:Sudoku.Models.DrawingInfo"/>.
            </summary>
            <seealso cref="T:Sudoku.Models.DrawingInfo"/>
        </member>
        <member name="M:Sudoku.Drawing.ColorIdParser.TryParse(System.String,System.Int64@,System.Nullable{System.Byte},System.Char[])">
            <summary>
            Try to parse the string, and convert it to a color ID.
            </summary>
            <param name="str">The string.</param>
            <param name="colorId">The color ID.</param>
            <param name="alpha">The alpha.</param>
            <param name="separators">The separators.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Drawing.Converters.CellsJsonConverter">
            <summary>
            Indicates a <see cref="T:Sudoku.Data.Cells"/> JSON converter.
            </summary>
            <seealso cref="T:Sudoku.Data.Cells"/>
        </member>
        <member name="F:Sudoku.Drawing.Converters.CellsJsonConverter.HighBits">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Converters.CellsJsonConverter.LowBits">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Converters.CellsJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.CellsJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.CellsJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.Cells,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.Converters.ColorJsonConverter">
            <summary>
            Indicates a <see cref="T:System.Drawing.Color"/> JSON converter.
            </summary>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.ColorJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.ColorJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
            <exception cref="T:System.Text.Json.JsonException">
            Throws when the current token isn't <c>"A"</c>, <c>"R"</c>, <c>"G"</c> or <c>"B"</c>.
            </exception>
        </member>
        <member name="M:Sudoku.Drawing.Converters.ColorJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Drawing.Color,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.Converters.DirectLineJsonConverter">
            <summary>
            Indicates a <see cref="T:System.ValueTuple`2"/> JSON converter.
            </summary>
            <seealso cref="T:System.ValueTuple`2"/>
        </member>
        <member name="F:Sudoku.Drawing.Converters.DirectLineJsonConverter.Start">
            <summary>
            Indicates the property name.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Converters.DirectLineJsonConverter.End">
            <summary>
            Indicates the property name.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Converters.DirectLineJsonConverter.InnerOptions">
            <summary>
            Indicates the inner options.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Converters.DirectLineJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.DirectLineJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.DirectLineJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.ValueTuple{Sudoku.Data.Cells,Sudoku.Data.Cells},System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.Converters.DrawingInfoJsonConverter">
            <summary>
            Indicates a <see cref="T:Sudoku.Models.DrawingInfo"/> JSON converter.
            </summary>
            <seealso cref="T:Sudoku.Models.DrawingInfo"/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.DrawingInfoJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.DrawingInfoJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.DrawingInfoJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Models.DrawingInfo,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.Converters.LinkJsonConverter">
            <summary>
            Indicates a <see cref="T:Sudoku.Data.Link"/> JSON converter.
            </summary>
            <seealso cref="T:Sudoku.Data.Link"/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.LinkJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.LinkJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.LinkJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Data.Link,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.Converters.MutableViewJsonConverter">
            <summary>
            Indicates a <see cref="T:Sudoku.Drawing.MutableView"/> JSON converter.
            </summary>
            <seealso cref="T:Sudoku.Drawing.MutableView"/>
        </member>
        <member name="F:Sudoku.Drawing.Converters.MutableViewJsonConverter.InnerOptions">
            <summary>
            Indicates the inner options.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Converters.MutableViewJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.MutableViewJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.MutableViewJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Drawing.MutableView,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.Converters.ViewJsonConverter">
            <summary>
            Indicates a <see cref="T:Sudoku.Drawing.View"/> JSON converter.
            </summary>
            <seealso cref="T:Sudoku.Drawing.View"/>
        </member>
        <member name="F:Sudoku.Drawing.Converters.ViewJsonConverter.InnerOptions">
            <summary>
            Indicates the inner options.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Converters.ViewJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.ViewJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Converters.ViewJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Sudoku.Drawing.View,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.GridPainter">
            <summary>
            Indicates the grid painter.
            </summary>
            <param name="Converter">Indicates the <see cref="T:Sudoku.Drawing.PointConverter"/> instance.</param>
            <param name="Preferences">Indicates the <see cref="T:Sudoku.Drawing.Settings"/> instance.</param>
            <param name="Grid">Indicates the grid.</param>
            <remarks>
            Please note that eliminations will be colored with red, but all assignments won't be colored,
            because they will be colored using another method (draw candidates).
            </remarks>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.#ctor(Sudoku.Drawing.PointConverter,Sudoku.Drawing.Settings,Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Indicates the grid painter.
            </summary>
            <param name="Converter">Indicates the <see cref="T:Sudoku.Drawing.PointConverter"/> instance.</param>
            <param name="Preferences">Indicates the <see cref="T:Sudoku.Drawing.Settings"/> instance.</param>
            <param name="Grid">Indicates the grid.</param>
            <remarks>
            Please note that eliminations will be colored with red, but all assignments won't be colored,
            because they will be colored using another method (draw candidates).
            </remarks>
        </member>
        <member name="F:Sudoku.Drawing.GridPainter.SqrtOf2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.GridPainter.RotateAngle">
            <summary>
            The rotate angle (45 degrees, i.e. <c><see cref="F:System.Math.PI"/> / 4</c>).
            This field is used for rotate the chains if some of them are overlapped.
            </summary>
            <seealso cref="F:System.Math.PI"/>
        </member>
        <member name="P:Sudoku.Drawing.GridPainter.Width">
            <summary>
            Indicates the drawing width.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.GridPainter.Height">
            <summary>
            Indicates the drawing height.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.GridPainter.FocusedCells">
            <summary>
            Indicates the focused cells.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.GridPainter.View">
            <summary>
            Indicates the view.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.GridPainter.CustomView">
            <summary>
            Indicates the custom view.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.GridPainter.Conclusions">
            <summary>
            Indicates all conclusions.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.Draw">
            <summary>
            To draw the image.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.Draw(System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            To draw the image.
            </summary>
            <param name="bitmap">The bitmap result.</param>
            <param name="g">The graphics instance.</param>
            <returns>
            The return value is the same as the parameter <paramref name="bitmap"/> when
            this parameter is not <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawValue(System.Drawing.Graphics,Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Draw givens, modifiables and candidates, where the values are specified as a grid.
            </summary>
            <param name="g">The graphics.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawCustomViewIfNeed(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw custom view if <see cref="P:Sudoku.Drawing.GridPainter.CustomView"/> is not <see langword="null"/>.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
            <seealso cref="P:Sudoku.Drawing.GridPainter.CustomView"/>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawViewIfNeed(System.Drawing.Graphics,System.Single)">
            <summary>
            Draw custom view if <see cref="P:Sudoku.Drawing.GridPainter.View"/> is not <see langword="null"/>.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
            <seealso cref="P:Sudoku.Drawing.GridPainter.View"/>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawViewIfNeedInternal(System.Drawing.Graphics,System.Single,System.Object,System.Boolean)">
            <summary>
            Draw the specified view.
            </summary>
            <param name="g">The graphics.</param>
            <param name="offset">The drawing offset.</param>
            <param name="view">The view instance.</param>
            <param name="isView">
            Indicates whether the current <paramref name="view"/> instance is <see cref="T:Sudoku.Drawing.View"/>.
            </param>
            <seealso cref="T:Sudoku.Drawing.View"/>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawFocusedCells(System.Drawing.Graphics,Sudoku.Data.Cells@)">
            <summary>
            Draw focused cells.
            </summary>
            <param name="g">The graphics.</param>
            <param name="focusedCells">The focused cells.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draw the background, where the color is specified in <see cref="P:Sudoku.Drawing.Settings.BackgroundColor"/>.
            </summary>
            <param name="g">The graphics.</param>
            <seealso cref="P:Sudoku.Drawing.Settings.BackgroundColor"/>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawGridAndBlockLines(System.Drawing.Graphics)">
            <summary>
            Draw grid lines and block lines.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawEliminations(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion},System.Single)">
            <summary>
            Draw eliminations.
            </summary>
            <param name="g">The graphics.</param>
            <param name="conclusions">The conclusions.</param>
            <param name="offset">The drawing offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawDirectLines(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{System.ValueTuple{Sudoku.Data.Cells,Sudoku.Data.Cells}},System.Single)">
            <summary>
            Draw direct lines. The direct lines are the information for hidden singles and naked singles.
            </summary>
            <param name="g">The graphics.</param>
            <param name="directLines">The direct lines.</param>
            <param name="offset">The drawing offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawLinks(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{Sudoku.Data.Link},System.Single)">
            <summary>
            Draw links.
            </summary>
            <param name="g">The graphics.</param>
            <param name="links">The links.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawRegions(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{Sudoku.Models.DrawingInfo},System.Single)">
            <summary>
            Draw regions.
            </summary>
            <param name="g">The graphics.</param>
            <param name="regions">The regions.</param>
            <param name="offset">The drawing offset.</param>
            <remarks>This method is simply implemented, using cell filling.</remarks>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawCandidates(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{Sudoku.Models.DrawingInfo},System.Single)">
            <summary>
            Draw candidates.
            </summary>
            <param name="g">The graphics.</param>
            <param name="candidates">The candidates.</param>
            <param name="offset">The drawing offsets.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawCells(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{Sudoku.Models.DrawingInfo})">
            <summary>
            Draw cells.
            </summary>
            <param name="g">The graphics.</param>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.DrawStepFilling(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Char}})">
            <summary>
            Draw step filling values.
            </summary>
            <param name="g">The graphics.</param>
            <param name="stepFilling">The list of step filling values.</param>
        </member>
        <member name="M:Sudoku.Drawing.GridPainter.GetFontByScale(System.String,System.Single,System.Decimal,System.Nullable{System.Drawing.FontStyle})">
            <summary>
            Get the font via name, size and the scale.
            </summary>
            <param name="fontName">The font name.</param>
            <param name="size">The size.</param>
            <param name="scale">The scale.</param>
            <param name="style">The style.</param>
            <returns>The font.</returns>
        </member>
        <member name="T:Sudoku.Drawing.MutableView">
            <summary>
            Encapsulates a view when displaying the information on forms.
            Different with <see cref="T:Sudoku.Drawing.View"/>, this data structure can add and remove the items
            in the current collection.
            </summary>
            <seealso cref="T:Sudoku.Drawing.View"/>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.#ctor">
            <summary>
            Initializes an instance, and all properties are initialized by a default instantiation behavior
            (i.e. a <see langword="new"/> clause).
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.MutableView.Cells">
            <summary>
            Indicates all cells used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.MutableView.Candidates">
            <summary>
            Indicates all candidates used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.MutableView.Regions">
            <summary>
            Indicates all regions used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.MutableView.Links">
            <summary>
            Indicates all links used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.MutableView.DirectLines">
            <summary>
            Indicates all direct lines.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.AddCell(System.Int64,System.Int32)">
            <summary>
            Add a cell into the list.
            </summary>
            <param name="id">The color ID.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.AddCandidate(System.Int64,System.Int32)">
            <summary>
            Add a candidate into the list.
            </summary>
            <param name="id">The color ID.</param>
            <param name="candidate">The cell.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.AddRegion(System.Int64,System.Int32)">
            <summary>
            Add a region into the list.
            </summary>
            <param name="id">The color ID.</param>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.AddLink(Sudoku.Data.Link@)">
            <summary>
            Add a link into the list.
            </summary>
            <param name="inference">The link.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.AddDirectLine(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Add a direct link into the list.
            </summary>
            <param name="start">The start map.</param>
            <param name="end">The end map.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.RemoveCell(System.Int32)">
            <summary>
            Remove the cell from the list.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.RemoveCandidate(System.Int32)">
            <summary>
            Remove the candidate from the list.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.RemoveRegion(System.Int32)">
            <summary>
            Remove the region from the list.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.RemoveLink(System.Int32)">
            <summary>
            Remove the link from the list, where the link is specified as a start candidate.
            </summary>
            <param name="startCandidate">The start candidate to check.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.RemoveLink(Sudoku.Data.Link@)">
            <summary>
            Remove the link from the list.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.RemoveDirectLine(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Remove the direct link from the list.
            </summary>
            <param name="start">The start map.</param>
            <param name="end">The end map.</param>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.Clear">
            <summary>
            Clear all elements.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.ContainsCell(System.Int32)">
            <summary>
            Indicates whether the list contains the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.ContainsCandidate(System.Int32)">
            <summary>
            Indicates whether the list contains the specified candidate.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.ContainsRegion(System.Int32)">
            <summary>
            Indicates whether the list contains the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.ContainsLink(System.Int32)">
            <summary>
            Indicates whether the list contains the specified link where the start candidate is same
            as the argument <paramref name="startCandidate"/>.
            </summary>
            <param name="startCandidate">The start candidate.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.ContainsLink(Sudoku.Data.Link@)">
            <summary>
            Indicates whether the list contains the specified link.
            </summary>
            <param name="inference">The link.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.ContainsDirectLine(Sudoku.Data.Cells@,Sudoku.Data.Cells@)">
            <summary>
            Indicates whether the list contains the specified direct line.
            </summary>
            <param name="start">The start map.</param>
            <param name="end">The end map.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.Equals(Sudoku.Drawing.MutableView)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.ToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the current instance to a JSON string.
            </summary>
            <param name="options">The option instance.</param>
            <returns>The JSON result string.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.op_Equality(Sudoku.Drawing.MutableView,Sudoku.Drawing.MutableView)">
            <summary>
            Determines whether two <see cref="T:Sudoku.Drawing.MutableView"/> hold a same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Drawing.MutableView.op_Inequality(Sudoku.Drawing.MutableView,Sudoku.Drawing.MutableView)">
            <summary>
            Determines whether two <see cref="T:Sudoku.Drawing.MutableView"/> don't hold a same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Drawing.PointConverter">
            <summary>
            Provides converting operations for <see cref="T:System.Drawing.Point"/> and
            <see cref="T:System.Drawing.PointF"/> usages in the window to calculate and convert
            between the drawing coordinates and the mouse coordinates.
            </summary>
            <seealso cref="T:System.Drawing.Point"/>
            <seealso cref="T:System.Drawing.PointF"/>
        </member>
        <member name="F:Sudoku.Drawing.PointConverter.Offset">
            <summary>
            Indicates the width of the gap between the picture box outline
            and the sudoku grid outline.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the width and height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.#ctor(System.Single,System.Single)">
            <summary>
            Initializes an instance with the width and height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.#ctor(System.Drawing.SizeF@)">
            <summary>
            Initializes an instance with the specified <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <param name="size">The size.</param>
            <seealso cref="T:System.Drawing.SizeF"/>
        </member>
        <member name="P:Sudoku.Drawing.PointConverter.ControlSize">
            <summary>
            Indicates the control size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.PointConverter.GridSize">
            <summary>
            Indicates the grid size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.PointConverter.CellSize">
            <summary>
            Indicates the cell size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.PointConverter.CandidateSize">
            <summary>
            Indicates the candidate size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.PointConverter.GridPoints">
            <summary>
            Indicates the absolutely points in grid cross-lines.
            This property will be assigned later (and not <see langword="null"/>).
            </summary>
            <remarks>
            Note that the size of this 2D array is always 28 by 28.
            </remarks>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetCell(System.Drawing.PointF@)">
            <summary>
            Get the focus cell offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The cell offset. Returns -1 when the current point is invalid.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetCandidate(System.Drawing.PointF@)">
            <summary>
            Get the focus candidate offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetMouseCenter(Sudoku.Data.Candidates@)">
            <summary>
            Get the center mouse point of all candidates.
            </summary>
            <param name="map">The map of candidates.</param>
            <returns>The center mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetMouseRectangle(Sudoku.Data.Candidates@)">
            <summary>
            Get the rectangle from all candidates.
            </summary>
            <param name="map">The candidates.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetMouseRectangleViaCell(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetMouseRectangle(System.Int32,System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) for the specified cell
            and digit of a candidate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetMouseRectangleViaRegion(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The rectangle.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the region is less than 0 or greater than 26.
            </exception>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetAnchorsViaRegion(System.Int32)">
            <summary>
            Gets two points that specifies and represents the anchors of this region.
            </summary>
            <param name="region">The region.</param>
            <returns>The anchor points.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetMousePointInCenter(System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset.
            </summary>
            <param name="cell">The cell offset.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.PointConverter.GetMousePointInCenter(System.Int32,System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset and the digit.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="T:Sudoku.Drawing.Settings">
            <summary>
            Provides with a base class for program settings.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Settings.#ctor">
            <summary>
            Initializes a default <see cref="T:Sudoku.Drawing.Settings"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Settings.#ctor(Sudoku.Drawing.Settings)">
            <summary>
             Copies another settings instance.
            </summary>
            <param name="another">Another instance.</param>
        </member>
        <member name="M:Sudoku.Drawing.Settings.CoverBy(Sudoku.Drawing.Settings)">
            <summary>
            To cover all settings.
            </summary>
            <param name="newSetting">The new settings instance.</param>
        </member>
        <member name="M:Sudoku.Drawing.Settings.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.Settings.TryGetPaletteColor(System.Int32,System.Drawing.Color@)">
            <summary>
            Try to get the palette color using the specified index.
            </summary>
            <param name="id">The ID value.</param>
            <param name="result">The result color.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether the operation is successful.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Settings.InternalCoverBy(Sudoku.Drawing.Settings)">
            <summary>
            The internal covering.
            </summary>
            <param name="newSetting">The new settings.</param>
        </member>
        <member name="M:Sudoku.Drawing.Settings.InternalClone``1">
            <summary>
            The internal clone.
            </summary>
            <typeparam name="TSettings">The type of the cloneation.</typeparam>
            <returns>The result instance.</returns>
        </member>
        <member name="P:Sudoku.Drawing.Settings.ShowCandidates">
            <summary>
            <para>Indicates whether the form shows candidates.</para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.ShowLightRegion">
            <summary>
            <para>Indicates whether the grid painter will use new algorithm to render a region (lighter).</para>
            <para>The value is <see langword="true"/> in author reserved case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.ValueScale">
            <summary>
            <para>Indicates the scale of values.</para>
            <para>The value is <c>0.9M</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.CandidateScale">
            <summary>
            <para>Indicates the scale of candidates.</para>
            <para>The value is <c>0.3M</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.GridLineWidth">
            <summary>
            <para>
            Indicates the grid line width of the sudoku grid to render.
            </para>
            <para>The value is <c>1.5F</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.BlockLineWidth">
            <summary>
            <para>
            Indicates the block line width of the sudoku grid to render.
            </para>
            <para>The value is <c>3F</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.GivenFontName">
            <summary>
            <para>
            Indicates the font of given digits to render.
            </para>
            <para>
            The value is <c>"Fira Code"</c> in author-reserved environment,
            <c>"Arial"</c> in other ones.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.ModifiableFontName">
            <summary>
            <para>
            Indicates the font of modifiable digits to render.
            </para>
            <para>
            The value is <c>"Fira Code"</c> in author-reserved environment,
            <c>"Arial"</c> in other ones.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.CandidateFontName">
            <summary>
            <para>
            Indicates the font of candidate digits to render.
            </para>
            <para>
            The value is <c>"Fira Code"</c> in author-reserved environment,
            <c>"Arial"</c> in other ones.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.GivenColor">
            <summary>
            <para>Indicates the given digits to render.</para>
            <para>The value is <see cref="P:System.Drawing.Color.Black"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.ModifiableColor">
            <summary>
            <para>Indicates the modifiable digits to render.</para>
            <para>The value is <see cref="P:System.Drawing.Color.Blue"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.CandidateColor">
            <summary>
            <para>Indicates the candidate digits to render.</para>
            <para>The value is <see cref="P:System.Drawing.Color.DimGray"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.FocusedCellColor">
            <summary>
            <para>Indicates the color used for painting for focused cells.</para>
            <para>
            The value is <c>#20FFFF00</c> (<see cref="P:System.Drawing.Color.Yellow"/>
            with alpha <c>32</c>) in default case.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.EliminationColor">
            <summary>
            Indicates the elimination color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.CannibalismColor">
            <summary>
            Indicates the cannibalism color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.ChainColor">
            <summary>
            Indicates the chain color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.BackgroundColor">
            <summary>
            <para>Indicates the background color of the sudoku grid to render.</para>
            <para>The value is <see cref="P:System.Drawing.Color.White"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.GridLineColor">
            <summary>
            <para>Indicates the grid line color of the sudoku grid to render.</para>
            <para>The value is <see cref="P:System.Drawing.Color.Black"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.BlockLineColor">
            <summary>
            <para>
            Indicates the block line color of the sudoku grid to render.
            </para>
            <para>The value is <see cref="P:System.Drawing.Color.Black"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.CrosshatchingOutlineColor">
            <summary>
            <para>
            Indicates the color of the crosshatching outline.
            </para>
            <para>The value is <see cref="P:System.Drawing.Color.Black"/> with the alpha 192 in debugger mode,
            <see cref="P:System.Drawing.Color.SkyBlue"/> with the alpha 192 in release mode in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.CrosshatchingInnerColor">
            <summary>
            <para>
            Indicates the color of the crosshatching inner.
            </para>
            <para>
            The value is <see cref="P:System.Drawing.Color.Transparent"/> in author-reserved environment,
            <see cref="P:System.Drawing.Color.SkyBlue"/> in other ones in default case.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.CrossSignColor">
            <summary>
            <para>
            Indicates the color of the cross sign.
            </para>
            <para>The value is <see cref="P:System.Drawing.Color.Red"/> with the alpha 192 in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color1">
            <summary>
            Indicates the color 1.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color2">
            <summary>
            Indicates the color 2.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color3">
            <summary>
            Indicates the color 3.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color4">
            <summary>
            Indicates the color 4.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color5">
            <summary>
            Indicates the color 5.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color6">
            <summary>
            Indicates the color 6.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color7">
            <summary>
            Indicates the color 7.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color8">
            <summary>
            Indicates the color 8.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color9">
            <summary>
            Indicates the color 9.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color10">
            <summary>
            Indicates the color 10.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color11">
            <summary>
            Indicates the color 11.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color12">
            <summary>
            Indicates the color 12.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color13">
            <summary>
            Indicates the color 13.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color14">
            <summary>
            Indicates the color 14.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.Color15">
            <summary>
            Indicates the color 15.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Settings.PaletteColors">
            <summary>
            Indicates the palette colors.
            </summary>
        </member>
        <member name="T:Sudoku.Drawing.View">
            <summary>
            Encapsulates a view when displaying the information on forms.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.View.Cells">
            <summary>
            Indicates all cells used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.View.Candidates">
            <summary>
            Indicates all candidates used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.View.Regions">
            <summary>
            Indicates all regions used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.View.Links">
            <summary>
            Indicates all links used.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.View.DirectLines">
            <summary>
            Indicates all direct lines.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.View.StepFilling">
            <summary>
            Indicates the step filling that is used to display the temporary values, this property
            is commonly used by the technique unknown covering.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.View.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.View.Equals(Sudoku.Drawing.View)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.View.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.View.ToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the current instance to a JSON string.
            </summary>
            <param name="options">The option instance.</param>
            <returns>The JSON result string.</returns>
        </member>
        <member name="M:Sudoku.Drawing.View.op_Equality(Sudoku.Drawing.View,Sudoku.Drawing.View)">
            <summary>
            Determines whether two <see cref="T:Sudoku.Drawing.View"/> hold a same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Drawing.View.op_Inequality(Sudoku.Drawing.View,Sudoku.Drawing.View)">
            <summary>
            Determines whether two <see cref="T:Sudoku.Drawing.View"/> don't hold a same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.Drawing.BitmapExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:System.Drawing.BitmapExtensions.ZoomTo(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Zoom a picture.
            </summary>
            <param name="this">The bitmap instance.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
            <returns>The new bitmap instance that has been zoomed.</returns>
        </member>
        <member name="T:System.Drawing.DrawingPointExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Point"/> and <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <seealso cref="T:System.Drawing.Point"/>
            <seealso cref="T:System.Drawing.PointF"/>
        </member>
        <member name="M:System.Drawing.DrawingPointExtensions.Truncate(System.Drawing.PointF@)">
            <summary>
            To truncate the point.
            </summary>
            <param name="this">The point to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.DrawingPointExtensions.WithOffset(System.Drawing.PointF@,System.Single)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/> and <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="offset">The offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="M:System.Drawing.DrawingPointExtensions.WithOffset(System.Drawing.PointF@,System.Single,System.Single)">
            <summary>
            Get a new <see cref="T:System.Drawing.PointF"/> instance created by the original one, with the specified offset
            added into the properties <see cref="P:System.Drawing.PointF.X"/> and <see cref="P:System.Drawing.PointF.Y"/>.
            </summary>
            <param name="this">The point.</param>
            <param name="xOffset">The X offset.</param>
            <param name="yOffset">The Y offset.</param>
            <returns>The result point.</returns>
            <seealso cref="P:System.Drawing.PointF.X"/>
            <seealso cref="P:System.Drawing.PointF.Y"/>
        </member>
        <member name="T:System.Drawing.DrawingSizeExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Size"/> and <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <seealso cref="T:System.Drawing.Size"/>
            <seealso cref="T:System.Drawing.SizeF"/>
        </member>
        <member name="M:System.Drawing.DrawingSizeExtensions.Truncate(System.Drawing.SizeF@)">
            <summary>
            To truncate the size.
            </summary>
            <param name="this">The size.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:System.Drawing.GraphicsExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawInt32(System.Drawing.Graphics,System.Int32,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF@)">
            <summary>
            Draw an <see cref="T:System.Int32"/> value onto the current graphics.
            </summary>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawInt32(System.Drawing.Graphics,System.Int32,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF@,System.Drawing.StringFormat)">
            <summary>
            Draw an <see cref="T:System.Int32"/> value onto the current graphics.
            </summary>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="stringFormat">The string format instance.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawChar(System.Drawing.Graphics,System.Char,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF@,System.Drawing.StringFormat)">
            <summary>
            Draw an <see cref="T:System.Char"/> value onto the current graphics.
            </summary>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="stringFormat">The string format instance.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCrossSign(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@)">
            <summary>
            Draw a cross sign (<c>x</c>).
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <remarks>
            This method will draw a cross sign and fill with the specified color, so you don't need
            to find any fill methods.
            </remarks>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCapsule(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@)">
            <summary>
            Draw a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillCapsule(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF@)">
            <summary>
            Fill a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF@,System.Single)">
            <summary>
            Draw a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillRoundedRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF@,System.Single)">
            <summary>
            Fill a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle to fill.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="T:System.Drawing.RectangleExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/> and <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
            <seealso cref="T:System.Drawing.RectangleF"/>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.CreateInstance(System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="leftUp">The left up point.</param>
            <param name="rightDown">The right down point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.CreateInstance(System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="leftUp">The left up point.</param>
            <param name="rightDown">The right down point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.Zoom(System.Drawing.RectangleF@,System.Single)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.Truncate(System.Drawing.RectangleF@)">
            <summary>
            Truncate the specified rectangle.
            </summary>
            <param name="this">The rectangle.</param>
            <returns>The result.</returns>
        </member>
    </members>
</doc>
