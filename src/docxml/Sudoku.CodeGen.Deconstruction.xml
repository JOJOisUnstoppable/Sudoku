<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.CodeGen.Deconstruction</name>
    </assembly>
    <members>
        <member name="T:Sudoku.CodeGen.AutoDeconstructAttribute">
            <summary>
            Allows the type can be deconstructed to multiple elements.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.AutoDeconstructAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance with the specified member list.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:Sudoku.CodeGen.AutoDeconstructAttribute.FieldOrPropertyList">
            <summary>
            All members to deconstruct.
            </summary>
        </member>
        <member name="T:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator">
            <summary>
            Provides a generator that generates the deconstruction methods.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.TypeFormat">
            <summary>
            Indicates the type format, and the property type format.
            </summary>
        </member>
        <member name="F:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.PropertyTypeFormat">
            <summary>
            Indicates the type format, and the property type format.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.GetMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Try to get all possible fields or properties in the specified type.
            </summary>
            <param name="symbol">The specified symbol.</param>
            <param name="handleRecursively">
            A <see cref="T:System.Boolean"/> value indicating whether the method will handle the type recursively.
            </param>
            <returns>The result list that contains all member symbols.</returns>
        </member>
        <member name="T:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.SyntaxReceiver">
            <summary>
            Defines the syntax receiver.
            </summary>
        </member>
        <member name="P:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.SyntaxReceiver.Candidates">
            <summary>
            Indicates all possible candidate types used.
            </summary>
        </member>
        <member name="M:Sudoku.CodeGen.Deconstruction.DeconstructMethodGenerator.SyntaxReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.CodeGen.Deconstruction.Extensions.ISymbolEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ISymbol"/>
        </member>
        <member name="M:Sudoku.CodeGen.Deconstruction.Extensions.ISymbolEx.Marks``1(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            To determine whether the symbol has marked the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of that attribute.</typeparam>
            <param name="this">The symbol to check.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.CodeGen.Deconstruction.Extensions.ISymbolEx.HasInitializer(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            To determine whether the specified symbol (should be property or field members)
            has an initializer.
            </summary>
            <param name="this">The symbol to check.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.CodeGen.Deconstruction.Extensions.SyntaxReferenceEx">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SyntaxReference"/>
        </member>
        <member name="M:Sudoku.CodeGen.Deconstruction.Extensions.SyntaxReferenceEx.Deconstruct(Microsoft.CodeAnalysis.SyntaxReference,Microsoft.CodeAnalysis.Text.TextSpan@,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Deconstruct the <see cref="T:Microsoft.CodeAnalysis.SyntaxReference"/> instance to the current <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>
            and the <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="this">The current syntax reference instance.</param>
            <param name="textSpan">The text span.</param>
            <param name="syntaxNode">The syntax node.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
