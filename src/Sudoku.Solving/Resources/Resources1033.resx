<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GuardianPlural" xml:space="preserve">
    <value>guardians</value>
  </data>
  <data name="GuardianSingular" xml:space="preserve">
    <value>a guardian</value>
  </data>
  <data name="KeywordIn" xml:space="preserve">
    <value>in</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>1033</value>
  </data>
  <data name="OrKeywordWithSpaces" xml:space="preserve">
    <value> or </value>
  </data>
  <data name="TechniqueFormat_AlmostLockedCandidatesStep" xml:space="preserve">
    <value>{Name}: {DigitsStr} from {BaseCellsStr} to {TargetCellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_AlmostLockedSetsWWingStep" xml:space="preserve">
    <value>{Name}: Two ALSes {Als1Str}, {Als2Str} connected by {ConjStr}, W = {WStr}, X = {XStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_AlmostLockedSetsXyWingStep" xml:space="preserve">
    <value>{Name}: {Als1Str} -&gt; {BridgeStr} -&gt; {Als2Str}, X = {XStr}, Y = {YStr}, Z = {ZStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_AlmostLockedSetsXzRule" xml:space="preserve">
    <value>{Name}: ALS #1: {Als1Str}, ALS #2: {Als2Str}, X = {XStr}{ZResultStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_AlternatingInferenceChainStep" xml:space="preserve">
    <value>{Name}: Chain {ChainStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_AvoidableRectangleWithHiddenSingleStep" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr} with hidden single: if cell {BaseCellStr} is filled with the digit {Digit1Str}, region {RegionStr} will only contain a cell {TargetCellStr} can be filled with that digit, but will raise the deadly pattern =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BinaryChainingStep" xml:space="preserve">
    <value>{Name}: It can be proved to be a contradiction if {AnchorIsTrueOrFalseStr} is {AnchorIsNotOnStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueOddagonType1Step" xml:space="preserve">
    <value>{Name}: If the cell {CellStr} only contains the digits {Digit1Str} and {Digit2Str} (or one of those two), the loop {LoopStr} will form an error structure =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueOddagonType2Step" xml:space="preserve">
    <value>{Name}: If all digit {ExtraDigitStr} in cells {LoopStr} are removed, the loop will from an error structure =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueOddagonType3Step" xml:space="preserve">
    <value>{Name}: To avoid the structure {LoopStr} of digits {Digit1Str} and {Digit2Str} error, the only way is to form the subset (digits {DigitsStr} in cells {ExtraCellsStr}) =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueUniversalGraveMultipleStep" xml:space="preserve">
    <value>{Name}: True candidates: {CandidatesStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueUniversalGraveType1Step" xml:space="preserve">
    <value>{Name}: {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueUniversalGraveType2Step" xml:space="preserve">
    <value>{Name}: {ExtraDigitStr} with cells {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueUniversalGraveType3Step" xml:space="preserve">
    <value>{Name}: True candidates {TrueCandidatesStr} with {SubsetTypeStr} {SizeStr} {ExtraDigitsStr} in cells {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueUniversalGraveType4Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in cells {CellsStr} with conjugate pair {ConjStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BivalueUniversalGraveXzStep" xml:space="preserve">
    <value>{Name}: {DigitStr} with cells {CellsStr}, with extra cell {ExtraCellStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BowmanBingoStep" xml:space="preserve">
    <value>{Name}: Try {ContradictionSeriesStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_BruteForceStep" xml:space="preserve">
    <value>{Name}: {AssignmentStr}</value>
  </data>
  <data name="TechniqueFormat_CellChainingStep" xml:space="preserve">
    <value>{Name}: It can be proved using chains that all digits are false from {SourceCellStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ComplexFishStep" xml:space="preserve">
    <value>{Name}: {DigitStr} in {BaseSetsStr}\\{CoverSetsStr} {ExofinsStr}{EndofinsStr}=&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ContinuousNiceLoopStep" xml:space="preserve">
    <value>{Name}: Loop {ChainStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_DominoLoopStep" xml:space="preserve">
    <value>{Name}: {CellsCountStr} cells {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_EmptyRectangleIntersectionPairStep" xml:space="preserve">
    <value>{Name}: Digits {Digit1Str}, {Digit2Str} in bivalue cells {StartCellStr} and {EndCellStr} with empty rectangle in {RegionStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_EmptyRectangleStep" xml:space="preserve">
    <value>{Name}: {DigitStr} in {RegionStr} with conjugate pair {ConjStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ExtendedRectangleType1Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ExtendedRectangleType2Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in {CellsStr} with extra digit {ExtraDigitStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ExtendedRectangleType3Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in {CellsStr} with {ExtraDigitsStr} in cells {ExtraCellsStr} in {RegionStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ExtendedRectangleType4Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in {CellsStr} with the conjugate pair {ConjStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ExtendedSubsetPrincipleWithDuplicate" xml:space="preserve">
    <value>{Name}: Only the digit {EspDigitStr} can be duplicate in cells {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_ExtendedSubsetPrincipleWithoutDuplicate" xml:space="preserve">
    <value>{Name}: All digits can't be duplicate in cells {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_FullHouseStep" xml:space="preserve">
    <value>{Name}: {CellStr} = {DigitStr}</value>
  </data>
  <data name="TechniqueFormat_GuardianStep" xml:space="preserve">
    <value>{Name}: Cells {CellsStr} with {GuardianSingularOrPlural} {GuardianStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_HiddenSingle" xml:space="preserve">
    <value>{Name}: {CellStr} = {DigitStr} in {RegionStr}</value>
  </data>
  <data name="TechniqueFormat_HiddenSubsetStep" xml:space="preserve">
    <value>{Name}: {DigitStr} in {RegionStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_LastDigit" xml:space="preserve">
    <value>{Name}: {CellStr} = {DigitStr}</value>
  </data>
  <data name="TechniqueFormat_LockedCandidatesStep" xml:space="preserve">
    <value>{Name}: {DigitStr} in {BaseSetStr}\\{CoverSetStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_MultisectorLockedSetsStep" xml:space="preserve">
    <value>{Name}: {CellsCountStr} cells {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_NakedSingleStep" xml:space="preserve">
    <value>{Name}: {CellStr} = {DigitStr}</value>
  </data>
  <data name="TechniqueFormat_NakedSubsetStep" xml:space="preserve">
    <value>{Name}: {DigitsStr} in {RegionStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_NormalFishStep" xml:space="preserve">
    <value>{Name}: {DigitStr} in {BaseSetStr}\\{CoverSetStr}{FinsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_PatternOverlayStep" xml:space="preserve">
    <value>{Name}: Digit {DigitStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_QiuDeadlyPatternLockedTypeStep" xml:space="preserve">
    <value>{Name}: Cells {PatternStr} will be a deadly pattern if{Quantifier}{Number} {SingularOrPlural} {CandidateStr} {BeVerb} false =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_QiuDeadlyPatternType1Step" xml:space="preserve">
    <value>{Name}: Cells {PatternStr} will be a deadly pattern if {CandidateStr} is false =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_QiuDeadlyPatternType2Step" xml:space="preserve">
    <value>{Name}: Cells {PatternStr} will be a deadly pattern if all the extra digits {ExtraDigitStr} in pair cells is false =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_QiuDeadlyPatternType3Step" xml:space="preserve">
    <value>{Name}: Cells {PatternStr} won't be a deadly pattern if and only if digits {DigitsStr} in cells {CellsStr} is a naked {SubsetName} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_QiuDeadlyPatternType4Step" xml:space="preserve">
    <value>{Name}: Cells {PatternStr} will be a deadly pattern if another digit in either cells lying on the conjugate pair {ConjStr} is true =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_RegionChainingStep" xml:space="preserve">
    <value>{Name}: It can be proved using chains that digit {DigitStr} from {RegionStr} are false =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_RegularWingStep" xml:space="preserve">
    <value>{Name}: {DigitsStr} in {PivotCellStr} with {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_SueDeCoq3DimensionStep" xml:space="preserve">
    <value>{Name}: {Cells1Str}({Digits1Str}) + {Cells2Str}({Digits2Str}) + {Cells3Str}({Digits3Str}) =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_SueDeCoqStep" xml:space="preserve">
    <value>{Name}: {IntersectionCellsStr}({IntersectionDigitsStr}) - {BlockCellsStr}({BlockDigitsStr}) &amp; {LineCellsStr}({LineDigitsStr}) =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_TemplateStep" xml:space="preserve">
    <value>{Name}: Digit {DigitStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_TwoStrongLinksStep" xml:space="preserve">
    <value>{Name}: {DigitStr} in {BaseRegionStr}\\{TargetRegionStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueLoopType1Step" xml:space="preserve">
    <value>{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueLoopType2Step" xml:space="preserve">
    <value>{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} with the extra digit {ExtraDigitStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueLoopType3Step" xml:space="preserve">
    <value>{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} with the naked {SubsetName} with extra digits {DigitsStr} in cells {SubsetCellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueLoopType4Step" xml:space="preserve">
    <value>{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} with the conjugate pair {ConjStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniquePolygonType1Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in cells {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniquePolygonType2Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in cells {CellsStr} with the extra digit {ExtraDigitStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniquePolygonType3Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in cells {CellsStr} with the digits {ExtraDigitsStr} in cells {ExtraCellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniquePolygonType4Step" xml:space="preserve">
    <value>{Name}: {DigitsStr} in cells {CellsStr} with the conjugate region {ConjRegionStr} of the extra digits {ExtraCombStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangle2DOr3XStep" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr}, with X = {XDigitStr}, Y = {YDigitStr} and a bi-value cell {XYCellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleType1Step" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleType2Step" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr}, with the extra digit {ExtraDigitStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleType3Step" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr}, with the digit {DigitsStr} in {OnlyKeyword}cells {CellsStr} in {RegionStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleWithConjugatePairStep" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr} with {Prefix}conjugate pair{Suffix} {ConjPairsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleWithGuardianStep" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr} with guardian: digit {GuardianDigitStr} in cells {GuardianCellsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleWithSueDeCoqStep" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr}, with a generalized Sue de Coq in cells {MergedCellsStr} of digits {DigitsStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleWithUnknownCoveringStep" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr}, with unknown covering: Suppose {TargetCellStr} is filled with the unknown digit X (X is {DigitsStr}), then 4 cells form a UR deadly pattern of digit X and {ExtraDigitStr} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueRectangleWithWingStep" xml:space="preserve">
    <value>{Name}: Digits {D1Str} and {D2Str} in {CellsStr}, with a wing (pivots: {PivotsStr}, with digits: {DigitsStr} in cells {CellsStr}) =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueSquareType1Step" xml:space="preserve">
    <value>{Name}: Digits {DigitsStr} in cells {CellsStr} will form a deadly pattern if the candidate {CandidateStr} is false =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueSquareType2Step" xml:space="preserve">
    <value>{Name}: Digits {DigitsStr} in cells {CellsStr} will form a deadly pattern if the extra digit {ExtraDigitStr} is all false in the pattern =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueSquareType3Step" xml:space="preserve">
    <value>{Name}: Digits {DigitsStr} in cells {CellsStr} can be avoid to form a deadly pattern if and only if the digits {ExtraDigitStr} in cells {ExtraCellsStr} form a naked {SubsetName} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_UniqueSquareType4Step" xml:space="preserve">
    <value>{Name}: Digits {DigitsStr} in cells {CellsStr} can avoid to form a deadly pattern if and only if the conjugate region {ConjStr} can't set the digit neither {Digit1Str} nor {Digit2Str} =&gt; {ElimStr}</value>
  </data>
  <data name="TechniqueFormat_WWingStep" xml:space="preserve">
    <value>{Name}: {StartCellStr} to {EndCellStr} with conjugate pair {ConjStr} =&gt; {ElimStr}</value>
  </data>
</root>