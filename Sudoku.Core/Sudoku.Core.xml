<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Core</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Data.Extensions.CollectionEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="T:Sudoku.Data.Extensions.Int16Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int16"/>.
            </summary>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.FindFirstSet(System.Int16)">
            <summary>
            Find the first offset of set bit of the binary representation of the specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>
            An <see cref="T:System.Int32"/> value indicating that. If the value is 0, this method
            will always return 0.
            </returns>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.CountSet(System.Int16)">
            <summary>
            Get the total number of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating that.</returns>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.CountSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.GetAllSets(System.Int16)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.ReverseBits(System.Int16@)">
            <summary>
            <para>Reverse all bits in a specified value.</para>
            <para>
            Note that the value is passed by <b>reference</b> though the
            method is an extension method, and returns nothing.
            </para>
            </summary>
            <param name="this">(ref parameter) The value.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.Int32Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int32"/>.
            </summary>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="F:Sudoku.Data.Extensions.Int32Ex.Table">
            <summary>
            The return value table used in <see cref="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>.
            </summary>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)">
            <summary>
            Find the first offset of set bit of the binary representation of the specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>
            An <see cref="T:System.Int32"/> value indicating that. If the value is 0, this method
            will always return 0.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.CountSet(System.Int32)">
            <summary>
            Get the total number of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.GetAllSets(System.Int32)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.ReverseBits(System.Int32@)">
            <summary>
            <para>Reverse all bits in a specified value.</para>
            <para>
            Note that the value is passed by <b>reference</b> though the
            method is an extension method, and returns nothing.
            </para>
            </summary>
            <param name="this">(ref parameter) The value.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.Int64Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int64"/>.
            </summary>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int64Ex.CountSet(System.Int64)">
            <summary>
            Get the total number of set bits of the binary representation
            of the specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int64Ex.GetAllSets(System.Int64)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.ObjectEx">
            <summary>
            Provides extension methods on <see cref="T:System.Object"/>.
            </summary>
            <seealso cref="T:System.Object"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ObjectEx.NullableToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>.
            </summary>
            <param name="this">The object.</param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <see cref="F:System.String.Empty"/>. Therefore, this method will never throw.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ObjectEx.NullableToString(System.Object,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>.
            </summary>
            <param name="this">The object.</param>
            <param name="defaultValue">
            The default return value when the current object is <see langword="null"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <paramref name="defaultValue"/>. Therefore, this method will never throw.
            </returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.StringBuilderEx">
            <summary>
            Provides extension methods on <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <seealso cref="T:System.Text.StringBuilder"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse all characters in a specified string builder instance.
            </summary>
            <param name="this">The instance to reverse all characters.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.RemoveFromEnd(System.Text.StringBuilder,System.Int32)">
            <summary>
            Remove the specified number of characters from the end of the string builder
            instance.
            </summary>
            <param name="this">The instance to remove characters.</param>
            <param name="length">The number of characters you want to remove.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Char)">
            <summary>
            Append a character to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">The instance.</param>
            <param name="value">The character you want to append.</param>
            <returns>The reference of the current instance.</returns>
            <remarks>
            The extension method is used in order to avoid implicit conversion from
            <see cref="T:System.Char"/> to <see cref="T:System.Int32"/>. If you want to append everything,
            please use the method <see cref="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)"/>.
            </remarks>
            <seealso cref="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)">
            <summary>
            Append a <see cref="T:System.String"/> representation of an object
            to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">The instance.</param>
            <param name="obj">
            The <see cref="T:System.String"/> representation of an object you want to append.
            </param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.StringEx">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.SatisfyPattern(System.String,System.String)">
            <summary>
            Check whether the specified string instance is satisfied
            the specified regular expression pattern or not.
            </summary>
            <param name="this">The value to check.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.IsMatch(System.String,System.String)">
            <summary>
            Check whether the specified string instance can match the value
            using the specified regular expression pattern or not.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of
            the specified regular expression pattern.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The value after matching. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The matched string value. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.MatchAll(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.MatchAll(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern, using the specified matching
            options.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.IsRegexPattern(System.String)">
            <summary>
            To check if the current string value is a valid regular
            expression pattern or not.
            </summary>
            <param name="this">The value to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Data.Meta.CellStatus">
            <summary>
            Represents a cell status.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.CellStatus.Empty">
            <summary>
            Indicates that the cell is empty.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.CellStatus.Modifiable">
            <summary>
            Indicates that the cell has already filled a value,
            but the value does not exist when the puzzle begins.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.CellStatus.Given">
            <summary>
            Indicates that the cell has already filled a value,
            and the value does exist when the puzzle begins. In
            other words, the value is a given (or a hint, clue, etc.).
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.CellStatus.All">
            <summary>
            Indicates all cases of cell statuses.
            </summary>
            <remarks>
            You had better use this field on cases when processing
            the bitwise operations in a sudoku <see cref="T:Sudoku.Data.Meta.Grid"/>.
            This field is not used to process cell status comparsion.
            </remarks>
            <seealso cref="M:Sudoku.Data.Meta.Grid.GetCellStatus(System.Int32)"/>
        </member>
        <member name="T:Sudoku.Data.Meta.Grid">
            <summary>
            Encapsulates a sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.Grid.Empty">
            <summary>
            Indicates an empty grid, where all values are zero.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.Grid._masks">
            <summary>
            Binary masks of all cells.
            </summary>
            <remarks>
            <para>This array stores binary representation of decimals.</para>
            <para>
            There are 81 cells in a sudoku grid, so this data structure uses
            an array of size 81. Each element is a <see cref="T:System.Int16"/> value,
            where the lower 9 bits indicates if the digit 1 to 9 exists or not.
            If the value is <see langword="true"/> (i.e. binary is for 1), this digit will
            <b>not</b> be exist. The higher 3 bits indicates the cell status. The
            cases are below:
            <list type="table">
            <item>
            <term>0b001 (1)</term>
            <description>The cell is <see cref="F:Sudoku.Data.Meta.CellStatus.Empty"/>.</description>
            </item>
            <item>
            <term>0b010 (2)</term>
            <description>The cell is <see cref="F:Sudoku.Data.Meta.CellStatus.Modifiable"/>.</description>
            </item>
            <item>
            <term>0b100 (4)</term>
            <description>The cell is <see cref="F:Sudoku.Data.Meta.CellStatus.Given"/>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:Sudoku.Data.Meta.CellStatus"/>
        </member>
        <member name="F:Sudoku.Data.Meta.Grid._initialMasks">
            <summary>
            Same as <see cref="F:Sudoku.Data.Meta.Grid._masks"/>, but this field stores the all masks at
            the initial grid. The field will not be modified until this instance
            destructs.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.#ctor(System.Int16[])">
            <summary>
            Initializes an instance with the binary mask array.
            </summary>
            <param name="masks">The mask array.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the length of the specified argument is not 81.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.#ctor">
            <summary>
            Provides default initialization.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.Grid.HasSolved">
            <summary>
            Indicates the grid has already solved. If the value is <see langword="true"/>,
            the grid is solved; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.Grid.Item(System.Int32)">
            <summary>
            Gets or sets a digit into a cell.
            </summary>
            <param name="offset">The cell offset you want to get or set.</param>
            <value>
            The digit you want to set. This value should be between 0 and 8.
            In addtition, if your input is -1, the candidate mask in this cell
            will be re-computed. If your input is none of them above, this indexer
            will do nothing.
            </value>
            <returns>
            An <see cref="T:System.Int32"/> value indicating the result.
            If the current cell does not have a digit
            (i.e. The cell is <see cref="F:Sudoku.Data.Meta.CellStatus.Empty"/>),
            The value will be -1.
            </returns>
        </member>
        <member name="P:Sudoku.Data.Meta.Grid.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a candidate existence case with a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="offset">The cell offset between 0 and 80.</param>
            <param name="digit">The digit between 0 and 8.</param>
            <value>
            The case you want to set. <see langword="true"/> means that this candidate
            does not exist in this current sudoku grid; otherwise, <see langword="false"/>.
            </value>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="E:Sudoku.Data.Meta.Grid.ValueChanged">
            <summary>
            Indicates the event when the mask in a certain cell has changed.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.Fix">
            <summary>
            To fix a grid, which means all modifiable values will be changed
            to given ones.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.Unfix">
            <summary>
            To unfix a grid, which means all given values will be changed
            to modifiable ones.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.Reset">
            <summary>
            To reset the grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.SetCellStatus(System.Int32,Sudoku.Data.Meta.CellStatus)">
            <summary>
            Set the status in a cell.
            </summary>
            <param name="offset">The cell offset you want to change.</param>
            <param name="cellStatus">The cell status you want to set.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.SetMask(System.Int32,System.Int16)">
            <summary>
            Set a mask in a cell.
            </summary>
            <param name="offset">The cell offset you want to change.</param>
            <param name="value">The cell mask you want to set.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.Equals(Sudoku.Data.Meta.Grid)">
            <summary>
            Indicates whether the current object has the same value with the other one.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>
            The result of this comparsion. <see langword="true"/> if two instances hold a same
            value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.ToArray">
            <summary>
            Serializes this instance to an array, where all digit value will be stored.
            </summary>
            <returns>
            This array. All elements are between 0 to 9, where 0 means the
            cell is <see cref="F:Sudoku.Data.Meta.CellStatus.Empty"/> now.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.GetMask(System.Int32)">
            <summary>
            Get a mask of the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.ToString(System.String)">
            <summary>
            Returns a string that represents the current object, with the
            specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.GetCellStatus(System.Int32)">
            <summary>
            Get a cell status of the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.OnValueChanged(System.Object,Sudoku.Data.ValueChangedEventArgs)">
            <summary>
            The method, which will be invoked when the mask has changed.
            </summary>
            <param name="sender">The instance triggering the event.</param>
            <param name="e">The data.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.Parse(System.String)">
            <summary>
            Parses a string value and converts to this type.
            </summary>
            <param name="str">The string.</param>
            <returns>The result instance had converted.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.TryParse(System.String,Sudoku.Data.Meta.Grid@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="result">
            (out parameter) The result parsed. If the conversion is failed,
            this argument will be <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.CreateInstance(System.Int32[])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.CreateInstance(System.Int32[0:,0:])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.op_Equality(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.Grid)">
            <summary>
            Indicates whether two instances have a same value.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.Grid.op_Inequality(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.Grid)">
            <summary>
            Indicates whether two instances have two different values.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Data.Meta.GridFormatter">
            <summary>
            Provides operations for grid formatting.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.GridFormatter.#ctor(Sudoku.Data.Meta.Grid,System.Boolean)">
            <summary>
            Initializes an instance with grid and is-multiline <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="grid">A grid.</param>
            <param name="multiline">
            The multiline identifier. If the value is <see langword="true"/>, the output will
            be multiline.
            </param>
        </member>
        <member name="P:Sudoku.Data.Meta.GridFormatter.Placeholder">
            <summary>
            The place holder.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridFormatter.Multiline">
            <summary>
            Indicates whether the output should be multiline.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridFormatter.WithModifiables">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridFormatter.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multiline, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in ':candidate list'. In addtition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridFormatter.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multiline, the output will use '&lt;digit&gt;' instead
            of '*digit*'.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridFormatter.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines when outputing.
            See <a href="https://github.com/Sunnie-Shine/Sudoku#multiline-format-characters">this link</a>
            for more information.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridFormatter.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.GridFormatter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.GridFormatter.ToSingleLineStringCore">
            <summary>
            To single line string.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridFormatter.ToMultiLineSimpleGridCore">
            <summary>
            To multiline normal grid string without any candidates.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridFormatter.ToMultiLineStringCore">
            <summary>
            To multiline string with candidates.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridFormatter.GetCellStatus(System.Int16)">
            <summary>
            Get cell status for a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="T:Sudoku.Data.Meta.GridMap">
            <summary>
            Encapsulates a binary series of cell status table consisting of 81 bits,
            where <see langword="true"/> bit (1) is for the cell having digit,
            and the <see langword="false"/> bit (0) is for empty cell. Sometimes for other usages.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.GridMap.Empty">
            <summary>
            Indicates an empty instance (making no changes).
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.GridMap.Shifting">
            <summary>
            The value used for shifting.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.GridMap._high">
            <summary>
            Inner binary representation values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.GridMap._low">
            <summary>
            Inner binary representation values.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified cell offset
            (Sets itself and all peers).
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified cell offset.
            This will set all bits of all peers of this cell. Another
            <see cref="T:System.Boolean"/> value indicates whether this initialization
            will set the bit of itself.
            </summary>
            <param name="offset">The cell offset.</param>
            <param name="setItself">
            A <see cref="T:System.Boolean"/> value indicating whether this initialization
            will set the bit of itself.
            </param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="offsets">cell offsets.</param>
            <remarks>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            will not be set <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes an instance with three binary value.
            </summary>
            <param name="high">Higher 40 bits.</param>
            <param name="low">Lower 41 bits.</param>
        </member>
        <member name="P:Sudoku.Data.Meta.GridMap.Count">
            <summary>
            Indicates the total number of cells where the corresponding
            value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridMap.Offsets">
            <summary>
            Indicates all cell offsets whose corresponding value
            are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Meta.GridMap.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value on the specified cell
            offset.
            </summary>
            <param name="offset">The cell offset.</param>
            <value>
            A <see cref="T:System.Boolean"/> value on assignment.
            </value>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the cell has digit.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.Deconstruct(System.Int64@,System.Int64@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="high">(out parameter) Higher 40 bits.</param>
            <param name="low">(out parameter) Lower 41 bits.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.Equals(Sudoku.Data.Meta.GridMap)">
            <summary>
            Indicates whether the current object has the same value with the other one.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>
            The result of this comparsion. <see langword="true"/> if two instances hold a same
            value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.ToArray">
            <summary>
            Get all cell offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of cell offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.Add(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.Remove(System.Int32)">
            <summary>
            Set the specified cell as <see langword="false"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.SetPeersTrue(System.Int32)">
            <summary>
            Set all peers as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.SetPeersFalse(System.Int32)">
            <summary>
            Set all peers as <see langword="false"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.NegatePeers(System.Int32)">
            <summary>
            Negate all peers' value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.IntersectWith(Sudoku.Data.Meta.GridMap)">
            <summary>
            Intersect with the other instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.UnionWith(Sudoku.Data.Meta.GridMap)">
            <summary>
            Union with the other instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.SymmetricalExceptWith(Sudoku.Data.Meta.GridMap)">
            <summary>
            Symmetrical except with the other instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.Negate">
            <summary>
            Negate all values.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.GetCellsIn(System.Int32)">
            <summary>
            Get all cell offsets in the specified region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>All cell offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.CreateInstance(System.Int32)">
            <summary>
            Create a <see cref="T:Sudoku.Data.Meta.GridMap"/> instance with the specified region offset.
            This will set all bits <see langword="true"/> in this region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>The grid map.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.op_Equality(Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap)">
            <summary>
            Indicates whether two instances have a same value.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.op_Inequality(Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap)">
            <summary>
            Indicates whether two instances have two different values.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.op_OnesComplement(Sudoku.Data.Meta.GridMap)">
            <summary>
            Negate all bits.
            </summary>
            <param name="gridMap">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.op_Subtraction(Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap)">
            <summary>
            Get a <see cref="T:Sudoku.Data.Meta.GridMap"/> that contains all <paramref name="left"/> cells
            but not in <paramref name="right"/> cells.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.op_BitwiseAnd(Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap)">
            <summary>
            Intersect two <see cref="T:Sudoku.Data.Meta.GridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.op_BitwiseOr(Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap)">
            <summary>
            Union two <see cref="T:Sudoku.Data.Meta.GridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridMap.op_ExclusiveOr(Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap)">
            <summary>
            Symmetrical except two <see cref="T:Sudoku.Data.Meta.GridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="F:Sudoku.Data.Meta.GridMap.PeerTable">
            <summary>
            The peer table used in intersection.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Meta.GridMap.RegionTable">
            <summary>
            The map of all cell offsets in its specified region.
            For example, 'Map[0]' means that all cell offsets
            in the region 0 (block 1).
            </summary>
        </member>
        <member name="T:Sudoku.Data.Meta.GridParser">
            <summary>
            Encapsulates a grid parser.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.GridParser.#ctor(System.String)">
            <summary>
            Initializes an instance with parsing data.
            </summary>
            <param name="parsingValue">The string to parse.</param>
        </member>
        <member name="P:Sudoku.Data.Meta.GridParser.ParsingValue">
            <summary>
            The value to parse.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Meta.GridParser.Parse">
            <summary>
            To parse the value.
            </summary>
            <returns>The grid.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when failed to parse.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Meta.GridParser.OnParsingSimpleMultilineGrid">
            <summary>
            Parse the value using multiline simple grid (without any candidates).
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridParser.OnParsingPencilMarked(System.Boolean)">
            <summary>
            Parse the PM grid.
            </summary>
            <param name="treatSingleValueAsGiven">
            The value indicating whether the parsing should treat
            the modifiable values as given ones.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Meta.GridParser.OnParsingSusser">
            <summary>
            Parse the susser format string.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Data.ValueChangedEventArgs">
            <summary>
            Provides the data for the event 'ValueChanged'.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ValueChangedEventArgs.#ctor(System.Int32,System.Int16,System.Int16,System.Int32)">
            <summary>
            Initializes the instance with some data.
            </summary>
            <param name="cellOffset">The cell offset. Must be in range 0 to 80.</param>
            <param name="oldMask">The old mask before modified.</param>
            <param name="newMask">The mask to modify the cell.</param>
            <param name="setValue">
            The value to set on the cell. If the action is deletion,
            this argument should be -1.
            </param>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.CellOffset">
            <summary>
            The cell offset. Must be in range 0 to 80.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.OldMask">
            <summary>
            The old mask before modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.NewMask">
            <summary>
            The new mask after modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.SetValue">
            <summary>
            The value. -1 when this value is not required.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ValueChangedEventArgs.Deconstruct(System.Int32@,System.Int16@,System.Int16@,System.Int32@)">
            <summary>
            Deconstruct the instance to four values.
            </summary>
            <param name="cellOffset">(out parameter) The cell offset.</param>
            <param name="oldMask">(out parameter) The old mask.</param>
            <param name="newMask">(out parameter) The new mask.</param>
            <param name="setValue">(out parameter) the set value.</param>
        </member>
        <member name="T:Sudoku.Data.ValueChangedEventHandler">
            <summary>
            The event handler of value changed.
            </summary>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The data while triggering.</param>
        </member>
        <member name="T:Sudoku.Runtime.MultipleSolutionsException">
            <summary>
            Represents an error that the puzzle has multiple solutions while solving.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.Meta.Grid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.Meta.Grid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.Meta.Grid,System.String,System.Exception)">
            <summary>
            Initialzes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.Meta.Grid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.Runtime.MultipleSolutionsException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.MultipleSolutionsException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.NoSolutionException">
            <summary>
            Represents an error that the puzzle has no solution while solving.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.Meta.Grid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.Meta.Grid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.Meta.Grid,System.String,System.Exception)">
            <summary>
            Initialzes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.Meta.Grid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.Runtime.NoSolutionException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.NoSolutionException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:System.Linq.EnumerableEx">
            <summary>
            Provides a set of static methods for querying objects that implement
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <remarks>
            This class has the same function and status with <see cref="T:System.Linq.Enumerable"/>.
            </remarks>
            <seealso cref="T:System.Collections.IEnumerable"/>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:System.Linq.EnumerableEx.GetElementByMinSelector``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable{``1}})">
            <summary>
            Get the element whose selection is the minimal one.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <typeparam name="TComparable">The comparing type.</typeparam>
            <param name="elements">The elements to search the minimal one.</param>
            <param name="selector">The selector.</param>
            <returns>
            The result value. If the collection does not have a minimal element,
            the result will be the default value, where it will be <see langword="null"/>, which
            is decided in the element type.
            </returns>
        </member>
        <member name="M:System.Linq.EnumerableEx.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Get the total number of the elements using the specified formula.
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="elements">All elements.</param>
            <param name="countingFormula">The formula used in counting.</param>
            <returns>The total number.</returns>
        </member>
        <member name="M:System.Linq.EnumerableEx.Count``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Func{``0,System.Int32})">
            <summary>
            Get the total number of a part of elements using the specified formula.
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="elements">All elements.</param>
            <param name="selector">The selector to get the specified elements.</param>
            <param name="countingFormula">The formula used in counting.</param>
            <returns>The total number.</returns>
        </member>
        <member name="M:System.Linq.EnumerableEx.ToReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert the collection into a read-only list.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="elements">All elements.</param>
            <returns>The read-only list.</returns>
        </member>
        <member name="T:System.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value
            as an existing instance. Different than <see cref="T:System.ICloneable"/>, the cloneation
            has the same type with this existing instance.
            </summary>
            <typeparam name="T">
            The type of this instance. This type should be only a class because the cloning
            operation is needed only in reference types, while the value types will be passed
            by value, at this time all value members (fields and properties) will be copied
            one by one.
            </typeparam>
        </member>
        <member name="M:System.ICloneable`1.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
            <returns>
            The instance having the same type with the base one. Because the type is
            used and defined before using this method, so the return type will be
            never <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.ICloneable`1.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
    </members>
</doc>
