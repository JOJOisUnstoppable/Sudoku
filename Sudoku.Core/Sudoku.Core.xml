<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Core</name>
    </assembly>
    <members>
        <member name="T:Sudoku.ComponentModel.GridProgressResult">
            <summary>
            Encapsulates a progress result used for report the current state.
            </summary>
        </member>
        <member name="M:Sudoku.ComponentModel.GridProgressResult.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes an instance with the specified current point and the total point.
            </summary>
            <param name="currentCandidatesCount">The current point.</param>
            <param name="currentCellsCount">The number of unsolved cells.</param>
            <param name="initialCandidatesCount">The number of unsolved candidates in the initial grid.</param>
            <param name="globalizationString">The globalization string.</param>
        </member>
        <member name="P:Sudoku.ComponentModel.GridProgressResult.CurrentCellsCount">
            <summary>
            Indicates the number of unsolved cells.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.GridProgressResult.CurrentCandidatesCount">
            <summary>
            Indicates the number of unsolved candidates.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.GridProgressResult.InitialCandidatesCount">
            <summary>
            Indicates the number of unsolved candidates in the initial grid.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.GridProgressResult.GlobalizationString">
            <summary>
            The globalization string.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.GridProgressResult.Percentage">
            <summary>
            Indicates the current percentage.
            </summary>
        </member>
        <member name="M:Sudoku.ComponentModel.GridProgressResult.Deconstruct(System.Int32@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="current">(<see langword="out" /> parameter) The number of unsolved candidates.</param>
            <param name="unsolvedCells">(<see langword="out" /> parameter) The number of unsolved cells.</param>
        </member>
        <member name="M:Sudoku.ComponentModel.GridProgressResult.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="currentCandidatesCount">(<see langword="out" /> parameter) The number of unsolved candidates.</param>
            <param name="currentCellsCount">(<see langword="out" /> parameter) The number of unsolved cells.</param>
            <param name="initialCandidatesCount">
            (<see langword="out" /> parameter) The number of unsolved candidates in the initial grid.
            </param>
        </member>
        <member name="M:Sudoku.ComponentModel.GridProgressResult.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:Sudoku.ComponentModel.IProgressResult">
            <summary>
            Encapsulates and provides with a progress result instance.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.IProgressResult.Percentage">
            <summary>
            Indicates the current percentage.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.IProgressResult.GlobalizationString">
            <summary>
            The globalization string.
            </summary>
        </member>
        <member name="M:Sudoku.ComponentModel.IProgressResult.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:Sudoku.ComponentModel.TechniqueProgressResult">
            <summary>
            Indicates a technique progress result.
            </summary>
        </member>
        <member name="M:Sudoku.ComponentModel.TechniqueProgressResult.#ctor(System.Int32,System.String)">
            <summary>
            Initializes an instance with the specified technique count.
            </summary>
            <param name="totalSearchers">The total number of searchers.</param>
            <param name="globalizationString">The globalization string.</param>
        </member>
        <member name="P:Sudoku.ComponentModel.TechniqueProgressResult.Percentage">
            <summary>
            Indicates the current percentage finished.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.TechniqueProgressResult.CurrentTechnique">
            <summary>
            Indicates the current technique.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.TechniqueProgressResult.CurrentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.TechniqueProgressResult.GlobalizationString">
            <summary>
            The globalization string.
            </summary>
        </member>
        <member name="P:Sudoku.ComponentModel.TechniqueProgressResult.TotalSearchers">
            <summary>
            The total number of searchers.
            </summary>
        </member>
        <member name="M:Sudoku.ComponentModel.TechniqueProgressResult.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Constants.Processings">
            <summary>
            The tables for grid processing. All fields will be initialized in
            the static constructor.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Processings.BlockTable">
            <summary>
            The block table.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Processings.RowTable">
            <summary>
            The row table.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Processings.ColumnTable">
            <summary>
            The column table.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Processings.Peers">
            <summary>
            <para>Indicates a table for each cell's peers.</para>
            </summary>
            <example>
            '<c>Peers[0]</c>': the array of peers for the cell 0 (row 1 column 1).
            </example>
        </member>
        <member name="F:Sudoku.Constants.Processings.RegionCells">
            <summary>
            <para>
            The map of all cell offsets in its specified region.
            The indices is between 0 and 26, where <c>0..9</c> is for block 1 to 9,
            <c>9..18</c> is for row 1 to 9 and <c>18..27</c> is for column 1 to 9.
            </para>
            </summary>
            <example>
            '<c>RegionTable[0]</c>': all cell offsets in the region 0 (block 1).
            </example>
        </member>
        <member name="F:Sudoku.Constants.Processings.RegionMaps">
            <summary>
            Indicates all grid maps that a grid contains.
            </summary>
            <example>
            '<c>RegionMaps[0]</c>': The map containing all cells in the block 1.
            </example>
        </member>
        <member name="F:Sudoku.Constants.Processings.PeerMaps">
            <summary>
            Indicates the peer maps using <see cref="F:Sudoku.Constants.Processings.Peers"/> table.
            </summary>
            <seealso cref="F:Sudoku.Constants.Processings.Peers"/>
        </member>
        <member name="F:Sudoku.Constants.Processings.IntersectionMaps">
            <summary>
            <para>
            Indicates all maps that forms the each intersection. The pattern will be like:
            <code>
            .-------.-------.-------.<br/>
            | C C C | A A A | A A A |<br/>
            | B B B | . . . | . . . |<br/>
            | B B B | . . . | . . . |<br/>
            '-------'-------'-------'
            </code>
            </para>
            <para>
            In addition, in this data structure, "<c>_coverSet</c>" is a block and "<c>_baseSet</c>" is a line.
            </para>
            </summary>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetRegion(System.Int32,Sudoku.Constants.RegionLabel)">
            <summary>
            Get the region index for the specified cell and the region type.
            </summary>
            <param name="cell">The cell.</param>
            <param name="label">The label.</param>
            <returns>The region index (<c>0..27</c>).</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetLabel(System.Int32)">
            <summary>
            Get the name in the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetCells(System.Int32,System.Int16)">
            <summary>
            Get cells with the specified mask, which consist of 9 bits and 1 is
            for yielding.
            </summary>
            <param name="region">The region.</param>
            <param name="mask">The mask.</param>
            <returns>The cells.</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.Deconstruct(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap[]@,Sudoku.Data.GridMap[]@,Sudoku.Data.GridMap[]@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="this">(<see langword="this" /> parameter) The grid.</param>
            <param name="empty">(<see langword="out" /> parameter) The map of all empty cells.</param>
            <param name="bivalue">(<see langword="out" /> parameter) The map of all bi-value cells.</param>
            <param name="candidates">
            (<see langword="out" /> parameter) The map of all cells that contain the candidate of that digit.
            </param>
            <param name="digits">
            (<see langword="out" /> parameter) The map of all cells that contain the candidate of that digit
            or that value in given or modifiable.
            </param>
            <param name="values">
            (<see langword="out" /> parameter) The map of all cells that is the given or modifiable value,
            and the digit is the specified one.
            </param>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetEmptyCellsMap(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get the map of all empty cells in this grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The map.</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetBivalueCellsMap(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get the map of all bi-value cells in this grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The map.</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetCandidatesMap(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get the map of all distributions for digits.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The map.</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetDigitsMap(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            <para>Get the map of all distributions for digits.</para>
            <para>
            Different with <see cref="M:Sudoku.Constants.Processings.GetCandidatesMap(Sudoku.Data.IReadOnlyGrid)"/>,
            this method will get all cells that contain the digit or fill this digit
            (given or modifiable).
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The map.</returns>
            <seealso cref="M:Sudoku.Constants.Processings.GetCandidatesMap(Sudoku.Data.IReadOnlyGrid)"/>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetValuesMap(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get the map of all distributions for digits.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The map.</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.#cctor">
            <staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor><staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
            <remarks>
            The initialization order between static constructor and static fields
            may be annoying, so I use static constructor.
            </remarks>
        </member>
        <member name="T:Sudoku.Constants.Processings.ValueTupleComparer">
            <summary>
            The inner comparer of <see cref="T:System.ValueTuple`2"/> used in
            the field <see cref="F:Sudoku.Constants.Processings.IntersectionMaps"/>.
            </summary>
            <seealso cref="F:Sudoku.Constants.Processings.IntersectionMaps"/>
        </member>
        <member name="M:Sudoku.Constants.Processings.ValueTupleComparer.Equals(System.ValueTuple{System.Byte,System.Byte},System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Constants.Processings.ValueTupleComparer.GetHashCode(System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Constants.RegionLabel">
            <summary>
            Indicates the region label.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegionLabel.LowerLimit">
            <summary>
            Indicates the lower limit.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegionLabel.Block">
            <summary>
            Indicates the block.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegionLabel.Row">
            <summary>
            Indicates the row.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegionLabel.Column">
            <summary>
            Indicates the column.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegionLabel.UpperLimit">
            <summary>
            Indicates the upper limit.
            </summary>
        </member>
        <member name="T:Sudoku.Constants.RegularExpressions">
            <summary>
            The class that stores all regular expressions used in this solution.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridCandidates">
            <summary>
            Indicates each candidates group in the PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ExtendedSusserEliminations">
            <summary>
            Indicates the eliminations in the extended susser format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.SimpleTable">
            <summary>
            Indicates the normal sudoku grid table (with only blank cells and numbers).
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Susser">
            <summary>
            Indicates the susser format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.DigitOrEmptyCell">
            <summary>
            Indicates the regular expression of a digit or empty cell placeholder.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridUnit_Old">
            <summary>
            Indicates the unit in the basic PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridUnit">
            <summary>
            Indicates the unit in the extended PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ThreeDigitsCandidate">
            <summary>
            Indicates the candidate unit that used in the elimination list.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridCandidatesUnit">
            <summary>
            Indicates the candidate list unit in the PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Digit">
            <summary>
            Indicates the regular expression to match a digit.
            </summary>
        </member>
        <member name="T:Sudoku.Constants.Throwings">
            <summary>
            Provides operations for throwing exceptions.
            </summary>
        </member>
        <member name="P:Sudoku.Constants.Throwings.ImpossibleCase">
            <summary>
            <para>
            Indicates an exception throwing when the case is impossible
            in switch expressions or switch-case clauses.
            </para>
            <para>
            This property will be used as a placeholder when expressions
            generate a warning (CS8509).
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Constants.Throwings.FormatError">
            <summary>
            Indicates an exception throwing when the format string is invalid.
            </summary>
        </member>
        <member name="P:Sudoku.Constants.Throwings.RefStructNotSupported">
            <summary>
            Indicates all <see langword="ref struct"/>s cannot
            use any boxing operations.
            </summary>
        </member>
        <member name="P:Sudoku.Constants.Throwings.InvalidOperation">
            <summary>
            Indicates the current operation is invalid.
            </summary>
        </member>
        <member name="M:Sudoku.Constants.Throwings.ImpossibleCaseWithMessage(System.String)">
            <summary>
            Indicates an exception throwing when the case is impossible
            in switch expressions or switch-case clauses.
            </summary>
            <param name="message">The specified message to display.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Sudoku.Constants.Throwings.ParsingError``1(System.String)">
            <summary>
            Indicates an exception throwing when the parsing is failed.
            </summary>
            <typeparam name="TTarget">The target type to parse.</typeparam>
            <param name="paramName">The name of the parameter.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Sudoku.Constants.Throwings.FormatErrorWithMessage(System.String,System.String)">
            <summary>
            Indicates an exception throwing when the format string is error.
            </summary>
            <param name="message">The inner message to display.</param>
            <param name="paramName">The name of format string parameter.</param>
            <returns>The exception.</returns>
        </member>
        <member name="T:Sudoku.Data.BitCombinationGenerator">
            <summary>
            Encapsulates a bit combination generator.
            </summary>
            <example>
            You can use this struct like this:
            <code>
            foreach (short mask in new BitCombinationGenerator(9, 3))<br/>
            {<br/>
                // Do something to use the mask.<br/>
            }
            </code>
            </example>
        </member>
        <member name="F:Sudoku.Data.BitCombinationGenerator._mask">
            <summary>
            The mask.
            </summary>
        </member>
        <member name="F:Sudoku.Data.BitCombinationGenerator._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.BitCombinationGenerator._isLast">
            <summary>
            Indicates whether that the value is the last one.
            </summary>
        </member>
        <member name="M:Sudoku.Data.BitCombinationGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="P:Sudoku.Data.BitCombinationGenerator.BitCount">
            <summary>
            Indicates how many bits should be generated.
            </summary>
        </member>
        <member name="P:Sudoku.Data.BitCombinationGenerator.OneCount">
            <summary>
            Indicates how many <see langword="true"/> bits (1) are in
            the number.
            </summary>
        </member>
        <member name="M:Sudoku.Data.BitCombinationGenerator.Equals(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitCombinationGenerator.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitCombinationGenerator.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitCombinationGenerator.HasNext">
            <summary>
            Indicates whether the generator has the next combination number to iterate.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.BitCombinationGenerator.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Sudoku.Data.CellStatus">
            <summary>
            Represents a cell status.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Empty">
            <summary>
            Indicates that the cell is empty.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Modifiable">
            <summary>
            Indicates that the cell has already filled a value,
            but the value does not exist when the puzzle begins.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Given">
            <summary>
            Indicates that the cell has already filled a value,
            and the value does exist when the puzzle begins. In
            other words, the value is a given (or a hint, clue, etc.).
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.All">
            <summary>
            Indicates all cases of cell statuses.
            </summary>
            <remarks>
            You had better use this field on cases when processing
            the bitwise operations in a sudoku <see cref="T:Sudoku.Data.Grid"/>.
            This field should not be used to process cell status comparison.
            </remarks>
            <seealso cref="M:Sudoku.Data.Grid.GetStatus(System.Int32)"/>
        </member>
        <member name="T:Sudoku.Data.Collections.CandidateCollection">
            <summary>
            Provides a collection with candidates.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.CandidateCollection._map">
            <summary>
            The inner map.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidate">The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.Equals(System.Object)">
            <method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true" /> if the specified object is equal to the
			current object; otherwise, <see langword="false" />.
		</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.Equals(Sudoku.Data.Collections.CandidateCollection)">
            <method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.op_Equality(Sudoku.Data.Collections.CandidateCollection,Sudoku.Data.Collections.CandidateCollection)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Collections.CandidateCollection.op_Inequality(Sudoku.Data.Collections.CandidateCollection,Sudoku.Data.Collections.CandidateCollection)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.Collections.CellCollection">
            <summary>
            Indicates the cell collection.
            </summary>
            <remarks>
            Different with <see cref="T:Sudoku.Data.GridMap"/>, the collection is immutable, which means you cannot
            modify any values in this collection after initialized. In addition, the output text will
            be different with <see cref="T:Sudoku.Data.GridMap"/> (<see cref="T:Sudoku.Data.GridMap"/>s use digit characters
            <c>0</c> or <c>1</c> to represent a bit is set or not set; however, this collection will
            output all cells using RCB-notation, for example, <c>r2c4</c>).
            </remarks>
            <seealso cref="T:Sudoku.Data.GridMap"/>
        </member>
        <member name="F:Sudoku.Data.Collections.CellCollection._map">
            <summary>
            The inner map.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified cell.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.#ctor(System.Int32[])">
            <summary>
            Initializes an instance with the specified cells.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with the specified cells.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified cells.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.CellCollection.Count">
            <summary>
            Indicates the number of cells in this collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.Equals(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.Equals(Sudoku.Data.Collections.CellCollection)">
            <method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.op_Equality(Sudoku.Data.Collections.CellCollection,Sudoku.Data.Collections.CellCollection)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Collections.CellCollection.op_Inequality(Sudoku.Data.Collections.CellCollection,Sudoku.Data.Collections.CellCollection)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.Collections.ConclusionCollection">
            <summary>
            Provides a collection that contains the conclusions.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.ConclusionCollection._collection">
            <summary>
            The internal collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(System.Span{Sudoku.Data.Conclusion})">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.Equals(System.Object)">
            <method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true" /> if the specified object is equal to the
			current object; otherwise, <see langword="false" />.
		</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.Equals(Sudoku.Data.Collections.ConclusionCollection)">
            <method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.ToString(System.Boolean,System.String)">
            <summary>
            Converts the current instance to <see cref="T:System.String"/> with the specified separator.
            </summary>
            <param name="shouldSort">Indicates whether the specified collection should be sorted first.</param>
            <param name="separator">The separator.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.op_Equality(Sudoku.Data.Collections.ConclusionCollection,Sudoku.Data.Collections.ConclusionCollection)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.op_Inequality(Sudoku.Data.Collections.ConclusionCollection,Sudoku.Data.Collections.ConclusionCollection)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.Collections.DigitCollection">
            <summary>
            Indicates a collection that contains the several digits.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.DigitCollection._mask">
            <summary>
            Indicates the inner mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified digit.
            </summary>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with the specified digits.
            </summary>
            <param name="digits">The digits.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified digits.
            </summary>
            <param name="digits">The digits.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Int16)">
            <summary>
            Initializes the collection using a mask.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.DigitCollection.Count">
            <summary>
            Get the number of digits in the collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Equals(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Equals(Sudoku.Data.Collections.DigitCollection)">
            <method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Contains(System.Int32)">
            <summary>
            Indicates whether the specified collection contains the digit.
            </summary>
            <param name="digit">The digit.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.ToString(System.String)">
            <method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_OnesComplement(Sudoku.Data.Collections.DigitCollection)">
            <summary>
            Reverse all statuses, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="collection">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_Equality(Sudoku.Data.Collections.DigitCollection,Sudoku.Data.Collections.DigitCollection)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_Inequality(Sudoku.Data.Collections.DigitCollection,Sudoku.Data.Collections.DigitCollection)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.Collections.RegionCollection">
            <summary>
            Indicates a region collection.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.RegionCollection._mask">
            <summary>
            The inner mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.Int32)">
            <summary>
            Initializes an empty collection and add one region into the list.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.RegionCollection.Count">
            <summary>
            Indicates the number of regions that contain in this collection.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Collections.RegionCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating whether the bit of the corresponding specified region
            is set <see langword="true"/>.
            </summary>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.Equals(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.Equals(Sudoku.Data.Collections.RegionCollection)">
            <method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.ToSimpleString">
            <summary>
            To string but only output the labels ('r', 'c' or 'b').
            </summary>
            <returns>The labels.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetLabel(System.Int32)">
            <summary>
            Get the label of each region.
            </summary>
            <param name="index">The index.</param>
            <returns>The label.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.op_Equality(Sudoku.Data.Collections.RegionCollection,Sudoku.Data.Collections.RegionCollection)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.op_Inequality(Sudoku.Data.Collections.RegionCollection,Sudoku.Data.Collections.RegionCollection)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.Conclusion">
            <summary>
            Encapsulates a conclusion representation while solving in logic.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Conclusion.#ctor(Sudoku.Data.ConclusionType,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with a conclusion type, a cell offset and a digit.
            </summary>
            <param name="conclusionType">The conclusion type.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.#ctor(Sudoku.Data.ConclusionType,System.Int32)">
            <summary>
            Initializes an instance with a conclusion type and a candidate offset.
            </summary>
            <param name="conclusionType">The conclusion type.</param>
            <param name="candidateOffset">The candidate offset.</param>
        </member>
        <member name="P:Sudoku.Data.Conclusion.CellOffset">
            <summary>
            The cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.Digit">
            <summary>
            The digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.ConclusionType">
            <summary>
            The conclusion type to control the action of applying.
            If the type is <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>,
            this conclusion will be set value (Set a digit into a cell);
            otherwise, a candidate will be removed.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Conclusion.ApplyTo(Sudoku.Data.Grid)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified conclusion type is neither <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>
            nor <see cref="F:Sudoku.Data.ConclusionType.Elimination"/>.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Deconstruct(Sudoku.Data.ConclusionType@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="conclusionType">(<see langword="out" /> parameter) The type of this conclusion.</param>
            <param name="candidate">(<see langword="out" /> parameter) The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Deconstruct(Sudoku.Data.ConclusionType@,System.Int32@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="conclusionType">(<see langword="out" /> parameter) The type of this conclusion.</param>
            <param name="cell">(<see langword="out" /> parameter) The cell.</param>
            <param name="digit">(<see langword="out" /> parameter) The digit.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Equals(Sudoku.Data.Conclusion)">
            <summary>
            Indicates whether the current object has the same value with the other one.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>
            The result of this comparison. <see langword="true"/> if two instances hold a same
            value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Conclusion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
            <exception cref="T:System.InvalidOperationException">
            Throws when the current conclusion type is invalid (neither <see cref="F:Sudoku.Data.ConclusionType.Assignment" />
            nor <see cref="F:Sudoku.Data.ConclusionType.Elimination" />.
            </exception>
            <seealso cref="P:Sudoku.Data.Conclusion.ConclusionType" />
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_Equality(Sudoku.Data.Conclusion,Sudoku.Data.Conclusion)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_Inequality(Sudoku.Data.Conclusion,Sudoku.Data.Conclusion)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.ConclusionType">
            <summary>
            Provides a conclusion type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ConclusionType.Assignment">
            <summary>
            Indicates the conclusion is a value filling into a cell.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ConclusionType.Elimination">
            <summary>
            Indicates the conclusion is a candidate being remove from a cell.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Extensions.GridTransformationExtensions">
            <summary>
            Provides a series of methods for <see cref="T:Sudoku.Data.IReadOnlyGrid"/>
            using in transformations.
            </summary>
            <seealso cref="T:Sudoku.Data.IReadOnlyGrid"/>
        </member>
        <member name="F:Sudoku.Data.Extensions.GridTransformationExtensions.ClockwiseTable">
            <summary>
            The table of clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Extensions.GridTransformationExtensions.CounterClockwiseTable">
            <summary>
            The table of counter-clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Extensions.GridTransformationExtensions.PiRotateTable">
            <summary>
            The table of pi-rotation.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.MirrorLeftRight(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror left-right the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.MirrorTopBottom(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror top-bottom the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.MirrorDiagonal(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror diagonal the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.Transpose(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Transpose the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.MirrorAntidiagonal(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror anti-diagonal the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.RotateClockwise(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Rotate the grid clockwise.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.RotateCounterClockwise(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Rotate the grid counter-clockwise.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.RotatePi(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Rotate the grid <c><see cref="F:System.Math.PI"/></c> degrees.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.GridTransformationExtensions.SwapTwoRegions(Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32)">
            <summary>
            Swap to regions.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="region1">The region 1.</param>
            <param name="region2">The region 2.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when two specified region argument is not in valid range (0..27)
            or two regions are not in same region type.
            </exception>
        </member>
        <member name="T:Sudoku.Data.Extensions.ReadOnlyGridEx">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Data.IReadOnlyGrid"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.IReadOnlyGrid"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ReadOnlyGridEx.ToMutable(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Convert the current read-only grid to mutable one.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The mutable one.</returns>
            <remarks>
            This method is only use type conversion, so the return value has a same
            reference with this specified argument holds.
            </remarks>
            <exception cref="T:System.InvalidCastException">
            Throws when <see cref="T:Sudoku.Data.IReadOnlyGrid"/> cannot convert to a <see cref="T:Sudoku.Data.Grid"/>.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Extensions.ReadOnlyGridEx.IsBivalueCell(Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int16@)">
            <summary>
            <para>Indicates whether the specified cell is a bivalue cell.</para>
            <para>
            Note that given and modifiable cells always make this method
            return <see langword="false"/>.
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="mask">
            (<see langword="out"/> parameter) The result mask. The mask consists of
            9 bits, where the set bits means the digit exists in this cell; otherwise,
            the bit will not be set.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ReadOnlyGridEx.Exists(Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32)">
            <summary>
            <para>
            Indicates whether the specified grid contains the digit in the specified cell.
            </para>
            <para>
            The return value will be <see langword="true"/> if and only if
            the cell is empty and contains that digit.
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>
            A <see cref="T:System.Boolean"/>? value indicating that.
            </returns>
            <remarks>
            The cases of the return value are below:
            <list type="table">
            <item>
            <term><c><see langword="true"/></c></term>
            <description>
            The cell is an empty cell <b>and</b> contains the specified digit.
            </description>
            </item>
            <item>
            <term><c><see langword="false"/></c></term>
            <description>
            The cell is an empty cell <b>but doesn't</b> contain the specified digit.
            </description>
            </item>
            <item>
            <term><c><see langword="null"/></c></term>
            <description>The cell is <b>not</b> an empty cell.</description>
            </item>
            </list>
            </remarks>
            <example>
            Note that the method will return a <see cref="T:System.Boolean"/>?, so you should use the code
            <code>grid.Exists(candidate) is true</code>
            or
            <code>grid.Exists(candidate) == true</code>
            to decide whether a condition is true.
            </example>
        </member>
        <member name="T:Sudoku.Data.FullGridMap">
            <summary>
            Encapsulates a binary series of candidate status table consisting of 729 bits,
            where <see langword="true"/> bit (1) is for the cell having digit,
            and the <see langword="false"/> bit (0) is for empty cell. Sometimes for other usages.
            </summary>
            <remarks>
            This data structure use at least 144 bytes, which has outnumbered the number of
            the threshold of value types via Microsoft C# language designation team (Every instance
            of value type should be no more than 64 bytes). Therefore, we should use
            <see cref="T:Sudoku.Data.GridMap"/> instead of this data structure as much as possible.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.FullGridMap.Empty">
            <summary>
            Indicates an empty instance (making no changes).
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line1">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line2">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line3">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line4">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line5">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line6">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line7">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line8">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line9">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified candidate offset
            (Sets itself and all peers).
            </summary>
            <param name="offset">The candidate offset.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified candidate offset.
            This will set all bits of all peers of this candidate. Another
            <see cref="T:System.Boolean"/> value indicates whether this initialization
            will set the bit of itself.
            </summary>
            <param name="offset">The candidate offset.</param>
            <param name="setItself">
            A <see cref="T:System.Boolean"/> value indicating whether this initialization
            will set the bit of itself.
            If the value is <see langword="false"/>, it will be equivalent
            to below:
            <code>
            var map = new FullGridMap(offset) { [offset] = false };
            </code>
            </param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with a series of elements.
            </summary>
            <param name="offsets">The cell offsets.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with a series of elements.
            </summary>
            <param name="offsets">The cell offsets.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with three binary value.
            </summary>
            <param name="line1">Line 1 grid map.</param>
            <param name="line2">Line 2 grid map.</param>
            <param name="line3">Line 3 grid map.</param>
            <param name="line4">Line 4 grid map.</param>
            <param name="line5">Line 5 grid map.</param>
            <param name="line6">Line 6 grid map.</param>
            <param name="line7">Line 7 grid map.</param>
            <param name="line8">Line 8 grid map.</param>
            <param name="line9">Line 9 grid map.</param>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.IsEmpty">
            <summary>
            Indicates whether the map has no set bits.
            This property is equivalent to code '<c>!<see langword="this"/>.IsNotEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.FullGridMap.IsNotEmpty"/>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.IsNotEmpty">
            <summary>
            Indicates whether the map has at least one set bit.
            This property is equivalent to code '<c>!<see langword="this"/>.IsEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.FullGridMap.IsEmpty"/>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.Count">
            <summary>
            Indicates the total number of cells where the corresponding
            value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.Offsets">
            <summary>
            Indicates all candidate offsets whose corresponding value
            are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value on the specified candidate
            offset.
            </summary>
            <param name="offset">The candidate offset.</param>
            <value>
            A <see cref="T:System.Boolean"/> value on assignment.
            </value>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the candidate has digit.
            </returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Equals(Sudoku.Data.FullGridMap)">
            <summary>
            Indicates whether the current object has the same value with the other one.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>
            The result of this comparison. <see langword="true"/> if two instances hold a same
            value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.GetCellSubView(System.Int32)">
            <summary>
            Get the sub-view of the specified cell.
            </summary>
            <param name="cellOffset">The cell offset.</param>
            <returns>The <see cref="T:System.Boolean"/> array.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.SetAt(System.Int32)">
            <summary>
            Simply calls <see cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.
            </summary>
            <param name="index">The index of all true bits.</param>
            <returns>The result position.</returns>
            <seealso cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.SetAt(System.Index)">
            <summary>
            Get the index of <see langword="true"/> bits from start or end.
            </summary>
            <param name="index">
            The index. If <see cref="P:System.Index.IsFromEnd"/> is <see langword="true"/>,
            the method will search the bits from end of the list.
            </param>
            <returns>The result position.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.ToArray">
            <summary>
            Get all candidate offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of candidate offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Reduct(System.Int32)">
            <summary>
            Reduct the map to <see cref="T:Sudoku.Data.GridMap"/> with the specified digit.
            </summary>
            <param name="digit">The digit.</param>
            <returns>The map of the digit.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Add(System.Int32)">
            <summary>
            Add the candidate into the list.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.AddRange(System.Int32[])">
            <summary>
            Add a series of candidates into the list.
            </summary>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.AddRange(System.ReadOnlySpan{System.Int32})">
            <summary>
            Add a series of candidates into the list.
            </summary>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add a series of candidates into the list.
            </summary>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Remove(System.Int32)">
            <summary>
            Remove a candidate from the current list.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Remove a series of candidates from the current list.
            </summary>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.SetCell(System.Int32,System.Boolean[])">
            <summary>
            Set the bits to the specified cell.
            </summary>
            <param name="cellOffset">The cells.</param>
            <param name="bits">Bits.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.CreateInstance(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Create the instance with some candidates. These candidates will make their own
            peers. This method will get the intersection of all peers' list.
            </summary>
            <param name="candidates">All candidates.</param>
            <param name="setItself">
            Indicates whether the peer table will record itself. If the value
            is <see langword="true"/>, the peer candidates will add itself to
            calculate the final intersection; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </param>
            <returns>The result map.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_Equality(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_Inequality(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_OnesComplement(Sudoku.Data.FullGridMap)">
            <summary>
            Negate all bits.
            </summary>
            <param name="map">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_Subtraction(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Get a <see cref="T:Sudoku.Data.FullGridMap"/> that contains all <paramref name="left"/> cells
            but not in <paramref name="right"/> cells.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_BitwiseAnd(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Intersect two <see cref="T:Sudoku.Data.FullGridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_BitwiseOr(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Union two <see cref="T:Sudoku.Data.FullGridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_ExclusiveOr(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Symmetrical except two <see cref="T:Sudoku.Data.FullGridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Data.Grid">
            <summary>
            Encapsulates a basic sudoku grid, which uses mask table to store all information for 81 cells.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.EmptyString">
            <summary>
            Indicates the empty grid string.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.Empty">
            <summary>
            Indicates an empty grid, where all values are zero.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.DefaultMask">
            <summary>
            Indicates the default mask of a cell (an empty cell, with all 9 candidates left).
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.MaxCandidatesMask">
            <summary>
            Indicates the maximum candidate mask that used.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid._masks">
            <summary>
            Binary masks of all cells.
            </summary>
            <remarks>
            <para>This array stores binary representation of decimals.</para>
            <para>
            There are 81 cells in a sudoku grid, so this data structure uses
            an array of size 81. Each element is a <see cref="T:System.Int16"/> value
            (but only use 12 bits), where the lower 9 bits indicates whether
            the digit 1 to 9 exists or not. If the corresponding value is
            <see langword="true"/>, or in other words, the binary representation
            is 1, this digit will <b>not</b> exist.
            </para>
            <para>
            The higher 3 bits indicates the cell status. The
            cases are below:
            <list type="table">
            <item>
            <term><c>0b001</c> (1)</term>
            <description>The cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/>.</description>
            </item>
            <item>
            <term><c>0b010</c> (2)</term>
            <description>The cell is <see cref="F:Sudoku.Data.CellStatus.Modifiable"/>.</description>
            </item>
            <item>
            <term><c>0b100</c> (4)</term>
            <description>The cell is <see cref="F:Sudoku.Data.CellStatus.Given"/>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <permission cref="T:System.Security.PermissionSet">
            The current project or the derived class can access this field.
            </permission>
            <seealso cref="T:Sudoku.Data.CellStatus"/>
        </member>
        <member name="F:Sudoku.Data.Grid._initialMasks">
            <summary>
            Same as <see cref="F:Sudoku.Data.Grid._masks"/>, but this field stores the all masks at
            the initial grid. The field will not be modified until this instance
            destructs.
            </summary>
            <permission cref="T:System.Security.PermissionSet">
            The current project or the derived class can access this field.
            </permission>
            <seealso cref="F:Sudoku.Data.Grid._masks"/>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor(System.Int16[])">
            <summary>
            Initializes an instance with the binary mask array.
            </summary>
            <param name="masks">The mask array.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the length of the specified argument is not 81.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="P:Sudoku.Data.Grid.HasSolved">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.CandidatesCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.EmptyCellsCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="E:Sudoku.Data.Grid.ValueChanged">
            <summary>
            Indicates the event when the mask in a certain cell has changed.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.Fix">
            <summary>
            To fix a grid, which means all modifiable values will be changed
            to given ones.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.Unfix">
            <summary>
            To unfix a grid, which means all given values will be changed
            to modifiable ones.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.Reset">
            <summary>
            To reset the grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <summary>
            Set the status in a cell.
            </summary>
            <param name="offset">The cell offset you want to change.</param>
            <param name="cellStatus">The cell status you want to set.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.SetMask(System.Int32,System.Int16)">
            <summary>
            Set a mask in a cell.
            </summary>
            <param name="offset">The cell offset you want to change.</param>
            <param name="value">The cell mask you want to set.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Equals(Sudoku.Data.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetMask(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetCandidateMask(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString(Sudoku.Data.GridOutputOptions)">
            <summary>
            Returns a string that represents the current object with the grid output option.
            </summary>
            <param name="gridOutputOption">The grid output option.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString(System.String)">
            <method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetStatus(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.OnValueChanged(System.Object,Sudoku.Data.ValueChangedEventArgs)">
            <summary>
            The method, which will be invoked when the mask has changed.
            </summary>
            <param name="sender">The instance triggering the event.</param>
            <param name="e">The data.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.SimplyValidate">
            <summary>
            Simply validate.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String)">
            <summary>
            <para>
            Parses a string value and converts to this type.
            </para>
            <para>
            If you want to parse a PM grid, we recommend you use the method
            <see cref="M:Sudoku.Data.Grid.Parse(System.String,Sudoku.Data.GridParsingOption)"/> instead of this method.
            </para>
            </summary>
            <param name="str">The string.</param>
            <returns>The result instance had converted.</returns>
            <seealso cref="M:Sudoku.Data.Grid.Parse(System.String,Sudoku.Data.GridParsingOption)"/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String,System.Boolean)">
            <summary>
            <para>
            Parses a string value and converts to this type.
            </para>
            <para>
            If you want to parse a PM grid, you should decide the mode to parse.
            If you use compatible mode to parse, all single values will be treated as
            given values; otherwise, recommended mode, which uses '<c>&lt;d&gt;</c>'
            or '<c>*d*</c>' to represent a value be a given or modifiable one. The decision
            will be indicated and passed by the second parameter <paramref name="compatibleFirst"/>.
            </para>
            </summary>
            <param name="str">The string.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check
            PM grid. See <see cref="P:Sudoku.Data.GridParser.CompatibleFirst"/> to learn more.
            </param>
            <returns>The result instance had converted.</returns>
            <seealso cref="P:Sudoku.Data.GridParser.CompatibleFirst"/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String,Sudoku.Data.GridParsingOption)">
            <summary>
            Parses a string value and converts to this type,
            using a specified grid parsing type.
            </summary>
            <param name="str">The string.</param>
            <param name="gridParsingOption">The grid parsing type.</param>
            <returns>The result instance had converted.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.TryParse(System.String,Sudoku.Data.Grid@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result parsed. If the conversion is failed,
            this argument will be <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.TryParse(System.String,Sudoku.Data.GridParsingOption,Sudoku.Data.Grid@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="gridParsingOption">The grid parsing type.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result parsed. If the conversion is failed,
            this argument will be <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.CreateInstance(System.Int32[])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.CheckFormatString(System.String)">
            <summary>
            To check the format string, delegated from the method
            <see cref="M:Sudoku.Data.Grid.ToString(System.String,System.IFormatProvider)"/>.
            </summary>
            <param name="format">The format.</param>
            <seealso cref="M:Sudoku.Data.Grid.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Sudoku.Data.Grid.op_Equality(Sudoku.Data.Grid,Sudoku.Data.Grid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Grid.op_Inequality(Sudoku.Data.Grid,Sudoku.Data.Grid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.GridFormatFactory">
            <summary>
            Provides a factory to create a <see cref="T:Sudoku.Data.GridFormatter"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatFactory.Create(Sudoku.Data.GridOutputOptions)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridFormatter"/> according to the specified grid output options.
            </summary>
            <param name="gridOutputOption">The grid output options.</param>
            <returns>The grid formatter.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatFactory.Create(System.String)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridFormatter"/> according to the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The grid formatter.</returns>
            <exception cref="T:System.FormatException">
            Throws when the format string is invalid.
            </exception>
        </member>
        <member name="T:Sudoku.Data.GridFormatter">
            <summary>
            Provides operations for grid formatting.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with a <see cref="T:System.Boolean"/> value
            indicating multi-line.
            </summary>
            <param name="multiline">
            The multi-line identifier. If the value is <see langword="true"/>, the output will
            be multi-line.
            </param>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Multiline">
            <summary>
            Indicates whether the output should be multi-line.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToString(Sudoku.Data.Grid)">
            <summary>
            Represents a string value indicating this instance.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToExcelString(Sudoku.Data.Grid)">
            <summary>
            To Excel format string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToHodokuLibraryFormatString(Sudoku.Data.Grid)">
            <summary>
            To string with Hodoku library format compatible string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToSukakuString(Sudoku.Data.Grid)">
            <summary>
            To string with the sukaku format.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the puzzle is an invalid sukaku puzzle (at least one cell is given or modifiable).
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToSingleLineStringCore(Sudoku.Data.Grid)">
            <summary>
            To single line string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.GetFirstFalseCandidate(System.Int16)">
            <summary>
            Get the first <see langword="false"/> candidate.
            </summary>
            <param name="value">The value.</param>
            <returns>The first one.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToMultiLineSimpleGridCore(Sudoku.Data.Grid)">
            <summary>
            To multi-line normal grid string without any candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToMultiLineStringCore(Sudoku.Data.Grid)">
            <summary>
            To multi-line string with candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.GetCellStatus(System.Int16)">
            <summary>
            Get cell status for a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.DefaultList">
            <summary>
            Get the default list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Placeholder">
            <summary>
            The place holder.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.WithModifiables">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in ':candidate list'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c>&lt;digit&gt;</c>' instead
            of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            See file "How to use 'Grid' class.md" for more information.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Sukaku">
            <summary>
            Indicates the output will be sukaku format (all single-valued digit will
            be all treated as candidates).
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Excel">
            <summary>
            Indicates the output will be Excel format.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridMap">
            <summary>
            Encapsulates a binary series of cell status table.
            </summary>
            <remarks>
            The instance stores two <see cref="T:System.Int64"/> values, consisting of 81 bits,
            where <see langword="true"/> bit (1) is for the cell having that digit,
            and the <see langword="false"/> bit (0) is for the cell not containing
            the digit.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.GridMap.Empty">
            <summary>
            <para>Indicates an empty instance (all bits are 0).</para>
            <para>
            I strongly recommend you <b>should</b> use this instance instead of default constructor
            <see cref="M:Sudoku.Data.GridMap.#ctor"/>.
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor"/>
        </member>
        <member name="F:Sudoku.Data.GridMap.Shifting">
            <summary>
            The value used for shifting.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap._high">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.GridMap._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.GridMap._low"/> represents the lower 41 bits.
            </summary>
            <seealso cref="F:Sudoku.Data.GridMap._low"/>
            <seealso cref="F:Sudoku.Data.GridMap._high"/>
        </member>
        <member name="F:Sudoku.Data.GridMap._low">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.GridMap._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.GridMap._low"/> represents the lower 41 bits.
            </summary>
            <seealso cref="F:Sudoku.Data.GridMap._low"/>
            <seealso cref="F:Sudoku.Data.GridMap._high"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified cell offset
            (Sets itself and all peers).
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32,Sudoku.Data.GridMap.InitializationOption)">
            <summary>
            Initializes an instance with the specified cell offset
            with an initialize option.
            </summary>
            <param name="offset">The cell offset.</param>
            <param name="initializeOption">
            Indicates the behavior of the initialization.
            </param>
            <exception cref="T:System.ArgumentException">
            Throws when the specified initialize option is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32[])">
            <summary>
            Same behavior of the constructor as <see cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>.
            </summary>
            <param name="offsets">All offsets.</param>
            <remarks>
            This constructor is defined after another constructor with
            <see cref="T:System.ReadOnlySpan`1"/> had defined. Although this constructor
            does not initialize something (use the other one instead),
            while initializing with the type <see cref="T:System.Int32"/>[], the complier
            gives me an error without this constructor (ambiguity of two
            constructors). However, unfortunately, <see cref="T:System.ReadOnlySpan`1"/>
            does not implemented the interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>...
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32[],Sudoku.Data.GridMap.InitializationOption)">
            <summary>
            Initializes an instance with cell offsets with an initialize option.
            </summary>
            <param name="offsets">The offsets to be processed.</param>
            <param name="initializeOption">
            Indicates the behavior of the initialization.
            </param>
            <remarks>
            This method is same behavior of <see cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.GridMap.InitializationOption)"/>
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.GridMap.InitializationOption)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="offsets">cell offsets.</param>
            <remarks>
            <para>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            will not be set <see langword="true"/>.
            </para>
            <para>
            In some case, you can use object initializer instead.
            You can use the code
            <code>
            var map = new GridMap { 0, 3, 5 };
            </code>
            instead of the code
            <code>
            var map = new GridMap(stackalloc[] { 0, 3, 5 });
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.ReadOnlySpan{System.Int32},Sudoku.Data.GridMap.InitializationOption)">
            <summary>
            Initializes an instance with cell offsets with an initialize option.
            </summary>
            <param name="offsets">The offsets to be processed.</param>
            <param name="initializeOption">
            Indicates the behavior of the initialization.
            </param>
            <exception cref="T:System.ArgumentException">
            Throws when the specified initialize option is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(Sudoku.Data.GridMap)">
            <summary>
            To copy an instance with the specified information.
            </summary>
            <param name="another">Another instance.</param>
            <remarks>
            <para>
            This constructor is only used for adding or removing some extra cells like:
            <code>
            var y = new GridMap(x) { [i] = true };
            </code>
            or
            <code>
            var y = new GridMap(x) { i };
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="offsets">cell offsets.</param>
            <remarks>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            will not be set <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.GridMap.InitializationOption)">
            <summary>
            Initializes an instance with cell offsets with an initialize option.
            </summary>
            <param name="offsets">The offsets to be processed.</param>
            <param name="initializeOption">
            Indicates the behavior of the initialization.
            </param>
            <exception cref="T:System.ArgumentException">
            Throws when the specified initialize option is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with three binary values.
            </summary>
            <param name="high">Higher 27 bits.</param>
            <param name="mid">Medium 27 bits.</param>
            <param name="low">Lower 27 bits.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified cell offset.
            This will set all bits of all peers of this cell. Another
            <see cref="T:System.Boolean"/> value indicates whether this initialization
            will set the bit of itself.
            </summary>
            <param name="offset">The cell offset.</param>
            <param name="setItself">
            A <see cref="T:System.Boolean"/> value indicating whether this initialization
            will set the bit of itself.
            If the value is <see langword="false"/>, it will be equivalent
            to below:
            <code>
            var map = new GridMap(offset) { [offset] = false };
            </code>
            </param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes an instance with two binary values.
            </summary>
            <param name="high">Higher 40 bits.</param>
            <param name="low">Lower 41 bits.</param>
        </member>
        <member name="P:Sudoku.Data.GridMap.IsEmpty">
            <summary>
            Indicates whether the map has no set bits.
            This property is equivalent to code '<c>!this.IsNotEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.GridMap.IsNotEmpty"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.IsNotEmpty">
            <summary>
            Indicates whether the map has at least one set bit.
            This property is equivalent to code '<c>!this.IsEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.GridMap.IsEmpty"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.BlockMask">
            <summary>
            Indicates the mask of block.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.RowMask">
            <summary>
            Indicates the mask of row.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.ColumnMask">
            <summary>
            Indicates the mask of column.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.CoveredLine">
            <summary>
            Indicates the covered line.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Count">
            <summary>
            Indicates the total number of cells where the corresponding
            value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.PeerIntersection">
            <summary>
            Indicates the map of cells, which is the peer intersections.
            </summary>
            <example>
            For example, the code
            <code>
            var map = testMap.PeerIntersection;
            </code>
            is equivalent to the code
            <code>
            var map = new GridMap(testMap.Offsets, InitializeOption.ProcessPeersWithoutItself);
            </code>
            </example>
        </member>
        <member name="P:Sudoku.Data.GridMap.CoveredRegions">
            <summary>
            Indicates all regions covered. This property is used to check all regions that all cells
            of this instance covered. For examp;le, if the cells are { 0, 1 }, the property
            <see cref="P:Sudoku.Data.GridMap.CoveredRegions"/> will return the region 0 (block 1) and region 9 (row 1);
            however, if cells spanned two regions or more (e.g. cells { 0, 1, 27 }), this property will not contain
            any regions.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Regions">
            <summary>
            All regions that the map spanned. This property is used to check all regions that all cells of
            this instance spanned. For example, if the cells are { 0, 1 }, the property
            <see cref="P:Sudoku.Data.GridMap.Regions"/> will return the region 0 (block 1), region 9 (row 1), region 18 (column 1)
            and the region 19 (column 2).
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Offsets">
            <summary>
            <para>
            Indicates all cell offsets whose corresponding value
            are set <see langword="true"/>.
            </para>
            <para>
            If you want to make an array of them, please use method
            <see cref="M:Sudoku.Data.GridMap.ToArray"/> instead of code
            '<c>Offsets.ToArray()</c>'.
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.GridMap.ToArray"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value on the specified cell
            offset.
            </summary>
            <param name="offset">The cell offset.</param>
            <value>
            A <see cref="T:System.Boolean"/> value on assignment.
            </value>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the cell has digit.
            </returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.Deconstruct(System.Int64@,System.Int64@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="high">(<see langword="out" /> parameter) Higher 40 bits.</param>
            <param name="low">(<see langword="out" /> parameter) Lower 41 bits.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.Equals(System.Object)">
            <method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true" /> if the specified object is equal to the
			current object; otherwise, <see langword="false" />.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.GridMap.Equals(Sudoku.Data.GridMap)">
            <method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.GridMap.Overlaps(Sudoku.Data.GridMap)">
            <summary>
            Indicates whether this map overlaps another one.
            </summary>
            <param name="other">The other map.</param>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.AllSetsAreInOneRegion(System.Int32@)">
            <summary>
            Indicates whether all cells in this instance are in one region.
            </summary>
            <param name="region">
            (<see langword="out"/> parameter) The region covered. If the return value
            is false, this value will be the constant -1.
            </param>
        </member>
        <member name="M:Sudoku.Data.GridMap.SetAt(System.Int32)">
            <summary>
            Get a n-th index of the <see langword="true"/> bit in this instance.
            </summary>
            <param name="index">The true bit index order.</param>
            <returns>The real index.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.CompareTo(Sudoku.Data.GridMap)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToArray">
            <summary>
            Get all cell offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of cell offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetSubviewMask(System.Int32)">
            <summary>
            Get the subview mask of this map.
            </summary>
            <param name="region">The region.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.GridMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Add(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.Remove(System.Int32)">
            <summary>
            Set the specified cell as <see langword="false"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.Clear">
            <summary>
            Clear all bits.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridMap.AddRange(System.ReadOnlySpan{System.Int32})">
            <summary>
            Set the specified cells as <see langword="true"/> value.
            </summary>
            <param name="offsets">The cells to add.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Set the specified cells as <see langword="true"/> value.
            </summary>
            <param name="offsets">The cells to add.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Equality(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Inequality(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_GreaterThan(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_GreaterThan">
		<summary>Indicates whether the left value is greater than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_GreaterThanOrEqual(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_GreaterThanOrEqual">
		<summary>
			Indicates whether the left value is greater than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_LessThan(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_LessThan">
		<summary>Indicates whether the left value is less than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_LessThanOrEqual(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_LessThanOrEqual">
		<summary>
			Indicates whether the left value is less than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_OnesComplement(Sudoku.Data.GridMap)">
            <summary>
            Reverse status for all cells, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="gridMap">The instance to negate.</param>
            <returns>The negative result.</returns>
            <remarks>
            While reversing the higher 40 bits, the unused bits will be fixed and never be modified the state,
            that is why using the code "<c>higherBits &amp; 0xFFFFFFFFFFL</c>".
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Addition(Sudoku.Data.GridMap,System.Int32)">
            <summary>
            Add a cell into the specified map.
            </summary>
            <param name="map">The map.</param>
            <param name="cell">The cell to remove.</param>
            <returns>The map after adding.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Addition(System.Int32,Sudoku.Data.GridMap)">
            <summary>
            Add a cell into the specified map.
            </summary>
            <param name="map">The map.</param>
            <param name="cell">The cell to remove.</param>
            <returns>The map after adding.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Subtraction(Sudoku.Data.GridMap,System.Int32)">
            <summary>
            Remove a cell from the specified map.
            </summary>
            <param name="map">The map.</param>
            <param name="cell">The cell to remove.</param>
            <returns>The map after removing.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Subtraction(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Get a <see cref="T:Sudoku.Data.GridMap"/> that contains all <paramref name="left"/> cells
            but not in <paramref name="right"/> cells.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_BitwiseAnd(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Get all cells that two <see cref="T:Sudoku.Data.GridMap"/>s both contain.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_BitwiseOr(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Get all cells from two <see cref="T:Sudoku.Data.GridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_ExclusiveOr(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Get all cells that only appears once in two <see cref="T:Sudoku.Data.GridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The symmetrical difference result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Implicit(System.Int32[])~Sudoku.Data.GridMap">
            <summary>
            Implicite cast from <see cref="T:System.Int32"/>[] to <see cref="T:Sudoku.Data.GridMap"/>.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Implicit(System.ReadOnlySpan{System.Int32})~Sudoku.Data.GridMap">
            <summary>
            Implicit cast from <see cref="T:System.ReadOnlySpan`1"/> to <see cref="T:Sudoku.Data.GridMap"/>.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Explicit(Sudoku.Data.GridMap)~System.Int32[]">
            <summary>
            Explicit cast from <see cref="T:Sudoku.Data.GridMap"/> to <see cref="T:System.Int32"/>[].
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="T:Sudoku.Data.GridMap.InitializationOption">
            <summary>
            Provides an option for initialization of the base type <see cref="T:Sudoku.Data.GridMap"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.InitializationOption.Ordinary">
            <summary>
            Indicates each candidate will be processed with the normal case.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.InitializationOption.ProcessPeersAlso">
            <summary>
            Indicates each candidate will be processed with its peer cells.
            For example, if set the cell of the index 0, this option
            will let the constructor set its peer cells also.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.InitializationOption.ProcessPeersWithoutItself">
            <summary>
            Indicates each candidate will be processed with its peer cells,
            but itself will be set <see langword="false"/> rather than
            <see langword="true"/> value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.CoverTable">
            <summary>
            The cover table.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridOutputOptions">
            <summary>
            Provides a grid output option.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.None">
            <summary>
            Indicates the default settings (a single-line string text).
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.WithModifiers">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in ':candidate list'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c>&lt;digit&gt;</c>'
            instead of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            See file <i><a href="#">How to use 'Grid' class.md</a></i> for more information.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.DotPlaceholder">
            <summary>
            Indicates the placeholder must be '.' instead of '0'.
            If the value is <see langword="true"/>, the placeholder will be '.';
            otherwise, '0'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.Multiline">
            <summary>
            Indicates the output should be multi-line.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.Sukaku">
            <summary>
            Indicates the output will be sukaku format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.Excel">
            <summary>
            Indicates the output will be Excel format.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridParser">
            <summary>
            Encapsulates a grid parser.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridParser.#ctor(System.String)">
            <summary>
            Initializes an instance with parsing data.
            </summary>
            <param name="parsingValue">The string to parse.</param>
        </member>
        <member name="M:Sudoku.Data.GridParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance with parsing data and a bool value
            indicating whether the parsing operation should use compatible mode.
            </summary>
            <param name="parsingValue">The string to parse.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check
            PM grid. See <see cref="P:Sudoku.Data.GridParser.CompatibleFirst"/> to learn more.
            </param>
            <seealso cref="P:Sudoku.Data.GridParser.CompatibleFirst"/>
        </member>
        <member name="P:Sudoku.Data.GridParser.ParsingValue">
            <summary>
            The value to parse.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridParser.CompatibleFirst">
            <summary>
            Indicates whether the parser will change the execution order of PM grid.
            If the value is <see langword="true"/>, the parser will check compatible one
            first, and then check recommended parsing plan ('<c>&lt;d&gt;</c>' and '<c>*d*</c>').
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridParser.Parse">
            <summary>
            To parse the value.
            </summary>
            <returns>The grid.</returns>
            <exception cref="T:System.ArgumentException">Throws when failed to parse.</exception>
        </member>
        <member name="M:Sudoku.Data.GridParser.Parse(Sudoku.Data.GridParsingOption)">
            <summary>
            To parse the value with a specified grid parsing type.
            </summary>
            <param name="gridParsingOption">A specified parsing type.</param>
            <returns>The grid.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when failed to parse.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSimpleMultilineGrid">
            <summary>
            Parse the value using multi-line simple grid (without any candidates).
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingExcel">
            <summary>
            Parse the Excel format.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingPencilMarked(System.Boolean)">
            <summary>
            Parse the PM grid.
            </summary>
            <param name="treatSingleValueAsGiven">
            The value indicating whether the parsing should treat
            the modifiable values as given ones.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSimpleTable">
            <summary>
            Parse the simple table format string (Sudoku explainer format).
            </summary>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSusser">
            <summary>
            Parse the susser format string.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSukaku(System.Boolean)">
            <summary>
            Parse the sukaku format string.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="P:Sudoku.Data.GridParser.DefaultCheckingArray">
            <summary>
            Get an array of default values in checking.
            </summary>
            <returns>The array of <see cref="T:System.Boolean"/> values.</returns>
            <remarks>
            Here must use method instead of property or field.
            Because the return value should be mutable.
            </remarks>
        </member>
        <member name="T:Sudoku.Data.GridParsingOption">
            <summary>
            Represents a grid parsing type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Susser">
            <summary>
            <para>
            Indicates the susser format, which means all grid values
            will be displayed in one line with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            <code>
            080630040200085009090000081000300800000020000006001000970000030400850007010094050<br/>
            4+80002+306+31000+9004000+4030109+38+24+675+1+75+1+39+8+46+2+2640708+3902090000010000002080+36+20007:713 723 533 633 537 575 176 576 577 579 583 784 586 587 496 997
            </code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.PencilMarked">
            <summary>
            <para>
            Indicates the pencil marked grid (PM grid), which means all
            grid candidates will be displayed using a table.
            </para>
            <para>
            For example:
            <code>
            .--------------.--------------.-------------.<br/>
            | &lt;4&gt;   *8*    59  | 157  15   &lt;2&gt;  | *3*   79  &lt;6&gt;   |<br/>
            | *3*   &lt;1&gt;    256 | 578  568  *9*  | 25  78  &lt;4&gt;   |<br/>
            | 56  79   279 | *4*    568  &lt;3&gt;  | 29  &lt;1&gt;   58  |<br/>
            :--------------+--------------+-------------:<br/>
            | &lt;9&gt;   *3*    &lt;8&gt;   | *2*    &lt;4&gt;    *6*  | &lt;7&gt;   &lt;5&gt;   *1*   |<br/>
            | *7*   &lt;5&gt;    *1*   | *3*    &lt;9&gt;    *8*  | *4*   &lt;6&gt;   *2*   |<br/>
            | *2*   &lt;6&gt;    &lt;4&gt;   | 15   &lt;7&gt;    15 | &lt;8&gt;   *3*   &lt;9&gt;   |<br/>
            :--------------+--------------+-------------:<br/>
            | 56  &lt;2&gt;    567 | &lt;9&gt;    138  47 | 16  48  38  |<br/>
            | &lt;1&gt;   479  679 | 58   358  47 | 69  &lt;2&gt;   358 |<br/>
            | &lt;8&gt;   49   *3*   | &lt;6&gt;    *2*    15 | 15  49  &lt;7&gt;   |<br/>
            '--------------'--------------'-------------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.PencilMarkedTreatSingleAsGiven">
            <summary>
            <para>
            Indicates the pencil marked grid (PM grid), which means all
            grid candidates will be displayed using a table. In addition,
            all single digit will be treated as a given digit.
            </para>
            <para>
            For example:
            <code>
            .--------------.--------------.-------------.<br/>
            | 4   8    59  | 157  15   2  | 3   79  6   |<br/>
            | 3   1    256 | 578  568  9  | 25  78  4   |<br/>
            | 56  79   279 | 4    568  3  | 29  1   58  |<br/>
            :--------------+--------------+-------------:<br/>
            | 9   3    8   | 2    4    6  | 7   5   1   |<br/>
            | 7   5    1   | 3    9    8  | 4   6   2   |<br/>
            | 2   6    4   | 15   7    15 | 8   3   9   |<br/>
            :--------------+--------------+-------------:<br/>
            | 56  2    567 | 9    138  47 | 16  48  38  |<br/>
            | 1   479  679 | 58   358  47 | 69  2   358 |<br/>
            | 8   49   3   | 6    2    15 | 15  49  7   |<br/>
            '--------------'--------------'-------------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Table">
            <summary>
            <para>
            Indicates the table format, which means all grid values
            will be displayed using a table with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            <code>
            .----------.----------.----------.<br/>
            |  .  4  6 |  . +1  . |  3 +7 +5 |<br/>
            | +3 +8  1 | +5  4  7 | +2 +9 +6 |<br/>
            |  .  .  5 |  .  3  . | +1 +4  8 |<br/>
            :----------+----------+----------:<br/>
            |  8  .  4 |  . +5  . | +7  6  . |<br/>
            |  .  9  . |  .  2  . | +8  5 +4 |<br/>
            |  .  5  . |  .  .  . |  9  .  3 |<br/>
            :----------+----------+----------:<br/>
            |  5  .  . |  .  8  . |  6  . +9 |<br/>
            | +4  .  8 |  1  9  . |  5  .  . |<br/>
            |  .  .  9 |  .  . +5 |  4  8  . |<br/>
            '----------'----------'----------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.SimpleTable">
            <summary>
            <para>
            Sudoku explainer format (9 characters in a row, and 9 rows).
            </para>
            <para>
            For example:
            <code>
            080630040<br/>
            200085009<br/>
            090000081<br/>
            000300800<br/>
            000020000<br/>
            006001000<br/>
            970000030<br/>
            400850007<br/>
            010094050
            </code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Sukaku">
            <summary>
            <para>
            Sukaku sudoku format (only contains the digits and the whitespace).
            </para>
            <para>
            For example:
            <code>
             23456789  23456789  23456789 123456789 123456789  23456789 123456789  23456789  23456789<br/>
             23456789 123456789 123456789  23456789  23456789  23456789  23456789  23456789  23456789<br/>
             23456789  23456789  23456789  23456789 123456789  23456789 123456789  23456789 123456789<br/>
            123456789  23456789  23456789 123456789 123456789  23456789  23456789  23456789 123456789<br/>
             23456789  23456789  23456789  23456789 123456789  23456789 123456789  23456789  23456789<br/>
            123456789  23456789  23456789 123456789 123456789  23456789 123456789  23456789 123456789<br/>
             23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789<br/>
             23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789<br/>
             23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table. In addition, this puzzle does not have a unique solution, here it is a
            model for references only.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.SukakuSingleLine">
            <summary>
            <para>Sukaku single line format, which uses '0' to be a placeholder.</para>
            <para>
            For example:
            023406789123456700003050780120050789003006009123456009100056089023456080123000789003456789023006700023006700120056780100006789120400780000406789103000080020450000003406089020056709120050080100000700120056780120000709123056000123050080000450089123050709100456089003400780100450009003400009120400009123056709003000700023406000000406009123006000000056709003406700120050009103056089103456709003056009120456009123456780023400000103406709003056789020406700100050009020400000100006789020006789020456780123056080120400700000406789120400080023456789003006080020456789103450709123400009123400080023406700123406709103400080123456009120456789023406709023450080100406080103056009100400009123000789100400709100406780123050700000050080023406009
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Excel">
            <summary>
            <para>
            Excel sudoku format (only contains the digits and the tab character).
            </para>
            <para>
            For example:
            <code>
            1			7	8	9	4	5	6<br/>
            4	5	6	1	2	3	7	8	9<br/>
            7	8	9	4	5	6	1	2	<br/>
            9	1	2	6		8	3	4	<br/>
            3	4	5				6	7	8<br/>
            	7	8	3		5	9	1	2<br/>
            	9	1	5	6	7	2	3	4<br/>
            2	3	4	8	9	1	5	6	7<br/>
            5	6	7	2	3	4			1
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="T:Sudoku.Data.Inference">
            <summary>
            Provides an inference between two nodes.
            </summary>
            <remarks>
            This data structure is so heavy...
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Inference.#ctor(Sudoku.Data.Node,System.Boolean,Sudoku.Data.Node,System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="start">The start node.</param>
            <param name="startIsOn">Indicates whether the start node is on.</param>
            <param name="end">The end node.</param>
            <param name="endIsOn">Indicates whether the end node is on.</param>
        </member>
        <member name="P:Sudoku.Data.Inference.Start">
            <summary>
            Indicates the start node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.End">
            <summary>
            Indicates the end node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.StartIsOn">
            <summary>
            Indicates whether the start node is on.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.EndIsOn">
            <summary>
            Indicates whether the end node is on.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.IsStrong">
            <summary>
            Indicates whether the inference is strong.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.IsWeak">
            <summary>
            Indicates whether the inference is weak.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.Intersection">
            <summary>
            Indicates the intersection of the current inference, which is used
            in searching for eliminations in loops or normal AICs.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Inference.Deconstruct(Sudoku.Data.Node@,Sudoku.Data.Node@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="start">(<see langword="out" /> parameter) The start node.</param>
            <param name="end">(<see langword="out" /> parameter) The end node.</param>
        </member>
        <member name="M:Sudoku.Data.Inference.Deconstruct(Sudoku.Data.FullGridMap@,System.Boolean@,Sudoku.Data.NodeType@,Sudoku.Data.FullGridMap@,System.Boolean@,Sudoku.Data.NodeType@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="startMap">
            (<see langword="out" /> parameter) The candidates in start node.
            </param>
            <param name="startInOn">
            (<see langword="out" /> parameter) Indicates whether the start node is on.
            </param>
            <param name="startNodeType">
            (<see langword="out" /> parameter) Indicates the start node type.
            </param>
            <param name="endMap">
            (<see langword="out" /> parameter) The candidates in end node.
            </param>
            <param name="endIsOn">
            (<see langword="out" /> parameter) Indicates whether the end node is on.
            </param>
            <param name="endNodeType">
            (<see langword="out" /> parameter) Indicates the end node type.
            </param>
        </member>
        <member name="M:Sudoku.Data.Inference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.Equals(Sudoku.Data.Inference)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.Sgn(System.Boolean)">
            <summary>
            The sign function used in <see cref="M:Sudoku.Data.Inference.ToString"/>.
            </summary>
            <param name="v">The value.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.Inference.op_Equality(Sudoku.Data.Inference,Sudoku.Data.Inference)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Inference.op_Inequality(Sudoku.Data.Inference,Sudoku.Data.Inference)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.IReadOnlyGrid">
            <summary>
            Provides a read-only sudoku grid.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.HasSolved">
            <summary>
            Indicates the grid has already solved. If the value is <see langword="true"/>,
            the grid is solved; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.CandidatesCount">
            <summary>
            Indicates the number of total candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.EmptyCellsCount">
            <summary>
            Indicates the current number of the empty cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.Item(System.Int32)">
            <summary>
            Gets or sets a digit into a cell.
            </summary>
            <param name="cell">The cell offset you want to get or set.</param>
            <value>
            The digit you want to set. This value should be between 0 and 8.
            In addition, if your input is -1, the candidate mask in this cell
            will be re-computed. If your input is none of them above, this indexer
            will do nothing.
            </value>
            <returns>
            An <see cref="T:System.Int32"/> value indicating the result.
            If the current cell does not have a digit
            (i.e. The cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/>),
            The value will be -1.
            </returns>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a candidate existence case with a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="cell">The cell offset between 0 and 80.</param>
            <param name="digit">The digit between 0 and 8.</param>
            <value>
            The case you want to set. <see langword="true"/> means that this candidate
            does not exist in this current sudoku grid; otherwise, <see langword="false"/>.
            </value>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.Equals(System.Object)">
            <method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true" /> if the specified object is equal to the
			current object; otherwise, <see langword="false" />.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.ToArray">
            <summary>
            Serializes this instance to an array, where all digit value will be stored.
            </summary>
            <returns>
            This array. All elements are between 0 to 9, where 0 means the
            cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/> now.
            </returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetMask(System.Int32)">
            <summary>
            Get a mask of the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetCandidateMask(System.Int32)">
            <summary>
            Get the candidate mask part of the specified cell.
            </summary>
            <param name="cell">The cell offset you want to get.</param>
            <returns>
            The candidate mask. The return value is a 9-bit <see cref="T:System.Int16"/>
            value, where the bit will be <c>0</c> if the corresponding digit <b>does not exist</b> in the cell,
            and will be <c>1</c> if the corresponding contains this digit (either the cell
            is filled with this digit or the cell is an empty cell, whose candidates contains the digit).
            </returns>
            <remarks>
            Please note that the grid masks is represented with bits, where 0 is for the digit containing in a
            cell, 1 is for the digit <b>not</b> containing. However, here the return mask is the reversal:
            1 is for containing and 0 is for <b>not</b>.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.ToString(System.String)">
            <method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetStatus(System.Int32)">
            <summary>
            Get the current status for the specified cell.
            </summary>
            <param name="cell">The cell offset you want to get.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetCandidates(System.Int32)">
            <summary>
            Get all candidates containing in the specified cell.
            </summary>
            <param name="cell">The cell you want to get.</param>
            <returns>All candidates.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.ToString">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
            <returns>The cloneation.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Node">
            <summary>
            Provides an elementary unit in a chain.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Int32,Sudoku.Data.NodeType)">
            <summary>
            Initializes an instance with a specified candidate and its type.
            </summary>
            <param name="candidate">The candidates.</param>
            <param name="nodeType">The type of this node.</param>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.NodeType)">
            <summary>
            Initializes an instance with the specified candidates and its type.
            </summary>
            <param name="candidates">The candidates.</param>
            <param name="nodeType">The type of this node.</param>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(Sudoku.Data.FullGridMap,Sudoku.Data.NodeType)">
            <summary>
            Initializes an instance with the specified map and its type.
            </summary>
            <param name="candidatesMap">The map of candidates.</param>
            <param name="nodeType">The node type.</param>
        </member>
        <member name="P:Sudoku.Data.Node.CandidatesMap">
            <summary>
            Indicates all candidates used in this node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.NodeType">
            <summary>
            Indicates the type of this current node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Candidates">
            <summary>
            Indicates all candidates used.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Item(System.Int32)">
            <summary>
            Get a candidate offset in the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="P:Sudoku.Data.Node.Item(System.Index)">
            <summary>
            Get a candidate offset in the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.Deconstruct(Sudoku.Data.FullGridMap@,Sudoku.Data.NodeType@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="map">(<see langword="out" /> parameter) The map.</param>
            <param name="nodeType">
            (<see langword="out" /> parameter) Indicates the node type.
            </param>
        </member>
        <member name="M:Sudoku.Data.Node.IsCollideWith(Sudoku.Data.Node)">
            <summary>
            Checks whether all candidates used in this instance is collide with
            the other one. If two candidates hold at least one same candidate,
            we will say the node is collide with the other node (or reversely).
            </summary>
            <param name="other">The other node.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.FullCovered(Sudoku.Data.Node)">
            <summary>
            Checks whether all candidates used in this instance fully covered
            the other one.
            </summary>
            <param name="other">The other node.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(Sudoku.Data.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Node.GetHashCode">
            <inheritdoc/>
            <remarks>
            If you get a derived class, we recommend you override this method
            to describe the type of the node.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Node.CompareTo(Sudoku.Data.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Node.ToString">
            <inheritdoc/>
            <remarks>
            If you get a derived class, we recommend you override this method
            to describe the type of the node.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Node.op_Equality(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_Inequality(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_GreaterThan(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_GreaterThan">
		<summary>Indicates whether the left value is greater than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_GreaterThanOrEqual(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_GreaterThanOrEqual">
		<summary>
			Indicates whether the left value is greater than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_LessThan(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_LessThan">
		<summary>Indicates whether the left value is less than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_LessThanOrEqual(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_LessThanOrEqual">
		<summary>
			Indicates whether the left value is less than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_BitwiseAnd(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates that <paramref name="left"/> and <paramref name="right"/>
            map both contain.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates that satisfied the condition.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_BitwiseOr(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates from <paramref name="left"/> and <paramref name="right"/>
            maps.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_ExclusiveOr(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates that satisfy the formula <c>(a - b) | (b - a)</c>.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_Subtraction(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates that is in the <paramref name="left"/> map but not in
            the <paramref name="right"/> map (i.e. formula <c>a &#38; ~b</c>).
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates.</returns>
        </member>
        <member name="T:Sudoku.Data.NodeType">
            <summary>
            Indicates a node type in a chain.
            </summary>
        </member>
        <member name="F:Sudoku.Data.NodeType.Empty">
            <summary>
            Indicates an empty node, which is only used for
            keep away from the throwing of exceptions.
            </summary>
        </member>
        <member name="F:Sudoku.Data.NodeType.Candidate">
            <summary>
            Indicates a normal candidate.
            </summary>
        </member>
        <member name="F:Sudoku.Data.NodeType.LockedCandidates">
            <summary>
            Indicates a locked candidates node, which contains at least two cells
            in a same box-row or box-column and contains the same digit.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Stepping.AntiEliminationStep">
            <summary>
            Encapsulates an anti-elimination step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="digit">The digit.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.AntiEliminationStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AntiEliminationStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.AssignmentStep">
            <summary>
            Encapsulates an assignment step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.#ctor(System.Int32,System.Int32,System.Int16,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="digit">The digit.</param>
            <param name="cell">The cell.</param>
            <param name="mask">The old mask to undo.</param>
            <param name="innerMap">
            The map which contains all cells that contains the digit.
            </param>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.Mask">
            <summary>
            Indicates the mask of the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.InnerMap">
            <summary>
            Indicates the grid map.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.EliminationStep">
            <summary>
            Encapsulates an elimination step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="digit">The digit.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.EliminationStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.EliminationStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.FixStep">
            <summary>
            Encapsulates a fix step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.#ctor(Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="allCells">All cells to fix.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.FixStep.AllCells">
            <summary>
            Indicates all cells to fix.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.IUndoable">
            <summary>
            Provides a undo-able data structure.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Undo">
            <summary>
            To undo the step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Redo">
            <summary>
            To redo the step.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Stepping.ResetStep">
            <summary>
            Encapsulates a reset step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.#ctor(System.Int16[],System.Int16[])">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="oldMasks">The old grid masks.</param>
            <param name="newMasks">The new grid masks.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.ResetStep.NewMasks">
            <summary>
            Indicates the table of new grid masks.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.ResetStep.OldMasks">
            <summary>
            Indicates the table of old grid masks.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetMaskStep">
            <summary>
            Encapsulates a step of setting mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.#ctor(System.Int32,System.Int16,System.Int16)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cell">The cell.</param>
            <param name="oldMask">The old mask.</param>
            <param name="newMask">The new mask.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetMaskStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetMaskStep.OldMask">
            <summary>
            Indicates the old mask.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetMaskStep.NewMask">
            <summary>
            Indicates the new mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetStatusStep">
            <summary>
            Encapsulates a step for setting a cell status.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.#ctor(System.Int32,Sudoku.Data.CellStatus,Sudoku.Data.CellStatus)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cell">The cell.</param>
            <param name="oldStatus">The old status.</param>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetStatusStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetStatusStep.OldStatus">
            <summary>
            Indicates the old status.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetStatusStep.NewStatus">
            <summary>
            Indicates the new status.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.Step">
            <summary>
            Provides a step used for applying to a sudoku grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.Step.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Apply the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.Step.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Undo the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Data.Stepping.UndoableGrid">
            <summary>
            Provides an undoable sudoku grid. This data structure is nearly same
            as <see cref="T:Sudoku.Data.Grid"/>, but only add two methods <see cref="M:Sudoku.Data.Stepping.UndoableGrid.Undo"/>
            and <see cref="M:Sudoku.Data.Stepping.UndoableGrid.Redo"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.Grid"/>
            <seealso cref="M:Sudoku.Data.Stepping.UndoableGrid.Undo"/>
            <seealso cref="M:Sudoku.Data.Stepping.UndoableGrid.Redo"/>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._undoStack">
            <summary>
            The undo stack.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._redoStack">
            <summary>
            The redo stack.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(System.Int16[])">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(Sudoku.Data.Grid)">
            <summary>
            Initializes an instance with the specified grid (to convert to
            an undoable grid).
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with the specified read only grid.
            </summary>
            <param name="grid">The grid.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the type is invalid (invalid grid type).
            </exception>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasUndoSteps">
            <summary>
            Indicates whether the grid has any undo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasRedoSteps">
            <summary>
            Indicates whether the grid has any redo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Fix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Unfix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetMask(System.Int32,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Redo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the redo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Undo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the undo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ClearStack">
            <summary>
            To clear step stacks.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Grid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Grid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Grid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Grid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.Stepping.UnfixStep">
            <summary>
            Encapsulates an unfix step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.#ctor(Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="allCells">All cells.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.UnfixStep.AllCells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.SymmetryType">
            <summary>
            Define a symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.None">
            <summary>
            Indicates none of symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.Central">
            <summary>
            Indicates the central symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.Diagonal">
            <summary>
            Indicates the diagonal symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.AntiDiagonal">
            <summary>
            Indicates the anti-diagonal symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.XAxis">
            <summary>
            Indicates the x-axis symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.YAxis">
            <summary>
            Indicates the y-axis symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.AxisBoth">
            <summary>
            Indicates both X-axis and Y-axis symmetry types.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.DiagonalBoth">
            <summary>
            Indicates both diagonal and anti-diagonal symmetry types.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.All">
            <summary>
            Indicates all symmetry types should be satisfied.
            </summary>
        </member>
        <member name="T:Sudoku.Data.ValueChangedEventArgs">
            <summary>
            Provides the data for the event 'ValueChanged'.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ValueChangedEventArgs.#ctor(System.Int32,System.Int16,System.Int16,System.Int32)">
            <summary>
            Initializes the instance with some data.
            </summary>
            <param name="cellOffset">The cell offset. Must be in range 0 to 80.</param>
            <param name="oldMask">The old mask before modified.</param>
            <param name="newMask">The mask to modify the cell.</param>
            <param name="setValue">
            The value to set on the cell. If the action is deletion,
            this argument should be -1.
            </param>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.CellOffset">
            <summary>
            The cell offset. Must be in range 0 to 80.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.OldMask">
            <summary>
            The old mask before modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.NewMask">
            <summary>
            The new mask after modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.SetValue">
            <summary>
            The value. -1 when this value is not required.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ValueChangedEventArgs.Deconstruct(System.Int32@,System.Int16@,System.Int16@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="cellOffset">(<see langword="out" /> parameter) The cell offset.</param>
            <param name="oldMask">(<see langword="out" /> parameter) The old mask.</param>
            <param name="newMask">(<see langword="out" /> parameter) The new mask.</param>
            <param name="setValue">(<see langword="out" /> parameter) the set value.</param>
        </member>
        <member name="T:Sudoku.Data.ValueChangedEventHandler">
            <summary>
            The event handler used when the value changed.
            </summary>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The data while triggering.</param>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeCounter">
            <summary>
            Encapsulates a code line counter.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeCounter._root">
            <summary>
            The root directory of the project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeCounter._pattern">
            <summary>
            The filter pattern.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified root directory.
            </summary>
            <param name="root">The directory.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance with the specified root directory and the filter pattern.
            </summary>
            <param name="root">The root directory.</param>
            <param name="filterPattern">
            The filter pattern.
            </param>
            <example>
            For example, you can write code like this:
            <code>
            var cc = new CodeCounter(<br/>
                root: @"C:\Users\HelloWorld\Desktop\Project",<br/>
                filterPattern: @".+\.cs$");
            </code>
            </example>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeCounter.FileList">
            <summary>
            All file paths at this root directory.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.CountCodeLines(System.Int32@)">
            <summary>
            Count on code lines in all files in the specified root directory.
            </summary>
            <param name="filesCount">
            (<see langword="out"/> parameter) The number of files searched.
            </param>
            <returns>The number of lines.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.GetAllFilesRecursively(System.IO.DirectoryInfo)">
            <summary>
            Get all files in the specified directory recursively.
            </summary>
            <param name="directory">The directory information instance.</param>
        </member>
        <member name="T:Sudoku.Diagnostics.Solution">
            <summary>
            Provides the solution constant values.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.Solution.PathRoot">
            <summary>
            The root path of this whole solution.
            </summary>
        </member>
        <member name="T:Sudoku.Drawing.Extensions.BitmapEx">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <remarks>
            Some methods of this file is copied by the <see cref="N:Emgu.CV"/>'s
            <a href="https://github.com/emgucv/emgucv/blob/6ee487ad2709d1258cc014103deab2719b026303/Emgu.CV.NativeImage/BitmapExtension.cs">
            site
            </a>.
            </remarks>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:Sudoku.Drawing.Extensions.BitmapEx.CorectOrientation(System.Drawing.Bitmap)">
            <summary>
            Co-rect orientation.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The bitmap.</param>
        </member>
        <member name="M:Sudoku.Drawing.Extensions.BitmapEx.ToImage``2(System.Drawing.Bitmap)">
            <summary>
            Create an <c>Image&lt;TColor, TDepth&gt;</c> from <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:Sudoku.Drawing.Extensions.BitmapEx.ColorPaletteToLookupTable(System.Drawing.Imaging.ColorPalette,Emgu.CV.Matrix{System.Byte}@,Emgu.CV.Matrix{System.Byte}@,Emgu.CV.Matrix{System.Byte}@,Emgu.CV.Matrix{System.Byte}@)">
            <summary>
            Convert the color palette to four lookup tables.
            </summary>
            <param name="palette">The color palette to transform.</param>
            <param name="bTable">Lookup table for the B channel.</param>
            <param name="gTable">Lookup table for the G channel.</param>
            <param name="rTable">Lookup table for the R channel.</param>
            <param name="aTable">Lookup table for the A channel.</param>
        </member>
        <member name="M:Sudoku.Drawing.Extensions.BitmapEx.CopyFromBitmap``2(Emgu.CV.Image{``0,``1},System.Drawing.Bitmap)">
            <summary>
            Utility function for converting <see cref="T:System.Drawing.Bitmap"/> to <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="bmp">the bitmap to copy data from.</param>
            <param name="image">The image to copy data to.</param>
        </member>
        <member name="T:Sudoku.Drawing.View">
            <summary>
            Encapsulates a view when displaying the information on forms.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.View.DefaultViews">
            <summary>
            Provides a new default view list for initialization.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.View.#ctor(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Initializes an instance with the specified highlighted candidate offsets.
            </summary>
            <param name="candidateOffsets">
            The list of pairs of identifier and candidate offset.
            </param>
        </member>
        <member name="M:Sudoku.Drawing.View.#ctor(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.IReadOnlyList{Sudoku.Data.Inference})">
            <summary>
            Initializes an instance with information.
            </summary>
            <param name="cellOffsets">
            The list of pairs of identifier and cell offset.
            </param>
            <param name="candidateOffsets">
            The list of pairs of identifier and candidate offset.
            </param>
            <param name="regionOffsets">
            The list of pairs of identifier and region offset.
            </param>
            <param name="links">The list of links.</param>
        </member>
        <member name="M:Sudoku.Drawing.View.#ctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="P:Sudoku.Drawing.View.CellOffsets">
            <summary>
            All cell offsets.
            </summary>
            <remarks>
            This property is a list of pairs of identifier and cell offsets,
            where the identifier is an <see cref="T:System.Int32"/> value that can tell
            all cell offsets' colors.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.View.CandidateOffsets">
            <summary>
            All candidate offsets.
            </summary>
            <remarks>
            This property is a list of pairs of identifier and candidate offsets,
            where the identifier is an <see cref="T:System.Int32"/> value that can tell
            all cell offsets' colors.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.View.RegionOffsets">
            <summary>
            All region offsets.
            </summary>
            <remarks>
            This property is a list of pairs of identifier and region offsets,
            where the identifier is an <see cref="T:System.Int32"/> value that can tell
            all cell offsets' colors.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.View.Links">
            <summary>
            All link masks.
            </summary>
        </member>
        <member name="T:Sudoku.Extensions.ArrayEx">
            <summary>
            Provides extension methods on <see cref="T:System.Array"/>.
            </summary>
            <seealso cref="T:System.Array"/>
        </member>
        <member name="M:Sudoku.Extensions.ArrayEx.Contains``1(``0[],``0)">
            <summary>
            Determine whether the specified array contains the specified element.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <param name="element">The element.</param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.ArrayEx.IndexOf``1(``0[],``0)">
            <summary>
            The extension instance method for <see cref="M:System.Array.IndexOf``1(``0[],``0)"/>.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <param name="element">The element.</param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.ArrayEx.Sort``1(``0[])">
            <summary>
            Sorts the elements in an entire <typeparamref name="T"/>[] using the default
            <see cref="T:System.IComparable`1"/> generic interface implementation of each element
            of the <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <seealso cref="T:System.IComparable`1"/>
        </member>
        <member name="M:Sudoku.Extensions.ArrayEx.Sort``1(``0[],System.Comparison{``0})">
            <summary>
            Sorts the elements in an <typeparamref name="T"/>[] using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <param name="comparison">The comparison method.</param>
            <seealso cref="T:System.Comparison`1"/>
        </member>
        <member name="T:Sudoku.Extensions.BooleanEx">
            <summary>
            Provides extension methods on <see cref="T:System.Boolean"/>.
            </summary>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:Sudoku.Extensions.BooleanEx.Flip(System.Boolean@)">
            <summary>
            Flip the current <see cref="T:System.Boolean"/> value (i.e. <see langword="true"/>
            -&gt; <see langword="false"/>, <see langword="false"/> -&gt; <see langword="true"/>),
            which is equivalent to code '<c>b = !b</c>' or '<c>b ^= true</c>'.
            </summary>
            <param name="this">(<see langword="this ref"/> parameter) The value.</param>
        </member>
        <member name="M:Sudoku.Extensions.BooleanEx.ToInt32(System.Boolean)">
            <summary>
            Get the equivalent <see cref="T:System.Int32"/> value of the current <see cref="T:System.Boolean"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The current value.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Extensions.ByteEx">
            <summary>
            Provides extension methods on <see cref="T:System.Byte"/>.
            </summary>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.IsPowerOfTwo(System.Byte)">
            <method name="IsPowerOfTwo">
		<summary>
			Indicates whether the specified value is the power of two.
		</summary>
		<param name="this">(<see langword="this" /> parameter) The value.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.FindFirstSet(System.Byte)">
            <method name="FindFirstSet">
		<summary>
			Find the first offset of set bit of the binary representation
			of the specified value. If the value is 0, this method
			will always return -1.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.CountSet(System.Byte)">
            <method name="CountSet">
		<summary>
			Get the total number of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.GetNextSet(System.Byte,System.Int32)">
            <method name="GetNextSet">
		<summary>
			Find a index of the binary representation of a value
			after the specified index, whose bit is set <see langword="true" />.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="index">The index.</param>
		<returns>The index.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.SetAt(System.Byte,System.Int32)">
            <method name="SetAt">
		<summary>
			Get an <see cref="T:System.Int32" /> value, indicating that the absolute position of
			all set bits with the specified set bit order.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="order">The number of the order of set bits.</param>
		<returns>The position.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.GetAllSets(System.Byte)">
            <method name="GetAllSets">
		<summary>
			Find all offsets of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All offsets.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.GetEnumerator(System.Byte)">
            <method name="GetEnumerator">
		<summary>
			<para>Extension get enumerator of this type.</para>
			<para>
				This method will allow you to use <see langword="foreach" /> loop to iterate on
				all indices of set bits.
			</para>
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All indices of set bits.</returns>
		<example>
			This implementation will allow you use <see langword="foreach" /> loop:
			<code>
				foreach (int setIndex in 17)<br />
				{<br />
					// Do something...<br />
				}
			</code>
		</example>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.ReverseBits(System.Byte@)">
            <method name="ReverseBits">
		<summary>
			<para>Reverse all bits in a specified value.</para>
			<para>
				Note that the value is passed by <b>reference</b> though the
				method is an extension method, and returns nothing.
			</para>
		</summary>
		<param name="this">
			(<see langword="this ref" /> parameter) The value.
		</param>
	</method>
        </member>
        <member name="T:Sudoku.Extensions.CharEx">
            <summary>
            Provides extension methods on <see cref="T:System.Char"/>.
            </summary>
            <seealso cref="T:System.Char"/>
        </member>
        <member name="M:Sudoku.Extensions.CharEx.IsDigit(System.Char)">
            <summary>
            To determine whether the specified character is a digit character.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The character.</param>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Sudoku.Extensions.CollectionEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">
            The type of each element. Should be not <see langword="null"/>.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">
            The type of each element. Should be not <see langword="null"/>.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
            <param name="verifyDuplicate">
            Indicates whether the method should check duplicating values first.
            If so, the value will not add (do nothing).
            </param>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.AddIfDoesNotContain``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/> when
            the specified list does not contain the specified element.
            </summary>
            <typeparam name="T">
            The type of all elements. Should be not <see langword="null"/>.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:Sudoku.Extensions.DictionaryEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
        </member>
        <member name="M:Sudoku.Extensions.DictionaryEx.AddIfKeyDoesNotContain``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> when the key does
            not contain in the dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys. The key should be not <see langword="null"/>.
            </typeparam>
            <typeparam name="TValue">The type of elements.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sudoku.Extensions.DoubleEx">
            <summary>
            Provides extension methods on <see cref="T:System.Double"/>.
            </summary>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="M:Sudoku.Extensions.DoubleEx.NearlyEquals(System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.DoubleEx.NearlyEquals(System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Extensions.EnumEx">
            <summary>
            Provides extension methods on <see cref="T:System.Enum"/>.
            </summary>
            <seealso cref="T:System.Enum"/>
        </member>
        <member name="M:Sudoku.Extensions.EnumEx.GetValues``1">
            <summary>
            Get all enumeration fields.
            </summary>
            <typeparam name="TEnum">The type of enumeration type.</typeparam>
            <returns>The fields.</returns>
        </member>
        <member name="T:Sudoku.Extensions.FormatProviderEx">
            <summary>
            Provides extension methods on <see cref="T:System.IFormatProvider"/>.
            </summary>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="M:Sudoku.Extensions.FormatProviderEx.HasFormatted(System.IFormatProvider,System.Object,System.String,System.String@)">
            <summary>
            To check whether the format provider has defined the format rule.
            If the rule is defined, this method will return the string representation
            according to the format rule.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The format provider.</param>
            <param name="obj">The object.</param>
            <param name="format">The format string.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result. If the format has been defined,
            this value will not be <see langword="null"/>.
            </param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
            <example>
            Using the method, you can simplify the check if the code is like:
            <code>
            if (formatProvider.HasFormatted(this, format, out string? result))<br/>
            {<br/>
            	return result;<br/>
            }
            </code>
            </example>
        </member>
        <member name="T:Sudoku.Extensions.GenericEx">
            <summary>
            Provides extension methods on generic instance.
            </summary>
        </member>
        <member name="M:Sudoku.Extensions.GenericEx.NullableToString``1(``0)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>. This method will never throw.
            </summary>
            <typeparam name="T">The type of this instance.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Extensions.GenericEx.NullableToString``1(``0,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>. This method will never throw.
            </summary>
            <typeparam name="T">The type of this instance.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <param name="defaultValue">
            The default return value when the current object is <see langword="null"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Extensions.GenericEx.HasMarked``2(``0,System.Collections.Generic.IEnumerable{``1}@,System.Boolean)">
            <summary>
            To check whether the specified instance has marked the specified attribute or not.
            </summary>
            <typeparam name="T">
            The type of the instance. This instance should not be <see langword="null"/>.
            </typeparam>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="attributes">(<see langword="out"/> parameter) The attribute instances.</param>
            <param name="inherit">The parameter used for <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>
        </member>
        <member name="T:Sudoku.Extensions.Int16Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int16"/>.
            </summary>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.IsPowerOfTwo(System.Int16)">
            <method name="IsPowerOfTwo">
		<summary>
			Indicates whether the specified value is the power of two.
		</summary>
		<param name="this">(<see langword="this" /> parameter) The value.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.FindFirstSet(System.Int16)">
            <method name="FindFirstSet">
		<summary>
			Find the first offset of set bit of the binary representation
			of the specified value. If the value is 0, this method
			will always return -1.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.CountSet(System.Int16)">
            <method name="CountSet">
		<summary>
			Get the total number of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.GetNextSet(System.Int16,System.Int32)">
            <method name="GetNextSet">
		<summary>
			Find a index of the binary representation of a value
			after the specified index, whose bit is set <see langword="true" />.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="index">The index.</param>
		<returns>The index.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.SetAt(System.Int16,System.Int32)">
            <method name="SetAt">
		<summary>
			Get an <see cref="T:System.Int32" /> value, indicating that the absolute position of
			all set bits with the specified set bit order.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="order">The number of the order of set bits.</param>
		<returns>The position.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.GetAllSets(System.Int16)">
            <method name="GetAllSets">
		<summary>
			Find all offsets of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All offsets.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.GetEnumerator(System.Int16)">
            <method name="GetEnumerator">
		<summary>
			<para>Extension get enumerator of this type.</para>
			<para>
				This method will allow you to use <see langword="foreach" /> loop to iterate on
				all indices of set bits.
			</para>
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All indices of set bits.</returns>
		<example>
			This implementation will allow you use <see langword="foreach" /> loop:
			<code>
				foreach (int setIndex in 17)<br />
				{<br />
					// Do something...<br />
				}
			</code>
		</example>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.ReverseBits(System.Int16@)">
            <method name="ReverseBits">
		<summary>
			<para>Reverse all bits in a specified value.</para>
			<para>
				Note that the value is passed by <b>reference</b> though the
				method is an extension method, and returns nothing.
			</para>
		</summary>
		<param name="this">
			(<see langword="this ref" /> parameter) The value.
		</param>
	</method>
        </member>
        <member name="T:Sudoku.Extensions.Int32Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int32"/>.
            </summary>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="F:Sudoku.Extensions.Int32Ex.Table">
            <summary>
            The return value table used in <see cref="M:Sudoku.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>.
            </summary>
            <seealso cref="M:Sudoku.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.IsPowerOfTwo(System.Int32)">
            <method name="IsPowerOfTwo">
		<summary>
			Indicates whether the specified value is the power of two.
		</summary>
		<param name="this">(<see langword="this" /> parameter) The value.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.FindFirstSet(System.Int32)">
            <method name="FindFirstSet">
		<summary>
			Find the first offset of set bit of the binary representation
			of the specified value. If the value is 0, this method
			will always return -1.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.CountSet(System.Int32)">
            <method name="CountSet">
		<summary>
			Get the total number of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.GetNextSet(System.Int32,System.Int32)">
            <method name="GetNextSet">
		<summary>
			Find a index of the binary representation of a value
			after the specified index, whose bit is set <see langword="true" />.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="index">The index.</param>
		<returns>The index.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.SetAt(System.Int32,System.Int32)">
            <method name="SetAt">
		<summary>
			Get an <see cref="T:System.Int32" /> value, indicating that the absolute position of
			all set bits with the specified set bit order.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="order">The number of the order of set bits.</param>
		<returns>The position.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.GetAllSets(System.Int32)">
            <method name="GetAllSets">
		<summary>
			Find all offsets of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All offsets.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.GetEnumerator(System.Int32)">
            <method name="GetEnumerator">
		<summary>
			<para>Extension get enumerator of this type.</para>
			<para>
				This method will allow you to use <see langword="foreach" /> loop to iterate on
				all indices of set bits.
			</para>
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All indices of set bits.</returns>
		<example>
			This implementation will allow you use <see langword="foreach" /> loop:
			<code>
				foreach (int setIndex in 17)<br />
				{<br />
					// Do something...<br />
				}
			</code>
		</example>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.ReverseBits(System.Int32@)">
            <method name="ReverseBits">
		<summary>
			<para>Reverse all bits in a specified value.</para>
			<para>
				Note that the value is passed by <b>reference</b> though the
				method is an extension method, and returns nothing.
			</para>
		</summary>
		<param name="this">
			(<see langword="this ref" /> parameter) The value.
		</param>
	</method>
        </member>
        <member name="T:Sudoku.Extensions.Int64Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int64"/>.
            </summary>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.IsPowerOfTwo(System.Int64)">
            <method name="IsPowerOfTwo">
		<summary>
			Indicates whether the specified value is the power of two.
		</summary>
		<param name="this">(<see langword="this" /> parameter) The value.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.FindFirstSet(System.Int64)">
            <method name="FindFirstSet">
		<summary>
			Find the first offset of set bit of the binary representation
			of the specified value. If the value is 0, this method
			will always return -1.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.CountSet(System.Int64)">
            <method name="CountSet">
		<summary>
			Get the total number of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>
			An <see cref="T:System.Int32" /> value indicating that.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.GetNextSet(System.Int64,System.Int32)">
            <method name="GetNextSet">
		<summary>
			Find a index of the binary representation of a value
			after the specified index, whose bit is set <see langword="true" />.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="index">The index.</param>
		<returns>The index.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.SetAt(System.Int64,System.Int32)">
            <method name="SetAt">
		<summary>
			Get an <see cref="T:System.Int32" /> value, indicating that the absolute position of
			all set bits with the specified set bit order.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<param name="order">The number of the order of set bits.</param>
		<returns>The position.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.GetAllSets(System.Int64)">
            <method name="GetAllSets">
		<summary>
			Find all offsets of set bits of the binary representation of a specified value.
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All offsets.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.GetEnumerator(System.Int64)">
            <method name="GetEnumerator">
		<summary>
			<para>Extension get enumerator of this type.</para>
			<para>
				This method will allow you to use <see langword="foreach" /> loop to iterate on
				all indices of set bits.
			</para>
		</summary>
		<param name="this">
			(<see langword="this" /> parameter) The value.
		</param>
		<returns>All indices of set bits.</returns>
		<example>
			This implementation will allow you use <see langword="foreach" /> loop:
			<code>
				foreach (int setIndex in 17)<br />
				{<br />
					// Do something...<br />
				}
			</code>
		</example>
	</method>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.ReverseBits(System.Int64@)">
            <method name="ReverseBits">
		<summary>
			<para>Reverse all bits in a specified value.</para>
			<para>
				Note that the value is passed by <b>reference</b> though the
				method is an extension method, and returns nothing.
			</para>
		</summary>
		<param name="this">
			(<see langword="this ref" /> parameter) The value.
		</param>
	</method>
        </member>
        <member name="T:Sudoku.Extensions.ListEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="M:Sudoku.Extensions.ListEx.RemoveLastElement``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last element of the specified list, which is equivalent to code:
            <code>
            list.RemoveAt(list.Count - 1);
            </code>
            or
            <code>
            list.RemoveAt(^1); // Call extension method 'RemoveAt'.
            </code>
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <seealso cref="M:Sudoku.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index)"/>
        </member>
        <member name="M:Sudoku.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index)">
            <summary>
            Remove at the element in the specified index.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="index">The index to remove.</param>
        </member>
        <member name="T:Sudoku.Extensions.SingleEx">
            <summary>
            Provides extension methods on <see cref="T:System.Single"/>.
            </summary>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="M:Sudoku.Extensions.SingleEx.NearlyEquals(System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.SingleEx.NearlyEquals(System.Single,System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Extensions.StringBuilderEx">
            <summary>
            Provides extension methods on <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <seealso cref="T:System.Text.StringBuilder"/>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse all characters in a specified string builder instance.
            </summary>
            <param name="this">
            (<see langword="this"/> parameter) The instance to reverse all characters.
            </param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.RemoveFromEnd(System.Text.StringBuilder,System.Int32)">
            <summary>
            Remove the specified number of characters from the end of the string builder
            instance.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance to remove characters.</param>
            <param name="length">The number of characters you want to remove.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Char)">
            <summary>
            Append a character to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="value">The character you want to append.</param>
            <returns>The reference of the current instance.</returns>
            <remarks>
            The extension method is used in order to avoid implicit conversion from
            <see cref="T:System.Char"/> to <see cref="T:System.Int32"/>. If you want to append everything,
            please use the method <see cref="M:Sudoku.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)"/>.
            </remarks>
            <seealso cref="M:Sudoku.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)">
            <summary>
            Append a <see cref="T:System.String"/> representation of an object
            to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="obj">
            The <see cref="T:System.String"/> representation of an object you want to append.
            </param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.NullableAppend(System.Text.StringBuilder,System.String)">
            <summary>
            Append the text into the tail of the <see cref="T:System.Text.StringBuilder"/> object if
            the text is not <see langword="null"/>; otherwise, do nothing.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string builder.</param>
            <param name="text">The text to add.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.NullableAppendLine(System.Text.StringBuilder,System.String)">
            <summary>
            Append the text into the tail of the <see cref="T:System.Text.StringBuilder"/> object if
            the text is not <see langword="null"/>, and then add a terminator at the tail;
            otherwise, do nothing.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string builder.</param>
            <param name="text">The text to add.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.CopyTo(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Copy the specified string builder to the specified target.
            </summary>
            <param name="this">The base string builder.</param>
            <param name="to">The target builder.</param>
            <exception cref="T:System.ArgumentException">
            Throws if the target instance does not have enough space to store all characters
            from the base one.
            </exception>
        </member>
        <member name="T:Sudoku.Extensions.StringEx">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.SatisfyPattern(System.String,System.String)">
            <summary>
            Check whether the specified string instance is satisfied
            the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.IsMatch(System.String,System.String)">
            <summary>
            Check whether the specified string instance can match the value
            using the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of
            the specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The value after matching. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The matched string value. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.MatchAll(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.MatchAll(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern, using the specified matching
            options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.Reserve(System.String,System.String)">
            <summary>
            Reserve all characters that satisfy the specified pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <param name="reservePattern">The pattern that reserved characters satisfied.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.IsRegexPattern(System.String)">
            <summary>
            To check if the current string value is a valid regular
            expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Extensions.TypeEx">
            <summary>
            Provides extension methods on <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:Sudoku.Extensions.TypeEx.HasMarkedAttribute``1(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            To check whether the specified type has marked the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The type.</param>
            <param name="inherit">
            <see langword="true"/> to search this member's inheritance chain
            to find the attributes; otherwise, <see langword="false"/>.
            This parameter is ignored for properties and events.
            </param>
            <param name="attributes">
            (<see langword="out"/> parameter) All attributes found.
            </param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.TypeEx.TypeEquals``2">
            <summary>
            Indicates whether two types are same.
            </summary>
            <typeparam name="T1">The type 1.</typeparam>
            <typeparam name="T2">The type 2.</typeparam>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Sudoku.Solving.Annotations.AliasAttribute">
            <summary>
            To mark on a enum field to give an alias.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Annotations.AliasAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the enum field.
            </summary>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:Sudoku.Solving.Annotations.AliasAttribute.FieldName">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Annotations.AliasAttribute.Convert``2(``0)">
            <summary>
            Convert the specified enum field to the specified type field.
            </summary>
            <typeparam name="TEnumBase">The base type of the enum field.</typeparam>
            <typeparam name="TEnumTarget">The target enum type to convert to.</typeparam>
            <param name="enumField">The enum field.</param>
            <returns>The result. Return <see langword="null"/> when the conversion is failed.</returns>
        </member>
        <member name="T:Sudoku.Solving.Annotations.TechniqueDisplayAttribute">
            <summary>
            <para>
            To mark on a technique searcher class to provide additional displaying messages
            which are used in UI forms, such as technique priority settings form.
            </para>
            <para>
            You can use this instance to mark on a enumeration field such as <see cref="T:Sudoku.Solving.Manual.TechniqueCode"/>
            to show the name on the screen also.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.TechniqueCode"/>
        </member>
        <member name="M:Sudoku.Solving.Annotations.TechniqueDisplayAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified displaying name.
            </summary>
            <param name="displayName">The name.</param>
        </member>
        <member name="P:Sudoku.Solving.Annotations.TechniqueDisplayAttribute.DisplayName">
            <summary>
            Indicates the display name of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Annotations.TechniqueDisplayAttribute.Category">
            <summary>
            <para>
            Indicates the category of this instance to display.
            This property is used for displaying when need grouping. The value is
            <see langword="null"/> in default case.
            </para>
            <para>
            The category will be displayed like <c>"Fishes&gt;Normal Fishes&gt;Finned"</c>,
            which used '<c>&gt;</c>' character to make a new group or a new sub-group.
            </para>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Annotations.TechniqueDisplayAttribute.GetDisplayName``1(``0)">
            <summary>
            Get the display name of the specified enum field.
            </summary>
            <typeparam name="TEnum">The type of the enum field.</typeparam>
            <param name="enumField">The enum field to check.</param>
            <returns>
            The display name. Return <see langword="null"/> when the field does not mark this attribute.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.TechniqueCode">
            <summary>
            Represents a technique instance, which is used for comparison.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.None">
            <summary>
            The placeholder of this enumeration type.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FullHouse">
            <summary>
            Indicates the full house.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LastDigit">
            <summary>
            Indicates the last digit.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenSingleRow">
            <summary>
            Indicates the hidden single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenSingleColumn">
            <summary>
            Indicates the hidden single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenSingleBlock">
            <summary>
            Indicates the hidden single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedSingle">
            <summary>
            Indicates the naked single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Pointing">
            <summary>
            Indicates the pointing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Claiming">
            <summary>
            Indicates the claiming.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlmostLockedPair">
            <summary>
            Indicates the ALP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlmostLockedTriple">
            <summary>
            Indicates the ALT.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlmostLockedQuadruple">
            <summary>
            Indicates the ALQ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedPair">
            <summary>
            Indicates the naked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedPairPlus">
            <summary>
            Indicates the naked pair plus (naked pair (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LockedPair">
            <summary>
            Indicates the locked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenPair">
            <summary>
            Indicates the hidden pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedTriple">
            <summary>
            Indicates the naked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedTriplePlus">
            <summary>
            Indicates the naked triple plus (naked triple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LockedTriple">
            <summary>
            Indicates the locked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenTriple">
            <summary>
            Indicates the hidden triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedQuadruple">
            <summary>
            Indicates the naked quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedQuadruplePlus">
            <summary>
            Indicates the naked quadruple plus (naked quadruple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenQuadruple">
            <summary>
            Indicates the hidden quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XWing">
            <summary>
            Indicates the X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedXWing">
            <summary>
            Indicates the finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiXWing">
            <summary>
            Indicates the sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedXWing">
            <summary>
            Indicates the siamese finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiXWing">
            <summary>
            Indicates the siamese sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenXWing">
            <summary>
            Indicates the franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenXWing">
            <summary>
            Indicates the finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenXWing">
            <summary>
            Indicates the sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenXWing">
            <summary>
            Indicates the siamese finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenXWing">
            <summary>
            Indicates the siamese sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantXWing">
            <summary>
            Indicates the mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantXWing">
            <summary>
            Indicates the finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantXWing">
            <summary>
            Indicates the sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantXWing">
            <summary>
            Indicates the siamese finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantXWing">
            <summary>
            Indicates the siamese sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Swordfish">
            <summary>
            Indicates the swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedSwordfish">
            <summary>
            Indicates the finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiSwordfish">
            <summary>
            Indicates the sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedSwordfish">
            <summary>
            Indicates the siamese finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiSwordfish">
            <summary>
            Indicates the siamese sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenSwordfish">
            <summary>
            Indicates the swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenSwordfish">
            <summary>
            Indicates the finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenSwordfish">
            <summary>
            Indicates the sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenSwordfish">
            <summary>
            Indicates the siamese finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenSwordfish">
            <summary>
            Indicates the siamese sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantSwordfish">
            <summary>
            Indicates the mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantSwordfish">
            <summary>
            Indicates the finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantSwordfish">
            <summary>
            Indicates the sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantSwordfish">
            <summary>
            Indicates the siamese finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantSwordfish">
            <summary>
            Indicates the siamese sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Jellyfish">
            <summary>
            Indicates the jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedJellyfish">
            <summary>
            Indicates the finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiJellyfish">
            <summary>
            Indicates the sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedJellyfish">
            <summary>
            Indicates the siamese finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiJellyfish">
            <summary>
            Indicates the siamese sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenJellyfish">
            <summary>
            Indicates the franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenJellyfish">
            <summary>
            Indicates the finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenJellyfish">
            <summary>
            Indicates the sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenJellyfish">
            <summary>
            Indicates the siamese finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenJellyfish">
            <summary>
            Indicates the siamese sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantJellyfish">
            <summary>
            Indicates the mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantJellyfish">
            <summary>
            Indicates the finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantJellyfish">
            <summary>
            Indicates the sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantJellyfish">
            <summary>
            Indicates the siamese finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantJellyfish">
            <summary>
            Indicates the siamese sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Squirmbag">
            <summary>
            Indicates the squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedSquirmbag">
            <summary>
            Indicates the finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiSquirmbag">
            <summary>
            Indicates the sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedSquirmbag">
            <summary>
            Indicates the siamese finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiSquirmbag">
            <summary>
            Indicates the siamese sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenSquirmbag">
            <summary>
            Indicates the franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenSquirmbag">
            <summary>
            Indicates the finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenSquirmbag">
            <summary>
            Indicates the sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenSquirmbag">
            <summary>
            Indicates the siamese finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenSquirmbag">
            <summary>
            Indicates the siamese sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantSquirmbag">
            <summary>
            Indicates the mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantSquirmbag">
            <summary>
            Indicates the finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantSquirmbag">
            <summary>
            Indicates the sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantSquirmbag">
            <summary>
            Indicates the siamese finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantSquirmbag">
            <summary>
            Indicates the siamese sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Whale">
            <summary>
            Indicates the whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedWhale">
            <summary>
            Indicates the finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiWhale">
            <summary>
            Indicates the sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedWhale">
            <summary>
            Indicates the siamese finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiWhale">
            <summary>
            Indicates the siamese sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenWhale">
            <summary>
            Indicates the franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenWhale">
            <summary>
            Indicates the finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenWhale">
            <summary>
            Indicates the sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenWhale">
            <summary>
            Indicates the siamese finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenWhale">
            <summary>
            Indicates the siamese sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantWhale">
            <summary>
            Indicates the mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantWhale">
            <summary>
            Indicates the finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantWhale">
            <summary>
            Indicates the sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantWhale">
            <summary>
            Indicates the siamese finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantWhale">
            <summary>
            Indicates the siamese sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Leviathan">
            <summary>
            Indicates the leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedLeviathan">
            <summary>
            Indicates the finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiLeviathan">
            <summary>
            Indicates the sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedLeviathan">
            <summary>
            Indicates the siamese finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiLeviathan">
            <summary>
            Indicates the siamese sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenLeviathan">
            <summary>
            Indicates the franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenLeviathan">
            <summary>
            Indicates the finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenLeviathan">
            <summary>
            Indicates the sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenLeviathan">
            <summary>
            Indicates the siamese finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenLeviathan">
            <summary>
            Indicates the siamese sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantLeviathan">
            <summary>
            Indicates the mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantLeviathan">
            <summary>
            Indicates the finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantLeviathan">
            <summary>
            Indicates the sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantLeviathan">
            <summary>
            Indicates the siamese finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantLeviathan">
            <summary>
            Indicates the siamese sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyWing">
            <summary>
            Indicates the XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyzWing">
            <summary>
            Indicates the XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.WxyzWing">
            <summary>
            Indicates the WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.VwxyzWing">
            <summary>
            Indicates the VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UvwxyzWing">
            <summary>
            Indicates the UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TuvwxyzWing">
            <summary>
            Indicates the TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.StuvwxyzWing">
            <summary>
            Indicates the STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.RstuvwxyzWing">
            <summary>
            Indicates the RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteWxyzWing">
            <summary>
            Indicates the incomplete WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteVwxyzWing">
            <summary>
            Indicates the incomplete VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteUvwxyzWing">
            <summary>
            Indicates the incomplete UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteTuvwxyzWing">
            <summary>
            Indicates the incomplete TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteStuvwxyzWing">
            <summary>
            Indicates the incomplete STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteRstuvwxyzWing">
            <summary>
            Indicates the incomplete RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.WWing">
            <summary>
            Indicates the W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MWing">
            <summary>
            Indicates the M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LocalWing">
            <summary>
            Indicates the local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SplitWing">
            <summary>
            Indicates the split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HybridWing">
            <summary>
            Indicates the hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyWing">
            <summary>
            Indicates the grouped XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedWWing">
            <summary>
            Indicates the grouped W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedMWing">
            <summary>
            Indicates the grouped M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedLocalWing">
            <summary>
            Indicates the grouped local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedSplitWing">
            <summary>
            Indicates the grouped split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedHybridWing">
            <summary>
            Indicates the grouped hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType1">
            <summary>
            Indicates the UR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType2">
            <summary>
            Indicates the UR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType3">
            <summary>
            Indicates the UR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType4">
            <summary>
            Indicates the UR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType5">
            <summary>
            Indicates the UR type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType6">
            <summary>
            Indicates the UR type 6.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenUr">
            <summary>
            Indicates the hidden UR.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus2D">
            <summary>
            Indicates the UR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus2B1SL">
            <summary>
            Indicates the UR + 2B / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus2D1SL">
            <summary>
            Indicates the UR + 2D / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3X">
            <summary>
            Indicates the UR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3x1SL">
            <summary>
            Indicates the UR + 3x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3X1SL">
            <summary>
            Indicates the UR + 3X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3X2SL">
            <summary>
            Indicates the UR + 3X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3N2SL">
            <summary>
            Indicates the UR + 3N / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3U2SL">
            <summary>
            Indicates the UR + 3U / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3E2SL">
            <summary>
            Indicates the UR + 3E / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4x1SL">
            <summary>
            Indicates the UR + 4x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4X1SL">
            <summary>
            Indicates the UR + 4X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4x2SL">
            <summary>
            Indicates the UR + 4x / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4X2SL">
            <summary>
            Indicates the UR + 4X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4X3SL">
            <summary>
            Indicates the UR + 4X / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4C3SL">
            <summary>
            Indicates the UR + 4C / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrXyWing">
            <summary>
            Indicates the UR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrXyzWing">
            <summary>
            Indicates the UR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrWxyzWing">
            <summary>
            Indicates the UR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrSdc">
            <summary>
            Indicates the UR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType1">
            <summary>
            Indicates the AR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType2">
            <summary>
            Indicates the AR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType3">
            <summary>
            Indicates the AR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType5">
            <summary>
            Indicates the AR type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenAr">
            <summary>
            Indicates the hidden AR.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArPlus2D">
            <summary>
            Indicates the AR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArPlus3X">
            <summary>
            Indicates the AR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArXyWing">
            <summary>
            Indicates the AR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArXyzWing">
            <summary>
            Indicates the AR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArWxyzWing">
            <summary>
            Indicates the AR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArSdc">
            <summary>
            Indicates the AR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType1">
            <summary>
            Indicates the UL type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType2">
            <summary>
            Indicates the UL type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType3">
            <summary>
            Indicates the UL type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType4">
            <summary>
            Indicates the UL type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType1">
            <summary>
            Indicates the XR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType2">
            <summary>
            Indicates the XR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType3">
            <summary>
            Indicates the XR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType4">
            <summary>
            Indicates the XR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType1">
            <summary>
            Indicates the BUG type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType2">
            <summary>
            Indicates the BUG type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType3">
            <summary>
            Indicates the BUG type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType4">
            <summary>
            Indicates the BUG type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugMultiple">
            <summary>
            Indicates the BUG + n.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugXz">
            <summary>
            Indicates the BUG-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugXyzWing">
            <summary>
            Indicates the BUG-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType1">
            <summary>
            Indicates the BDP type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType2">
            <summary>
            Indicates the BDP type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType3">
            <summary>
            Indicates the BDP type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType4">
            <summary>
            Indicates the BDP type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType1">
            <summary>
            Indicates the QDP type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType2">
            <summary>
            Indicates the QDP type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType3">
            <summary>
            Indicates the QDP type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType4">
            <summary>
            Indicates the QDP type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LockedQdp">
            <summary>
            Indicates the locked QDP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType1">
            <summary>
            Indicates the US type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType2">
            <summary>
            Indicates the US type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType3">
            <summary>
            Indicates the US type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType4">
            <summary>
            Indicates the US type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Sdc">
            <summary>
            Indicates the SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Sdc3d">
            <summary>
            Indicates the 3-dimension SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.CannibalizedSdc">
            <summary>
            Indicates the cannibalized SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Skyscraper">
            <summary>
            Indicates the skyscraper.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TwoStringKite">
            <summary>
            Indicates the two-string kite.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TurbotFish">
            <summary>
            Indicates the turbot fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.EmptyRectangle">
            <summary>
            Indicates the empty rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Guardian">
            <summary>
            Indicates the guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XChain">
            <summary>
            Indicates the X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FishyCycle">
            <summary>
            Indicates the fishy cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyChain">
            <summary>
            Indicates the XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyCycle">
            <summary>
            Indicates the XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyXChain">
            <summary>
            Indicates the XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.PurpleCow">
            <summary>
            Indicates the purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.DiscontinuousNiceLoop">
            <summary>
            Indicates the discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ContinuousNiceLoop">
            <summary>
            Indicates the continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Aic">
            <summary>
            Indicates the AIC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXChain">
            <summary>
            Indicates the grouped X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedFishyCycle">
            <summary>
            Indicates the grouped fishy cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyChain">
            <summary>
            Indicates the grouped XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyCycle">
            <summary>
            Indicates the grouped XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyXChain">
            <summary>
            Indicates the grouped XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedPurpleCow">
            <summary>
            Indicates the grouped purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedDiscontinuousNiceLoop">
            <summary>
            Indicates the grouped discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedContinuousNiceLoop">
            <summary>
            Indicates the grouped continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedAic">
            <summary>
            Indicates the grouped AIC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Erip">
            <summary>
            Indicates the ERIP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Esp">
            <summary>
            Indicates the ESP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SinglyLinkedAlsXz">
            <summary>
            Indicates the singly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.DoublyLinkedAlsXz">
            <summary>
            Indicates the doubly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlsXyWing">
            <summary>
            Indicates the ALS-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlsWWing">
            <summary>
            Indicates the ALS-W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.DeathBlossom">
            <summary>
            Indicates the death blossom.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Gsp">
            <summary>
            Indicates the GSP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Je">
            <summary>
            Indicates the JE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Se">
            <summary>
            Indicates the SE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ComplexSe">
            <summary>
            Indicates the complex SE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseJe">
            <summary>
            Indicates the siamese JE. 
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSe">
            <summary>
            Indicates the siamese SE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SkLoop">
            <summary>
            Indicates the SK-Loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Msls">
            <summary>
            Indicates the multi-sector locked sets.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Pom">
            <summary>
            Indicates the POM.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TemplateSet">
            <summary>
            Indicates the template set.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TemplateDelete">
            <summary>
            Indicates the template delete.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BowmanBingo">
            <summary>
            Indicates the bowman's bingo.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BruteForce">
            <summary>
            Indicates the brute force.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.TechniqueCodeFilter">
            <summary>
            Encapsulates a technique code filter that contains some of technique codes.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCodeFilter._internalList">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.#ctor(Sudoku.Solving.Manual.TechniqueCode[])">
            <summary>
            Initializes an instance with the specified technique codes.
            </summary>
            <param name="techniqueCodes">(<see langword="params"/> parameter) The technique codes.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.#ctor(System.Collections.BitArray)">
            <summary>
            Initializes an instance with the specified bit array.
            </summary>
            <param name="bitArray">The bit array.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Add(Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            To add a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.TechniqueCode})">
            <summary>
            Add a serial of technique codes to this list.
            </summary>
            <param name="techniqueCodes">The codes.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Remove(Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            To remove a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Contains(Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            To determine whether the specified filter contains the technique.
            </summary>
            <param name="techniqueCode">The technique code to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Windows.Resources">
            <summary>
            Indicates the resources used later but not in the namespace <see cref="N:Sudoku.Windows"/>.
            </summary>
            <seealso cref="N:Sudoku.Windows"/>
        </member>
        <member name="F:Sudoku.Windows.Resources._dicPointer">
            <summary>
            Indicates the current source.
            </summary>
        </member>
        <member name="P:Sudoku.Windows.Resources.GlobalizationString">
            <summary>
            Indicates the current globalization string.
            </summary>
        </member>
        <member name="M:Sudoku.Windows.Resources.ChangeLanguage(System.String)">
            <summary>
            To change the current language with the specified globalization string.
            </summary>
            <param name="globalizationString">The globalization string.</param>
        </member>
        <member name="M:Sudoku.Windows.Resources.GetValue(System.String)">
            <summary>
            Get the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Throws when the key cannot be found in both the current language dictionary
            and the default dictionary.
            </exception>
        </member>
        <member name="M:Sudoku.Windows.Resources.GetDictionary(System.String)">
            <summary>
            Get the dictionary with the specified globalization string.
            </summary>
            <param name="globalizationString">The globalization string.</param>
        </member>
        <member name="F:Sudoku.Windows.Resources.LangSourceEnUs">
            <summary>
            The language source for the globalization string "<c>en-us</c>".
            </summary>
            <remarks>
            Here we use reflection to call and use this field, which cannot be recognized by
            Roslyn, so we should suppress the complier warning IDE0052.
            </remarks>
        </member>
        <member name="F:Sudoku.Windows.Resources.LangSourceZhCn">
            <summary>
            The language source for the globalization string "<c>zh-cn</c>".
            </summary>
            <remarks>
            Here we use reflection to call and use this field, which cannot be recognized by
            Roslyn, so we should suppress the complier warning IDE0052.
            </remarks>
        </member>
        <member name="T:Sudoku.InternalSettings">
            <summary>
            Define the internal settings.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.MaxSize">
            <summary>
            Indicates the maximum size.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.RSize">
            <summary>
            Indicates the R-size.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.ThresholdMin">
            <summary>
            Indicates the minimum threshold.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.ThresholdMax">
            <summary>
            Indicates the maximum threshold.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.L2Gradient">
            <summary>
            Indicates the L2Gradient.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.Font">
            <summary>
            Indicates the font.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.FontSize">
            <summary>
            Indicates the font size.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.FontSizePr">
            <summary>
            Indicates the font size pr.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.ChainApprox">
            <summary>
            Indicates the ChainApprox.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.ThOcrMin">
            <summary>
            Indicates the ThOcrMin.
            </summary>
        </member>
        <member name="F:Sudoku.InternalSettings.ThOcrMax">
            <summary>
            Indicates the ThOcrMax.
            </summary>
        </member>
        <member name="T:Sudoku.MultipleSolutionsException">
            <summary>
            Represents an error that the puzzle has multiple solutions while solving.
            </summary>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:Sudoku.NameAttribute">
            <summary>
            Mark on a field of an enumeration type to set a custom name to output.
            </summary>
        </member>
        <member name="M:Sudoku.NameAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Sudoku.NameAttribute.Name">
            <summary>
            Indicates the name.
            </summary>
        </member>
        <member name="M:Sudoku.NameAttribute.GetName``1(``0)">
            <summary>
            Get the name of the specified enum field which has marked this attribute.
            </summary>
            <typeparam name="TEnum">The type of the enum field.</typeparam>
            <param name="enumField">The enum field.</param>
            <returns>
            The name. Return <see langword="null"/> when the specified field does not mark this attribute.
            </returns>
        </member>
        <member name="T:Sudoku.NoSolutionException">
            <summary>
            Represents an error that the puzzle has no solution while solving.
            </summary>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.NoSolutionException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.NoSolutionException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:Sudoku.Recognitions.GridRecognizer">
            <summary>
            Provides a grid field recognizer. If you want to know what is a <b>field</b>,
            please see the 'remark' part of <see cref="T:Sudoku.Recognitions.InternalServiceProvider"/>.
            </summary>
            <seealso cref="T:Sudoku.Recognitions.InternalServiceProvider"/>
        </member>
        <member name="F:Sudoku.Recognitions.GridRecognizer._image">
            <summary>
            The image.
            </summary>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes an instance with the specified photo.
            </summary>
            <param name="photo">The photo.</param>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.Recognize">
            <summary>
            Recognize.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.PrepareImage">
            <summary>
            Prepare the image.
            </summary>
            <returns>The <see cref="T:Emgu.CV.UMat"/> instance.</returns>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.FindField(Emgu.CV.UMat)">
            <summary>
            Find the field.
            </summary>
            <param name="edges">The edges.</param>
            <returns>The points.</returns>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.CutField(System.Drawing.PointF[])">
            <summary>
            To cut the field.
            </summary>
            <param name="field">The field.</param>
            <returns>The image.</returns>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.GetFourCornerPoints(System.Drawing.Point[])">
            <summary>
            Getting four corner points from contour points.
            </summary>
            <param name="points">The points.</param>
            <returns>The points.</returns>
        </member>
        <member name="M:Sudoku.Recognitions.GridRecognizer.IsRectangle(System.Drawing.PointF[],System.Int32,System.Int32,System.Double)">
            <summary>
            Get true if contour is rectangle with angles within <c>[lowAngle, upAngle]</c> degree.
            The default case is <c>[75, 105]</c> given by <paramref name="lowerAngle"/> and
            <paramref name="upperAngle"/>.
            </summary>
            <param name="contour">The contour.</param>
            <param name="lowerAngle">The lower angle. The default value is <c>75</c>.</param>
            <param name="upperAngle">The upper angle. The default value is <c>105</c>.</param>
            <param name="ratio">The ratio. The default value is <c>.35</c>.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Sudoku.Recognitions.InternalServiceProvider">
            <summary>
            Define a recognizer.
            </summary>
            <remarks>
            During the recognizing, the <b>field</b> indicates the whole outline of a grid.
            </remarks>
        </member>
        <member name="F:Sudoku.Recognitions.InternalServiceProvider._ocr">
            <summary>
            The internal <see cref="T:Emgu.CV.OCR.Tesseract"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Recognitions.InternalServiceProvider.Initialized">
            <summary>
            Indicates whether the current recognizer has already initialized.
            </summary>
        </member>
        <member name="M:Sudoku.Recognitions.InternalServiceProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognitions.InternalServiceProvider.RecognizeDigits(Emgu.CV.Image{Emgu.CV.Structure.Bgr,System.Byte})">
            <summary>
            Recognizes digits.
            </summary>
            <param name="field">The field.</param>
            <returns>The grid.</returns>
            <exception cref="T:Sudoku.Recognitions.RecognizingException">
            Throws when the processing is wrong or unhandleable.
            </exception>
        </member>
        <member name="M:Sudoku.Recognitions.InternalServiceProvider.RecognizeCellNumber(Emgu.CV.Image{Emgu.CV.Structure.Bgr,System.Byte})">
            <summary>
            Recognize the number of a cell.
            </summary>
            <param name="cellImg">The image of a cell.</param>
            <returns>
            The result value (must be between 1 and 9). If the recognition is failed,
            the value will be <c>0</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the OCR engine error.
            </exception>
        </member>
        <member name="M:Sudoku.Recognitions.InternalServiceProvider.InitTesseractAsync(System.String,System.String)">
            <summary>
            Initializes <see cref="T:Emgu.CV.OCR.Tesseract"/> instance.
            </summary>
            <param name="dir">The directory.</param>
            <param name="lang">The language. The default value is <c>"eng"</c>.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:Sudoku.Recognitions.InternalServiceProvider.TesseractDownloadLangFileAsync(System.String,System.String)">
            <summary>
            When the trained data is failed to find in the local machine, this method will download
            the file online.
            </summary>
            <param name="dir">The directory to find.</param>
            <param name="lang">The language.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Recognitions.RecognitionServiceProvider">
            <summary>
            Define a sudoku recognition service provider.
            </summary>
        </member>
        <member name="F:Sudoku.Recognitions.RecognitionServiceProvider._recognizingServiceProvider">
            <summary>
            Indicates the internal recognition service provider.
            </summary>
        </member>
        <member name="M:Sudoku.Recognitions.RecognitionServiceProvider.#ctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="P:Sudoku.Recognitions.RecognitionServiceProvider.ToolIsInitialized">
            <summary>
            Indicates whether the OCR tool has already initialized.
            </summary>
        </member>
        <member name="M:Sudoku.Recognitions.RecognitionServiceProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognitions.RecognitionServiceProvider.Recorgnize(System.Drawing.Bitmap)">
            <summary>
            Recognize the image.
            </summary>
            <param name="image">The image.</param>
            <returns>The grid.</returns>
            <exception cref="T:Sudoku.Recognitions.RecognizingException">
            Throws when the tool has not initialized yet.
            </exception>
        </member>
        <member name="T:Sudoku.Recognitions.RecognizingException">
            <summary>
            Represents an error that the OCR tools cannot work normally.
            </summary>
        </member>
        <member name="M:Sudoku.Recognitions.RecognizingException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognitions.RecognizingException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognitions.RecognizingException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Recognitions.RecognizingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.SudokuRuntimeException">
            <summary>
            Represents an error that the puzzle has no solution while solving.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.WrongHandlingException">
            <summary>
            Represents an error that the puzzle has wrong handling while solving with
            manual logic tools.
            </summary>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="wrongInfo">The error message.</param>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="wrongInfo">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.WrongHandlingException.WrongInfo">
            <summary>
            Indicates the wrong information.
            </summary>
        </member>
        <member name="P:Sudoku.WrongHandlingException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.WrongHandlingException.Message">
            <inheritdoc/>
        </member>
        <member name="T:System.Algorithms">
            <summary>
            Provides all algorithm processing methods.
            </summary>
        </member>
        <member name="M:System.Algorithms.GetCombinationsOfArray(System.Int32[],System.Int32)">
            <summary>
            Get all combinations with the specified number of the values to take.
            </summary>
            <param name="array">The array.</param>
            <param name="count">The number you want to take.</param>
            <returns>All combinations.</returns>
        </member>
        <member name="M:System.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            To swap the two variables.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="left">The left variable.</param>
            <param name="right">The right variable.</param>
        </member>
        <member name="M:System.Algorithms.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the minimal one of three values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="c">The third value.</param>
            <returns>Which is the most minimal one.</returns>
        </member>
        <member name="M:System.Algorithms.Min(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the minimal one of four values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="c">The third value.</param>
            <param name="d">The fourth value.</param>
            <returns>Which is the most minimal one.</returns>
        </member>
        <member name="M:System.Algorithms.Min(System.Int32[])">
            <summary>
            Get the most minimal value in the array.
            </summary>
            <param name="array">(<see langword="params"/> parameter) The array.</param>
            <returns>The most minimal value.</returns>
        </member>
        <member name="M:System.Algorithms.GetCombinationRecursively``1(System.Collections.Generic.List{``0[]}@,``0[],System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Get all combinations for an array recursively.
            </summary>
            <param name="list">The result list.</param>
            <param name="t">The base array.</param>
            <param name="n">Auxiliary variable.</param>
            <param name="m">Auxiliary variable.</param>
            <param name="b">Auxiliary variable.</param>
            <param name="c">Auxiliary variable.</param>
        </member>
        <member name="T:System.Collections.Generic.Dlx">
            <summary>
            Encapsulates the dancing link.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.KMaxNodes">
            <summary>
            The number of max nodes.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.KMaxColumns">
            <summary>
            The number of max columns.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.KRow">
            <summary>
            The number of max rows / columns / blocks.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.KColumn">
            <summary>
            The number of max rows / columns / blocks.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.KBlock">
            <summary>
            The number of max rows / columns / blocks.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.N">
            <summary>
            The size.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Dlx.#ctor(System.Int32[])">
            <summary>
            Initializes an instance with the specified grid array.
            </summary>
            <param name="gridArray">The array.</param>
        </member>
        <member name="F:System.Collections.Generic.Dlx.Root">
            <summary>
            The root.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.InOut">
            <summary>
            In out value.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.Columns">
            <summary>
            The array of all columns.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.Stack">
            <summary>
            The stack.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.Nodes">
            <summary>
            The nodes.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Dlx.CurrentNode">
            <summary>
            The current node.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Dlx.GetRowColumn(System.Int32,System.Int32)">
            <summary>
            Get the index of the value lying on the specified row.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:System.Collections.Generic.Dlx.GetColumnColumn(System.Int32,System.Int32)">
            <summary>
            Get the index of the value lying on the specified column.
            </summary>
            <param name="column">The column.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.Dlx.GetBlockColumn(System.Int32,System.Int32)">
            <summary>
            Get the index of the value lying on the specified block.
            </summary>
            <param name="block">The block.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Collections.Generic.Dlx.AppendColumn(System.Int32)">
            <summary>
            Append a column.
            </summary>
            <param name="n">The number label.</param>
            <exception cref="T:System.Exception">Throws when the current node is not null.</exception>
        </member>
        <member name="M:System.Collections.Generic.Dlx.Cover(System.Collections.DlxNode*)">
            <summary>
            Cover the specified column.
            </summary>
            <param name="c">The column.</param>
        </member>
        <member name="M:System.Collections.Generic.Dlx.Uncover(System.Collections.DlxNode*)">
            <summary>
            Uncover the specified column.
            </summary>
            <param name="c">The column.</param>
        </member>
        <member name="M:System.Collections.Generic.Dlx.PutLeft(System.Collections.DlxNode*,System.Collections.DlxNode*)">
            <summary>
            Put the new node into the left side of the old node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:System.Collections.Generic.Dlx.PutUp(System.Collections.DlxNode*,System.Collections.DlxNode*)">
            <summary>
            Put the new node into the up side of the old node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:System.Collections.Generic.Dlx.Solve">
            <summary>
            To solve the specified puzzle.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Dlx.GetNewRow(System.Int32)">
            <summary>
            Get a new row.
            </summary>
            <param name="column">The column label.</param>
            <returns>The pointer.</returns>
        </member>
        <member name="M:System.Collections.Generic.Dlx.GetNewColumn(System.Int32)">
            <summary>
            Get a new column with the specified number label.
            </summary>
            <param name="n">The number label.</param>
            <returns>The pointer of the node.</returns>
            <exception cref="T:System.Exception">
            Throws when the current node is greater than <see cref="F:System.Collections.Generic.Dlx.KMaxNodes"/>.
            </exception>
            <seealso cref="F:System.Collections.Generic.Dlx.KMaxNodes"/>
        </member>
        <member name="M:System.Collections.Generic.Dlx.CreateInstance">
            <summary>
            The default constructor.
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="M:System.Collections.Generic.Dlx.MemSet(System.Void*,System.Int32,System.Int32)">
            <summary>
            The C language <c>memset</c> method.
            </summary>
            <param name="dest">The destination pointer.</param>
            <param name="c">The value.</param>
            <param name="count">The count.</param>
            <returns>The pointer.</returns>
        </member>
        <member name="T:System.Collections.Generic.Bag`1">
            <summary>
            <para>
            Encapsulates a collection which only allows user add elements
            and get them, but cannot remove any elements in this collection
            (i.e. Only-in collection).
            </para>
            </summary>
            <typeparam name="T">
            The type of each element. The type should not be <see langword="null"/>.
            </typeparam>
        </member>
        <member name="F:System.Collections.Generic.Bag`1._internalList">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.#ctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.#ctor(`0)">
            <summary>
            Initializes an instance with an element.
            </summary>
            <param name="element">An element.</param>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes an instance with the specified elements.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:System.Collections.Generic.Bag`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Bag`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a serial of elements.
            </summary>
            <param name="items">A serial of elements.</param>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Generic.BagEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.Bag`1"/> and <see cref="T:System.Collections.Generic.IBag`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.Bag`1"/>
            <seealso cref="T:System.Collections.Generic.IBag`1"/>
        </member>
        <member name="M:System.Collections.Generic.BagEx.Sort``1(System.Collections.Generic.IBag{``0})">
            <summary>
            Sort the collection.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
        </member>
        <member name="M:System.Collections.Generic.BagEx.Sort``1(System.Collections.Generic.IBag{``0},System.Comparison{``0})">
            <summary>
            Sort the collection using the specified comparison.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:System.Collections.Generic.BagEx.Sort``1(System.Collections.Generic.IBag{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort the collection using the specified comparison.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="comparer">The comparer.</param>
            <remarks>
            If you want to make the <paramref name="comparer"/> keep <see langword="null"/> value,
            please use <see cref="M:System.Collections.Generic.BagEx.Sort``1(System.Collections.Generic.IBag{``0})"/> instead.
            </remarks>
            <seealso cref="M:System.Collections.Generic.BagEx.Sort``1(System.Collections.Generic.IBag{``0})"/>
        </member>
        <member name="T:System.Collections.Generic.IBag`1">
            <summary>
            Provides a basic only-in collection.
            </summary>
            <typeparam name="T">
            The type of each element. The type should not be <see langword="null"/>.
            </typeparam>
        </member>
        <member name="P:System.Collections.Generic.IBag`1.Item(System.Int32)">
            <summary>
            To get an element with the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.Add(`0)">
            <summary>
            Add the element into the collection.
            </summary>
            <param name="item">The element.</param>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.Clear">
            <summary>
            To clear all elements.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.Contains(`0)">
            <summary>
            Indicates whether the collection contains the specified item.
            </summary>
            <param name="item">The element.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.AddIfDoesNotContain(`0)">
            <summary>
            Adds an object into the end of the <see cref="T:System.Collections.Generic.IBag`1"/>
            when the specified list does not contain the specified element.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a series of elements to the <see cref="T:System.Collections.Generic.IBag`1"/>.
            </summary>
            <param name="items">The elements to add.</param>
        </member>
        <member name="T:System.Collections.Generic.TreeNode`1">
            <summary>
            Encapsulates a tree node.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Id">
            <summary>
            Indicates the current ID.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.ParentId">
            <summary>
            Indicates the parent ID of this instance.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Content">
            <summary>
            Indicates the content.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Children">
            <summary>
            Indicates its children nodes.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.CompareTo(System.Collections.Generic.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.DlxNode">
            <summary>
            Indicates a node used for dancing links.
            </summary>
        </member>
        <member name="F:System.Collections.DlxNode.Left">
            <summary>
            The pointer to the left node.
            </summary>
        </member>
        <member name="F:System.Collections.DlxNode.Right">
            <summary>
            The pointer to the right node.
            </summary>
        </member>
        <member name="F:System.Collections.DlxNode.Up">
            <summary>
            The pointer to the up node.
            </summary>
        </member>
        <member name="F:System.Collections.DlxNode.Down">
            <summary>
            The pointer to the right node.
            </summary>
        </member>
        <member name="F:System.Collections.DlxNode.Column">
            <summary>
            The pointer to the head node.
            </summary>
        </member>
        <member name="F:System.Collections.DlxNode.Code">
            <summary>
            The unique code for this node.
            </summary>
        </member>
        <member name="F:System.Collections.DlxNode.Size">
            <summary>
            The size of the current column.
            </summary>
        </member>
        <member name="M:System.Collections.DlxNode.Equals(System.Object)">
            <method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true" /> if the specified object is equal to the
			current object; otherwise, <see langword="false" />.
		</returns>
	</method>
        </member>
        <member name="M:System.Collections.DlxNode.Equals(System.Collections.DlxNode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.DlxNode.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:System.Collections.DlxNode.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:System.Collections.TreeNode">
            <summary>
            Encapsulates a tree node.
            </summary>
        </member>
        <member name="P:System.Collections.TreeNode.Id">
            <summary>
            Indicates the current ID.
            </summary>
        </member>
        <member name="P:System.Collections.TreeNode.ParentId">
            <summary>
            Indicates the parent ID of this instance.
            </summary>
        </member>
        <member name="P:System.Collections.TreeNode.Content">
            <summary>
            Indicates the content.
            </summary>
        </member>
        <member name="P:System.Collections.TreeNode.Children">
            <summary>
            Indicates its children nodes.
            </summary>
        </member>
        <member name="M:System.Collections.TreeNode.CompareTo(System.Collections.TreeNode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.TreeNode.ToString">
            <inheritdoc/>
        </member>
        <member name="T:System.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value
            as an existing instance. Different than <see cref="T:System.ICloneable"/>, the cloneation
            has the same type with this existing instance.
            </summary>
            <typeparam name="T">
            The type of this instance. This type should be only a class because the cloning
            operation is needed only in reference types, while the value types will be passed
            by value, at this time all value members (fields and properties) will be copied
            one by one.
            </typeparam>
            <seealso cref="T:System.ICloneable"/>
        </member>
        <member name="M:System.ICloneable`1.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
            <returns>
            The instance having the same type with the base one. Because the type is
            used and defined before using this method, so the return type will be
            never <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.ICloneable`1.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:System.Linq.EnumerableEx">
            <summary>
            Provides a set of static methods for querying objects that implement
            <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            This class has the same function and status with <see cref="T:System.Linq.Enumerable"/>.
            </remarks>
            <seealso cref="T:System.Collections.IEnumerable"/>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:System.Linq.EnumerableEx.GetElementByMinSelector``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable{``1}})">
            <summary>
            Get the element whose selection is the minimal one.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <typeparam name="TComparable">The comparing type.</typeparam>
            <param name="this">The elements to search the minimal one.</param>
            <param name="selector">The selector.</param>
            <returns>
            The result value. If the collection does not have a minimal element,
            the result will be the default value, where it will be <see langword="null"/>, which
            is decided in the element type.
            </returns>
        </member>
        <member name="M:System.Linq.EnumerableEx.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the specified collection is empty (no elements in it).
            </summary>
            <typeparam name="TElement">
            The type of the element. Although the list is empty maybe, the type is needed in syntax.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:System.Linq.EnumerableEx.HasOnlyOneElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the specified list has only one element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.PrimaryElementTuple`2">
            <summary>
            Provides a tuple with a primary element.
            </summary>
            <typeparam name="T1"> The type of the value 1.</typeparam>
            <typeparam name="T2"> The type of the value 2.</typeparam>
        </member>
        <member name="M:System.PrimaryElementTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes an instance with four values, and the first one
            is the primary key.
            </summary>
        </member>
        <member name="M:System.PrimaryElementTuple`2.#ctor(`0,`1,System.Int32)">
            <summary>
            Initializes an instance with four elements and a primary key.
            </summary>
            <param name="v1"> The value 1.</param>
            <param name="v2"> The value 2.</param>
            <param name="primaryElementKey">The primary key.</param>
        </member>
        <member name="P:System.PrimaryElementTuple`2.Value1">
            <summary>
            Indicates the value 1.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`2.Value2">
            <summary>
            Indicates the value 2.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`2.PrimaryElementKey">
            <summary>
            Indicates the index of the primary value.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`2.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.PrimaryElementTuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.PrimaryElementTuple`2.Deconstruct(`0@,`1@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="v1">(<see langword="out" /> parameter) The value 1.</param>
            <param name="v2">(<see langword="out" /> parameter) The value 2.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`2.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:System.PrimaryElementTuple`3">
            <summary>
            Provides a tuple with a primary element.
            </summary>
            <typeparam name="T1"> The type of the value 1.</typeparam>
            <typeparam name="T2"> The type of the value 2.</typeparam>
            <typeparam name="T3"> The type of the value 3.</typeparam>
        </member>
        <member name="M:System.PrimaryElementTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes an instance with five values, and the first one
            is the primary key.
            </summary>
        </member>
        <member name="M:System.PrimaryElementTuple`3.#ctor(`0,`1,`2,System.Int32)">
            <summary>
            Initializes an instance with five elements and a primary key.
            </summary>
            <param name="v1"> The value 1.</param>
            <param name="v2"> The value 2.</param>
            <param name="v3"> The value 3.</param>
            <param name="primaryElementKey">The primary key.</param>
        </member>
        <member name="P:System.PrimaryElementTuple`3.Value1">
            <summary>
            Indicates the value 1.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.Value2">
            <summary>
            Indicates the value 2.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.Value3">
            <summary>
            Indicates the value 3.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.PrimaryElementKey">
            <summary>
            Indicates the index of the primary value.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.PrimaryElementTuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.PrimaryElementTuple`3.Deconstruct(`0@,`1@,`2@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="v1">(<see langword="out" /> parameter) The value 1.</param>
            <param name="v2">(<see langword="out" /> parameter) The value 2.</param>
            <param name="v3">(<see langword="out" /> parameter) The value 3.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`3.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:System.PrimaryElementTuple`4">
            <summary>
            Provides a tuple with a primary element.
            </summary>
            <typeparam name="T1"> The type of the value 1.</typeparam>
            <typeparam name="T2"> The type of the value 2.</typeparam>
            <typeparam name="T3"> The type of the value 3.</typeparam>
            <typeparam name="T4"> The type of the value 4.</typeparam>
        </member>
        <member name="M:System.PrimaryElementTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes an instance with six values, and the first one
            is the primary key.
            </summary>
        </member>
        <member name="M:System.PrimaryElementTuple`4.#ctor(`0,`1,`2,`3,System.Int32)">
            <summary>
            Initializes an instance with six elements and a primary key.
            </summary>
            <param name="v1"> The value 1.</param>
            <param name="v2"> The value 2.</param>
            <param name="v3"> The value 3.</param>
            <param name="v4"> The value 4.</param>
            <param name="primaryElementKey">The primary key.</param>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value1">
            <summary>
            Indicates the value 1.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value2">
            <summary>
            Indicates the value 2.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value3">
            <summary>
            Indicates the value 3.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value4">
            <summary>
            Indicates the value 4.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.PrimaryElementKey">
            <summary>
            Indicates the index of the primary value.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.PrimaryElementTuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.PrimaryElementTuple`4.Deconstruct(`0@,`1@,`2@,`3@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="v1">(<see langword="out" /> parameter) The value 1.</param>
            <param name="v2">(<see langword="out" /> parameter) The value 2.</param>
            <param name="v3">(<see langword="out" /> parameter) The value 3.</param>
            <param name="v4">(<see langword="out" /> parameter) The value 4.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`4.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:System.Text.RegularExpressions.InvalidRegexStringException">
            <summary>
            Indicates an error for reporting a string is an invalid regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:System.Text.RegularExpressions.InvalidRegexStringException.Message">
            <inheritdoc/>
        </member>
    </members>
</doc>
