<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Core</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Data.CellStatus">
            <summary>
            Represents a cell status.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Empty">
            <summary>
            Indicates that the cell is empty.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Modifiable">
            <summary>
            Indicates that the cell has already filled a value,
            but the value does not exist when the puzzle begins.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Given">
            <summary>
            Indicates that the cell has already filled a value,
            and the value does exist when the puzzle begins. In
            other words, the value is a given (or a hint, clue, etc.).
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.All">
            <summary>
            Indicates all cases of cell statuses.
            </summary>
            <remarks>
            You had better use this field on cases when processing
            the bitwise operations in a sudoku <see cref="T:Sudoku.Data.Grid"/>.
            This field is not used to process cell status comparison.
            </remarks>
            <seealso cref="M:Sudoku.Data.Grid.GetCellStatus(System.Int32)"/>
        </member>
        <member name="T:Sudoku.Data.Extensions.ByteEx">
            <summary>
            Provides extension methods on <see cref="T:System.Byte"/>.
            </summary>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ByteEx.FindFirstSet(System.Byte)">
            <summary>
            Find the first offset of set bit of the binary representation
            of the specified value. If the value is 0, this method
            will always return -1.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>
            An <see cref="T:System.Int32"/> value indicating that.
            </returns>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ByteEx.CountSet(System.Byte)">
            <summary>
            Get the total number of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating that.</returns>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.CountSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ByteEx.GetNextSetBit(System.Byte,System.Int32)">
            <summary>
            Find a index of the binary representation of a value
            after the specified index, whose bit is set <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="index">The index.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ByteEx.GetSetBitIndex(System.Byte,System.Int32)">
            <summary>
            Get an <see cref="T:System.Int32"/> value, indicating that the absolute position of
            all set bits with the specified set bit order.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="order">The number of the order of set bits.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ByteEx.GetAllSets(System.Byte)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ByteEx.ReverseBits(System.Byte@)">
            <summary>
            <para>Reverse all bits in a specified value.</para>
            <para>
            Note that the value is passed by <b>reference</b> though the
            method is an extension method, and returns nothing.
            </para>
            </summary>
            <param name="this">(<see langword="this ref"/> parameter) The value.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.CollectionEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">
            The type of each element. Should be not <see langword="null"/>.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="M:Sudoku.Data.Extensions.CollectionEx.AddIfDoesNotContain``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/> when
            the specified list does not contain the specified element.
            </summary>
            <typeparam name="T">
            The type of all elements. Should be not <see langword="null"/>.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.DictionaryEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.DictionaryEx.AddIfKeyDoesNotContain``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> when the key does
            not contain in the dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys. The key should be not <see langword="null"/>.
            </typeparam>
            <typeparam name="TValue">The type of elements.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.EnumEx">
            <summary>
            Provides extension methods on <see cref="T:System.Enum"/>.
            </summary>
            <seealso cref="T:System.Enum"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.EnumEx.GetCustomName``1(``0)">
            <summary>
            Get the custom name of the specified enumeration field.
            </summary>
            <typeparam name="TEnum">The type of the enumeration field.</typeparam>
            <param name="this">The instance.</param>
            <returns>The custom name.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.EnumEx.GetValues``1">
            <summary>
            Get all enumeration fields.
            </summary>
            <typeparam name="TEnum">The type of enumeration type.</typeparam>
            <returns>The fields.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.FormatProviderEx">
            <summary>
            Provides extension methods on <see cref="T:System.IFormatProvider"/>.
            </summary>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.FormatProviderEx.HasFormatted(System.IFormatProvider,System.Object,System.String,System.String@)">
            <summary>
            To check whether the format provider has defined the format rule.
            If the rule is defined, this method will return the string representation
            according to the format rule.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The format provider.</param>
            <param name="obj">The object.</param>
            <param name="format">The format string.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result. If the format has been defined,
            this value will not be <see langword="null"/>.
            </param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.Int16Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int16"/>.
            </summary>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.FindFirstSet(System.Int16)">
            <summary>
            Find the first offset of set bit of the binary representation of the specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>
            An <see cref="T:System.Int32"/> value indicating that. If the value is 0, this method
            will always return 0.
            </returns>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.CountSet(System.Int16)">
            <summary>
            Get the total number of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating that.</returns>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.CountSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.GetNextSetBit(System.Int16,System.Int32)">
            <summary>
            Find a index of the binary representation of a value
            after the specified index, whose bit is set <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="index">The index.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.GetSetBitIndex(System.Int16,System.Int32)">
            <summary>
            Get an <see cref="T:System.Int32"/> value, indicating that the absolute position of
            all set bits with the specified set bit order.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="order">The number of the order of set bits.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.GetAllSets(System.Int16)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int16Ex.ReverseBits(System.Int16@)">
            <summary>
            <para>Reverse all bits in a specified value.</para>
            <para>
            Note that the value is passed by <b>reference</b> though the
            method is an extension method, and returns nothing.
            </para>
            </summary>
            <param name="this">(<see langword="this ref"/> parameter) The value.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.Int32Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int32"/>.
            </summary>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="F:Sudoku.Data.Extensions.Int32Ex.Table">
            <summary>
            The return value table used in <see cref="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>.
            </summary>
            <seealso cref="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.FindFirstSet(System.Int32)">
            <summary>
            Find the first offset of set bit of the binary representation of the specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>
            An <see cref="T:System.Int32"/> value indicating that. If the value is 0, this method
            will always return -1.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.CountSet(System.Int32)">
            <summary>
            Get the total number of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.GetNextSetBit(System.Int32,System.Int32)">
            <summary>
            Find a index of the binary representation of a value
            after the specified index, whose bit is set <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="index">The index.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.GetSetBitIndex(System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Int32"/> value, indicating that the absolute position of
            all set bits with the specified set bit order.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="order">The number of the order of set bits.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.GetAllSets(System.Int32)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int32Ex.ReverseBits(System.Int32@)">
            <summary>
            <para>Reverse all bits in a specified value.</para>
            <para>
            Note that the value is passed by <b>reference</b> though the
            method is an extension method, and returns nothing.
            </para>
            </summary>
            <param name="this">(<see langword="this ref"/> parameter) The value.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.Int64Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int64"/>.
            </summary>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int64Ex.CountSet(System.Int64)">
            <summary>
            Get the total number of set bits of the binary representation
            of the specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int64Ex.GetAllSets(System.Int64)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int64Ex.GetNextSetBit(System.Int64,System.Int32)">
            <summary>
            Find a index of the binary representation of a value
            after the specified index, whose bit is set <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="index">The index.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.Int64Ex.GetSetBitIndex(System.Int64,System.Int32)">
            <summary>
            Get an <see cref="T:System.Int32"/> value, indicating that the absolute position of
            all set bits with the specified set bit order.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="order">The number of the order of set bits.</param>
            <returns>The position.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.ListEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ListEx.RemoveLastElement``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last element of the specified list, which is equivalent to code:
            <code>
            list.RemoveAt(list.Count - 1);
            </code>
            or
            <code>
            list.RemoveAt(^1); // Call extension method 'RemoveAt'.
            </code>
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <seealso cref="M:Sudoku.Data.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index)">
            <summary>
            Remove at the element in the specified index.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="index">The index to remove.</param>
        </member>
        <member name="T:Sudoku.Data.Extensions.ObjectEx">
            <summary>
            Provides extension methods on <see cref="T:System.Object"/>.
            </summary>
            <seealso cref="T:System.Object"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.ObjectEx.NullableToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <see cref="F:System.String.Empty"/>. Therefore, this method will never throw.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ObjectEx.NullableToString(System.Object,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <param name="defaultValue">
            The default return value when the current object is <see langword="null"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <paramref name="defaultValue"/>. Therefore, this method will never throw.
            </returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ObjectEx.HasMarkedAttribute``1(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            To check whether the specified type has marked the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="this">
            (<see langword="this"/> parameter) The instance. This instance will
            never be useful except to get its type.
            </param>
            <param name="inherit">
            <see langword="true"/> to search this member's inheritance chain
            to find the attributes; otherwise, <see langword="false"/>.
            This parameter is ignored for properties and events.
            </param>
            <param name="attributes">
            (<see langword="out"/> parameter) All attributes found.
            </param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.ObjectEx.HasMarkedAttribute``2(System.Boolean,System.Collections.Generic.IEnumerable{``1}@)">
            <summary>
            To check whether the specified type has marked the specified attribute.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="inherit">
            <see langword="true"/> to search this member's inheritance chain
            to find the attributes; otherwise, <see langword="false"/>.
            This parameter is ignored for properties and events.
            </param>
            <param name="attributes">
            (<see langword="out"/> parameter) All attributes found.
            </param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is same as
            <see cref="M:Sudoku.Data.Extensions.ObjectEx.HasMarkedAttribute``1(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{``0}@)"/>,
            but the type of the specified object is used only.
            </remarks>
            <seealso cref="M:Sudoku.Data.Extensions.ObjectEx.HasMarkedAttribute``1(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{``0}@)"/>
        </member>
        <member name="T:Sudoku.Data.Extensions.SpanEx">
            <summary>
            Provides extension methods on <see cref="T:System.Span`1"/> and <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <seealso cref="T:System.Span`1"/>
            <seealso cref="T:System.ReadOnlySpan`1"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.SpanEx.CountWhen``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Sum up the number of all elements satisfied the specified condition.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The elements.</param>
            <param name="predicate">The condition.</param>
            <returns>The number of elements satisfied the condition.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SpanEx.CountWhen``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Sum up the number of all elements satisfied the specified condition.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The elements.</param>
            <param name="predicate">The condition.</param>
            <returns>The number of elements satisfied the condition.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SpanEx.ElementAt``1(System.Span{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Get the specified element with the specified index of all elements that
            satisfied the specified condition.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The elements.</param>
            <param name="index">The index.</param>
            <param name="predicate">The condition.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.StringBuilderEx">
            <summary>
            Provides extension methods on <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <seealso cref="T:System.Text.StringBuilder"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse all characters in a specified string builder instance.
            </summary>
            <param name="this">
            (<see langword="this"/> parameter) The instance to reverse all characters.
            </param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.RemoveFromEnd(System.Text.StringBuilder,System.Int32)">
            <summary>
            Remove the specified number of characters from the end of the string builder
            instance.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance to remove characters.</param>
            <param name="length">The number of characters you want to remove.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Char)">
            <summary>
            Append a character to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="value">The character you want to append.</param>
            <returns>The reference of the current instance.</returns>
            <remarks>
            The extension method is used in order to avoid implicit conversion from
            <see cref="T:System.Char"/> to <see cref="T:System.Int32"/>. If you want to append everything,
            please use the method <see cref="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)"/>.
            </remarks>
            <seealso cref="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Object)">
            <summary>
            Append a <see cref="T:System.String"/> representation of an object
            to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="obj">
            The <see cref="T:System.String"/> representation of an object you want to append.
            </param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringBuilderEx.CopyTo(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Copy the specified string builder to the specified target.
            </summary>
            <param name="this">The base string builder.</param>
            <param name="to">The target builder.</param>
            <exception cref="T:System.ArgumentException">
            Throws if the target instance does not have enough space to store all characters
            from the base one.
            </exception>
        </member>
        <member name="T:Sudoku.Data.Extensions.StringEx">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.SatisfyPattern(System.String,System.String)">
            <summary>
            Check whether the specified string instance is satisfied
            the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.IsMatch(System.String,System.String)">
            <summary>
            Check whether the specified string instance can match the value
            using the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of
            the specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The value after matching. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The matched string value. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.MatchAll(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.MatchAll(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern, using the specified matching
            options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.StringEx.IsRegexPattern(System.String)">
            <summary>
            To check if the current string value is a valid regular
            expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.TypeEx">
            <summary>
            Provides extension methods on <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.TypeEx.HasMarkedAttribute``1(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            To check whether the specified type has marked the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The type.</param>
            <param name="inherit">
            <see langword="true"/> to search this member's inheritance chain
            to find the attributes; otherwise, <see langword="false"/>.
            This parameter is ignored for properties and events.
            </param>
            <param name="attributes">
            (<see langword="out"/> parameter) All attributes found.
            </param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Data.FullGridMap">
            <summary>
            Encapsulates a binary series of candidate status table consisting of 729 bits,
            where <see langword="true"/> bit (1) is for the cell having digit,
            and the <see langword="false"/> bit (0) is for empty cell. Sometimes for other usages.
            </summary>
            <remarks>
            This data structure use at least 144 bytes, which has outnumbered the number of
            the threshold of value types via Microsoft C# language designation team (Every instance
            of value type should be no more than 64 bytes). Therefore, we should use
            <see cref="T:Sudoku.Data.GridMap"/> instead of this data structure as much as possible.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.FullGridMap.Empty">
            <summary>
            Indicates an empty instance (making no changes).
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line1">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line2">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line3">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line4">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line5">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line6">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line7">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line8">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="F:Sudoku.Data.FullGridMap._line9">
            <summary>
            All bits map.
            </summary>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified candidate offset
            (Sets itself and all peers).
            </summary>
            <param name="offset">The candidate offset.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified candidate offset.
            This will set all bits of all peers of this candidate. Another
            <see cref="T:System.Boolean"/> value indicates whether this initialization
            will set the bit of itself.
            </summary>
            <param name="offset">The candidate offset.</param>
            <param name="setItself">
            A <see cref="T:System.Boolean"/> value indicating whether this initialization
            will set the bit of itself.
            If the value is <see langword="false"/>, it will be equivalent
            to below:
            <code>
            var map = new FullGridMap(offset) { [offset] = false };
            </code>
            </param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes an instance with a series of elements.
            </summary>
            <param name="offsets">The cell offsets.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with a series of elements.
            </summary>
            <param name="offsets">The cell offsets.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.#ctor(Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with three binary value.
            </summary>
            <param name="line1">Line 1 grid map.</param>
            <param name="line2">Line 2 grid map.</param>
            <param name="line3">Line 3 grid map.</param>
            <param name="line4">Line 4 grid map.</param>
            <param name="line5">Line 5 grid map.</param>
            <param name="line6">Line 6 grid map.</param>
            <param name="line7">Line 7 grid map.</param>
            <param name="line8">Line 8 grid map.</param>
            <param name="line9">Line 9 grid map.</param>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.IsEmpty">
            <summary>
            Indicates whether the map has no set bits.
            This property is equivalent to code '<c>!<see langword="this"/>.IsNotEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.FullGridMap.IsNotEmpty"/>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.IsNotEmpty">
            <summary>
            Indicates whether the map has at least one set bit.
            This property is equivalent to code '<c>!<see langword="this"/>.IsEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.FullGridMap.IsEmpty"/>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.Count">
            <summary>
            Indicates the total number of cells where the corresponding
            value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.Offsets">
            <summary>
            Indicates all candidate offsets whose corresponding value
            are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.FullGridMap.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value on the specified candidate
            offset.
            </summary>
            <param name="offset">The candidate offset.</param>
            <value>
            A <see cref="T:System.Boolean"/> value on assignment.
            </value>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the candidate has digit.
            </returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Equals(Sudoku.Data.FullGridMap)">
            <summary>
            Indicates whether the current object has the same value with the other one.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>
            The result of this comparison. <see langword="true"/> if two instances hold a same
            value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.GetCellSubView(System.Int32)">
            <summary>
            Get the sub-view of the specified cell.
            </summary>
            <param name="cellOffset">The cell offset.</param>
            <returns>The <see cref="T:System.Boolean"/> array.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.SetAt(System.Int32)">
            <summary>
            Simply calls <see cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.
            </summary>
            <param name="index">The index of all true bits.</param>
            <returns>The result position.</returns>
            <seealso cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.SetAt(System.Index)">
            <summary>
            Get the index of <see langword="true"/> bits from start or end.
            </summary>
            <param name="index">
            The index. If <see cref="P:System.Index.IsFromEnd"/> is <see langword="true"/>,
            the method will search the bits from end of the list.
            </param>
            <returns>The result position.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.ToArray">
            <summary>
            Get all candidate offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of candidate offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Reduct(System.Int32)">
            <summary>
            Reduct the map to <see cref="T:Sudoku.Data.GridMap"/> with the specified digit.
            </summary>
            <param name="digit">The digit.</param>
            <returns>The map of the digit.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Add(System.Int32)">
            <summary>
            Add the candidate into the list.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add a series of candidates into the list.
            </summary>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.Remove(System.Int32)">
            <summary>
            Remove a candidate from the current list.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Remove a series of candidates from the current list.
            </summary>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.SetCell(System.Int32,System.Boolean[])">
            <summary>
            Set the bits to the specified cell.
            </summary>
            <param name="cellOffset">The cells.</param>
            <param name="bits">Bits.</param>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.CreateInstance(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Create the instance with some candidates. These candidates will make their own
            peers. This method will get the intersection of all peers' list.
            </summary>
            <param name="candidates">All candidates.</param>
            <param name="setItself">
            Indicates whether the peer table will record itself. If the value
            is <see langword="true"/>, the peer candidates will add itself to
            calculate the final intersection; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </param>
            <returns>The result map.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_Equality(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_Inequality(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_OnesComplement(Sudoku.Data.FullGridMap)">
            <summary>
            Negate all bits.
            </summary>
            <param name="map">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_Subtraction(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Get a <see cref="T:Sudoku.Data.FullGridMap"/> that contains all <paramref name="left"/> cells
            but not in <paramref name="right"/> cells.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_BitwiseAnd(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Intersect two <see cref="T:Sudoku.Data.FullGridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_BitwiseOr(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Union two <see cref="T:Sudoku.Data.FullGridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.FullGridMap.op_ExclusiveOr(Sudoku.Data.FullGridMap,Sudoku.Data.FullGridMap)">
            <summary>
            Symmetrical except two <see cref="T:Sudoku.Data.FullGridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Data.Grid">
            <summary>
            Encapsulates a basic sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.EmptyString">
            <summary>
            Indicates the empty grid string.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid.Empty">
            <summary>
            Indicates an empty grid, where all values are zero.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Grid._masks">
            <summary>
            Binary masks of all cells.
            </summary>
            <remarks>
            <para>This array stores binary representation of decimals.</para>
            <para>
            There are 81 cells in a sudoku grid, so this data structure uses
            an array of size 81. Each element is a <see cref="T:System.Int16"/> value
            (but only use 12 bits), where the lower 9 bits indicates whether
            the digit 1 to 9 exists or not. If the corresponding value is
            <see langword="true"/>, or in other words, the binary representation
            is 1, this digit will <b>not</b> exist.
            </para>
            <para>
            The higher 3 bits indicates the cell status. The
            cases are below:
            <list type="table">
            <item>
            <term>0b001 (1)</term>
            <description>The cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/>.</description>
            </item>
            <item>
            <term>0b010 (2)</term>
            <description>The cell is <see cref="F:Sudoku.Data.CellStatus.Modifiable"/>.</description>
            </item>
            <item>
            <term>0b100 (4)</term>
            <description>The cell is <see cref="F:Sudoku.Data.CellStatus.Given"/>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:Sudoku.Data.CellStatus"/>
        </member>
        <member name="F:Sudoku.Data.Grid._initialMasks">
            <summary>
            Same as <see cref="F:Sudoku.Data.Grid._masks"/>, but this field stores the all masks at
            the initial grid. The field will not be modified until this instance
            destructs.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor(System.Int16[])">
            <summary>
            Initializes an instance with the binary mask array.
            </summary>
            <param name="masks">The mask array.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the length of the specified argument is not 81.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Grid.#ctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="P:Sudoku.Data.Grid.HasSolved">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Grid.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="E:Sudoku.Data.Grid.ValueChanged">
            <summary>
            Indicates the event when the mask in a certain cell has changed.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.Fix">
            <summary>
            To fix a grid, which means all modifiable values will be changed
            to given ones.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.Unfix">
            <summary>
            To unfix a grid, which means all given values will be changed
            to modifiable ones.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.Reset">
            <summary>
            To reset the grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Grid.SetCellStatus(System.Int32,Sudoku.Data.CellStatus)">
            <summary>
            Set the status in a cell.
            </summary>
            <param name="offset">The cell offset you want to change.</param>
            <param name="cellStatus">The cell status you want to set.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.SetMask(System.Int32,System.Int16)">
            <summary>
            Set a mask in a cell.
            </summary>
            <param name="offset">The cell offset you want to change.</param>
            <param name="value">The cell mask you want to set.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Equals(Sudoku.Data.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetMask(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetCandidates(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetCandidatesReversal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString(Sudoku.Data.GridOutputOptions)">
            <summary>
            Returns a string that represents the current object with the grid output option.
            </summary>
            <param name="gridOutputOption">The grid output option.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString(System.String)">
            <method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.Grid.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetCellStatus(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Grid.OnValueChanged(System.Object,Sudoku.Data.ValueChangedEventArgs)">
            <summary>
            The method, which will be invoked when the mask has changed.
            </summary>
            <param name="sender">The instance triggering the event.</param>
            <param name="e">The data.</param>
        </member>
        <member name="M:Sudoku.Data.Grid.SimplyValidate">
            <summary>
            Simply validate.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String)">
            <summary>
            <para>
            Parses a string value and converts to this type.
            </para>
            <para>
            If you want to parse a PM grid, we recommend you use the method
            <see cref="M:Sudoku.Data.Grid.Parse(System.String,Sudoku.Data.GridParsingOption)"/> instead of this method.
            </para>
            </summary>
            <param name="str">The string.</param>
            <returns>The result instance had converted.</returns>
            <seealso cref="M:Sudoku.Data.Grid.Parse(System.String,Sudoku.Data.GridParsingOption)"/>
        </member>
        <member name="M:Sudoku.Data.Grid.Parse(System.String,Sudoku.Data.GridParsingOption)">
            <summary>
            Parses a string value and converts to this type,
            using a specified grid parsing type.
            </summary>
            <param name="str">The string.</param>
            <param name="gridParsingOption">The grid parsing type.</param>
            <returns>The result instance had converted.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.TryParse(System.String,Sudoku.Data.Grid@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result parsed. If the conversion is failed,
            this argument will be <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.CheckFormatString(System.String)">
            <summary>
            To check the format string, delegated from the method
            <see cref="M:Sudoku.Data.Grid.ToString(System.String,System.IFormatProvider)"/>.
            </summary>
            <param name="format">The format.</param>
            <seealso cref="M:Sudoku.Data.Grid.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Sudoku.Data.Grid.TryParse(System.String,Sudoku.Data.GridParsingOption,Sudoku.Data.Grid@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="gridParsingOption">The grid parsing type.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result parsed. If the conversion is failed,
            this argument will be <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.CreateInstance(System.Int32[])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.CreateInstance(System.Int32[0:,0:])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.Grid.op_Equality(Sudoku.Data.Grid,Sudoku.Data.Grid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Grid.op_Inequality(Sudoku.Data.Grid,Sudoku.Data.Grid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.GridFormatFactory">
            <summary>
            Provides a factory to create a <see cref="T:Sudoku.Data.GridFormatter"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatFactory.Create(Sudoku.Data.GridOutputOptions)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridFormatter"/> according to the specified grid output options.
            </summary>
            <param name="gridOutputOption">The grid output options.</param>
            <returns>The grid formatter.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatFactory.Create(System.String)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridFormatter"/> according to the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The grid formatter.</returns>
            <exception cref="T:System.FormatException">
            Throws when the format string is invalid.
            </exception>
        </member>
        <member name="T:Sudoku.Data.GridFormatter">
            <summary>
            Provides operations for grid formatting.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with a <see cref="T:System.Boolean"/> value
            indicating multi-line.
            </summary>
            <param name="multiline">
            The multi-line identifier. If the value is <see langword="true"/>, the output will
            be multi-line.
            </param>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Multiline">
            <summary>
            Indicates whether the output should be multi-line.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToString(Sudoku.Data.Grid)">
            <summary>
            Represents a string value indicating this instance.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToHodokuLibraryFormatString(Sudoku.Data.Grid)">
            <summary>
            To string with Hodoku library format compatible string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToSingleLineStringCore(Sudoku.Data.Grid)">
            <summary>
            To single line string.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.GetFirstFalseCandidate(System.Int16)">
            <summary>
            Get the first <see langword="false"/> candidate.
            </summary>
            <param name="value">The value.</param>
            <returns>The first one.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToMultiLineSimpleGridCore(Sudoku.Data.Grid)">
            <summary>
            To multi-line normal grid string without any candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.ToMultiLineStringCore(Sudoku.Data.Grid)">
            <summary>
            To multi-line string with candidates.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.GetCellStatus(System.Int16)">
            <summary>
            Get cell status for a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="M:Sudoku.Data.GridFormatter.GetDefaultList">
            <summary>
            Get the default list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.Placeholder">
            <summary>
            The place holder.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.WithModifiables">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in ':candidate list'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c>&lt;digit&gt;</c>' instead
            of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            See file "How to use 'Grid' class.md" for more information.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridFormatter.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridMap">
            <summary>
            Encapsulates a binary series of cell status table.
            </summary>
            <remarks>
            The instance stores two <see cref="T:System.Int64"/> values, consisting of 81 bits,
            where <see langword="true"/> bit (1) is for the cell having that digit,
            and the <see langword="false"/> bit (0) is for the cell not containing
            the digit. Sometimes this type will be used for other cases.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.GridMap.Empty">
            <summary>
            Indicates an empty instance (all bits are 0).
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.Shifting">
            <summary>
            The value used for shifting.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap._high">
            <summary>
            <para>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.GridMap._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.GridMap._low"/> represents the lower 41 bits.
            </para>
            <para>
            This data structure is mutable because of these two fields (these
            two fields are not <see langword="readonly"/>, but Roslyn lies).
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap._low">
            <summary>
            <para>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.GridMap._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.GridMap._low"/> represents the lower 41 bits.
            </para>
            <para>
            This data structure is mutable because of these two fields (these
            two fields are not <see langword="readonly"/>, but Roslyn lies).
            </para>
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified cell offset
            (Sets itself and all peers).
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified cell offset.
            This will set all bits of all peers of this cell. Another
            <see cref="T:System.Boolean"/> value indicates whether this initialization
            will set the bit of itself.
            </summary>
            <param name="offset">The cell offset.</param>
            <param name="setItself">
            A <see cref="T:System.Boolean"/> value indicating whether this initialization
            will set the bit of itself.
            If the value is <see langword="false"/>, it will be equivalent
            to below:
            <code>
            var map = new GridMap(offset) { [offset] = false };
            </code>
            </param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(Sudoku.Data.GridMap)">
            <summary>
            To copy an instance with the specified information.
            This constructor is only used for adding or removing some extra cells like:
            <code>
            var y = new GridMap(x) { [i] = true };
            </code>
            or
            <code>
            var y = new GridMap(x) { i };
            </code>
            </summary>
            <param name="another">Another instance.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32[])">
            <summary>
            Same behavior of the initializer as <see cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>.
            </summary>
            <param name="offsets">All offsets.</param>
            <remarks>
            This initializer is defined after another initializer with
            <see cref="T:System.ReadOnlySpan`1"/> had defined. Although this initializer
            does not initialize something (use the other one instead),
            while initializing with the type <see cref="T:System.Int32"/>[], the complier
            gives me an error without this initializer (ambiguity of two
            initializers). However, unfortunately, <see cref="T:System.ReadOnlySpan`1"/>
            does not implemented the interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>...
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="offsets">cell offsets.</param>
            <remarks>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            will not be set <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32,Sudoku.Data.GridMap.InitializeOption)">
            <summary>
            Initializes an instance with the specified cell offset
            with an initialize option.
            </summary>
            <param name="offset">The cell offset.</param>
            <param name="initializeOption">
            Indicates the behavior of the initialization.
            </param>
            <exception cref="T:System.ArgumentException">
            Throws when the specified initialize option is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32[],Sudoku.Data.GridMap.InitializeOption)">
            <summary>
            Initializes an instance with cell offsets with an initialize option.
            </summary>
            <param name="offsets">The offsets to be processed.</param>
            <param name="initializeOption">
            Indicates the behavior of the initialization.
            </param>
            <remarks>
            This method is same behavior of <see cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.GridMap.InitializeOption)"/>
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.GridMap.InitializeOption)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.GridMap.InitializeOption)">
            <summary>
            Initializes an instance with cell offsets with an initialize option.
            </summary>
            <param name="offsets">The offsets to be processed.</param>
            <param name="initializeOption">
            Indicates the behavior of the initialization.
            </param>
            <exception cref="T:System.ArgumentException">
            Throws when the specified initialize option is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes an instance with three binary value.
            </summary>
            <param name="high">Higher 40 bits.</param>
            <param name="low">Lower 41 bits.</param>
        </member>
        <member name="P:Sudoku.Data.GridMap.IsEmpty">
            <summary>
            Indicates whether the map has no set bits.
            This property is equivalent to code '<c>!<see langword="this"/>.IsNotEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.GridMap.IsNotEmpty"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.IsNotEmpty">
            <summary>
            Indicates whether the map has at least one set bit.
            This property is equivalent to code '<c>!<see langword="this"/>.IsEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.GridMap.IsEmpty"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.BlockMask">
            <summary>
            Indicates the mask of block.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.RowMask">
            <summary>
            Indicates the mask of row.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.ColumnMask">
            <summary>
            Indicates the mask of column.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.CoveredLine">
            <summary>
            Indicates the covered line.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.CoveredRegions">
            <summary>
            Indicates all regions covered.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Count">
            <summary>
            Indicates the total number of cells where the corresponding
            value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Offsets">
            <summary>
            <para>
            Indicates all cell offsets whose corresponding value
            are set <see langword="true"/>.
            </para>
            <para>
            If you want to make an array of them, please use method
            <see cref="M:Sudoku.Data.GridMap.ToArray"/> instead of code
            '<c>Offsets.ToArray()</c>'.
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.GridMap.ToArray"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value on the specified cell
            offset.
            </summary>
            <param name="offset">The cell offset.</param>
            <value>
            A <see cref="T:System.Boolean"/> value on assignment.
            </value>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the cell has digit.
            </returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.Deconstruct(System.Int64@,System.Int64@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="high">(<see langword="out" /> parameter) Higher 40 bits.</param>
            <param name="low">(<see langword="out" /> parameter) Lower 41 bits.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Equals(Sudoku.Data.GridMap)">
            <summary>
            Indicates whether the current object has the same value with the other one.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>
            The result of this comparison. <see langword="true"/> if two instances hold a same
            value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.Overlaps(Sudoku.Data.GridMap)">
            <summary>
            Indicates whether this map overlaps another one.
            </summary>
            <param name="other">The other map.</param>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.AllCellCovers(System.Int32)">
            <summary>
            Check whether the grid map is fully covered all cells in the specified region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.AllSetsAreInOneRegion(System.Nullable{System.Int32}@)">
            <summary>
            Indicates whether all cells in this instance are in one region.
            </summary>
            <param name="region">
            (<see langword="out"/> parameter) The region covered.
            </param>
        </member>
        <member name="M:Sudoku.Data.GridMap.SetAt(System.Int32)">
            <summary>
            Get a n-th index of the <see langword="true"/> bit in this instance.
            </summary>
            <param name="index">The true bit index order.</param>
            <returns>The real index.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToArray">
            <summary>
            Get all cell offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of cell offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.GridMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Add(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.Remove(System.Int32)">
            <summary>
            Set the specified cell as <see langword="false"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetCellsIn(System.Int32)">
            <summary>
            Get all cell offsets in the specified region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>All cell offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.CreateInstance(System.Int32)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridMap"/> instance with the specified region offset.
            This will set all bits <see langword="true"/> in this region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>The grid map.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.CreateInstance(Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridMap"/> instance with the specified solution.
            If the puzzle has been solved, this method will create a grid map of
            distribution of a single digit in this solution.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit to search.</param>
            <returns>
            The grid map that contains all cells of a digit appearing
            in the solution.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws when the puzzle has not been solved.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridMap.CreateInstance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Different with <see cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>,
            this method will generate the intersection table of all peers from
            the argument.
            </summary>
            <param name="cellList">The cell list.</param>
            <returns>An intersection map.</returns>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.CreateInstance(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Different with <see cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/> and
            <see cref="M:Sudoku.Data.GridMap.#ctor(System.Int32,System.Boolean)"/>, this method will generate
            the intersection table of all peers from the argument.
            </summary>
            <param name="cellList">The cell list.</param>
            <param name="setItself">
            Indicates whether the initializer will set peer center itself.
            </param>
            <returns>An intersection map.</returns>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Equality(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Inequality(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_OnesComplement(Sudoku.Data.GridMap)">
            <summary>
            Reverse all cells' statuses, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="gridMap">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Subtraction(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Get a <see cref="T:Sudoku.Data.GridMap"/> that contains all <paramref name="left"/> cells
            but not in <paramref name="right"/> cells.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_BitwiseAnd(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Get all cells that two <see cref="T:Sudoku.Data.GridMap"/>s both contain.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_BitwiseOr(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Get all cells from two <see cref="T:Sudoku.Data.GridMap"/>s.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_ExclusiveOr(Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Unions two sets of <paramref name="left"/> minus <paramref name="right"/>
            and <paramref name="right"/> minus <paramref name="left"/>, where the minus
            operator is <see cref="M:Sudoku.Data.GridMap.op_Subtraction(Sudoku.Data.GridMap,Sudoku.Data.GridMap)"/>.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result.</returns>
            <seealso cref="M:Sudoku.Data.GridMap.op_Subtraction(Sudoku.Data.GridMap,Sudoku.Data.GridMap)"/>
        </member>
        <member name="T:Sudoku.Data.GridMap.InitializeOption">
            <summary>
            Provides an option for initialization of the base type <see cref="T:Sudoku.Data.GridMap"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.InitializeOption.Ordinary">
            <summary>
            Indicates each candidate will be processed with the normal case.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.InitializeOption.ProcessPeersAlso">
            <summary>
            Indicates each candidate will be processed with its peer cells.
            For example, if set the cell of the index 0, this option
            will let the initializer set its peer cells also.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.InitializeOption.ProcessPeersWithoutItself">
            <summary>
            Indicates each candidate will be processed with its peer cells,
            but itself will be set <see langword="false"/> rather than
            <see langword="true"/> value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.PeerTable">
            <summary>
            The peer table used in intersection.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.RegionTable">
            <summary>
            The map of all cell offsets in its specified region.
            For example, '<c>RegionTable[0]</c>' means that all cell offsets
            in the region 0 (block 1).
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.CoverTable">
            <summary>
            The cover table.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridOutputOptions">
            <summary>
            Provides a grid output option.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.None">
            <summary>
            Indicates the default settings (a single-line string text).
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.WithModifiers">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in ':candidate list'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c>&lt;digit&gt;</c>'
            instead of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            See file <i><a href="#">How to use 'Grid' class.md</a></i> for more information.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.DotPlaceholder">
            <summary>
            Indicates the placeholder must be '.' instead of '0'.
            If the value is <see langword="true"/>, the placeholder will be '.';
            otherwise, '0'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridOutputOptions.Multiline">
            <summary>
            Indicates whether the output should be multi-line.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridParser">
            <summary>
            Encapsulates a grid parser.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridParser.#ctor(System.String)">
            <summary>
            Initializes an instance with parsing data.
            </summary>
            <param name="parsingValue">The string to parse.</param>
        </member>
        <member name="P:Sudoku.Data.GridParser.ParsingValue">
            <summary>
            The value to parse.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridParser.Parse">
            <summary>
            To parse the value.
            </summary>
            <returns>The grid.</returns>
            <exception cref="T:System.ArgumentException">Throws when failed to parse.</exception>
        </member>
        <member name="M:Sudoku.Data.GridParser.Parse(Sudoku.Data.GridParsingOption)">
            <summary>
            To parse the value with a specified grid parsing type.
            </summary>
            <param name="gridParsingOption">A specified parsing type.</param>
            <returns>The grid.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when failed to parse.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSimpleMultilineGrid">
            <summary>
            Parse the value using multi-line simple grid (without any candidates).
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingPencilMarked(System.Boolean)">
            <summary>
            Parse the PM grid.
            </summary>
            <param name="treatSingleValueAsGiven">
            The value indicating whether the parsing should treat
            the modifiable values as given ones.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSimpleTable">
            <summary>
            Parse the simple table format string (Sudoku explainer format).
            </summary>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.OnParsingSusser">
            <summary>
            Parse the susser format string.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridParser.GetDefaultCheckingArray">
            <summary>
            Get an array of default values in checking.
            </summary>
            <returns>The array of <see cref="T:System.Boolean"/> values.</returns>
            <remarks>
            Here must use method instead of property or field.
            Because the return value should be mutable.
            </remarks>
        </member>
        <member name="T:Sudoku.Data.GridParsingOption">
            <summary>
            Represents a grid parsing type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Susser">
            <summary>
            <para>
            Indicates the susser format, which means all grid values
            will be displayed in one line with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            <code>
            080630040200085009090000081000300800000020000006001000970000030400850007010094050<br/>
            4+80002+306+31000+9004000+4030109+38+24+675+1+75+1+39+8+46+2+2640708+3902090000010000002080+36+20007:713 723 533 633 537 575 176 576 577 579 583 784 586 587 496 997
            </code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.PencilMarked">
            <summary>
            <para>
            Indicates the pencil marked grid (PM grid), which means all
            grid candidates will be displayed using a table.
            </para>
            <para>
            For example:
            <code>
            .--------------.--------------.-------------.<br/>
            | &lt;4&gt;   *8*    59  | 157  15   &lt;2&gt;  | *3*   79  &lt;6&gt;   |<br/>
            | *3*   &lt;1&gt;    256 | 578  568  *9*  | 25  78  &lt;4&gt;   |<br/>
            | 56  79   279 | *4*    568  &lt;3&gt;  | 29  &lt;1&gt;   58  |<br/>
            :--------------+--------------+-------------:<br/>
            | &lt;9&gt;   *3*    &lt;8&gt;   | *2*    &lt;4&gt;    *6*  | &lt;7&gt;   &lt;5&gt;   *1*   |<br/>
            | *7*   &lt;5&gt;    *1*   | *3*    &lt;9&gt;    *8*  | *4*   &lt;6&gt;   *2*   |<br/>
            | *2*   &lt;6&gt;    &lt;4&gt;   | 15   &lt;7&gt;    15 | &lt;8&gt;   *3*   &lt;9&gt;   |<br/>
            :--------------+--------------+-------------:<br/>
            | 56  &lt;2&gt;    567 | &lt;9&gt;    138  47 | 16  48  38  |<br/>
            | &lt;1&gt;   479  679 | 58   358  47 | 69  &lt;2&gt;   358 |<br/>
            | &lt;8&gt;   49   *3*   | &lt;6&gt;    *2*    15 | 15  49  &lt;7&gt;   |<br/>
            '--------------'--------------'-------------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.PencilMarkedTreatSingleAsGiven">
            <summary>
            <para>
            Indicates the pencil marked grid (PM grid), which means all
            grid candidates will be displayed using a table. In addition,
            all single digit will be treated as a given digit.
            </para>
            <para>
            For example:
            <code>
            .--------------.--------------.-------------.<br/>
            | 4   8    59  | 157  15   2  | 3   79  6   |<br/>
            | 3   1    256 | 578  568  9  | 25  78  4   |<br/>
            | 56  79   279 | 4    568  3  | 29  1   58  |<br/>
            :--------------+--------------+-------------:<br/>
            | 9   3    8   | 2    4    6  | 7   5   1   |<br/>
            | 7   5    1   | 3    9    8  | 4   6   2   |<br/>
            | 2   6    4   | 15   7    15 | 8   3   9   |<br/>
            :--------------+--------------+-------------:<br/>
            | 56  2    567 | 9    138  47 | 16  48  38  |<br/>
            | 1   479  679 | 58   358  47 | 69  2   358 |<br/>
            | 8   49   3   | 6    2    15 | 15  49  7   |<br/>
            '--------------'--------------'-------------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Table">
            <summary>
            <para>
            Indicates the table format, which means all grid values
            will be displayed using a table with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            <code>
            .----------.----------.----------.<br/>
            |  .  4  6 |  . +1  . |  3 +7 +5 |<br/>
            | +3 +8  1 | +5  4  7 | +2 +9 +6 |<br/>
            |  .  .  5 |  .  3  . | +1 +4  8 |<br/>
            :----------+----------+----------:<br/>
            |  8  .  4 |  . +5  . | +7  6  . |<br/>
            |  .  9  . |  .  2  . | +8  5 +4 |<br/>
            |  .  5  . |  .  .  . |  9  .  3 |<br/>
            :----------+----------+----------:<br/>
            |  5  .  . |  .  8  . |  6  . +9 |<br/>
            | +4  .  8 |  1  9  . |  5  .  . |<br/>
            |  .  .  9 |  .  . +5 |  4  8  . |<br/>
            '----------'----------'----------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.SimpleTable">
            <summary>
            <para>
            Sudoku explainer format (9 characters in a row, and 9 rows).
            </para>
            <para>
            For example:
            <code>
            080630040<br/>
            200085009<br/>
            090000081<br/>
            000300800<br/>
            000020000<br/>
            006001000<br/>
            970000030<br/>
            400850007<br/>
            010094050
            </code>
            </para>	
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridTransformations">
            <summary>
            Provides a series of methods for <see cref="T:Sudoku.Data.IReadOnlyGrid"/>
            using in transformations.
            </summary>
            <seealso cref="T:Sudoku.Data.IReadOnlyGrid"/>
        </member>
        <member name="F:Sudoku.Data.GridTransformations.ClockwiseTable">
            <summary>
            The table of clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridTransformations.CounterClockwiseTable">
            <summary>
            The table of counter-clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridTransformations.PiRotateTable">
            <summary>
            The table of pi-rotation.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorLeftRight(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror left-right the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorTopBottom(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror top-bottom the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorDiagonal(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror diagonal the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.MirrorAntidiagonal(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Mirror anti-diagonal the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.RotateClockwise(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Rotate the grid clockwise.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.RotateCounterClockwise(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Rotate the grid counter-clockwise.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.RotatePi(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Rotate the grid <c><see cref="F:System.Math.PI"/></c> degrees.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.SwapTwoRegions(Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32)">
            <summary>
            Swap to regions.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="region1">The region 1.</param>
            <param name="region2">The region 2.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when two specified region argument is not in valid range (0..27)
            or two regions are not in same region type.
            </exception>
        </member>
        <member name="M:Sudoku.Data.GridTransformations.GetCellOffset(System.Int32,System.Int32)">
            <summary>
            Get the cell offset of the relative position in the specified
            region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <param name="relativePos">The relative position.</param>
            <returns>The cell offset.</returns>
        </member>
        <member name="T:Sudoku.Data.Inference">
            <summary>
            Provides an inference between two nodes.
            </summary>
            <remarks>
            This data structure is so heavy...
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Inference.#ctor(Sudoku.Data.Node,System.Boolean,Sudoku.Data.Node,System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="start">The start node.</param>
            <param name="startIsOn">Indicates whether the start node is on.</param>
            <param name="end">The end node.</param>
            <param name="endIsOn">Indicates whether the end node is on.</param>
        </member>
        <member name="P:Sudoku.Data.Inference.Start">
            <summary>
            Indicates the start node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.End">
            <summary>
            Indicates the end node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.StartIsOn">
            <summary>
            Indicates whether the start node is on.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.EndIsOn">
            <summary>
            Indicates whether the end node is on.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.IsStrong">
            <summary>
            Indicates whether the inference is strong.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.IsWeak">
            <summary>
            Indicates whether the inference is weak.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Inference.Intersection">
            <summary>
            Indicates the intersection of the current inference, which is used
            in searching for eliminations in loops or normal AICs.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Inference.Deconstruct(Sudoku.Data.Node@,Sudoku.Data.Node@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="start">(<see langword="out" /> parameter) The start node.</param>
            <param name="end">(<see langword="out" /> parameter) The end node.</param>
        </member>
        <member name="M:Sudoku.Data.Inference.Deconstruct(Sudoku.Data.FullGridMap@,System.Boolean@,Sudoku.Data.NodeType@,Sudoku.Data.FullGridMap@,System.Boolean@,Sudoku.Data.NodeType@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="startMap">
            (<see langword="out" /> parameter) The candidates in start node.
            </param>
            <param name="startInOn">
            (<see langword="out" /> parameter) Indicates whether the start node is on.
            </param>
            <param name="startNodeType">
            (<see langword="out" /> parameter) Indicates the start node type.
            </param>
            <param name="endMap">
            (<see langword="out" /> parameter) The candidates in end node.
            </param>
            <param name="endIsOn">
            (<see langword="out" /> parameter) Indicates whether the end node is on.
            </param>
            <param name="endNodeType">
            (<see langword="out" /> parameter) Indicates the end node type.
            </param>
        </member>
        <member name="M:Sudoku.Data.Inference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.Equals(Sudoku.Data.Inference)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Inference.op_Equality(Sudoku.Data.Inference,Sudoku.Data.Inference)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Inference.op_Inequality(Sudoku.Data.Inference,Sudoku.Data.Inference)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.IReadOnlyGrid">
            <summary>
            Provides a read-only sudoku grid.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.HasSolved">
            <summary>
            Indicates the grid has already solved. If the value is <see langword="true"/>,
            the grid is solved; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.Item(System.Int32)">
            <summary>
            Gets or sets a digit into a cell.
            </summary>
            <param name="offset">The cell offset you want to get or set.</param>
            <value>
            The digit you want to set. This value should be between 0 and 8.
            In addition, if your input is -1, the candidate mask in this cell
            will be re-computed. If your input is none of them above, this indexer
            will do nothing.
            </value>
            <returns>
            An <see cref="T:System.Int32"/> value indicating the result.
            If the current cell does not have a digit
            (i.e. The cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/>),
            The value will be -1.
            </returns>
        </member>
        <member name="P:Sudoku.Data.IReadOnlyGrid.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a candidate existence case with a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="offset">The cell offset between 0 and 80.</param>
            <param name="digit">The digit between 0 and 8.</param>
            <value>
            The case you want to set. <see langword="true"/> means that this candidate
            does not exist in this current sudoku grid; otherwise, <see langword="false"/>.
            </value>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.Equals(System.Object)">
            <method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true" /> if the specified object is equal to the
			current object; otherwise, <see langword="false" />.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.ToArray">
            <summary>
            Serializes this instance to an array, where all digit value will be stored.
            </summary>
            <returns>
            This array. All elements are between 0 to 9, where 0 means the
            cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/> now.
            </returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetMask(System.Int32)">
            <summary>
            Get a mask of the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetCandidates(System.Int32)">
            <summary>
            Get the candidate mask part of the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The candidate mask.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetCandidatesReversal(System.Int32)">
            <summary>
            Get the candidate mask after reversed all bits mask part
            of the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The candidate mask.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.ToString(System.String)">
            <method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.GetCellStatus(System.Int32)">
            <summary>
            Get a cell status of the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.ToString">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
            <returns>The cloneation.</returns>
        </member>
        <member name="M:Sudoku.Data.IReadOnlyGrid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Node">
            <summary>
            Provides an elementary unit in a chain.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Int32,Sudoku.Data.NodeType)">
            <summary>
            Initializes an instance with a specified candidate and its type.
            </summary>
            <param name="candidate">The candidates.</param>
            <param name="nodeType">The type of this node.</param>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Data.NodeType)">
            <summary>
            Initializes an instance with the specified candidates and its type.
            </summary>
            <param name="candidates">The candidates.</param>
            <param name="nodeType">The type of this node.</param>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(Sudoku.Data.FullGridMap,Sudoku.Data.NodeType)">
            <summary>
            Initializes an instance with the specified map and its type.
            </summary>
            <param name="candidatesMap">The map of candidates.</param>
            <param name="nodeType">The node type.</param>
        </member>
        <member name="P:Sudoku.Data.Node.CandidatesMap">
            <summary>
            Indicates all candidates used in this node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.NodeType">
            <summary>
            Indicates the type of this current node.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Candidates">
            <summary>
            Indicates all candidates used.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Item(System.Int32)">
            <summary>
            Get a candidate offset in the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="P:Sudoku.Data.Node.Item(System.Index)">
            <summary>
            Get a candidate offset in the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.Deconstruct(Sudoku.Data.FullGridMap@,Sudoku.Data.NodeType@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="map">(<see langword="out" /> parameter) The map.</param>
            <param name="nodeType">
            (<see langword="out" /> parameter) Indicates the node type.
            </param>
        </member>
        <member name="M:Sudoku.Data.Node.IsCollideWith(Sudoku.Data.Node)">
            <summary>
            Checks whether all candidates used in this instance is collide with
            the other one. If two candidates hold at least one same candidate,
            we will say the node is collide with the other node (or reversely).
            </summary>
            <param name="other">The other node.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.FullCovered(Sudoku.Data.Node)">
            <summary>
            Checks whether all candidates used in this instance fully covered
            the other one.
            </summary>
            <param name="other">The other node.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(Sudoku.Data.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Node.GetHashCode">
            <inheritdoc/>
            <remarks>
            If you get a derived class, we recommend you override this method
            to describe the type of the node.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Node.ToString">
            <inheritdoc/>
            <remarks>
            If you get a derived class, we recommend you override this method
            to describe the type of the node.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Node.op_Equality(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_Inequality(Sudoku.Data.Node,Sudoku.Data.Node)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Node.op_BitwiseAnd(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates that <paramref name="left"/> and <paramref name="right"/>
            map both contain.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates that satisfied the condition.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_BitwiseOr(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates from <paramref name="left"/> and <paramref name="right"/>
            maps.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_ExclusiveOr(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates that satisfy the formula <c>(a - b) | (b - a)</c>.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.op_Subtraction(Sudoku.Data.Node,Sudoku.Data.Node)">
            <summary>
            Get all candidates that is in the <paramref name="left"/> map but not in
            the <paramref name="right"/> map (i.e. formula <c>a &#38; ~b</c>).
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>All candidates.</returns>
        </member>
        <member name="T:Sudoku.Data.NodeType">
            <summary>
            Indicates a node type in a chain.
            </summary>
        </member>
        <member name="F:Sudoku.Data.NodeType.Empty">
            <summary>
            Indicates an empty node, which is only used for
            keep away from the throwing of exceptions.
            </summary>
        </member>
        <member name="F:Sudoku.Data.NodeType.Candidate">
            <summary>
            Indicates a normal candidate.
            </summary>
        </member>
        <member name="F:Sudoku.Data.NodeType.LockedCandidates">
            <summary>
            Indicates a locked candidates node, which contains at least two cells
            in a same box-row or box-column and contains the same digit.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Stepping.AntiEliminationStep">
            <summary>
            Encapsulates an anti-elimination step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="digit">The digit.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.AntiEliminationStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AntiEliminationStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.AssignmentStep">
            <summary>
            Encapsulates an assignment step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.#ctor(System.Int32,System.Int32,System.Int16,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="digit">The digit.</param>
            <param name="cell">The cell.</param>
            <param name="mask">The old mask to undo.</param>
            <param name="innerMap">
            The map which contains all cells that contains the digit.
            </param>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.Mask">
            <summary>
            Indicates the mask of the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.AssignmentStep.InnerMap">
            <summary>
            Indicates the grid map.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.EliminationStep">
            <summary>
            Encapsulates an elimination step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="digit">The digit.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.EliminationStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.EliminationStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.FixStep">
            <summary>
            Encapsulates a fix step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.#ctor(Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="allCells">All cells to fix.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.FixStep.AllCells">
            <summary>
            Indicates all cells to fix.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.IUndoable">
            <summary>
            Provides a undo-able data structure.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Undo">
            <summary>
            To undo the step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Redo">
            <summary>
            To redo the step.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Stepping.ResetStep">
            <summary>
            Encapsulates a reset step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.#ctor(System.Int16[],System.Int16[])">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="oldMasks">The old grid masks.</param>
            <param name="newMasks">The new grid masks.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.ResetStep.NewMasks">
            <summary>
            Indicates the table of new grid masks.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.ResetStep.OldMasks">
            <summary>
            Indicates the table of old grid masks.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetCellStatusStep">
            <summary>
            Encapsulates a step for setting a cell status.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetCellStatusStep.#ctor(System.Int32,Sudoku.Data.CellStatus,Sudoku.Data.CellStatus)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cell">The cell.</param>
            <param name="oldStatus">The old status.</param>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetCellStatusStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetCellStatusStep.OldStatus">
            <summary>
            Indicates the old status.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetCellStatusStep.NewStatus">
            <summary>
            Indicates the new status.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetCellStatusStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetCellStatusStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetMaskStep">
            <summary>
            Encapsulates a step of setting mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.#ctor(System.Int32,System.Int16,System.Int16)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cell">The cell.</param>
            <param name="oldMask">The old mask.</param>
            <param name="newMask">The new mask.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetMaskStep.Cell">
            <summary>
            Indicates the cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetMaskStep.OldMask">
            <summary>
            Indicates the old mask.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.SetMaskStep.NewMask">
            <summary>
            Indicates the new mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.Step">
            <summary>
            Provides a step used for applying to a sudoku grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.Step.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Apply the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.Step.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Undo the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Data.Stepping.UndoableGrid">
            <summary>
            Provides an undoable sudoku grid. This data structure is nearly same
            as <see cref="T:Sudoku.Data.Grid"/>, but only add two methods <see cref="M:Sudoku.Data.Stepping.UndoableGrid.Undo"/>
            and <see cref="M:Sudoku.Data.Stepping.UndoableGrid.Redo"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.Grid"/>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._undoStack">
            <summary>
            The undo stack.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._redoStack">
            <summary>
            The redo stack.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(System.Int16[])">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(Sudoku.Data.Grid)">
            <summary>
            Initializes an instance with the specified grid (to convert to
            an undoable grid).
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasUndoSteps">
            <summary>
            Indicates whether the grid has any undo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasRedoSteps">
            <summary>
            Indicates whether the grid has any redo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Fix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Unfix">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetCellStatus(System.Int32,Sudoku.Data.CellStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetMask(System.Int32,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Redo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the redo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Undo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the undo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Grid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Grid)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Grid,Sudoku.Data.Stepping.UndoableGrid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Grid)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Data.Stepping.UnfixStep">
            <summary>
            Encapsulates an unfix step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.#ctor(Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="allCells">All cells.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.UnfixStep.AllCells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.SymmetricalType">
            <summary>
            Define a symmetrical type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.None">
            <summary>
            Indicates none of symmetrical type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.Central">
            <summary>
            Indicates the central symmetrical type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.Diagonal">
            <summary>
            Indicates the diagonal symmetrical type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.AntiDiagonal">
            <summary>
            Indicates the anti-diagonal symmetrical type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.XAxis">
            <summary>
            Indicates the x-axis symmetrical type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.YAxis">
            <summary>
            Indicates the y-axis symmetrical type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.AxisBoth">
            <summary>
            Indicates both X-axis and Y-axis type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.DiagonalBoth">
            <summary>
            Indicates both diagonal and anti-diagonal type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetricalType.All">
            <summary>
            Indicates all symmetrical types should be satisfied.
            </summary>
        </member>
        <member name="T:Sudoku.Data.ValueChangedEventArgs">
            <summary>
            Provides the data for the event 'ValueChanged'.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ValueChangedEventArgs.#ctor(System.Int32,System.Int16,System.Int16,System.Int32)">
            <summary>
            Initializes the instance with some data.
            </summary>
            <param name="cellOffset">The cell offset. Must be in range 0 to 80.</param>
            <param name="oldMask">The old mask before modified.</param>
            <param name="newMask">The mask to modify the cell.</param>
            <param name="setValue">
            The value to set on the cell. If the action is deletion,
            this argument should be -1.
            </param>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.CellOffset">
            <summary>
            The cell offset. Must be in range 0 to 80.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.OldMask">
            <summary>
            The old mask before modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.NewMask">
            <summary>
            The new mask after modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ValueChangedEventArgs.SetValue">
            <summary>
            The value. -1 when this value is not required.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ValueChangedEventArgs.Deconstruct(System.Int32@,System.Int16@,System.Int16@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="cellOffset">(<see langword="out" /> parameter) The cell offset.</param>
            <param name="oldMask">(<see langword="out" /> parameter) The old mask.</param>
            <param name="newMask">(<see langword="out" /> parameter) The new mask.</param>
            <param name="setValue">(<see langword="out" /> parameter) the set value.</param>
        </member>
        <member name="T:Sudoku.Data.ValueChangedEventHandler">
            <summary>
            The event handler of value changed.
            </summary>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The data while triggering.</param>
        </member>
        <member name="T:Sudoku.Diagnostics.CodeCounter">
            <summary>
            Encapsulates a code line counter.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeCounter._root">
            <summary>
            The root directory of the project.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.CodeCounter._pattern">
            <summary>
            The filter pattern.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified root directory.
            </summary>
            <param name="root">The directory.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance with the specified root directory and the filter pattern.
            </summary>
            <param name="root">The root directory.</param>
            <param name="filterPattern">
            The filter pattern.
            </param>
            <example>
            For example, you can write code like this:
            <code>
            var cc = new CodeCounter(<br/>
                root: @"C:\Users\HelloWorld\Desktop\Project",<br/>
                filterPattern: @".+\.cs$");
            </code>
            </example>
        </member>
        <member name="P:Sudoku.Diagnostics.CodeCounter.FileList">
            <summary>
            All file paths at this root directory.
            </summary>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.CountCodeLines(System.Int32@)">
            <summary>
            Count on code lines in all files in the specified root directory.
            </summary>
            <param name="filesCount">
            (<see langword="out"/> parameter) The number of files searched.
            </param>
            <returns>The number of lines.</returns>
        </member>
        <member name="M:Sudoku.Diagnostics.CodeCounter.GetAllFilesRecursively(System.IO.DirectoryInfo)">
            <summary>
            Get all files in the specified directory recursively.
            </summary>
            <param name="directory">The directory information instance.</param>
        </member>
        <member name="T:Sudoku.Diagnostics.ColorConsole">
            <summary>
            Provides a <see cref="T:System.Console"/> that output the strings with colors.
            </summary>
            <seealso cref="T:System.Console"/>
        </member>
        <member name="M:Sudoku.Diagnostics.ColorConsole.WriteLine(System.Object,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the text representation of the specified object, followed by the
            current line terminator, to the standard output stream.
            </summary>
            <param name="obj">The object.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:Sudoku.Diagnostics.ColorConsole.Write(System.Object,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the text representation of the specified object,
            to the standard output stream.
            </summary>
            <param name="obj">The object.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="T:Sudoku.Diagnostics.Solution">
            <summary>
            Provides the solution constant values.
            </summary>
        </member>
        <member name="F:Sudoku.Diagnostics.Solution.PathRoot">
            <summary>
            The root path of this whole solution.
            </summary>
        </member>
        <member name="T:Sudoku.Drawing.View">
            <summary>
            Encapsulates a view when displaying the information on forms.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.View.#ctor(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.IReadOnlyList{Sudoku.Data.Inference})">
            <summary>
            Initializes an instance with information.
            </summary>
            <param name="cellOffsets">
            The list of pairs of identifier and cell offset.
            </param>
            <param name="candidateOffsets">
            The list of pairs of identifier and candidate offset.
            </param>
            <param name="regionOffsets">
            The list of pairs of identifier and region offset.
            </param>
            <param name="links">The list of links.</param>
        </member>
        <member name="P:Sudoku.Drawing.View.CellOffsets">
            <summary>
            All cell offsets.
            </summary>
            <remarks>
            This property is a list of pairs of identifier and cell offsets,
            where the identifier is an <see cref="T:System.Int32"/> value that can tell
            all cell offsets' colors.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.View.CandidateOffsets">
            <summary>
            All candidate offsets.
            </summary>
            <remarks>
            This property is a list of pairs of identifier and candidate offsets,
            where the identifier is an <see cref="T:System.Int32"/> value that can tell
            all cell offsets' colors.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.View.RegionOffsets">
            <summary>
            All region offsets.
            </summary>
            <remarks>
            This property is a list of pairs of identifier and region offsets,
            where the identifier is an <see cref="T:System.Int32"/> value that can tell
            all cell offsets' colors.
            </remarks>
        </member>
        <member name="P:Sudoku.Drawing.View.Links">
            <summary>
            All link masks.
            </summary>
        </member>
        <member name="T:Sudoku.IO.GridIO">
            <summary>
            Provides with I/O operations for <see cref="T:Sudoku.Data.Grid"/>s and <see cref="T:Sudoku.Data.IReadOnlyGrid"/>s.
            </summary>
            <seealso cref="T:Sudoku.Data.Grid"/>
            <seealso cref="T:Sudoku.Data.IReadOnlyGrid"/>
        </member>
        <member name="M:Sudoku.IO.GridIO.WriteToFile(Sudoku.Data.IReadOnlyGrid,System.String,System.String)">
            <summary>
            Write the grid to the file.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="path">The path.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Sudoku.IO.GridIO.WriteToFileAsync(Sudoku.Data.IReadOnlyGrid,System.String,System.String)">
            <summary>
            Write the grid to the file.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="path">The path.</param>
            <param name="format">The format.</param>
            <returns>The task of this operation.</returns>
        </member>
        <member name="T:Sudoku.MultipleSolutionsException">
            <summary>
            Represents an error that the puzzle has multiple solutions while solving.
            </summary>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.MultipleSolutionsException.#ctor(Sudoku.Data.IReadOnlyGrid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.MultipleSolutionsException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:Sudoku.NameAttribute">
            <summary>
            Mark on a field of an enumeration type to set a custom name to output.
            </summary>
        </member>
        <member name="M:Sudoku.NameAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Sudoku.NameAttribute.Name">
            <summary>
            Indicates the name.
            </summary>
        </member>
        <member name="T:Sudoku.NoSolutionException">
            <summary>
            Represents an error that the puzzle has no solution while solving.
            </summary>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.NoSolutionException.#ctor(Sudoku.Data.IReadOnlyGrid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.NoSolutionException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.NoSolutionException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:Sudoku.SudokuRuntimeException">
            <summary>
            Represents an error that the puzzle has no solution while solving.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.SudokuRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Throwing">
            <summary>
            Provides operations for throwing exceptions.
            </summary>
        </member>
        <member name="P:Sudoku.Throwing.ImpossibleCase">
            <summary>
            <para>
            Indicates an exception throwing when the case is impossible
            in switch expressions or switch-case clauses.
            </para>
            <para>
            This property will be used as a placeholder when expressions
            generate a warning (CS8509).
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Throwing.FormatError">
            <summary>
            Indicates an exception throwing when the format string is invalid.
            </summary>
        </member>
        <member name="M:Sudoku.Throwing.ImpossibleCaseWithMessage(System.String)">
            <summary>
            Indicates an exception throwing when the case is impossible
            in switch expressions or switch-case clauses.
            </summary>
            <param name="message">The specified message to display.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Sudoku.Throwing.ParsingError``1(System.String)">
            <summary>
            Indicates an exception throwing when the parsing is failed.
            </summary>
            <typeparam name="TTarget">The target type to parse.</typeparam>
            <param name="paramName">The name of the parameter.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Sudoku.Throwing.FormatErrorWithMessage(System.String,System.String)">
            <summary>
            Indicates an exception throwing when the format string is error.
            </summary>
            <param name="message">The inner message to display.</param>
            <param name="paramName">The name of format string parameter.</param>
            <returns>The exception.</returns>
        </member>
        <member name="T:Sudoku.WrongHandlingException">
            <summary>
            Represents an error that the puzzle has wrong handling while solving with
            manual logic tools.
            </summary>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.WrongHandlingException.#ctor(Sudoku.Data.IReadOnlyGrid,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.WrongHandlingException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.WrongHandlingException.Message">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Generic.Bag`1">
            <summary>
            <para>
            Encapsulates a collection which only allows user add elements
            and get them, but cannot remove any elements in this collection
            (i.e. Only-in collection).
            </para>
            </summary>
            <typeparam name="T">
            The type of each element. The type should not be <see langword="null"/>.
            </typeparam>
        </member>
        <member name="F:System.Collections.Generic.Bag`1._internalList">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.#ctor">
            <summary>
            Initializes a default <see cref="T:System.Collections.Generic.Bag`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.#ctor(`0)">
            <summary>
            Initializes an instance with an element.
            </summary>
            <param name="element">An element.</param>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes an instance with the specified elements.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:System.Collections.Generic.Bag`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Bag`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a serial of elements.
            </summary>
            <param name="items">A serial of elements.</param>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Bag`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Generic.IBag`1">
            <summary>
            Provides a basic only-in collection.
            </summary>
            <typeparam name="T">
            The type of each element. The type should not be <see langword="null"/>.
            </typeparam>
        </member>
        <member name="P:System.Collections.Generic.IBag`1.Item(System.Int32)">
            <summary>
            To get an element with the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.Add(`0)">
            <summary>
            Add the element into the collection.
            </summary>
            <param name="item">The element.</param>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.Clear">
            <summary>
            To clear all elements.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.Contains(`0)">
            <summary>
            Indicates whether the collection contains the specified item.
            </summary>
            <param name="item">The element.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.AddIfDoesNotContain(`0)">
            <summary>
            Adds an object into the end of the <see cref="T:System.Collections.Generic.IBag`1"/>
            when the specified list does not contain the specified element.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Generic.IBag`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a series of elements to the <see cref="T:System.Collections.Generic.IBag`1"/>.
            </summary>
            <param name="items">The elements to add.</param>
        </member>
        <member name="T:System.Linq.EnumerableEx">
            <summary>
            Provides a set of static methods for querying objects that implement
            <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            This class has the same function and status with <see cref="T:System.Linq.Enumerable"/>.
            </remarks>
            <seealso cref="T:System.Collections.IEnumerable"/>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:System.Linq.EnumerableEx.GetElementByMinSelector``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable{``1}})">
            <summary>
            Get the element whose selection is the minimal one.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <typeparam name="TComparable">The comparing type.</typeparam>
            <param name="this">The elements to search the minimal one.</param>
            <param name="selector">The selector.</param>
            <returns>
            The result value. If the collection does not have a minimal element,
            the result will be the default value, where it will be <see langword="null"/>, which
            is decided in the element type.
            </returns>
        </member>
        <member name="M:System.Linq.EnumerableEx.HasOnlyOneElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the specified list has only one element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value
            as an existing instance. Different than <see cref="T:System.ICloneable"/>, the cloneation
            has the same type with this existing instance.
            </summary>
            <typeparam name="T">
            The type of this instance. This type should be only a class because the cloning
            operation is needed only in reference types, while the value types will be passed
            by value, at this time all value members (fields and properties) will be copied
            one by one.
            </typeparam>
        </member>
        <member name="M:System.ICloneable`1.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
            <returns>
            The instance having the same type with the base one. Because the type is
            used and defined before using this method, so the return type will be
            never <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.ICloneable`1.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:System.PrimaryElementTuple`2">
            <summary>
            Provides a tuple with a primary element.
            </summary>
            <typeparam name="T1">The type of value 1.</typeparam>
            <typeparam name="T2">The type of value 2.</typeparam>
        </member>
        <member name="M:System.PrimaryElementTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes an instance with two values, and the first one
            is the primary key.
            </summary>
            <param name="v1">The value 1.</param>
            <param name="v2">The value 2.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`2.#ctor(`0,`1,System.Int32)">
            <summary>
            Initializes an instance with two values and a primary key.
            </summary>
            <param name="v1">The value 1.</param>
            <param name="v2">The value 2.</param>
            <param name="primaryElementKey">The primary key.</param>
        </member>
        <member name="P:System.PrimaryElementTuple`2.Value1">
            <summary>
            Indicates the value 1.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`2.Value2">
            <summary>
            Indicates the value 2.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`2.PrimaryElementKey">
            <summary>
            Indicates the index of the primary value.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`2.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.PrimaryElementTuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.PrimaryElementTuple`2.Deconstruct(`0@,`1@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="v1">(<see langword="out" /> parameter) The value 1.</param>
            <param name="v2">(<see langword="out" /> parameter) The value 2.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`2.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:System.PrimaryElementTuple`3">
            <summary>
            Provides a tuple with a primary element.
            </summary>
            <typeparam name="T1">The type of value 1.</typeparam>
            <typeparam name="T2">The type of value 2.</typeparam>
            <typeparam name="T3">The type of value 3.</typeparam>
        </member>
        <member name="M:System.PrimaryElementTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes an instance with three values, and the first one
            is the primary key.
            </summary>
            <param name="v1">The value 1.</param>
            <param name="v2">The value 2.</param>
            <param name="v3">The value 3.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`3.#ctor(`0,`1,`2,System.Int32)">
            <summary>
            Initializes an instance with three values and a primary key.
            </summary>
            <param name="v1">The value 1.</param>
            <param name="v2">The value 2.</param>
            <param name="v3">The value 3.</param>
            <param name="primaryElementKey">The primary key.</param>
        </member>
        <member name="P:System.PrimaryElementTuple`3.Value1">
            <summary>
            Indicates the value 1.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.Value2">
            <summary>
            Indicates the value 2.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.Value3">
            <summary>
            Indicates the value 3.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.PrimaryElementKey">
            <summary>
            Indicates the index of the primary value.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`3.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.PrimaryElementTuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.PrimaryElementTuple`3.Deconstruct(`0@,`1@,`2@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="v1">(<see langword="out" /> parameter) The value 1.</param>
            <param name="v2">(<see langword="out" /> parameter) The value 2.</param>
            <param name="v3">(<see langword="out" /> parameter) The value 3.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`3.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:System.PrimaryElementTuple`4">
            <summary>
            Provides a tuple with a primary element.
            </summary>
            <typeparam name="T1">The type of value 1.</typeparam>
            <typeparam name="T2">The type of value 2.</typeparam>
            <typeparam name="T3">The type of value 3.</typeparam>
            <typeparam name="T4">The type of value 4.</typeparam>
        </member>
        <member name="M:System.PrimaryElementTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes an instance with three values, and the first one
            is the primary key.
            </summary>
            <param name="v1">The value 1.</param>
            <param name="v2">The value 2.</param>
            <param name="v3">The value 3.</param>
            <param name="v4">The value 4.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`4.#ctor(`0,`1,`2,`3,System.Int32)">
            <summary>
            Initializes an instance with three values and a primary key.
            </summary>
            <param name="v1">The value 1.</param>
            <param name="v2">The value 2.</param>
            <param name="v3">The value 3.</param>
            <param name="v4">The value 4.</param>
            <param name="primaryElementKey">The primary key.</param>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value1">
            <summary>
            Indicates the value 1.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value2">
            <summary>
            Indicates the value 2.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value3">
            <summary>
            Indicates the value 3.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.Value4">
            <summary>
            Indicates the value 4.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.PrimaryElementKey">
            <summary>
            Indicates the index of the primary value.
            </summary>
        </member>
        <member name="P:System.PrimaryElementTuple`4.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.PrimaryElementTuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.PrimaryElementTuple`4.Deconstruct(`0@,`1@,`2@,`3@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="v1">(<see langword="out" /> parameter) The value 1.</param>
            <param name="v2">(<see langword="out" /> parameter) The value 2.</param>
            <param name="v3">(<see langword="out" /> parameter) The value 3.</param>
            <param name="v4">(<see langword="out" /> parameter) The value 4.</param>
        </member>
        <member name="M:System.PrimaryElementTuple`4.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
    </members>
</doc>
