<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Core</name>
    </assembly>
    <members>
        <member name="T:Sudoku.AssemblyInitializer">
            <summary>
            Indicates the assembly initializer.
            </summary>
        </member>
        <member name="M:Sudoku.AssemblyInitializer.Initialize">
            <summary>
            The initialize method.
            </summary>
        </member>
        <member name="T:Sudoku.Constants.Processings">
            <summary>
            The tables for grid processing. All fields will be initialized in
            the static constructor.
            </summary>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetRegion(System.Int32,Sudoku.Data.RegionLabel)">
            <summary>
            Get the region index for the specified cell and the region type.
            </summary>
            <param name="cell">The cell.</param>
            <param name="label">The label.</param>
            <returns>The region index (<c>0..27</c>).</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.GetLabel(System.Int32)">
            <summary>
            Get the label in the specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The region label.</returns>
        </member>
        <member name="M:Sudoku.Constants.Processings.Deconstruct(Sudoku.Data.SudokuGrid@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap[]@,Sudoku.Data.GridMap[]@,Sudoku.Data.GridMap[]@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <param name="empty">(<see langword="out"/> parameter) The map of all empty cells.</param>
            <param name="bivalue">(<see langword="out"/> parameter) The map of all bi-value cells.</param>
            <param name="candidates">
            (<see langword="out"/> parameter) The map of all cells that contain the candidate of that digit.
            </param>
            <param name="digits">
            (<see langword="out"/> parameter) The map of all cells that contain the candidate of that digit
            or that value in given or modifiable.
            </param>
            <param name="values">
            (<see langword="out"/> parameter) The map of all cells that is the given or modifiable value,
            and the digit is the specified one.
            </param>
        </member>
        <member name="F:Sudoku.Constants.Processings.BlockTable">
            <summary>
            The block table.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Processings.RowTable">
            <summary>
            The row table.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Processings.ColumnTable">
            <summary>
            The column table.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Processings.Peers">
            <summary>
            <para>Indicates a table for each cell's peers.</para>
            </summary>
            <example>
            '<c>Peers[0]</c>': the array of peers for the cell 0 (row 1 column 1).
            </example>
        </member>
        <member name="F:Sudoku.Constants.Processings.RegionCells">
            <summary>
            <para>
            The map of all cell offsets in its specified region.
            The indices is between 0 and 26, where <c>0..9</c> is for block 1 to 9,
            <c>9..18</c> is for row 1 to 9 and <c>18..27</c> is for column 1 to 9.
            </para>
            </summary>
            <example>
            '<c>RegionTable[0]</c>': all cell offsets in the region 0 (block 1).
            </example>
        </member>
        <member name="F:Sudoku.Constants.Processings.RegionMaps">
            <summary>
            Indicates all grid maps that a grid contains.
            </summary>
            <example>
            '<c>RegionMaps[0]</c>': The map containing all cells in the block 1.
            </example>
        </member>
        <member name="F:Sudoku.Constants.Processings.PeerMaps">
            <summary>
            Indicates the peer maps using <see cref="F:Sudoku.Constants.Processings.Peers"/> table.
            </summary>
            <seealso cref="F:Sudoku.Constants.Processings.Peers"/>
        </member>
        <member name="F:Sudoku.Constants.Processings.IntersectionMaps">
            <summary>
            <para>
            Indicates all maps that forms the each intersection. The pattern will be like:
            <code>
            .-------.-------.-------.
            | C C C | A A A | A A A |
            | B B B | . . . | . . . |
            | B B B | . . . | . . . |
            '-------'-------'-------'
            </code>
            </para>
            <para>
            In addition, in this data structure, "<c>CoverSet</c>" is a block and "<c>BaseSet</c>" is a line.
            </para>
            </summary>
        </member>
        <member name="M:Sudoku.Constants.Processings.#cctor">
            <inheritdoc cref="T:Sudoku.DocComments.StaticConstructor"/>
            <remarks>
            The initialization order between static constructor and static fields
            may be annoying, so I use static constructor.
            </remarks>
        </member>
        <member name="T:Sudoku.Constants.Processings.ValueTupleComparer">
            <summary>
            The inner comparer of <see cref="T:System.ValueTuple`2"/> used in
            the field <see cref="F:Sudoku.Constants.Processings.IntersectionMaps"/>.
            </summary>
            <seealso cref="F:Sudoku.Constants.Processings.IntersectionMaps"/>
        </member>
        <member name="M:Sudoku.Constants.Processings.ValueTupleComparer.Equals(System.ValueTuple{System.Byte,System.Byte},System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Constants.Processings.ValueTupleComparer.GetHashCode(System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Constants.RegularExpressions">
            <summary>
            The class that stores all regular expressions used in this solution.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridCandidates">
            <summary>
            Indicates each candidates group in the PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ExtendedSusserEliminations">
            <summary>
            Indicates the eliminations in the extended susser format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.SimpleTable">
            <summary>
            Indicates the normal sudoku grid table (with only blank cells and numbers).
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Susser">
            <summary>
            Indicates the susser format.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.DigitOrEmptyCell">
            <summary>
            Indicates the regular expression of a digit or empty cell placeholder.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridUnit_Old">
            <summary>
            Indicates the unit in the basic PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridUnit">
            <summary>
            Indicates the unit in the extended PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.ThreeDigitsCandidate">
            <summary>
            Indicates the candidate unit that used in the elimination list.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.PmGridCandidatesUnit">
            <summary>
            Indicates the candidate list unit in the PM grid.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Cell">
            <summary>
            Indicates a cell string.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Region">
            <summary>
            Indicates the region string.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Candidate">
            <summary>
            Indicates a candidate string.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.Digit">
            <summary>
            Indicates the regular expression to match a digit.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.RegularExpressions.NullLinesOrHeaderSpaces">
            <summary>
            Indicates all null lines and header spaces in their lines.
            </summary>
        </member>
        <member name="T:Sudoku.Constants.Values">
            <summary>
            The values used in the whole solution.
            </summary>
        </member>
        <member name="F:Sudoku.Constants.Values.BooleanValues">
            <summary>
            The two <see cref="T:System.Boolean"/> values used in traversing.
            </summary>
        </member>
        <member name="T:Sudoku.Data.BitSubsetsGenerator">
            <summary>
            Encapsulates a bit combination generator.
            </summary>
            <remarks>
            You can use this struct like this:
            <code>
            foreach (short mask in new BitSubsetsGenerator(9, 3))
            {
                // Do something to use the mask.
            }
            </code>
            </remarks>
        </member>
        <member name="F:Sudoku.Data.BitSubsetsGenerator._enumerator">
            <summary>
            The inner enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Equals(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="T:Sudoku.Data.BitSubsetsGenerator.Enumerator">
            <summary>
            Indicates the enumerator of the current instance.
            </summary>
        </member>
        <member name="F:Sudoku.Data.BitSubsetsGenerator.Enumerator._mask">
            <summary>
            The mask.
            </summary>
        </member>
        <member name="F:Sudoku.Data.BitSubsetsGenerator.Enumerator._isLast">
            <summary>
            Indicates whether that the value is the last one.
            </summary>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="P:Sudoku.Data.BitSubsetsGenerator.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.BitSubsetsGenerator.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.Dispose">
            <inheritdoc/>
            <remarks>Here will do nothing.</remarks>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.BitSubsetsGenerator.Enumerator.Reset">
            <inheritdoc/>
            <remarks>Here will do nothing.</remarks>
        </member>
        <member name="T:Sudoku.Data.CellStatus">
            <summary>
            Represents a cell status.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Undefined">
            <summary>
            Indicates the cell status is invalid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Empty">
            <summary>
            Indicates that the cell is empty.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Modifiable">
            <summary>
            Indicates that the cell has already filled a value,
            but the value doesn't exist when the puzzle begins.
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.Given">
            <summary>
            Indicates that the cell has already filled a value,
            and the value does exist when the puzzle begins. In
            other words, the value is a given (or a hint, clue, etc.).
            </summary>
        </member>
        <member name="F:Sudoku.Data.CellStatus.All">
            <summary>
            Indicates all cases of cell statuses.
            </summary>
            <remarks>
            You had better use this field on cases when processing
            the bitwise operations in a <see cref="T:Sudoku.Data.SudokuGrid"/>.
            This field should not be used to process cell status comparison.
            </remarks>
            <seealso cref="M:Sudoku.Data.SudokuGrid.GetStatus(System.Int32)"/>
        </member>
        <member name="T:Sudoku.Data.Collections.ConclusionCollection">
            <summary>
            Provides a collection that contains the conclusions.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.ConclusionCollection._collection">
            <summary>
            The internal collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(Sudoku.Data.Conclusion@)">
            <summary>
            Initializes an instance with one conclusion.
            </summary>
            <param name="conclusion">(<see langword="in"/> parameter) The conclusion.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(System.Span{Sudoku.Data.Conclusion}@)">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">(<see langword="in"/> parameter) The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.#ctor(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.ConclusionCollection.Cells">
            <summary>
            Indicates all cells used in this conclusions list.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Collections.ConclusionCollection.Digits">
            <summary>
            Indicates all digits used in this conclusions list, represented as a mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.Equals(Sudoku.Data.Collections.ConclusionCollection@)">
            <inheritdoc cref="M:System.IValueEquatable`1.Equals(`0@)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.ToString(System.Boolean,System.String)">
            <summary>
            Converts the current instance to <see cref="T:System.String"/> with the specified separator.
            </summary>
            <param name="shouldSort">Indicates whether the specified collection should be sorted first.</param>
            <param name="separator">The separator.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.op_Equality(Sudoku.Data.Collections.ConclusionCollection@,Sudoku.Data.Collections.ConclusionCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.ConclusionCollection.op_Inequality(Sudoku.Data.Collections.ConclusionCollection@,Sudoku.Data.Collections.ConclusionCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.Collections.DigitCollection">
            <summary>
            Indicates a collection that contains the several digits.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.DigitCollection._mask">
            <summary>
            Indicates the inner mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified digit.
            </summary>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Initializes an instance with the specified digits.
            </summary>
            <param name="digits">(<see langword="in"/> parameter) The digits.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified digits.
            </summary>
            <param name="digits">The digits.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.#ctor(System.Int16)">
            <summary>
            Initializes the collection using a mask.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.DigitCollection.Count">
            <summary>
            Get the number of digits in the collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Equals(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Equals(Sudoku.Data.Collections.DigitCollection@)">
            <inheritdoc cref="M:System.IValueEquatable`1.Equals(`0@)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.Contains(System.Int32)">
            <summary>
            Indicates whether the specified collection contains the digit.
            </summary>
            <param name="digit">The digit.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.ToString(System.String)">
            <inheritdoc cref="M:Sudoku.DocComments.Formattable.ToString(System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_OnesComplement(Sudoku.Data.Collections.DigitCollection@)">
            <summary>
            Reverse all statuses, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="collection">The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_Equality(Sudoku.Data.Collections.DigitCollection@,Sudoku.Data.Collections.DigitCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.DigitCollection.op_Inequality(Sudoku.Data.Collections.DigitCollection@,Sudoku.Data.Collections.DigitCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.Collections.LinkCollection">
            <summary>
            Provides a collection that contains the chain links.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.LinkCollection._collection">
            <summary>
            The internal collection.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.#ctor(Sudoku.Data.Link@)">
            <summary>
            Initializes an instance with one link.
            </summary>
            <param name="link">(<see langword="in"/> parameter) The chain link.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.#ctor(System.Span{Sudoku.Data.Link}@)">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">(<see langword="in"/> parameter) The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.#ctor(System.Collections.Generic.IEnumerable{Sudoku.Data.Link})">
            <summary>
            Initializes an instance with the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.Equals(Sudoku.Data.Collections.LinkCollection@)">
            <inheritdoc cref="M:System.IValueEquatable`1.Equals(`0@)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.op_Equality(Sudoku.Data.Collections.LinkCollection@,Sudoku.Data.Collections.LinkCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.LinkCollection.op_Inequality(Sudoku.Data.Collections.LinkCollection@,Sudoku.Data.Collections.LinkCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.Collections.RegionCollection">
            <summary>
            Indicates a region collection.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Collections.RegionCollection._mask">
            <summary>
            The inner mask.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.Int32)">
            <summary>
            Initializes an empty collection and add one region into the list.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Initializes an instance with the specified regions.
            </summary>
            <param name="regions">(<see langword="in"/> parameter) The regions.</param>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="P:Sudoku.Data.Collections.RegionCollection.Count">
            <summary>
            Indicates the number of regions that contain in this collection.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Collections.RegionCollection.Region(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating whether the bit of the corresponding specified region
            is set <see langword="true"/>.
            </summary>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.Equals(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.Equals(Sudoku.Data.Collections.RegionCollection@)">
            <inheritdoc cref="M:System.IValueEquatable`1.Equals(`0@)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.ToSimpleString">
            <summary>
            To string but only output the labels ('r', 'c' or 'b').
            </summary>
            <returns>The labels.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.GetLabel(System.Int32)">
            <summary>
            Get the label of each region.
            </summary>
            <param name="index">The index.</param>
            <returns>The label.</returns>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.op_Equality(Sudoku.Data.Collections.RegionCollection@,Sudoku.Data.Collections.RegionCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Collections.RegionCollection.op_Inequality(Sudoku.Data.Collections.RegionCollection@,Sudoku.Data.Collections.RegionCollection@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.Conclusion">
            <summary>
            Encapsulates a conclusion representation while solving in logic.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Conclusion.#ctor(Sudoku.Data.ConclusionType,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with a conclusion type, a cell offset and a digit.
            </summary>
            <param name="conclusionType">The conclusion type.</param>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.#ctor(Sudoku.Data.ConclusionType,System.Int32)">
            <summary>
            Initializes an instance with a conclusion type and a candidate offset.
            </summary>
            <param name="conclusionType">The conclusion type.</param>
            <param name="candidate">The candidate offset.</param>
        </member>
        <member name="P:Sudoku.Data.Conclusion.Cell">
            <summary>
            The cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.Digit">
            <summary>
            The digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Conclusion.ConclusionType">
            <summary>
            The conclusion type to control the action of applying.
            If the type is <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>,
            this conclusion will be set value (Set a digit into a cell);
            otherwise, a candidate will be removed.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Conclusion.ApplyTo(Sudoku.Data.SudokuGrid@)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">(<see langword="ref"/> parameter) The grid.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified conclusion type is neither <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>
            nor <see cref="F:Sudoku.Data.ConclusionType.Elimination"/>.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Deconstruct(Sudoku.Data.ConclusionType@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="conclusionType">(<see langword="out"/> parameter) The type of this conclusion.</param>
            <param name="candidate">(<see langword="out"/> parameter) The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Deconstruct(Sudoku.Data.ConclusionType@,System.Int32@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="conclusionType">(<see langword="out"/> parameter) The type of this conclusion.</param>
            <param name="cell">(<see langword="out"/> parameter) The cell.</param>
            <param name="digit">(<see langword="out"/> parameter) The digit.</param>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.Equals(Sudoku.Data.Conclusion@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the current conclusion type is invalid (neither <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>
            nor <see cref="F:Sudoku.Data.ConclusionType.Elimination"/>.
            </exception>
            <seealso cref="P:Sudoku.Data.Conclusion.ConclusionType"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_Equality(Sudoku.Data.Conclusion@,Sudoku.Data.Conclusion@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Conclusion.op_Inequality(Sudoku.Data.Conclusion@,Sudoku.Data.Conclusion@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.ConclusionType">
            <summary>
            Provides a conclusion type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ConclusionType.Assignment">
            <summary>
            Indicates the conclusion is a value filling into a cell.
            </summary>
        </member>
        <member name="F:Sudoku.Data.ConclusionType.Elimination">
            <summary>
            Indicates the conclusion is a candidate being remove from a cell.
            </summary>
        </member>
        <member name="T:Sudoku.Data.ConjugatePair">
            <summary>
            Encapsulates a conjugate pair.
            </summary>
            <remarks>
            <b>Conjugate pair</b> is a candidate pair (two candidates),
            these two candidates is in the same region where all cells has only
            two position can fill this candidate.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with from and to cell offset
            and a digit.
            </summary>
            <param name="from">The from cell.</param>
            <param name="to">The to cell.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.#ctor(Sudoku.Data.GridMap@,System.Int32)">
            <summary>
            Initializes an instance with the map and the digit.
            </summary>
            <param name="map">(<see langword="in"/> parameter) The map.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.From">
            <summary>
            Indicates the 'from' cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.To">
            <summary>
            Indicates the 'to' cell.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.Line">
            <summary>
            Indicates the line that two cells lie in.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.Region">
            <summary>
            Indicates the region that two cells lie in.
            </summary>
        </member>
        <member name="P:Sudoku.Data.ConjugatePair.Map">
            <summary>
            Indicates the inner map.
            </summary>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.Equals(Sudoku.Data.ConjugatePair@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.op_Equality(Sudoku.Data.ConjugatePair@,Sudoku.Data.ConjugatePair@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.ConjugatePair.op_Inequality(Sudoku.Data.ConjugatePair@,Sudoku.Data.ConjugatePair@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.Extensions.CellParser">
            <summary>
            Encapsulates the cell parser that converts the string to an <see cref="T:System.Int32"/> value that
            represents a cell offset.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Extensions.CellParser.TryParse(System.String@,System.Byte@)">
            <summary>
            Try to parse the string, and converts the instance to a cell instance represented
            by a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="str">(<see langword="in"/> parameter) The string.</param>
            <param name="cell">(<see langword="out"/> parameter) The cell.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.CellParser.TryParse(System.String@,Sudoku.Data.GridMap@)">
            <summary>
            Try to parse the string, and converts the instance to cells instance represented
            by <see cref="T:System.Byte"/> values.
            </summary>
            <param name="str">(<see langword="in"/> parameter) The string.</param>
            <param name="cells">(<see langword="out"/> parameter) The cells.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.CellParser.TryParse(System.String@,Sudoku.Data.GridMap@,System.Char[])">
            <summary>
            Try to parse the string, and converts the instance to cells instance represented
            by <see cref="T:System.Byte"/> values, with the specified separators.
            </summary>
            <param name="str">(<see langword="in"/> parameter) The string.</param>
            <param name="cells">(<see langword="out"/> parameter) The cell.</param>
            <param name="separators">(<see langword="params"/> parameter) All separators.</param>
            <returns>The <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.SudokuGridEx">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Data.SudokuGrid"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.SudokuGrid"/>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridEx.Exists(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            <para>
            Indicates whether the specified grid contains the digit in the specified cell.
            </para>
            <para>
            The return value will be <see langword="true"/> if and only if
            the cell is empty and contains that digit.
            </para>
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>
            A <see cref="T:System.Boolean"/>? value indicating that.
            </returns>
            <remarks>
            <para>
            The cases of the return value are below:
            <list type="table">
            <item>
            <term><c><see langword="true"/></c></term>
            <description>
            The cell is an empty cell <b>and</b> contains the specified digit.
            </description>
            </item>
            <item>
            <term><c><see langword="false"/></c></term>
            <description>
            The cell is an empty cell <b>but doesn't</b> contain the specified digit.
            </description>
            </item>
            <item>
            <term><c><see langword="null"/></c></term>
            <description>The cell is <b>not</b> an empty cell.</description>
            </item>
            </list>
            </para>
            <para>
            Note that the method will return a <see cref="T:System.Boolean"/>?, so you should use the code
            <code>grid.Exists(candidate) is true</code>
            or
            <code>grid.Exists(candidate) == true</code>
            to decide whether a condition is true.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridEx.Duplicate(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            Check whether the digit will be duplicate of its peers when it is filled in the specified cell.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Data.Extensions.SudokuGridTransformations">
            <summary>
            Provides a series of methods for <see cref="T:Sudoku.Data.SudokuGrid"/>
            using in transformations.
            </summary>
            <seealso cref="T:Sudoku.Data.SudokuGrid"/>
        </member>
        <member name="F:Sudoku.Data.Extensions.SudokuGridTransformations.ClockwiseTable">
            <summary>
            The table of clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Extensions.SudokuGridTransformations.CounterClockwiseTable">
            <summary>
            The table of counter-clockwise rotation.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Extensions.SudokuGridTransformations.PiRotateTable">
            <summary>
            The table of pi-rotation.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.MirrorLeftRight(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror left-right the grid.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.MirrorTopBottom(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror top-bottom the grid.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.MirrorDiagonal(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror diagonal the grid.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.Transpose(Sudoku.Data.SudokuGrid@)">
            <summary>
            Transpose the grid.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.MirrorAntidiagonal(Sudoku.Data.SudokuGrid@)">
            <summary>
            Mirror anti-diagonal the grid.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result grid.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.RotateClockwise(Sudoku.Data.SudokuGrid@)">
            <summary>
            Rotate the grid clockwise.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.RotateCounterclockwise(Sudoku.Data.SudokuGrid@)">
            <summary>
            Rotate the grid counterclockwise.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.RotatePi(Sudoku.Data.SudokuGrid@)">
            <summary>
            Rotate the grid <c><see cref="F:System.Math.PI"/></c> degrees.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.Extensions.SudokuGridTransformations.SwapTwoRegions(Sudoku.Data.SudokuGrid@,System.Int32,System.Int32)">
            <summary>
            Swap to regions.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The grid.</param>
            <param name="region1">The region 1.</param>
            <param name="region2">The region 2.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when two specified region argument is not in valid range (0..27)
            or two regions are not in same region type.
            </exception>
        </member>
        <member name="T:Sudoku.Data.GridFormattingOptions">
            <summary>
            Provides a grid format option.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.None">
            <summary>
            Indicates the default settings (a single-line string text).
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.WithModifiers">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in ':candidate list'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c>&lt;digit&gt;</c>'
            instead of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            See file <i><a href="#">How to use 'Grid' class.md</a></i> for more information.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.DotPlaceholder">
            <summary>
            Indicates the placeholder must be '.' instead of '0'.
            If the value is <see langword="true"/>, the placeholder will be '.';
            otherwise, '0'.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.Multiline">
            <summary>
            Indicates the output should be multi-line.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.Sukaku">
            <summary>
            Indicates the output will be sukaku format.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridFormattingOptions.Excel">
            <summary>
            Indicates the output will be Excel format.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridMap">
            <summary>
            Encapsulates a binary series of cell status table.
            </summary>
            <remarks>
            The instance stores two <see cref="T:System.Int64"/> values, consisting of 81 bits,
            where <see langword="true"/> bit (1) is for the cell having that digit,
            and the <see langword="false"/> bit (0) is for the cell not containing
            the digit.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.GridMap.Empty">
            <summary>
            <para>Indicates an empty instance (all bits are 0).</para>
            <para>
            I strongly recommend you <b>should</b> use this instance instead of default constructor
            <see cref="M:Sudoku.Data.GridMap.#ctor"/> and <see langword="default"/>(<see cref="T:Sudoku.Data.GridMap"/>).
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor"/>
        </member>
        <member name="F:Sudoku.Data.GridMap.Shifting">
            <summary>
            The value used for shifting.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.BlockOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.RowOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.ColumnOffset">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap.Limit">
            <summary>
            The value of offsets.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap._high">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.GridMap._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.GridMap._low"/> represents the lower 41 bits.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridMap._low">
            <summary>
            Indicates the internal two <see cref="T:System.Int64"/> values,
            which represents 81 bits. <see cref="F:Sudoku.Data.GridMap._high"/> represent the higher
            40 bits and <see cref="F:Sudoku.Data.GridMap._low"/> represents the lower 41 bits.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified cell offset
            (Sets itself and all peers).
            </summary>
            <param name="offset">The cell offset.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32[])">
            <summary>
            Same behavior of the constructor as <see cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>.
            </summary>
            <param name="offsets">All offsets.</param>
            <remarks>
            This constructor is defined after another constructor with
            <see cref="T:System.ReadOnlySpan`1"/> had defined. Although this constructor
            doesn't initialize something (use the other one instead),
            while initializing with the type <see cref="T:System.Int32"/>[], the complier
            gives me an error without this constructor (ambiguity of two
            constructors). However, unfortunately, <see cref="T:System.ReadOnlySpan`1"/>
            doesn't implemented the interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="cells">(<see langword="in"/> parameter) cell offsets.</param>
            <remarks>
            <para>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            won't be set <see langword="true"/>.
            </para>
            <para>
            In some case, you can use object initializer instead.
            You can use the code
            <code>
            var map = new GridMap { 0, 3, 5 };
            </code>
            instead of the code
            <code>
            var map = new GridMap(stackalloc[] { 0, 3, 5 });
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(Sudoku.Data.GridMap@)">
            <summary>
            (Copy constructor) To copy an instance with the specified information.
            </summary>
            <param name="another">(<see langword="in"/> parameter) Another instance.</param>
            <remarks>
            <para>
            This constructor is only used for adding or removing some extra cells like:
            <code>
            var y = new GridMap(x) { [i] = true };
            </code>
            or
            <code>
            var y = new GridMap(x) { i };
            </code>
            </para>
            <para>
            Similarly, the following code is also okay:
            <code>
            var y = new GridMap(x) { [i] = false };
            </code>
            or
            <code>
            var y = new GridMap(x) { ~i };
            </code>
            where <c>~i</c> means assigning <see langword="false"/> value to the position
            whose the corresponding value is <c>i</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with a series of cell offsets.
            </summary>
            <param name="offsets">cell offsets.</param>
            <remarks>
            Note that all offsets will be set <see langword="true"/>, but their own peers
            won't be set <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with three binary values.
            </summary>
            <param name="high">Higher 27 bits.</param>
            <param name="mid">Medium 27 bits.</param>
            <param name="low">Lower 27 bits.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified cell offset.
            This will set all bits of all peers of this cell. Another
            <see cref="T:System.Boolean"/> value indicates whether this initialization
            will set the bit of itself.
            </summary>
            <param name="offset">The cell offset.</param>
            <param name="setItself">
            A <see cref="T:System.Boolean"/> value indicating whether this initialization
            will set the bit of itself.
            If the value is <see langword="false"/>, it will be equivalent
            to below:
            <code>
            var map = new GridMap(offset) { [offset] = false };
            </code>
            </param>
            <remarks>
            If you want to use this constructor, please use <see cref="F:Sudoku.Constants.Processings.PeerMaps"/> instead.
            </remarks>
            <seealso cref="F:Sudoku.Constants.Processings.PeerMaps"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes an instance with two binary values.
            </summary>
            <param name="high">Higher 40 bits.</param>
            <param name="low">Lower 41 bits.</param>
        </member>
        <member name="P:Sudoku.Data.GridMap.IsEmpty">
            <summary>
            Indicates whether the map has no set bits.
            This property is equivalent to code '<c>!this.IsNotEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.GridMap.IsNotEmpty"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.IsNotEmpty">
            <summary>
            Indicates whether the map has at least one set bit.
            This property is equivalent to code '<c>!this.IsEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.GridMap.IsEmpty"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.InOneRegion">
            <summary>
            Same as <see cref="M:Sudoku.Data.GridMap.AllSetsAreInOneRegion(System.Int32@)"/>, but only contains
            the <see cref="T:System.Boolean"/> result.
            </summary>
            <seealso cref="M:Sudoku.Data.GridMap.AllSetsAreInOneRegion(System.Int32@)"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.BlockMask">
            <summary>
            Indicates the mask of block.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.RowMask">
            <summary>
            Indicates the mask of row.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.ColumnMask">
            <summary>
            Indicates the mask of column.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.CoveredLine">
            <summary>
            Indicates the covered line.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Count">
            <summary>
            Indicates the total number of cells where the corresponding
            value are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.First">
            <summary>
            Gets the first set bit position. If the current map is empty,
            the return value will be <c>-1</c>.
            </summary>
            <remarks>
            The property will use the same process with <see cref="P:Sudoku.Data.GridMap.Offsets"/>,
            but the <see langword="yield"/> clause will be replaced with normal <see langword="return"/>s.
            </remarks>
            <seealso cref="P:Sudoku.Data.GridMap.Offsets"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.PeerIntersection">
            <summary>
            <para>Indicates the map of cells, which is the peer intersections.</para>
            <para>
            For example, the code
            <code>
            var r = map.PeerIntersection;
            </code>
            is equivalent to the code
            <code>
            var r = new GridMap(map, InitializeOption.ProcessPeersWithoutItself);
            </code>
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.CoveredRegions">
            <summary>
            Indicates all regions covered. This property is used to check all regions that all cells
            of this instance covered. For example, if the cells are { 0, 1 }, the property
            <see cref="P:Sudoku.Data.GridMap.CoveredRegions"/> will return the region 0 (block 1) and region 9 (row 1);
            however, if cells spanned two regions or more (e.g. cells { 0, 1, 27 }), this property won't contain
            any regions.
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Regions">
            <summary>
            All regions that the map spanned. This property is used to check all regions that all cells of
            this instance spanned. For example, if the cells are { 0, 1 }, the property
            <see cref="P:Sudoku.Data.GridMap.Regions"/> will return the region 0 (block 1), region 9 (row 1), region 18 (column 1)
            and the region 19 (column 2).
            </summary>
        </member>
        <member name="P:Sudoku.Data.GridMap.Offsets">
            <summary>
            <para>
            Indicates all cell offsets whose corresponding value
            are set <see langword="true"/>.
            </para>
            <para>
            If you want to make an array of them, please use method
            <see cref="M:Sudoku.Data.GridMap.ToArray"/> instead of code
            '<c>Offsets.ToArray()</c>'.
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.GridMap.ToArray"/>
        </member>
        <member name="P:Sudoku.Data.GridMap.Index(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value on the specified cell
            offset.
            </summary>
            <param name="cell">The cell offset.</param>
            <value>A <see cref="T:System.Boolean"/> value on assignment.</value>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the cell has digit.
            </returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.Deconstruct(System.Int64@,System.Int64@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="high">(<see langword="out"/> parameter) Higher 40 bits.</param>
            <param name="low">(<see langword="out"/> parameter) Lower 41 bits.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Equals(Sudoku.Data.GridMap@)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Overlaps(Sudoku.Data.GridMap@)">
            <summary>
            Indicates whether this map overlaps another one.
            </summary>
            <param name="other">(<see langword="in"/> parameter) The other map.</param>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.AllSetsAreInOneRegion(System.Int32@)">
            <summary>
            Indicates whether all cells in this instance are in one region.
            </summary>
            <param name="region">
            (<see langword="out"/> parameter) The region covered. If the return value
            is false, this value will be the constant -1.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <remarks>
            If you don't want to use the <see langword="out"/> parameter value, please
            use the property <see cref="P:Sudoku.Data.GridMap.InOneRegion"/> to improve the performance.
            </remarks>
            <seealso cref="P:Sudoku.Data.GridMap.InOneRegion"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.SetAt(System.Int32)">
            <summary>
            Get a n-th index of the <see langword="true"/> bit in this instance.
            </summary>
            <param name="index">The true bit index order.</param>
            <returns>The real index.</returns>
            <remarks>
            If you want to select the first set bit, please use <see cref="P:Sudoku.Data.GridMap.First"/> instead.
            </remarks>
            <seealso cref="P:Sudoku.Data.GridMap.First"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.SetAt(System.Index@)">
            <summary>
            Get a n-th index of the <see langword="true"/> bit in this instance.
            </summary>
            <param name="index">(<see langword="in"/> parameter) The true bit index order.</param>
            <returns>The real index.</returns>
            <remarks>
            If you want to select the first set bit, please use <see cref="P:Sudoku.Data.GridMap.First"/> instead.
            </remarks>
            <seealso cref="P:Sudoku.Data.GridMap.First"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToArray">
            <summary>
            Get all cell offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of cell offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetSubviewMask(System.Int32)">
            <summary>
            Get the subview mask of this map.
            </summary>
            <param name="region">The region.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToString(System.String)">
            <inheritdoc cref="M:Sudoku.DocComments.Formattable.ToString(System.String)"/>
            <remarks>
            The format can be <c><see langword="null"/></c>, <c>N</c>, <c>n</c>, <c>B</c> or <c>b</c>.
            If the former three, the return value will be a cell notation collection;
            otherwise, the binary representation.
            </remarks>
            <exception cref="T:System.FormatException">Throws when the format is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.GridMap.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.GridMap.GetFirst(System.Int32,System.Int32)">
            <summary>
            Being called by <see cref="P:Sudoku.Data.GridMap.RowMask"/>, <see cref="P:Sudoku.Data.GridMap.ColumnMask"/> and <see cref="P:Sudoku.Data.GridMap.BlockMask"/>.
            </summary>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>The region mask.</returns>
            <seealso cref="P:Sudoku.Data.GridMap.RowMask"/>
            <seealso cref="P:Sudoku.Data.GridMap.ColumnMask"/>
            <seealso cref="P:Sudoku.Data.GridMap.BlockMask"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Add(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> or <see langword="false"/> value.
            </summary>
            <param name="offset">
            The cell offset. This value can be positive and negative. If 
            negative, the offset will be assigned <see langword="false"/>
            into the corresponding bit position of its absolute value.
            </param>
            <remarks>
            <para>
            For example, if the offset is -2 (~1), the [1] will be assigned <see langword="false"/>:
            <code>
            var map = new GridMap(xxx) { ~1 };
            </code>
            which is equivalent to:
            <code>
            var map = new GridMap(xxx);
            map[1] = false;
            </code>
            </para>
            <para>
            Note: The argument <paramref name="offset"/> should be with the bit-complement operator <c>~</c>
            to describe the value is a negative one. As the belowing example, -2 is described as <c>~1</c>,
            so the offset is 1, rather than 2.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.AddAnyway(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
            <remarks>
            Different with <see cref="M:Sudoku.Data.GridMap.Add(System.Int32)"/>, the method will process negative values,
            but this won't.
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.Add(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Remove(System.Int32)">
            <summary>
            Set the specified cell as <see langword="false"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
            <remarks>
            Different with <see cref="M:Sudoku.Data.GridMap.Add(System.Int32)"/>, this method <b>can't</b> receive
            the negative value as the parameter.
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.Add(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.Clear">
            <summary>
            Clear all bits.
            </summary>
        </member>
        <member name="M:Sudoku.Data.GridMap.AddRange(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Set the specified cells as <see langword="true"/> value.
            </summary>
            <param name="offsets">(<see langword="in"/> parameter) The cells to add.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Set the specified cells as <see langword="true"/> value.
            </summary>
            <param name="offsets">The cells to add.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Equality(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Inequality(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Addition(Sudoku.Data.GridMap@,System.Int32)">
            <summary>
            The syntactic sugar for <c>new GridMap(map) { cell }</c> (i.e. add a new cell into the current
            map, and return the new map).
            </summary>
            <param name="map">(<see langword="in"/> parameter) The map.</param>
            <param name="cell">The cell to add.</param>
            <returns>The result of the map.</returns>
            <remarks>
            I strongly recommend you should use <see cref="M:Sudoku.Data.GridMap.#ctor(Sudoku.Data.GridMap@)"/> instead
            when more than one cell should be added into the map.
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(Sudoku.Data.GridMap@)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Subtraction(Sudoku.Data.GridMap@,System.Int32)">
            <summary>
            The syntactic sugar for <c>new GridMap(map) { ~cell }</c> (i.e. remove a cell from the current
            map, and return the new map).
            </summary>
            <param name="map">(<see langword="in"/> parameter) The map.</param>
            <param name="cell">The cell to remove.</param>
            <returns>The result of the map.</returns>
            <remarks>
            I strongly recommend you should use <see cref="M:Sudoku.Data.GridMap.#ctor(Sudoku.Data.GridMap@)"/> instead
            when more than one cell should be removed from the map.
            </remarks>
            <seealso cref="M:Sudoku.Data.GridMap.#ctor(Sudoku.Data.GridMap@)"/>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_OnesComplement(Sudoku.Data.GridMap@)">
            <summary>
            Reverse status for all cells, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="gridMap">(<see langword="in"/> parameter) The instance to negate.</param>
            <returns>The negative result.</returns>
            <remarks>
            While reversing the higher 40 bits, the unused bits will be fixed and never be modified the state,
            that is why using the code "<c>higherBits &amp; 0xFFFFFFFFFFL</c>".
            </remarks>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Subtraction(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <summary>
            Get a <see cref="T:Sudoku.Data.GridMap"/> that contains all <paramref name="left"/> cells
            but not in <paramref name="right"/> cells.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_BitwiseAnd(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <summary>
            Get all cells that two <see cref="T:Sudoku.Data.GridMap"/>s both contain.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_BitwiseOr(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <summary>
            Get all cells from two <see cref="T:Sudoku.Data.GridMap"/>s.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_ExclusiveOr(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <summary>
            Get all cells that only appears once in two <see cref="T:Sudoku.Data.GridMap"/>s.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The symmetrical difference result.</returns>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Implicit(System.Int32[])~Sudoku.Data.GridMap">
            <summary>
            Implicit cast from <see cref="T:System.Int32"/>[] to <see cref="T:Sudoku.Data.GridMap"/>.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Implicit(System.Span{System.Int32}@)~Sudoku.Data.GridMap">
            <summary>
            Implicit cast from <see cref="T:System.Span`1"/> to <see cref="T:Sudoku.Data.GridMap"/>.
            </summary>
            <param name="cells">(<see langword="in"/> parameter) The cells.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Implicit(System.ReadOnlySpan{System.Int32}@)~Sudoku.Data.GridMap">
            <summary>
            Implicit cast from <see cref="T:System.ReadOnlySpan`1"/> to <see cref="T:Sudoku.Data.GridMap"/>.
            </summary>
            <param name="cells">(<see langword="in"/> parameter) The cells.</param>
        </member>
        <member name="M:Sudoku.Data.GridMap.op_Explicit(Sudoku.Data.GridMap@)~System.Int32[]">
            <summary>
            Explicit cast from <see cref="T:Sudoku.Data.GridMap"/> to <see cref="T:System.Int32"/>[].
            </summary>
            <param name="map">(<see langword="in"/> parameter) The map.</param>
        </member>
        <member name="F:Sudoku.Data.GridMap.CoverTable">
            <summary>
            The cover table.
            </summary>
        </member>
        <member name="T:Sudoku.Data.GridParsingOption">
            <summary>
            Represents a grid parsing type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Susser">
            <summary>
            <para>
            Indicates the susser format, which means all grid values
            will be displayed in one line with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            <code>
            080630040200085009090000081000300800000020000006001000970000030400850007010094050
            4+80002+306+31000+9004000+4030109+38+24+675+1+75+1+39+8+46+2+2640708+3902090000010000002080+36+20007:713 723 533 633 537 575 176 576 577 579 583 784 586 587 496 997
            </code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.PencilMarked">
            <summary>
            <para>
            Indicates the pencil marked grid (PM grid), which means all
            grid candidates will be displayed using a table.
            </para>
            <para>
            For example:
            <code>
            +-------------------+-----------------+--------------------+
            | &lt;8&gt;   12459  249  | *6*  &lt;7&gt;   259  | 1245    245   *3*  |
            | 1457  1245   &lt;6&gt;  | 58   125   &lt;3&gt;  | 124578  2458  &lt;9&gt;  |
            | 1579  &lt;3&gt;    279  | &lt;4&gt;  1259  2589 | 12578   *6*   78   |
            +-------------------+-----------------+--------------------+
            | *2*   &lt;7&gt;    *3*  | &lt;1&gt;  &lt;8&gt;   45   | 456     &lt;9&gt;   46   |
            | &lt;6&gt;   458    48   | &lt;2&gt;  59    459  | &lt;3&gt;     *7*   *1*  |
            | 1459  1459   49   | *3*  *6*   &lt;7&gt;  | 458     458   &lt;2&gt;  |
            +-------------------+-----------------+--------------------+
            | &lt;3&gt;   2489   &lt;1&gt;  | 578  25    &lt;6&gt;  | 24789   248   478  |
            | 79    &lt;6&gt;    2789 | 78   &lt;4&gt;   *1*  | 289     *3*   &lt;5&gt;  |
            | 47    248    &lt;5&gt;  | &lt;9&gt;  *3*   28   | 2678    &lt;1&gt;   4678 |
            +-------------------+-----------------+--------------------+
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.PencilMarkedTreatSingleAsGiven">
            <summary>
            <para>
            Indicates the pencil marked grid (PM grid), which means all
            grid candidates will be displayed using a table. In addition,
            all single digit will be treated as a given digit.
            </para>
            <para>
            For example:
            <code>
            .--------------.--------------.-------------.
            | 4   8    59  | 157  15   2  | 3   79  6   |
            | 3   1    256 | 578  568  9  | 25  78  4   |
            | 56  79   279 | 4    568  3  | 29  1   58  |
            :--------------+--------------+-------------:
            | 9   3    8   | 2    4    6  | 7   5   1   |
            | 7   5    1   | 3    9    8  | 4   6   2   |
            | 2   6    4   | 15   7    15 | 8   3   9   |
            :--------------+--------------+-------------:
            | 56  2    567 | 9    138  47 | 16  48  38  |
            | 1   479  679 | 58   358  47 | 69  2   358 |
            | 8   49   3   | 6    2    15 | 15  49  7   |
            '--------------'--------------'-------------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Table">
            <summary>
            <para>
            Indicates the table format, which means all grid values
            will be displayed using a table with empty cell character
            <c>'0'</c> or <c>'.'</c>.
            </para>
            <para>
            For example:
            <code>
            .----------.----------.----------.
            |  .  4  6 |  . +1  . |  3 +7 +5 |
            | +3 +8  1 | +5  4  7 | +2 +9 +6 |
            |  .  .  5 |  .  3  . | +1 +4  8 |
            :----------+----------+----------:
            |  8  .  4 |  . +5  . | +7  6  . |
            |  .  9  . |  .  2  . | +8  5 +4 |
            |  .  5  . |  .  .  . |  9  .  3 |
            :----------+----------+----------:
            |  5  .  . |  .  8  . |  6  . +9 |
            | +4  .  8 |  1  9  . |  5  .  . |
            |  .  .  9 |  .  . +5 |  4  8  . |
            '----------'----------'----------'
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.SimpleTable">
            <summary>
            <para>
            Sudoku explainer format (9 characters in a row, and 9 rows).
            </para>
            <para>
            For example:
            <code>
            080630040
            200085009
            090000081
            000300800
            000020000
            006001000
            970000030
            400850007
            010094050
            </code>
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Sukaku">
            <summary>
            <para>
            Sukaku sudoku format (only contains the digits and the whitespace).
            </para>
            <para>
            For example:
            <code>
             23456789  23456789  23456789 123456789 123456789  23456789 123456789  23456789  23456789
             23456789 123456789 123456789  23456789  23456789  23456789  23456789  23456789  23456789
             23456789  23456789  23456789  23456789 123456789  23456789 123456789  23456789 123456789
            123456789  23456789  23456789 123456789 123456789  23456789  23456789  23456789 123456789
             23456789  23456789  23456789  23456789 123456789  23456789 123456789  23456789  23456789
            123456789  23456789  23456789 123456789 123456789  23456789 123456789  23456789 123456789
             23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789
             23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789
             23456789 123456789 123456789  23456789  23456789 123456789  23456789 123456789  23456789
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table. In addition, this puzzle doesn't have a unique solution, here it is a
            model for references only.)
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.SukakuSingleLine">
            <summary>
            <para>Sukaku single line format, which uses '0' to be a placeholder.</para>
            <para>
            For example:
            023406789123456700003050780120050789003006009123456009100056089023456080123000789003456789023006700023006700120056780100006789120400780000406789103000080020450000003406089020056709120050080100000700120056780120000709123056000123050080000450089123050709100456089003400780100450009003400009120400009123056709003000700023406000000406009123006000000056709003406700120050009103056089103456709003056009120456009123456780023400000103406709003056789020406700100050009020400000100006789020006789020456780123056080120400700000406789120400080023456789003006080020456789103450709123400009123400080023406700123406709103400080123456009120456789023406709023450080100406080103056009100400009123000789100400709100406780123050700000050080023406009
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Data.GridParsingOption.Excel">
            <summary>
            <para>
            Excel sudoku format (only contains the digits and the tab character).
            </para>
            <para>
            For example:
            <code>
            1			7	8	9	4	5	6
            4	5	6	1	2	3	7	8	9
            7	8	9	4	5	6	1	2	
            9	1	2	6		8	3	4	
            3	4	5				6	7	8
            	7	8	3		5	9	1	2
            	9	1	5	6	7	2	3	4
            2	3	4	8	9	1	5	6	7
            5	6	7	2	3	4			1
            </code>
            (Due to the rendering engine of IDE, all spaces will be displayed only once
            in this table.)
            </para>
            </summary>
        </member>
        <member name="T:Sudoku.Data.Link">
            <summary>
            Encapsulates a link used for drawing.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Link.#ctor(System.Int32,System.Int32,Sudoku.Data.LinkType)">
            <summary>
            Initializes an instance with the specified start and endcandidate, and a link type.
            </summary>
            <param name="startCandidate">The start candidate.</param>
            <param name="endCandidate">The end candidate.</param>
            <param name="linkType">The link type.</param>
        </member>
        <member name="P:Sudoku.Data.Link.StartCandidate">
            <summary>
            The start candidate.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Link.EndCandidate">
            <summary>
            The end candidate.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Link.LinkType">
            <summary>
            The link type.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Link.Deconstruct(System.Int32@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="startCandidate">(<see langword="out"/> parameter) The start candidate.</param>
            <param name="endCandidate">(<see langword="out"/> parameter) The end candidate.</param>
        </member>
        <member name="M:Sudoku.Data.Link.Deconstruct(System.Int32@,System.Int32@,Sudoku.Data.LinkType@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="startCandidate">(<see langword="out"/> parameter) The start candidate.</param>
            <param name="endCandidate">(<see langword="out"/> parameter) The end candidate.</param>
            <param name="linkType">(<see langword="out"/> parameter) The link type.</param>
        </member>
        <member name="M:Sudoku.Data.Link.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@,Sudoku.Data.LinkType@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="startCell">(<see langword="out"/> parameter) The start cell.</param>
            <param name="startDigit">(<see langword="out"/> parameter) The start digit.</param>
            <param name="endCell">(<see langword="out"/> parameter) The end cell.</param>
            <param name="endDigit">(<see langword="out"/> parameter) The end digit.</param>
            <param name="linkType">(<see langword="out"/> parameter) The link type.</param>
        </member>
        <member name="M:Sudoku.Data.Link.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Link.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Link.Equals(Sudoku.Data.Link@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Link.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Link.op_Equality(Sudoku.Data.Link@,Sudoku.Data.Link@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Link.op_Inequality(Sudoku.Data.Link@,Sudoku.Data.Link@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.LinkType">
            <summary>
            Indicates a link type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Default">
            <summary>
            Indicates the default link (<c>off</c> -&gt; <c>off</c> or <c>on</c> -&gt; <c>on</c>).
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Weak">
            <summary>
            Indicates the weak link (<c>on</c> -&gt; <c>off</c>).
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Strong">
            <summary>
            Indicates the strong link (<c>off</c> -&gt; <c>on</c>).
            </summary>
        </member>
        <member name="F:Sudoku.Data.LinkType.Line">
            <summary>
            Indicates the link is used for rendering as a normal line (without start and end node).
            </summary>
        </member>
        <member name="T:Sudoku.Data.Node">
            <summary>
            Encapsulates a chain node.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Node._parents">
            <summary>
            The parent nodes.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified digit, cell and a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="isOn">A <see cref="T:System.Boolean"/> value indicating whether the node is on.</param>
        </member>
        <member name="M:Sudoku.Data.Node.#ctor(System.Int32,System.Int32,System.Boolean,Sudoku.Data.Node@)">
            <summary>
            Initializes an instance with the specified digit, the cell, a <see cref="T:System.Boolean"/> value
            and the parent node.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="isOn">A <see cref="T:System.Boolean"/> value indicating whether the specified node is on.</param>
            <param name="parent">(<see langword="in"/> parameter) The parent node.</param>
        </member>
        <member name="P:Sudoku.Data.Node.Cell">
            <summary>
            Indicates the cell used. In the default case, the AIC contains only one cell and the digit (which
            combine to a candidate).
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.ParentsCount">
            <summary>
            Indicates the number of parents.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.AncestorsCount">
            <summary>
            Get the total number of the ancestors.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.IsOn">
            <summary>
            Indicates whether the specified node is on.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Root">
            <summary>
            Indicates the root.
            </summary>
            <remarks>
            This property can only find the first root.
            </remarks>
        </member>
        <member name="P:Sudoku.Data.Node.Chain">
            <summary>
            The chain nodes.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Node.Parent(System.Int32)">
            <summary>
            Get the parent node with the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The parent node.</returns>
            <exception cref="T:System.NullReferenceException">
            Throws when the <see cref="F:Sudoku.Data.Node._parents"/> is currently <see langword="null"/>.
            </exception>
            <seealso cref="F:Sudoku.Data.Node._parents"/>
        </member>
        <member name="M:Sudoku.Data.Node.AddParent(Sudoku.Data.Node@)">
            <summary>
            Add a node into the list.
            </summary>
            <param name="node">(<see langword="in"/> parameter) The node.</param>
        </member>
        <member name="M:Sudoku.Data.Node.ClearParents">
            <summary>
            Clear all parent nodes.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.Node.Equals(Sudoku.Data.Node@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Node.IsParentOf(Sudoku.Data.Node@)">
            <summary>
            Determine whether the node is the parent of the specified node.
            </summary>
            <param name="node">(<see langword="in"/> parameter) The node.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.Node.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.Node.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.Node.op_Equality(Sudoku.Data.Node@,Sudoku.Data.Node@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Node.op_Inequality(Sudoku.Data.Node@,Sudoku.Data.Node@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.RegionLabel">
            <summary>
            Indicates the region label.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionLabel.Block">
            <summary>
            Indicates the block.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionLabel.Row">
            <summary>
            Indicates the row.
            </summary>
        </member>
        <member name="F:Sudoku.Data.RegionLabel.Column">
            <summary>
            Indicates the column.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Stepping.AntiEliminationStep">
            <summary>
            Encapsulates an anti-elimination step.
            </summary>
            <param name="Digit">The digit.</param>
            <param name="Cell">The cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Encapsulates an anti-elimination step.
            </summary>
            <param name="Digit">The digit.</param>
            <param name="Cell">The cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AntiEliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.AssignmentStep">
            <summary>
            Encapsulates an assignment step.
            </summary>
            <param name="Digit">The digit.</param>
            <param name="Cell">The cell.</param>
            <param name="Mask">The old mask to undo.</param>
            <param name="InnerMap">The map which contains all cells that contains the digit.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.#ctor(System.Int32,System.Int32,System.Int16,Sudoku.Data.GridMap@)">
            <summary>
            Encapsulates an assignment step.
            </summary>
            <param name="Digit">The digit.</param>
            <param name="Cell">The cell.</param>
            <param name="Mask">The old mask to undo.</param>
            <param name="InnerMap">The map which contains all cells that contains the digit.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.AssignmentStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.EliminationStep">
            <summary>
            Encapsulates an elimination step.
            </summary>
            <param name="Digit">Indicates the digit.</param>
            <param name="Cell">Indicates the cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.#ctor(System.Int32,System.Int32)">
            <summary>
            Encapsulates an elimination step.
            </summary>
            <param name="Digit">Indicates the digit.</param>
            <param name="Cell">Indicates the cell.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.EliminationStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.FixStep">
            <summary>
            Encapsulates a fix step.
            </summary>
            <param name="AllCells">Indicates all cells to fix.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.#ctor(Sudoku.Data.GridMap@)">
            <summary>
            Encapsulates a fix step.
            </summary>
            <param name="AllCells">Indicates all cells to fix.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.FixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.IUndoable">
            <summary>
            Provides a undo-able data structure.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Undo">
            <summary>
            To undo the step.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.IUndoable.Redo">
            <summary>
            To redo the step.
            </summary>
        </member>
        <member name="T:Sudoku.Data.Stepping.ResetStep">
            <summary>
            Encapsulates a reset step.
            </summary>
            <param name="OldMasks">Indicates the table of new grid masks.</param>
            <param name="NewMasks">Indicates the table of old grid masks.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.#ctor(System.Int16*,System.Int16*)">
            <summary>
            Encapsulates a reset step.
            </summary>
            <param name="OldMasks">Indicates the table of new grid masks.</param>
            <param name="NewMasks">Indicates the table of old grid masks.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.ResetStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetMaskStep">
            <summary>
            Encapsulates a step of setting mask.
            </summary>
            <param name="Cell">Indicates the cell.</param>
            <param name="OldMask">Indicates the old mask.</param>
            <param name="NewMask">Indicates the new mask.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.#ctor(System.Int32,System.Int16,System.Int16)">
            <summary>
            Encapsulates a step of setting mask.
            </summary>
            <param name="Cell">Indicates the cell.</param>
            <param name="OldMask">Indicates the old mask.</param>
            <param name="NewMask">Indicates the new mask.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetMaskStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.SetStatusStep">
            <summary>
            Encapsulates a step for setting a cell status.
            </summary>
            <param name="Cell">The cell.</param>
            <param name="OldStatus">The old status.</param>
            <param name="NewStatus">The new status.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.#ctor(System.Int32,Sudoku.Data.CellStatus,Sudoku.Data.CellStatus)">
            <summary>
            Encapsulates a step for setting a cell status.
            </summary>
            <param name="Cell">The cell.</param>
            <param name="OldStatus">The old status.</param>
            <param name="NewStatus">The new status.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.SetStatusStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.Stepping.Step">
            <summary>
            Provides a step used for applying to a sudoku grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.Step.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Apply the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.Step.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <summary>
            Undo the step to the grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Data.Stepping.UndoableGrid">
            <summary>
            Provides an undoable sudoku grid. This data structure is nearly same
            as <see cref="T:Sudoku.Data.SudokuGrid"/>, but only add two methods <see cref="M:Sudoku.Data.Stepping.UndoableGrid.Undo"/>
            and <see cref="M:Sudoku.Data.Stepping.UndoableGrid.Redo"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.SudokuGrid"/>
            <seealso cref="M:Sudoku.Data.Stepping.UndoableGrid.Undo"/>
            <seealso cref="M:Sudoku.Data.Stepping.UndoableGrid.Redo"/>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._innerGrid">
            <summary>
            The inner sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._undoStack">
            <summary>
            The undo and redo stack.
            </summary>
        </member>
        <member name="F:Sudoku.Data.Stepping.UndoableGrid._redoStack">
            <summary>
            The undo and redo stack.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(System.Int16[])">
            <summary>
            Initializes an instance with the specified mask array.
            </summary>
            <param name="masks">The mask array.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes an instance with the specified sudoku grid (value type).
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasUndoSteps">
            <summary>
            Indicates whether the grid has any undo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasRedoSteps">
            <summary>
            Indicates whether the grid has any redo steps available.
            </summary>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.HasSolved">
            <inheritdoc cref="P:Sudoku.Data.SudokuGrid.HasSolved"/>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.GivensCount">
            <inheritdoc cref="P:Sudoku.Data.SudokuGrid.GivensCount"/>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32)">
            <inheritdoc cref="P:Sudoku.Data.SudokuGrid.Value(System.Int32)"/>
        </member>
        <member name="P:Sudoku.Data.Stepping.UndoableGrid.Item(System.Int32,System.Int32)">
            <inheritdoc cref="P:Sudoku.Data.SudokuGrid.Value(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Fix">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.Fix"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Unfix">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.Unfix"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Reset">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.Reset"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.RecomputeCandidates">
            <inheritdoc cref="P:Sudoku.Data.SudokuGrid.RefreshingCandidates"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetStatus(System.Int32)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.GetStatus(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.SetStatus(System.Int32,Sudoku.Data.CellStatus)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetMask(System.Int32)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.GetMask(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetCandidateMask(System.Int32)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.GetCandidateMask(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.SetMask(System.Int32,System.Int16)">
            <inheritdoc cref="M:Sudoku.Data.SudokuGrid.SetMask(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Redo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the redo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Undo">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the undo stack is empty.
            </exception>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ClearStack">
            <summary>
            To clear step stacks.
            </summary>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.Equals(Sudoku.Data.SudokuGrid@)">
            <inheritdoc cref="M:System.IValueEquatable`1.Equals(`0@)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ToString(System.String)">
            <inheritdoc cref="M:Sudoku.DocComments.Formattable.ToString(System.String)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.SudokuGrid@,Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Equality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.SudokuGrid@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.SudokuGrid@,Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Inequality(Sudoku.Data.Stepping.UndoableGrid,Sudoku.Data.SudokuGrid@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Explicit(Sudoku.Data.Stepping.UndoableGrid)~Sudoku.Data.SudokuGrid">
            <summary>
            Explicit cast from <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/> to <see cref="T:Sudoku.Data.SudokuGrid"/>.
            </summary>
            <param name="grid">The grid.</param>
            <remarks>The cast won't use neither box nor unbox operations.</remarks>
        </member>
        <member name="M:Sudoku.Data.Stepping.UndoableGrid.op_Implicit(Sudoku.Data.SudokuGrid@)~Sudoku.Data.Stepping.UndoableGrid">
            <summary>
            Implicit cast from <see cref="T:Sudoku.Data.SudokuGrid"/> to <see cref="T:Sudoku.Data.Stepping.UndoableGrid"/>.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <remarks>The cast won't use neither box nor unbox operations.</remarks>
        </member>
        <member name="T:Sudoku.Data.Stepping.UnfixStep">
            <summary>
            Encapsulates an unfix step.
            </summary>
            <param name="AllCells">Indicates all cells.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.#ctor(Sudoku.Data.GridMap@)">
            <summary>
            Encapsulates an unfix step.
            </summary>
            <param name="AllCells">Indicates all cells.</param>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.DoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.Stepping.UnfixStep.UndoStepTo(Sudoku.Data.Stepping.UndoableGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid">
            <summary>
            Encapsulates a sudoku grid using value type instead of reference type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.DefaultMask">
            <summary>
            Indicates the default mask of a cell (an empty cell, with all 9 candidates left).
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.MaxCandidatesMask">
            <summary>
            Indicates the maximum candidate mask that used.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Length">
            <summary>
            Indicates the size of each grid.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.EmptyString">
            <summary>
            Indicates the empty grid string.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Undefined">
            <summary>
            Indicates the default grid that all values are initialized 0, which is same as
            <see cref="M:Sudoku.Data.SudokuGrid.#ctor"/>.
            </summary>
            <remarks>
            We recommend you should use this static field instead of the default constructor
            to reduce object creation.
            </remarks>
            <seealso cref="M:Sudoku.Data.SudokuGrid.#ctor"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Empty">
            <summary>
            The empty grid that is valid during implementation or running the program
            (all values are <see cref="F:Sudoku.Data.SudokuGrid.DefaultMask"/>, i.e. empty cells).
            </summary>
            <remarks>
            This field is initialized by the static constructor of this structure.
            </remarks>
            <seealso cref="F:Sudoku.Data.SudokuGrid.DefaultMask"/>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid._values">
            <summary>
            Indicates the inner array.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid._initialValues">
            <summary>
            Indicates the inner array suggests the initial grid.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.#ctor(System.Int16*,System.Int32)">
            <summary>
            Initializes an instance with the specified mask list and the length.
            </summary>
            <param name="masks">The masks.</param>
            <param name="length">The length of the <paramref name="masks"/>. The value should be 81.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws when <paramref name="masks"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="length"/> is not 81.
            </exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.#ctor(System.Int16[])">
            <summary>
            Initializes an instance with the specified mask array.
            </summary>
            <param name="masks">The masks.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <see cref="P:System.Array.Length"/> is not 81.
            </exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.#cctor">
            <inheritdoc cref="T:Sudoku.DocComments.StaticConstructor"/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.HasSolved">
            <summary>
            Indicates the grid has already solved. If the value is <see langword="true"/>,
            the grid is solved; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.CandidatesCount">
            <summary>
            Indicates the number of total candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GivensCount">
            <summary>
            Indicates the total number of given cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ModifiablesCount">
            <summary>
            Indicates the total number of modifiable cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.EmptiesCount">
            <summary>
            Indicates the total number of empty cells.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Triplet">
            <summary>
            The triplet of three main information.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Value(System.Int32)">
            <summary>
            Gets or sets the value in the specified cell.
            </summary>
            <param name="cell">The cell you want to get or set a value.</param>
            <value>The value you want to set.</value>
            <returns>The value that the cell filled with.</returns>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Value(System.Int32,System.Int32)">
            <summary>
            Gets or sets a candidate existence case with a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="cell">The cell offset between 0 and 80.</param>
            <param name="digit">The digit between 0 and 8.</param>
            <value>
            The case you want to set. <see langword="true"/> means that this candidate
            doesn't exist in this current sudoku grid; otherwise, <see langword="false"/>.
            </value>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.SimplyValidate">
            <summary>
            Check whether the current grid is valid (no duplicate values on same row, column or block).
            </summary>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Equals(Sudoku.Data.SudokuGrid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToArray">
            <summary>
            Serializes this instance to an array, where all digit value will be stored.
            </summary>
            <returns>
            This array. All elements are between 0 to 9, where 0 means the
            cell is <see cref="F:Sudoku.Data.CellStatus.Empty"/> now.
            </returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetMask(System.Int32)">
            <summary>
            Get a mask at the specified cell.
            </summary>
            <param name="offset">The cell offset you want to get.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetCandidateMask(System.Int32)">
            <summary>
            Get the candidate mask part of the specified cell.
            </summary>
            <param name="cell">The cell offset you want to get.</param>
            <returns>
            <para>The candidate mask.</para>
            <para>
            The return value is a 9-bit <see cref="T:System.Int16"/>
            value, where the bit will be <c>0</c> if the corresponding digit <b>doesn't exist</b> in the cell,
            and will be <c>1</c> if the corresponding contains this digit (either the cell
            is filled with this digit or the cell is an empty cell, whose candidates contains the digit).
            </para>
            </returns>
            <remarks>
            Please note that the grid masks is represented with bits, where 0 is for the digit containing in a
            cell, 1 is for the digit <b>not</b> containing. However, here the return mask is the reversal:
            1 is for containing and 0 is for <b>not</b>.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToMaskString">
            <summary>
            Get all masks and print them.
            </summary>
            <returns>The result.</returns>
            <remarks>
            Please note that the method cannot be called with a correct behavior using
            <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> to output. It seems that Visual Studio
            doesn't print correct values when indices of this grid aren't 0. In other words,
            when we call this method using <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/>, only <c>grid[0]</c>
            can be output correctly, and other values will be incorrect: they're always 0.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToString(System.String)">
            <inheritdoc cref="M:Sudoku.DocComments.Formattable.ToString(System.String)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetStatus(System.Int32)">
            <summary>
            Get the cell status at the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Fix">
            <summary>
            To fix the current grid (all modifiable values will be changed to given ones).
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Unfix">
            <summary>
            To unfix the current grid (all given values will be chanegd to modifiable ones).
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Reset">
            <summary>
            To reset the grid to iniatial status.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.SetStatus(System.Int32,Sudoku.Data.CellStatus)">
            <summary>
            Set the specified cell to the specified status.
            </summary>
            <param name="cell">The cell.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.SetMask(System.Int32,System.Int16)">
            <summary>
            Set the specified cell to the specified mask.
            </summary>
            <param name="cell">The cell.</param>
            <param name="mask">The mask to set.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.UpdateInitialMasks">
            <summary>
            To update initial masks.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.ReadOnlySpan{System.Char}@)">
            <summary>
            <para>
            Parses a string value and converts to this type.
            </para>
            <para>
            If you want to parse a PM grid, we recommend you use the method
            <see cref="M:Sudoku.Data.SudokuGrid.Parse(System.String,Sudoku.Data.GridParsingOption)"/> instead of this method.
            </para>
            </summary>
            <param name="str">(<see langword="in"/> parameter) The string.</param>
            <returns>The result instance had converted.</returns>
            <seealso cref="M:Sudoku.Data.SudokuGrid.Parse(System.String,Sudoku.Data.GridParsingOption)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.String)">
            <summary>
            <para>
            Parses a string value and converts to this type.
            </para>
            <para>
            If you want to parse a PM grid, we recommend you use the method
            <see cref="M:Sudoku.Data.SudokuGrid.Parse(System.String,Sudoku.Data.GridParsingOption)"/> instead of this method.
            </para>
            </summary>
            <param name="str">The string.</param>
            <returns>The result instance had converted.</returns>
            <seealso cref="M:Sudoku.Data.SudokuGrid.Parse(System.String,Sudoku.Data.GridParsingOption)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.String,System.Boolean)">
            <summary>
            <para>
            Parses a string value and converts to this type.
            </para>
            <para>
            If you want to parse a PM grid, you should decide the mode to parse.
            If you use compatible mode to parse, all single values will be treated as
            given values; otherwise, recommended mode, which uses '<c>&lt;d&gt;</c>'
            or '<c>*d*</c>' to represent a value be a given or modifiable one. The decision
            will be indicated and passed by the second parameter <paramref name="compatibleFirst"/>.
            </para>
            </summary>
            <param name="str">The string.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check
            PM grid. See <see cref="P:Sudoku.Data.SudokuGrid.GridParser.CompatibleFirst"/> to learn more.
            </param>
            <returns>The result instance had converted.</returns>
            <seealso cref="P:Sudoku.Data.SudokuGrid.GridParser.CompatibleFirst"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Parse(System.String,Sudoku.Data.GridParsingOption)">
            <summary>
            Parses a string value and converts to this type,
            using a specified grid parsing type.
            </summary>
            <param name="str">The string.</param>
            <param name="gridParsingOption">The grid parsing type.</param>
            <returns>The result instance had converted.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.TryParse(System.String,Sudoku.Data.SudokuGrid@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result parsed. If the conversion is failed,
            this argument will be <see cref="F:Sudoku.Data.SudokuGrid.Undefined"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="F:Sudoku.Data.SudokuGrid.Undefined"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.TryParse(System.String,Sudoku.Data.GridParsingOption,Sudoku.Data.SudokuGrid@)">
            <summary>
            Try to parse a string and converts to this type, and returns a
            <see cref="T:System.Boolean"/> value indicating the result of the conversion.
            </summary>
            <param name="str">The string.</param>
            <param name="option">The grid parsing type.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result parsed. If the conversion is failed,
            this argument will be <see cref="F:Sudoku.Data.SudokuGrid.Undefined"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="F:Sudoku.Data.SudokuGrid.Undefined"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.CreateInstance(System.Int32[])">
            <summary>
            Creates an instance using grid values.
            </summary>
            <param name="gridValues">The array of grid values.</param>
            <returns>The result instance.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.OnValueChanged(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid.ValueChangedArgs@)">
            <summary>
            Delete or set a value on the specified grid.
            </summary>
            <param name="this">(<see langword="ref"/> parameter) The grid.</param>
            <param name="e">(<see langword="in"/> parameter) The event arguments.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.OnRefreshingCandidates(Sudoku.Data.SudokuGrid@)">
            <summary>
            Re-compute candidates.
            </summary>
            <param name="this">The grid.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.InternalCopy(System.Int16*,System.Int16*)">
            <summary>
            Internal copy.
            </summary>
            <param name="dest">The destination pointer.</param>
            <param name="src">The source pointer.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws when <paramref name="dest"/> or <paramref name="src"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.op_Equality(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.op_Inequality(Sudoku.Data.SudokuGrid@,Sudoku.Data.SudokuGrid@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.Enumerator">
            <summary>
            The inner enumerator.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Enumerator._start">
            <summary>
            The pointer to the start value.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Enumerator._currentPointer">
            <summary>
            The current pointer.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.Enumerator._currentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.#ctor(System.Int16*)">
            <summary>
            Initializes an instance with the specified pointer to an array to iterate.
            </summary>
            <param name="arr">The pointer to an array.</param>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ValueChanged">
            <summary>
            Indicates the event triggered when the value is changed.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.RefreshingCandidates">
            <summary>
            Indicates the event triggered when should re-compute candidates.
            </summary>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.GridFormatter">
            <summary>
            Provides operations for grid formatting.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with a <see cref="T:System.Boolean"/> value
            indicating multi-line.
            </summary>
            <param name="multiline">
            The multi-line identifier. If the value is <see langword="true"/>, the output will
            be multi-line.
            </param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.#ctor(System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize an instance with the specified information.
            </summary>
            <param name="placeholder">The placeholder.</param>
            <param name="multiline">Indicates whether the formatter will use multiple lines mode.</param>
            <param name="withModifiables">Indicates whether the formatter will output modifiables.</param>
            <param name="withCandidates">Indicates whether the formatter will output candidates list.</param>
            <param name="treatValueAsGiven">Indicates whether the formatter will treat values as givens always.</param>
            <param name="subtleGridLines">
            Indicates whether the formatter will process outline corner of the multiline grid.
            </param>
            <param name="hodokuCompatible">
            Indicates whether the formatter will use hodoku library mode to output.
            </param>
            <param name="sukaku">Indicates whether the formatter will output as sukaku.</param>
            <param name="excel">Indicates whether the formatter will output as excel.</param>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.Placeholder">
            <summary>
            The place holder.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.Multiline">
            <summary>
            Indicates whether the output should be multi-line.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.WithModifiables">
            <summary>
            Indicates the output should be with modifiable values.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.WithCandidates">
            <summary>
            <para>
            Indicates the output should be with candidates.
            If the output is single line, the candidates will indicate
            the candidates-have-eliminated before the current grid status;
            if the output is multi-line, the candidates will indicate
            the real candidate at the current grid status.
            </para>
            <para>
            If the output is single line, the output will append the candidates
            value at the tail of the string in ':candidate list'. In addition,
            candidates will be represented as 'digit', 'row offset' and
            'column offset' in order.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.TreatValueAsGiven">
            <summary>
            Indicates the output will treat modifiable values as given ones.
            If the output is single line, the output will remove all plus marks '+'.
            If the output is multi-line, the output will use '<c>&lt;digit&gt;</c>' instead
            of '<c>*digit*</c>'.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.SubtleGridLines">
            <summary>
            Indicates whether need to handle all grid outlines while outputting.
            See <a href="https://github.com/Sunnie-Shine/Sudoku/wiki/Grid-Format-String">this link</a>
            for more information.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.HodokuCompatible">
            <summary>
            Indicates whether the output will be compatible with Hodoku library format.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.Sukaku">
            <summary>
            Indicates the output will be sukaku format (all single-valued digit will
            be all treated as candidates).
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.Excel">
            <summary>
            Indicates the output will be Excel format.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridFormatter.DefaultList">
            <summary>
            Get the default list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToString(Sudoku.Data.SudokuGrid@)">
            <summary>
            Represents a string value indicating this instance.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToString(Sudoku.Data.SudokuGrid@,System.String)">
            <summary>
            Represents a string value indicating this instance, with the specified format string.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="format">The string format.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToExcelString(Sudoku.Data.SudokuGrid@)">
            <summary>
            To Excel format string.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToHodokuLibraryFormatString(Sudoku.Data.SudokuGrid@)">
            <summary>
            To string with Hodoku library format compatible string.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToSukakuString(Sudoku.Data.SudokuGrid@)">
            <summary>
            To string with the sukaku format.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <returns>The string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the puzzle is an invalid sukaku puzzle (at least one cell is given or modifiable).
            </exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToSingleLineStringCore(Sudoku.Data.SudokuGrid@)">
            <summary>
            To single line string.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToMultiLineStringCore(Sudoku.Data.SudokuGrid@)">
            <summary>
            To multi-line string with candidates.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.ToMultiLineSimpleGridCore(Sudoku.Data.SudokuGrid@)">
            <summary>
            To multi-line normal grid string without any candidates.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.Create(Sudoku.Data.GridFormattingOptions)">
            <summary>
            Create a <see cref="T:Sudoku.Data.SudokuGrid.GridFormatter"/> according to the specified grid output options.
            </summary>
            <param name="gridOutputOption">The grid output options.</param>
            <returns>The grid formatter.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.Create(System.String)">
            <summary>
            Create a <see cref="T:Sudoku.Data.SudokuGrid.GridFormatter"/> according to the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The grid formatter.</returns>
            <exception cref="T:System.FormatException">Throws when the format string is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.GetFirstFalseCandidate(System.Int16)">
            <summary>
            Get the first <see langword="false"/> candidate.
            </summary>
            <param name="value">The value.</param>
            <returns>The first one.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridFormatter.GetStatusFromMask(System.Int16)">
            <summary>
            Get cell status for a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The cell status.</returns>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.GridParser">
            <summary>
            Encapsulates a grid parser.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuGrid.GridParser.ParseFunctions">
            <summary>
            The list of all methods to parse.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.#ctor(System.String)">
            <summary>
            Initializes an instance with parsing data.
            </summary>
            <param name="parsingValue">The string to parse.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance with parsing data and a bool value
            indicating whether the parsing operation should use compatible mode.
            </summary>
            <param name="parsingValue">The string to parse.</param>
            <param name="compatibleFirst">
            Indicates whether the parsing operation should use compatible mode to check
            PM grid. See <see cref="P:Sudoku.Data.SudokuGrid.GridParser.CompatibleFirst"/> to learn more.
            </param>
            <seealso cref="P:Sudoku.Data.SudokuGrid.GridParser.CompatibleFirst"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.#cctor">
            <inheritdoc cref="T:Sudoku.DocComments.StaticConstructor"/>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridParser.ParsingValue">
            <summary>
            The string value to parse.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridParser.CompatibleFirst">
            <summary>
            Indicates whether the parser will change the execution order of PM grid.
            If the value is <see langword="true"/>, the parser will check compatible one
            first, and then check recommended parsing plan ('<c>&lt;d&gt;</c>' and '<c>*d*</c>').
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.GridParser.DefaultCheckingArray">
            <summary>
            Get an array of default values in checking.
            </summary>
            <returns>The array of <see cref="T:System.Boolean"/> values.</returns>
            <remarks>
            Here must use method instead of property or field.
            Because the return value should be mutable.
            </remarks>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.Parse">
            <summary>
            To parse the value.
            </summary>
            <returns>The grid.</returns>
            <exception cref="T:System.ArgumentException">Throws when failed to parse.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.Parse(Sudoku.Data.GridParsingOption)">
            <summary>
            To parse the value with a specified grid parsing type.
            </summary>
            <param name="gridParsingOption">A specified parsing type.</param>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.OnParsingSimpleMultilineGrid(Sudoku.Data.SudokuGrid.GridParser@)">
            <summary>
            Parse the value using multi-line simple grid (without any candidates).
            </summary>
            <param name="parser">(<see langword="ref"/> parameter) The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.OnParsingExcel(Sudoku.Data.SudokuGrid.GridParser@)">
            <summary>
            Parse the Excel format.
            </summary>
            <param name="parser">(<see langword="ref"/> parameter) The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.OnParsingPencilMarked(Sudoku.Data.SudokuGrid.GridParser@,System.Boolean)">
            <summary>
            Parse the PM grid.
            </summary>
            <param name="parser">(<see langword="ref"/> parameter) The parser.</param>
            <param name="treatSingleValueAsGiven">
            The value indicating whether the parsing should treat
            the modifiable values as given ones.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.OnParsingSimpleTable(Sudoku.Data.SudokuGrid.GridParser@)">
            <summary>
            Parse the simple table format string (Sudoku explainer format).
            </summary>
            <param name="parser">(<see langword="ref"/> parameter) The parser.</param>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.OnParsingSusser(Sudoku.Data.SudokuGrid.GridParser@)">
            <summary>
            Parse the susser format string.
            </summary>
            <param name="parser">(<see langword="ref"/> parameter) The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.GridParser.OnParsingSukaku(Sudoku.Data.SudokuGrid.GridParser@,System.Boolean)">
            <summary>
            Parse the sukaku format string.
            </summary>
            <param name="parser">(<see langword="ref"/> parameter) The parser.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Data.SudokuGrid.ValueChangedArgs">
            <summary>
            Provides arguments for the event <see cref="P:Sudoku.Data.SudokuGrid.ValueChanged"/>.
            </summary>
            <seealso cref="P:Sudoku.Data.SudokuGrid.ValueChanged"/>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ValueChangedArgs.#ctor(System.Int32,System.Int16,System.Int16,System.Int32)">
            <summary>
            Initializes the instance with some data.
            </summary>
            <param name="cell">The cell offset. Must be in range 0 to 80.</param>
            <param name="oldMask">The old mask before modified.</param>
            <param name="newMask">The mask to modify the cell.</param>
            <param name="setValue">
            The value to set on the cell. If the action is deletion,
            this argument should be -1.
            </param>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ValueChangedArgs.Cell">
            <summary>
            The cell offset. Must be in range 0 to 80.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ValueChangedArgs.OldMask">
            <summary>
            The old mask before modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ValueChangedArgs.NewMask">
            <summary>
            The new mask after modified.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuGrid.ValueChangedArgs.SetValue">
            <summary>
            The value. -1 when this value is not required.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ValueChangedArgs.Deconstruct(System.Int32@,System.Int16@,System.Int16@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="cell">(<see langword="out"/> parameter) The cell offset.</param>
            <param name="oldMask">(<see langword="out"/> parameter) The old mask.</param>
            <param name="newMask">(<see langword="out"/> parameter) The new mask.</param>
            <param name="setValue">(<see langword="out"/> parameter) the set value.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuGrid.ValueChangedArgs.Equals(Sudoku.Data.SudokuGrid.ValueChangedArgs@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Data.SudokuMap">
            <summary>
            Encapsulats a map that contains 729 positions to represent a candidate.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuMap.BufferLength">
            <summary>
            The length of the buffer.
            </summary>
            <remarks>
            Why 12? Because 12 is equals to <c>Ceiling(729 / 64)</c>.
            </remarks>
        </member>
        <member name="F:Sudoku.Data.SudokuMap.Shifting">
            <summary>
            Indicates the size of each unit.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SudokuMap.Empty">
            <summary>
            <para>Indicates an empty instance (all bits are 0).</para>
            <para>
            I strongly recommend you <b>should</b> use this instance instead of default constructor
            <see cref="M:Sudoku.Data.SudokuMap.#ctor"/>.
            </para>
            </summary>
            <seealso cref="M:Sudoku.Data.SudokuMap.#ctor"/>
        </member>
        <member name="F:Sudoku.Data.SudokuMap._innerBinary">
            <summary>
            The inner binary values.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(Sudoku.Data.SudokuMap@)">
            <summary>
            (Copy constructor) Initializes an instance with another one.
            </summary>
            <param name="another">(<see langword="in"/> parameter) The another instance.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified candidate and its peers.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(System.Int32,System.Boolean)">
            <summary>
            Inidicates an instance with the peer candidates of the specified candidate and a <see cref="T:System.Boolean"/>
            value indicating whether the map will process itself with <see langword="true"/> value.
            </summary>
            <param name="candidate">The candidate.</param>
            <param name="setItself">
            Indicates whether the map will process itself with <see langword="true"/> value.
            </param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(System.Int32[])">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(System.Int64[])">
            <summary>
            Initializes an instance with the binary array.
            </summary>
            <param name="binary">The array.</param>
            <exception cref="T:System.ArgumentException">Throws when the length is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(System.Int64*,System.Int32)">
            <summary>
            Initializes an instance with the pointer to the binary array and the length.
            </summary>
            <param name="binary">The pointer to the binary array.</param>
            <param name="length">The length.</param>
            <exception cref="T:System.ArgumentException">Throws when the length is invalid.</exception>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(Sudoku.Data.GridMap@,System.Int32)">
            <summary>
            Initializes an instance with the specified <see cref="T:Sudoku.Data.GridMap"/> and the number
            representing.
            </summary>
            <param name="map">(<see langword="in"/> parameter) The map.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">(<see langword="in"/> parameter) The candidates.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="P:Sudoku.Data.SudokuMap.IsEmpty">
            <summary>
            Indicates whether the map has no set bits.
            This property is equivalent to code '<c>!this.IsNotEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.SudokuMap.IsNotEmpty"/>
        </member>
        <member name="P:Sudoku.Data.SudokuMap.IsNotEmpty">
            <summary>
            Indicates whether the map has at least one set bit.
            This property is equivalent to code '<c>!this.IsEmpty</c>'.
            </summary>
            <seealso cref="P:Sudoku.Data.SudokuMap.IsEmpty"/>
        </member>
        <member name="P:Sudoku.Data.SudokuMap.Count">
            <summary>
            Indicates how many bits are set <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuMap.First">
            <summary>
            Gets the first set bit position. If the current map is empty,
            the return value will be <c>-1</c>.
            </summary>
            <remarks>
            The property will use the same process with <see cref="P:Sudoku.Data.SudokuMap.Offsets"/>,
            but the <see langword="yield"/> clause will be replaced with normal <see langword="return"/>s.
            </remarks>
            <seealso cref="P:Sudoku.Data.SudokuMap.Offsets"/>
        </member>
        <member name="P:Sudoku.Data.SudokuMap.PeerIntersection">
            <summary>
            Indicates the map of cells, which is the peer intersections.
            </summary>
            <example>
            For example, the code
            <code>
            var map = testMap.PeerIntersection;
            </code>
            is equivalent to the code
            <code>
            var map = SudokuMap.CreateInstance(testMap);
            </code>
            </example>
        </member>
        <member name="P:Sudoku.Data.SudokuMap.Offsets">
            <summary>
            Indicates all indices of set bits.
            </summary>
        </member>
        <member name="P:Sudoku.Data.SudokuMap.Candidate(System.Int32)">
            <summary>
            Gets or sets the result set case of the specified index.
            </summary>
            <param name="candidate">The candidate offset (index).</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
            <value>The <see cref="T:System.Boolean"/> value to set.</value>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.Equals(Sudoku.Data.SudokuMap@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.Overlaps(Sudoku.Data.SudokuMap@)">
            <summary>
            Indicates whether this map overlaps another one.
            </summary>
            <param name="other">(<see langword="in"/> parameter) The other map.</param>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.SetAt(System.Int32)">
            <summary>
            Get a n-th index of the <see langword="true"/> bit in this instance.
            </summary>
            <param name="index">The true bit index order.</param>
            <returns>The real index.</returns>
            <remarks>
            If you want to select the first set bit, please use <see cref="P:Sudoku.Data.SudokuMap.First"/> instead.
            </remarks>
            <seealso cref="P:Sudoku.Data.SudokuMap.First"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.SetAt(System.Index@)">
            <summary>
            Get a n-th index of the <see langword="true"/> bit in this instance.
            </summary>
            <param name="index">(<see langword="in"/> parameter) The true bit index order.</param>
            <returns>The real index.</returns>
            <remarks>
            If you want to select the first set bit, please use <see cref="P:Sudoku.Data.SudokuMap.First"/> instead.
            </remarks>
            <seealso cref="P:Sudoku.Data.SudokuMap.First"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.ToArray">
            <summary>
            Get all cell offsets whose bits are set <see langword="true"/>.
            </summary>
            <returns>An array of cell offsets.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.GetSubviewMask(System.Int32,System.Int32)">
            <summary>
            Get the subview mask of this map.
            </summary>
            <param name="region">The region.</param>
            <param name="digit">The digit.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.Reduce(System.Int32)">
            <summary>
            Get the final <see cref="T:Sudoku.Data.GridMap"/> to get all cells that the corresponding indices
            are set <see langword="true"/>.
            </summary>
            <param name="digit">The digit.</param>
            <returns>The map of all cells chosen.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.Add(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> or <see langword="false"/> value.
            </summary>
            <param name="offset">
            The cell offset. This value can be positive and negative. If 
            negative, the offset will be assigned <see langword="false"/>
            into the corresponding bit position of its absolute value.
            </param>
            <remarks>
            <para>
            For example, if the offset is -2 (~1), the [1] will be assigned <see langword="false"/>:
            <code>
            var map = new GridMap(xxx) { ~1 };
            </code>
            which is equivalent to:
            <code>
            var map = new GridMap(xxx);
            map[1] = false;
            </code>
            </para>
            <para>
            Note: The argument <paramref name="offset"/> should be with the bit-complement operator <c>~</c>
            to describe the value is a negative one. As the belowing example, -2 is described as <c>~1</c>,
            so the offset is 1, rather than 2.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.AddAnyway(System.Int32)">
            <summary>
            Set the specified cell as <see langword="true"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
            <remarks>
            Different with <see cref="M:Sudoku.Data.SudokuMap.Add(System.Int32)"/>, the method will process negative values,
            but this won't.
            </remarks>
            <seealso cref="M:Sudoku.Data.SudokuMap.Add(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.Remove(System.Int32)">
            <summary>
            Set the specified cell as <see langword="false"/> value.
            </summary>
            <param name="offset">The cell offset.</param>
            <remarks>
            Different with <see cref="M:Sudoku.Data.SudokuMap.Add(System.Int32)"/>, this method <b>can't</b> receive
            the negative value as the parameter.
            </remarks>
            <seealso cref="M:Sudoku.Data.SudokuMap.Add(System.Int32)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.AddRange(System.ReadOnlySpan{System.Int32}@)">
            <summary>
            Set the specified candidates as <see langword="true"/> value.
            </summary>
            <param name="candidates">(<see langword="in"/> parameter) The candidate offsets.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Set the specified candidates as <see langword="true"/> value.
            </summary>
            <param name="candidates">The candidate offsets.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.Clear">
            <summary>
            Clear all bits.
            </summary>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.AssignFixedArray(System.Int32,System.Boolean)">
            <summary>
            Calls the method while initializing.
            </summary>
            <param name="candidate">The candidate.</param>
            <param name="setItself">Indicates whether the map should set itself.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.CreateInstance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get the map of candidates, which is the peer intersections from the specified candidates.
            </summary>
            <param name="candidates">All candidates.</param>
            <returns>The result map.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_Equality(Sudoku.Data.SudokuMap@,Sudoku.Data.SudokuMap@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_Inequality(Sudoku.Data.SudokuMap@,Sudoku.Data.SudokuMap@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_OnesComplement(Sudoku.Data.SudokuMap@)">
            <summary>
            Reverse status for all candidates, which means all <see langword="true"/> bits
            will be set <see langword="false"/>, and all <see langword="false"/> bits
            will be set <see langword="true"/>.
            </summary>
            <param name="map">(<see langword="in"/> parameter) The instance to negate.</param>
            <returns>The negative result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_BitwiseAnd(Sudoku.Data.SudokuMap@,Sudoku.Data.SudokuMap@)">
            <summary>
            Get all candidates that two <see cref="T:Sudoku.Data.SudokuMap"/>s both contain.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_BitwiseOr(Sudoku.Data.SudokuMap@,Sudoku.Data.SudokuMap@)">
            <summary>
            Get all candidates from two <see cref="T:Sudoku.Data.SudokuMap"/>s.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The union result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_ExclusiveOr(Sudoku.Data.SudokuMap@,Sudoku.Data.SudokuMap@)">
            <summary>
            Get all candidates that only appears once in two <see cref="T:Sudoku.Data.SudokuMap"/>s.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The symmetrical difference result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_Subtraction(Sudoku.Data.SudokuMap@,Sudoku.Data.SudokuMap@)">
            <summary>
            Get a <see cref="T:Sudoku.Data.GridMap"/> that contains all <paramref name="left"/> candidates
            but not in <paramref name="right"/> candidates.
            </summary>
            <param name="left">(<see langword="in"/> parameter) The left instance.</param>
            <param name="right">(<see langword="in"/> parameter) The right instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_Implicit(Sudoku.Data.SudokuMap@)~System.Int32[]">
            <summary>
            Implicit cast from <see cref="T:Sudoku.Data.SudokuMap"/> to <see cref="T:System.Int32"/>[].
            </summary>
            <param name="map">(<see langword="in"/> parameter) The map.</param>
        </member>
        <member name="M:Sudoku.Data.SudokuMap.op_Implicit(System.Int32[])~Sudoku.Data.SudokuMap">
            <summary>
            Implicit cast from <see cref="T:System.Int32"/>[] to <see cref="T:Sudoku.Data.SudokuMap"/>.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="T:Sudoku.Data.SymmetryType">
            <summary>
            Define a symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.None">
            <summary>
            Indicates none of symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.Central">
            <summary>
            Indicates the central symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.Diagonal">
            <summary>
            Indicates the diagonal symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.AntiDiagonal">
            <summary>
            Indicates the anti-diagonal symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.XAxis">
            <summary>
            Indicates the x-axis symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.YAxis">
            <summary>
            Indicates the y-axis symmetry type.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.AxisBoth">
            <summary>
            Indicates both X-axis and Y-axis symmetry types.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.DiagonalBoth">
            <summary>
            Indicates both diagonal and anti-diagonal symmetry types.
            </summary>
        </member>
        <member name="F:Sudoku.Data.SymmetryType.All">
            <summary>
            Indicates all symmetry types should be satisfied.
            </summary>
        </member>
        <member name="T:Sudoku.Extensions.ArrayEx">
            <summary>
            Provides extension methods on <see cref="T:System.Array"/>.
            </summary>
            <seealso cref="T:System.Array"/>
        </member>
        <member name="M:Sudoku.Extensions.ArrayEx.Sort``1(``0[],)">
            <summary>
            Sort the specified array.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <param name="comparer">The method to compare two elements.</param>
            <remarks>
            If you want to use this method, please note that the <typeparamref name="T"/> may not be the built-in
            types such as <see cref="T:System.Int32"/>, <see cref="T:System.Single"/> or so on, because they can use operators directly.
            </remarks>
        </member>
        <member name="M:Sudoku.Extensions.ArrayEx.GetSubsets``1(``0[],System.Int32)">
            <summary>
            Get all subsets from the specified number of the values to take.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <param name="count">The number of elements you want to take.</param>
            <returns>All subsets.</returns>
        </member>
        <member name="T:Sudoku.Extensions.BitArrayEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <seealso cref="T:System.Collections.BitArray"/>
        </member>
        <member name="M:Sudoku.Extensions.BitArrayEx.GetCardinality(System.Collections.BitArray)">
            <summary>
            Get the cardinality of the specified <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <returns>The total number of bits set <see langword="true"/>.</returns>
        </member>
        <member name="T:Sudoku.Extensions.BooleanEx">
            <summary>
            Provides extension methods on <see cref="T:System.Boolean"/>.
            </summary>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:Sudoku.Extensions.BooleanEx.Flip(System.Boolean@)">
            <summary>
            Flip the current <see cref="T:System.Boolean"/> value (i.e. <see langword="true"/>
            -&gt; <see langword="false"/>, <see langword="false"/> -&gt; <see langword="true"/>),
            which is equivalent to code '<c>b = !b</c>' or '<c>b ^= true</c>'.
            </summary>
            <param name="this">(<see langword="this ref"/> parameter) The value.</param>
        </member>
        <member name="T:Sudoku.Extensions.ByteEx">
            <summary>
            Provides extension methods on <see cref="T:System.Byte"/>.
            </summary>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.IsPowerOfTwo(System.Byte)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.IsPowerOfTwo(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.FindFirstSet(System.Byte)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.FindFirstSet(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.PopCount(System.Byte)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.PopCount(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.GetNextSet(System.Byte,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.SetAt(System.Byte,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.GetAllSets(System.Byte)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.GetEnumerator(System.Byte)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.ByteEx.ReverseBits(System.Byte@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="T:Sudoku.Extensions.CloneableEx">
            <summary>
            Provides extension methods on <see cref="T:System.ICloneable"/>.
            </summary>
            <seealso cref="T:System.ICloneable"/>
        </member>
        <member name="M:Sudoku.Extensions.CloneableEx.TryCloneAs``1(System.ICloneable)">
            <summary>
            Clone this object and try to cast to the specified type.
            If the type is invalid to cast, the return value will be <see langword="null"/>.
            </summary>
            <typeparam name="TClass">
            The type to cast. The type should be a <see langword="class"/> because the type
            to implement <see cref="T:System.ICloneable"/> should be a reference type.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>
            The cast result. If cast is valid, the value will be so valid; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Extensions.CloneableEx.CloneAs``1(System.ICloneable)">
            <summary>
            Clone this object and cast to the specified type no matter how.
            If the conversion is invalid, the method will throw <see cref="T:System.InvalidCastException"/>.
            </summary>
            <typeparam name="TClass">
            The type to cast. The type should be a <see langword="class"/> because the type
            to implement <see cref="T:System.ICloneable"/> should be a reference type.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>The cast result.</returns>
            <exception cref="T:System.InvalidCastException">
            Throws when the cast is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.CloneableEx.Cast``1(System.ICloneable)">
            <summary>
            Try to cast the current instance to the generic cloneable type <see cref="T:System.ICloneable`1"/>.
            </summary>
            <typeparam name="TClass">The type of the instance.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>The cast result. If cast is invalid, the return value will be <see langword="null"/>.</returns>
            <seealso cref="T:System.ICloneable`1"/>
        </member>
        <member name="T:Sudoku.Extensions.CollectionEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="values">
            (<see langword="params"/> parameter) The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
            <param name="verifyDuplicate">
            Indicates whether the method should check duplicating values first.
            If so, the value won't add (do nothing).
            </param>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.AddIfDoesNotContain``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/> when
            the specified list doesn't contain the specified element.
            </summary>
            <typeparam name="T">The type of all elements.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Sudoku.Extensions.CollectionEx.NullableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get a result collection from a may-be-<see langword="null"/> collection.
            If the collection is <see langword="null"/>, the method will return an empty array
            of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <returns>The return collection that can't be <see langword="null"/>.</returns>
        </member>
        <member name="T:Sudoku.Extensions.DoubleEx">
            <summary>
            Provides extension methods on <see cref="T:System.Double"/>.
            </summary>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="M:Sudoku.Extensions.DoubleEx.NearlyEquals(System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.DoubleEx.NearlyEquals(System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Extensions.EnumEx">
            <summary>
            Provides extension methods on <see cref="T:System.Enum"/>.
            </summary>
            <seealso cref="T:System.Enum"/>
        </member>
        <member name="M:Sudoku.Extensions.EnumEx.GetValues``1">
            <summary>
            Get all enumeration fields.
            </summary>
            <typeparam name="TEnum">The type of enumeration type.</typeparam>
            <returns>The fields.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumEx.LengthOf``1">
            <summary>
            Get the total length of the specified enumeration type (how many fields there are).
            </summary>
            <typeparam name="TEnum">The type of the enmeration.</typeparam>
            <returns>The <see cref="T:System.Int32"/> number indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumEx.Flags``1(``0,``0)">
            <inheritdoc cref="M:System.Enum.HasFlag(System.Enum)"/>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The current enumeration type instance.</param>
            <param name="other">The other instance to check.</param>
            <exception cref="T:System.ArgumentException">Throws when the used bytes aren't 1, 2 or 4.</exception>
            <remarks>
            This method is same as <see cref="M:System.Enum.HasFlag(System.Enum)"/>, but without boxing and unboxing operations.
            </remarks>
            <seealso cref="M:System.Enum.HasFlag(System.Enum)"/>
        </member>
        <member name="T:Sudoku.Extensions.EnumerableEx">
            <summary>
            Provides a set of static methods for querying objects that implement
            <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>This class has the same function and status with <see cref="T:System.Linq.Enumerable"/>.</remarks>
            <seealso cref="T:System.Collections.IEnumerable"/>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.GetElementByMinSelector``2(System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Get the element whose selection is the minimal one.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TComparable">The comparing type.</typeparam>
            <param name="this">The elements to search the minimal one.</param>
            <param name="selector">The selector.</param>
            <returns>
            The result value. If the collection doesn't have a minimal element,
            the result will be the default value, where it will be <see langword="null"/>, which
            is decided in the element type.
            </returns>
            <remarks>
            Note that the return value can be <see langword="null"/> if the list can't be found
            the specified element, but this type parameter is named <typeparamref name="T"/>
            because each element can't be <see langword="null"/>
            (either value types or non-<see langword="null"/> reference types).
            </remarks>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the specified collection is empty (no elements in it).
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.All``1(System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Determines whether all elements of a sequence satisfy a condition
            specified as <paramref name="selector"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="selector">The selector, specified a function pointer.</param>
            <returns>The result indicating whether all values satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.All``2(System.Collections.Generic.IEnumerable{``0},,``1@)">
            <summary>
            Determines whether all elements of a sequence satisfy a condition
            specified as <paramref name="selector"/>. In addition, the method allows you
            pass another <see langword="in"/> parameter to participate in checking.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <typeparam name="TOther">The type of the another value to participate in checking.</typeparam>
            <param name="this">(<see langword="in"/> parameter) The list.</param>
            <param name="selector">The selector.</param>
            <param name="value">(<see langword="in"/> parameter) The value to participate in checking.</param>
            <returns>The result indicating whether all values satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.All``3(System.Collections.Generic.IEnumerable{``0},,``1@,``2@)">
            <summary>
            Determines whether all elements of a sequence satisfy a condition
            specified as <paramref name="selector"/>. In addition, the method allows you
            pass 2 <see langword="in"/> parameters to participate in checking.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <typeparam name="T1">The first type of the another value to participate in checking.</typeparam>
            <typeparam name="T2">The second type of the another value to participate in checking.</typeparam>
            <param name="this">(<see langword="in"/> parameter) The list.</param>
            <param name="selector">The selector.</param>
            <param name="value1">
            (<see langword="in"/> parameter) The first value to participate in checking.
            </param>
            <param name="value2">
            (<see langword="in"/> parameter) The second value to participate in checking.
            </param>
            <returns>The result indicating whether all values satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.Any``1(System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Determines whether any an element of a sequence satisfy a condition
            specified as <paramref name="selector"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="in"/> parameter) The list.</param>
            <param name="selector">The selector.</param>
            <returns>The result indicating whether any an element satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.Any``2(System.Collections.Generic.IEnumerable{``0},,``1@)">
            <summary>
            Determines whether any an element of a sequence satisfy a condition
            specified as <paramref name="selector"/>. In addition, the method allows you
            pass another <see langword="in"/> parameter to participate in checking.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <typeparam name="TOther">The type of the another value to participate in checking.</typeparam>
            <param name="this">(<see langword="in"/> parameter) The list.</param>
            <param name="selector">The selector.</param>
            <param name="value">(<see langword="in"/> parameter) The value to participate in checking.</param>
            <returns>The result indicating whether any an element satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.Any``3(System.Collections.Generic.IEnumerable{``0},,``1@,``2@)">
            <summary>
            Determines whether any an element of a sequence satisfy a condition
            specified as <paramref name="selector"/>. In addition, the method allows you
            pass 2 <see langword="in"/> parameters to participate in checking.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <typeparam name="T1">The first type of the another value to participate in checking.</typeparam>
            <typeparam name="T2">The second type of the another value to participate in checking.</typeparam>
            <param name="this">(<see langword="in"/> parameter) The list.</param>
            <param name="selector">The selector.</param>
            <param name="value1">
            (<see langword="in"/> parameter) The first value to participate in checking.
            </param>
            <param name="value2">
            (<see langword="in"/> parameter) The second value to participate in checking.
            </param>
            <returns>The result indicating whether any an element satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.Any``4(System.Collections.Generic.IEnumerable{``0},,``1@,``2@,``3@)">
            <summary>
            Determines whether any an element of a sequence satisfy a condition
            specified as <paramref name="selector"/>. In addition, the method allows you
            pass 3 <see langword="in"/> parameters to participate in checking.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <typeparam name="T1">The first type of the another value to participate in checking.</typeparam>
            <typeparam name="T2">The second type of the another value to participate in checking.</typeparam>
            <typeparam name="T3">The third type of the another value to participate in checking.</typeparam>
            <param name="this">(<see langword="in"/> parameter) The list.</param>
            <param name="selector">The selector.</param>
            <param name="value1">
            (<see langword="in"/> parameter) The first value to participate in checking.
            </param>
            <param name="value2">
            (<see langword="in"/> parameter) The second value to participate in checking.
            </param>
            <param name="value3">
            (<see langword="in"/> parameter) The third value to participate in checking.
            </param>
            <returns>The result indicating whether any an element satisfy the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.HasOnlyOneElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the specified list has only one element.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.Count``1(System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Count up all elements satisfying the specified condition.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="selector">The condition to check, specified as a function pointer.</param>
            <returns>The number of all elements satisfying the condition.</returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Get the first element or default value.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            The result. The value is <see langword="default"/> when the collection cannot found any
            elements satisfying the condition.
            </returns>
        </member>
        <member name="M:Sudoku.Extensions.EnumerableEx.Max``1(System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Get the maximum value in this collection.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="selector">The selector.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Extensions.FormatProviderEx">
            <summary>
            Provides extension methods on <see cref="T:System.IFormatProvider"/>.
            </summary>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="M:Sudoku.Extensions.FormatProviderEx.HasFormatted(System.IFormatProvider,System.Object,System.String,System.String@)">
            <summary>
            To check whether the format provider has defined the format rule.
            If the rule is defined, this method will return the string representation
            according to the format rule.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The format provider.</param>
            <param name="obj">The object.</param>
            <param name="format">The format string.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result. If the format has been defined,
            this value won't be <see langword="null"/>.
            </param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
            <remarks>
            You should use this as:
            <code>
            if (formatProvider.HasFormatted(this, format, out string? result)) return result;
            </code>
            </remarks>
        </member>
        <member name="T:Sudoku.Extensions.GenericEx">
            <summary>
            Provides extension methods on generic instance.
            </summary>
        </member>
        <member name="M:Sudoku.Extensions.GenericEx.NullableToString``1(``0)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>. This method will never throw.
            </summary>
            <typeparam name="T">The type of this instance.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Extensions.GenericEx.NullableToString``1(``0,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object
            though the object is <see langword="null"/>. This method will never throw.
            </summary>
            <typeparam name="T">The type of this instance.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <param name="defaultValue">
            The default return value when the current object is <see langword="null"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> represents the current object.
            If the current object is <see langword="null"/>, this value will be
            <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="T:Sudoku.Extensions.IndexEx">
            <summary>
            Provides extension methods on <see cref="T:System.Index"/>.
            </summary>
            <seealso cref="T:System.Index"/>
        </member>
        <member name="M:Sudoku.Extensions.IndexEx.Deconstruct(System.Index@,System.Boolean@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="this">(<see langword="this in"/> parameter) The index.</param>
            <param name="isFromEnd">
            (<see langword="out"/> parameter) Indicates whether the current index is from end.
            </param>
            <param name="value">(<see langword="out"/> parameter) Indicates the value.</param>
        </member>
        <member name="T:Sudoku.Extensions.Int16Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int16"/>.
            </summary>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.IsPowerOfTwo(System.Int16)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.IsPowerOfTwo(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.FindFirstSet(System.Int16)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.FindFirstSet(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.PopCount(System.Int16)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.PopCount(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.GetNextSet(System.Int16,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.SetAt(System.Int16,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.GetAllSets(System.Int16)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.GetEnumerator(System.Int16)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.ReverseBits(System.Int16@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.Where(System.Int16,System.Predicate{System.Int32})">
            <summary>
            <c>Where</c> method on <see cref="T:System.Int16"/> values to enable the usage of <see langword="where"/> clause.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="condition">The condition for each set bits.</param>
            <returns>
            All set bits satisfying the specified condition, representing as a <see cref="T:System.Int16"/> value.
            </returns>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.Select``1(System.Int16,System.Func{System.Int32,``0})">
            <summary>
            <c>Where</c> method on <see cref="T:System.Int16"/> values to enable the usage of <see langword="select"/> clause.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="selector">The selector for each set bits.</param>
            <returns>The result list using projection.</returns>
        </member>
        <member name="M:Sudoku.Extensions.Int16Ex.GetMaskSubsets(System.Int16,System.Int32)">
            <summary>
            Simply called <c>.GetAllSets().ToArray().GetSubsets(count)</c>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The mask.</param>
            <param name="count">The number of set bits you want to take.</param>
            <returns>The mask subset list.</returns>
        </member>
        <member name="T:Sudoku.Extensions.Int32Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int32"/>.
            </summary>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.IsPowerOfTwo(System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.IsPowerOfTwo(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.FindFirstSet(System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.FindFirstSet(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.PopCount(System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.PopCount(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.GetNextSet(System.Int32,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.SetAt(System.Int32,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.GetAllSets(System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.GetEnumerator(System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.ReverseBits(System.Int32@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int32Ex.GetMaskSubsets(System.Int32,System.Int32)">
            <summary>
            Simply called <c>.GetAllSets().ToArray().GetSubsets(count)</c>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The mask.</param>
            <param name="count">The number of set bits you want to take.</param>
            <returns>The mask subset list.</returns>
        </member>
        <member name="T:Sudoku.Extensions.Int64Ex">
            <summary>
            Provides extension methods on <see cref="T:System.Int64"/>.
            </summary>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.IsPowerOfTwo(System.Int64)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.IsPowerOfTwo(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.FindFirstSet(System.Int64)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.FindFirstSet(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.PopCount(System.Int64)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.PopCount(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.GetNextSet(System.Int64,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.SetAt(System.Int64,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.GetAllSets(System.Int64)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.GetEnumerator(System.Int64)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:Sudoku.Extensions.Int64Ex.ReverseBits(System.Int64@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="T:Sudoku.Extensions.ListEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="M:Sudoku.Extensions.ListEx.RemoveLastElement``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last element of the specified list, which is equivalent to code:
            <code>
            list.RemoveAt(list.Count - 1);
            </code>
            or
            <code>
            list.RemoveAt(^1); // Call extension method 'RemoveAt'.
            </code>
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <seealso cref="M:Sudoku.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index@)"/>
        </member>
        <member name="M:Sudoku.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index@)">
            <summary>
            Remove at the element in the specified index.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="index">(<see langword="in"/> parameter) The index to remove.</param>
        </member>
        <member name="M:Sudoku.Extensions.ListEx.Sort``1(System.Collections.Generic.IList{``0},)">
            <summary>
            Sort the specified list.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="comparer">The method to compare two elements.</param>
            <remarks>
            If you want to use this method, please note that the <typeparamref name="T"/>
            may not be the built-in types such as <see cref="T:System.Int32"/>, <see cref="T:System.Single"/> or so on,
            because they can use operators directly.
            </remarks>
        </member>
        <member name="M:Sudoku.Extensions.ListEx.Distinct``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove duplicate element in the list.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
        </member>
        <member name="T:Sudoku.Extensions.RangeEnumerator">
            <summary>
            Defines a range iterator.
            </summary>
        </member>
        <member name="F:Sudoku.Extensions.RangeEnumerator._end">
            <summary>
            Indicates the end index, read-only.
            </summary>
        </member>
        <member name="F:Sudoku.Extensions.RangeEnumerator._current">
            <summary>
            Indicates the current value.
            </summary>
        </member>
        <member name="P:Sudoku.Extensions.RangeEnumerator.System#Collections#Generic#IEnumerator{System#Int32}#Current">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Extensions.RangeEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Extensions.RangeEnumerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with start and end index value.
            </summary>
            <param name="start">The start index value.</param>
            <param name="end">The end index value.</param>
        </member>
        <member name="M:Sudoku.Extensions.RangeEnumerator.System#Collections#IEnumerator#MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Extensions.RangeEnumerator.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Extensions.RangeEnumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Extensions.RangeEx">
            <summary>
            Provides extension methods on <see cref="T:System.Range"/>.
            </summary>
            <seealso cref="T:System.Range"/>
        </member>
        <member name="M:Sudoku.Extensions.RangeEx.GetEnumerator(System.Range@)">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            <param name="this">(<see langword="this in"/> parameter) The range.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the index is from end, or the start index is greater than end one.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.RangeEx.Deconstruct(System.Range@,System.Index@,System.Index@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="this">(<see langword="this in"/> parameter) The range.</param>
            <param name="start">(<see langword="out"/> parameter) The start index.</param>
            <param name="end">(<see langword="out"/> parameter) The end index.</param>
        </member>
        <member name="T:Sudoku.Extensions.SingleEx">
            <summary>
            Provides extension methods on <see cref="T:System.Single"/>.
            </summary>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="M:Sudoku.Extensions.SingleEx.NearlyEquals(System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.SingleEx.NearlyEquals(System.Single,System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Extensions.StringBuilderEx">
            <summary>
            Provides extension methods on <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <seealso cref="T:System.Text.StringBuilder"/>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse all characters in a specified string builder instance.
            </summary>
            <param name="this">
            (<see langword="this"/> parameter) The instance to reverse all characters.
            </param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.RemoveFromEnd(System.Text.StringBuilder,System.Int32)">
            <summary>
            Remove the specified number of characters from the end of the string builder
            instance.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance to remove characters.</param>
            <param name="length">The number of characters you want to remove.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Char)">
            <summary>
            Append a character to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="value">The character you want to append.</param>
            <returns>The reference of the current instance.</returns>
            <remarks>
            The extension method is used in order to avoid implicit conversion from
            <see cref="T:System.Char"/> to <see cref="T:System.Int32"/>. If you want to append everything,
            please use the method <see cref="M:Sudoku.Extensions.StringBuilderEx.AppendLine``1(System.Text.StringBuilder,``0)"/>.
            </remarks>
            <seealso cref="P:System.Environment.NewLine"/>
            <seealso cref="M:Sudoku.Extensions.StringBuilderEx.AppendLine``1(System.Text.StringBuilder,``0)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendLine``1(System.Text.StringBuilder,``0)">
            <summary>
            Append a <see cref="T:System.String"/> representation of an object
            to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <typeparam name="T">The type of the instance to add.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="obj">
            The <see cref="T:System.String"/> representation of an object you want to append.
            </param>
            <returns>The reference of the current instance.</returns>
            <remarks>
            This method can solve the problem of boxing and unboxing.
            </remarks>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendLines(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append several lines into the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="lines">The lines you want to add.</param>
            <returns>The reference of the parameter <paramref name="this"/>.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.NullableAppend(System.Text.StringBuilder,System.String)">
            <summary>
            Append the text into the tail of the <see cref="T:System.Text.StringBuilder"/> object if
            the text is not <see langword="null"/>; otherwise, do nothing.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string builder.</param>
            <param name="text">The text to add.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.NullableAppendLine(System.Text.StringBuilder,System.String)">
            <summary>
            Append the text into the tail of the <see cref="T:System.Text.StringBuilder"/> object if
            the text is not <see langword="null"/>, and then add a terminator at the tail;
            otherwise, do nothing.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string builder.</param>
            <param name="text">The text to add.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendRange``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.String"/> representation.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendRange``2(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.String"/> representation.
            This method allows you defining a custom converter to convert the specified value into
            a new value.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <typeparam name="TOther">The return type after converted.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <param name="converter">The converter method specified as a function pointer.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.AppendRange``3(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},,``1@)">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.String"/> representation.
            This method allows you defining a custom converter to convert the specified value into
            a new value. In addition, this method can be with another value specified as
            <paramref name="value"/>.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <typeparam name="TAuxiliary">
            The type of that auxiliary value (i.e. type of <paramref name="value"/>).
            </typeparam>
            <typeparam name="TResult">The return type.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <param name="converter">The converter method specified as a function pointer.</param>
            <param name="value">The auxiliary value.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringBuilderEx.CopyTo(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Copy the specified string builder to the specified target.
            </summary>
            <param name="this">The base string builder.</param>
            <param name="to">The target builder.</param>
            <exception cref="T:System.ArgumentException">
            Throws if the target instance doesn't have enough space to store all characters
            from the base one.
            </exception>
        </member>
        <member name="T:Sudoku.Extensions.StringEx">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.SatisfyPattern(System.String,System.String)">
            <summary>
            Check whether the specified string instance is satisfied
            the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.IsMatch(System.String,System.String)">
            <summary>
            Check whether the specified string instance can match the value
            using the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of
            the specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The value after matching. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The matched string value. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.MatchAll(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.MatchAll(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern, using the specified matching
            options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.Reserve(System.String,System.String)">
            <summary>
            Reserve all characters that satisfy the specified pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <param name="reservePattern">The pattern that reserved characters satisfied.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.IsRegexPattern(System.String)">
            <summary>
            To check if the current string value is a valid regular
            expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.TrimVerbatim(System.String)">
            <summary>
            Trim all spaces when they started a new line, or null lines.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <returns>The trimmed result.</returns>
            <remarks>
            Note that all null lines and header spaces are removed.
            </remarks>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.TrimEndNewLine(System.String)">
            <summary>
            Trim new-line characters from the tail of the string.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Extensions.StringEx.SplitByNewLine(System.String)">
            <summary>
            Split the string with the fixed characters (new line).
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Drawing.DrawingInfo">
            <summary>
            Encapsulates a drawing information pair for highlighting cells,
            candidates and regions.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes an instance with ID and value.
            </summary>
            <param name="id">The ID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Sudoku.Drawing.DrawingInfo.Id">
            <summary>
            Indicates the ID value. The ID is the unique key corresponding to one color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.DrawingInfo.Value">
            <summary>
            Indicates the value.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.Equals(Sudoku.Drawing.DrawingInfo@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.Deconstruct(System.Int64@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="id">(<see langword="out"/> parameter) The ID.</param>
            <param name="value">(<see langword="out"/> parameter) The value.</param>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.op_Equality(Sudoku.Drawing.DrawingInfo@,Sudoku.Drawing.DrawingInfo@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.op_Inequality(Sudoku.Drawing.DrawingInfo@,Sudoku.Drawing.DrawingInfo@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Drawing.DrawingInfo.op_Implicit(System.ValueTuple{System.Int64,System.Int32}@)~Sudoku.Drawing.DrawingInfo">
            <summary>
            Implicit cast from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Sudoku.Drawing.DrawingInfo"/>.
            </summary>
            <param name="pair">(<see langword="in"/> parameter) The pair value.</param>
        </member>
        <member name="T:Sudoku.Solving.Annotations.AliasAttribute">
            <summary>
            To mark on a enum field to give an alias.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Annotations.AliasAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the enum field.
            </summary>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:Sudoku.Solving.Annotations.AliasAttribute.FieldName">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Annotations.AliasAttribute.Convert``2(``0)">
            <summary>
            Convert the specified enum field to the specified type field.
            </summary>
            <typeparam name="TEnumBase">The base type of the enum field.</typeparam>
            <typeparam name="TEnumTarget">The target enum type to convert to.</typeparam>
            <param name="enumField">The enum field.</param>
            <returns>The result. Return <see langword="null"/> when the conversion is failed.</returns>
        </member>
        <member name="T:Sudoku.Solving.Annotations.TechniqueDisplayAttribute">
            <summary>
            <para>
            To mark on a technique searcher class to provide additional displaying messages
            which are used in UI forms, such as technique priority settings form.
            </para>
            <para>
            You can use this instance to mark on a enumeration field such as <see cref="T:Sudoku.Solving.Manual.TechniqueCode"/>
            to show the name on the screen also.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.TechniqueCode"/>
        </member>
        <member name="M:Sudoku.Solving.Annotations.TechniqueDisplayAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified displaying name.
            </summary>
            <param name="displayName">The name.</param>
        </member>
        <member name="P:Sudoku.Solving.Annotations.TechniqueDisplayAttribute.DisplayName">
            <summary>
            Indicates the display name of this technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Annotations.TechniqueDisplayAttribute.GetDisplayName``1(``0)">
            <summary>
            Get the display name of the specified enum field.
            </summary>
            <typeparam name="TEnum">The type of the enum field.</typeparam>
            <param name="enumField">The enum field to check.</param>
            <returns>
            The display name. Return <see langword="null"/> when the field doesn't mark this attribute.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.TechniqueCode">
            <summary>
            Represents a technique instance, which is used for comparison.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.None">
            <summary>
            The placeholder of this enumeration type.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FullHouse">
            <summary>
            Indicates the full house.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LastDigit">
            <summary>
            Indicates the last digit.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenSingleRow">
            <summary>
            Indicates the hidden single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenSingleColumn">
            <summary>
            Indicates the hidden single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenSingleBlock">
            <summary>
            Indicates the hidden single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedSingle">
            <summary>
            Indicates the naked single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Pointing">
            <summary>
            Indicates the pointing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Claiming">
            <summary>
            Indicates the claiming.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlmostLockedPair">
            <summary>
            Indicates the ALP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlmostLockedTriple">
            <summary>
            Indicates the ALT.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlmostLockedQuadruple">
            <summary>
            Indicates the ALQ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedPair">
            <summary>
            Indicates the naked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedPairPlus">
            <summary>
            Indicates the naked pair plus (naked pair (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LockedPair">
            <summary>
            Indicates the locked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenPair">
            <summary>
            Indicates the hidden pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedTriple">
            <summary>
            Indicates the naked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedTriplePlus">
            <summary>
            Indicates the naked triple plus (naked triple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LockedTriple">
            <summary>
            Indicates the locked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenTriple">
            <summary>
            Indicates the hidden triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedQuadruple">
            <summary>
            Indicates the naked quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NakedQuadruplePlus">
            <summary>
            Indicates the naked quadruple plus (naked quadruple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenQuadruple">
            <summary>
            Indicates the hidden quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XWing">
            <summary>
            Indicates the X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedXWing">
            <summary>
            Indicates the finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiXWing">
            <summary>
            Indicates the sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedXWing">
            <summary>
            Indicates the siamese finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiXWing">
            <summary>
            Indicates the siamese sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenXWing">
            <summary>
            Indicates the franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenXWing">
            <summary>
            Indicates the finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenXWing">
            <summary>
            Indicates the sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenXWing">
            <summary>
            Indicates the siamese finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenXWing">
            <summary>
            Indicates the siamese sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantXWing">
            <summary>
            Indicates the mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantXWing">
            <summary>
            Indicates the finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantXWing">
            <summary>
            Indicates the sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantXWing">
            <summary>
            Indicates the siamese finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantXWing">
            <summary>
            Indicates the siamese sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Swordfish">
            <summary>
            Indicates the swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedSwordfish">
            <summary>
            Indicates the finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiSwordfish">
            <summary>
            Indicates the sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedSwordfish">
            <summary>
            Indicates the siamese finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiSwordfish">
            <summary>
            Indicates the siamese sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenSwordfish">
            <summary>
            Indicates the swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenSwordfish">
            <summary>
            Indicates the finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenSwordfish">
            <summary>
            Indicates the sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenSwordfish">
            <summary>
            Indicates the siamese finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenSwordfish">
            <summary>
            Indicates the siamese sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantSwordfish">
            <summary>
            Indicates the mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantSwordfish">
            <summary>
            Indicates the finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantSwordfish">
            <summary>
            Indicates the sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantSwordfish">
            <summary>
            Indicates the siamese finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantSwordfish">
            <summary>
            Indicates the siamese sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Jellyfish">
            <summary>
            Indicates the jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedJellyfish">
            <summary>
            Indicates the finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiJellyfish">
            <summary>
            Indicates the sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedJellyfish">
            <summary>
            Indicates the siamese finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiJellyfish">
            <summary>
            Indicates the siamese sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenJellyfish">
            <summary>
            Indicates the franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenJellyfish">
            <summary>
            Indicates the finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenJellyfish">
            <summary>
            Indicates the sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenJellyfish">
            <summary>
            Indicates the siamese finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenJellyfish">
            <summary>
            Indicates the siamese sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantJellyfish">
            <summary>
            Indicates the mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantJellyfish">
            <summary>
            Indicates the finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantJellyfish">
            <summary>
            Indicates the sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantJellyfish">
            <summary>
            Indicates the siamese finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantJellyfish">
            <summary>
            Indicates the siamese sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Squirmbag">
            <summary>
            Indicates the squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedSquirmbag">
            <summary>
            Indicates the finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiSquirmbag">
            <summary>
            Indicates the sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedSquirmbag">
            <summary>
            Indicates the siamese finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiSquirmbag">
            <summary>
            Indicates the siamese sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenSquirmbag">
            <summary>
            Indicates the franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenSquirmbag">
            <summary>
            Indicates the finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenSquirmbag">
            <summary>
            Indicates the sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenSquirmbag">
            <summary>
            Indicates the siamese finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenSquirmbag">
            <summary>
            Indicates the siamese sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantSquirmbag">
            <summary>
            Indicates the mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantSquirmbag">
            <summary>
            Indicates the finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantSquirmbag">
            <summary>
            Indicates the sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantSquirmbag">
            <summary>
            Indicates the siamese finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantSquirmbag">
            <summary>
            Indicates the siamese sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Whale">
            <summary>
            Indicates the whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedWhale">
            <summary>
            Indicates the finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiWhale">
            <summary>
            Indicates the sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedWhale">
            <summary>
            Indicates the siamese finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiWhale">
            <summary>
            Indicates the siamese sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenWhale">
            <summary>
            Indicates the franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenWhale">
            <summary>
            Indicates the finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenWhale">
            <summary>
            Indicates the sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenWhale">
            <summary>
            Indicates the siamese finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenWhale">
            <summary>
            Indicates the siamese sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantWhale">
            <summary>
            Indicates the mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantWhale">
            <summary>
            Indicates the finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantWhale">
            <summary>
            Indicates the sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantWhale">
            <summary>
            Indicates the siamese finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantWhale">
            <summary>
            Indicates the siamese sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Leviathan">
            <summary>
            Indicates the leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedLeviathan">
            <summary>
            Indicates the finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiLeviathan">
            <summary>
            Indicates the sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedLeviathan">
            <summary>
            Indicates the siamese finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiLeviathan">
            <summary>
            Indicates the siamese sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FrankenLeviathan">
            <summary>
            Indicates the franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedFrankenLeviathan">
            <summary>
            Indicates the finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiFrankenLeviathan">
            <summary>
            Indicates the sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedFrankenLeviathan">
            <summary>
            Indicates the siamese finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiFrankenLeviathan">
            <summary>
            Indicates the siamese sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MutantLeviathan">
            <summary>
            Indicates the mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FinnedMutantLeviathan">
            <summary>
            Indicates the finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SashimiMutantLeviathan">
            <summary>
            Indicates the sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseFinnedMutantLeviathan">
            <summary>
            Indicates the siamese finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSashimiMutantLeviathan">
            <summary>
            Indicates the siamese sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyWing">
            <summary>
            Indicates the XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyzWing">
            <summary>
            Indicates the XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.WxyzWing">
            <summary>
            Indicates the WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.VwxyzWing">
            <summary>
            Indicates the VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UvwxyzWing">
            <summary>
            Indicates the UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TuvwxyzWing">
            <summary>
            Indicates the TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.StuvwxyzWing">
            <summary>
            Indicates the STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.RstuvwxyzWing">
            <summary>
            Indicates the RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteWxyzWing">
            <summary>
            Indicates the incomplete WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteVwxyzWing">
            <summary>
            Indicates the incomplete VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteUvwxyzWing">
            <summary>
            Indicates the incomplete UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteTuvwxyzWing">
            <summary>
            Indicates the incomplete TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteStuvwxyzWing">
            <summary>
            Indicates the incomplete STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.IncompleteRstuvwxyzWing">
            <summary>
            Indicates the incomplete RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.WWing">
            <summary>
            Indicates the W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.MWing">
            <summary>
            Indicates the M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LocalWing">
            <summary>
            Indicates the local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SplitWing">
            <summary>
            Indicates the split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HybridWing">
            <summary>
            Indicates the hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyWing">
            <summary>
            Indicates the grouped XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedWWing">
            <summary>
            Indicates the grouped W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedMWing">
            <summary>
            Indicates the grouped M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedLocalWing">
            <summary>
            Indicates the grouped local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedSplitWing">
            <summary>
            Indicates the grouped split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedHybridWing">
            <summary>
            Indicates the grouped hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType1">
            <summary>
            Indicates the UR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType2">
            <summary>
            Indicates the UR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType3">
            <summary>
            Indicates the UR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType4">
            <summary>
            Indicates the UR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType5">
            <summary>
            Indicates the UR type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrType6">
            <summary>
            Indicates the UR type 6.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenUr">
            <summary>
            Indicates the hidden UR.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus2D">
            <summary>
            Indicates the UR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus2B1SL">
            <summary>
            Indicates the UR + 2B / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus2D1SL">
            <summary>
            Indicates the UR + 2D / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3X">
            <summary>
            Indicates the UR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3x1SL">
            <summary>
            Indicates the UR + 3x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3X1SL">
            <summary>
            Indicates the UR + 3X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3X2SL">
            <summary>
            Indicates the UR + 3X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3N2SL">
            <summary>
            Indicates the UR + 3N / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3U2SL">
            <summary>
            Indicates the UR + 3U / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus3E2SL">
            <summary>
            Indicates the UR + 3E / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4x1SL">
            <summary>
            Indicates the UR + 4x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4X1SL">
            <summary>
            Indicates the UR + 4X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4x2SL">
            <summary>
            Indicates the UR + 4x / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4X2SL">
            <summary>
            Indicates the UR + 4X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4X3SL">
            <summary>
            Indicates the UR + 4X / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrPlus4C3SL">
            <summary>
            Indicates the UR + 4C / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrXyWing">
            <summary>
            Indicates the UR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrXyzWing">
            <summary>
            Indicates the UR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrWxyzWing">
            <summary>
            Indicates the UR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UrSdc">
            <summary>
            Indicates the UR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType1">
            <summary>
            Indicates the AR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType2">
            <summary>
            Indicates the AR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType3">
            <summary>
            Indicates the AR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArType5">
            <summary>
            Indicates the AR type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.HiddenAr">
            <summary>
            Indicates the hidden AR.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArPlus2D">
            <summary>
            Indicates the AR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArPlus3X">
            <summary>
            Indicates the AR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArXyWing">
            <summary>
            Indicates the AR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArXyzWing">
            <summary>
            Indicates the AR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArWxyzWing">
            <summary>
            Indicates the AR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ArSdc">
            <summary>
            Indicates the AR sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType1">
            <summary>
            Indicates the UL type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType2">
            <summary>
            Indicates the UL type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType3">
            <summary>
            Indicates the UL type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UlType4">
            <summary>
            Indicates the UL type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType1">
            <summary>
            Indicates the XR type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType2">
            <summary>
            Indicates the XR type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType3">
            <summary>
            Indicates the XR type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XrType4">
            <summary>
            Indicates the XR type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType1">
            <summary>
            Indicates the BUG type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType2">
            <summary>
            Indicates the BUG type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType3">
            <summary>
            Indicates the BUG type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugType4">
            <summary>
            Indicates the BUG type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugMultiple">
            <summary>
            Indicates the BUG + n.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugMultipleFc">
            <summary>
            Indicates the BUG + n with forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugXz">
            <summary>
            Indicates the BUG-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BugXyzWing">
            <summary>
            Indicates the BUG-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType1">
            <summary>
            Indicates the BDP type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType2">
            <summary>
            Indicates the BDP type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType3">
            <summary>
            Indicates the BDP type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BdpType4">
            <summary>
            Indicates the BDP type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType1">
            <summary>
            Indicates the QDP type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType2">
            <summary>
            Indicates the QDP type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType3">
            <summary>
            Indicates the QDP type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.QdpType4">
            <summary>
            Indicates the QDP type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.LockedQdp">
            <summary>
            Indicates the locked QDP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType1">
            <summary>
            Indicates the US type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType2">
            <summary>
            Indicates the US type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType3">
            <summary>
            Indicates the US type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.UsType4">
            <summary>
            Indicates the US type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Sdc">
            <summary>
            Indicates the SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Sdc3d">
            <summary>
            Indicates the 3-dimension SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.CannibalizedSdc">
            <summary>
            Indicates the cannibalized SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Skyscraper">
            <summary>
            Indicates the skyscraper.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TwoStringKite">
            <summary>
            Indicates the two-string kite.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TurbotFish">
            <summary>
            Indicates the turbot fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.EmptyRectangle">
            <summary>
            Indicates the empty rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Guardian">
            <summary>
            Indicates the guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XChain">
            <summary>
            Indicates the X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.YChain">
            <summary>
            Indicates the Y-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.FishyCycle">
            <summary>
            Indicates the fishy cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyChain">
            <summary>
            Indicates the XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyCycle">
            <summary>
            Indicates the XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.XyXChain">
            <summary>
            Indicates the XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.PurpleCow">
            <summary>
            Indicates the purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.DiscontinuousNiceLoop">
            <summary>
            Indicates the discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ContinuousNiceLoop">
            <summary>
            Indicates the continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Aic">
            <summary>
            Indicates the AIC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXChain">
            <summary>
            Indicates the grouped X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedFishyCycle">
            <summary>
            Indicates the grouped fishy cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyChain">
            <summary>
            Indicates the grouped XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyCycle">
            <summary>
            Indicates the grouped XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedXyXChain">
            <summary>
            Indicates the grouped XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedPurpleCow">
            <summary>
            Indicates the grouped purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedDiscontinuousNiceLoop">
            <summary>
            Indicates the grouped discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedContinuousNiceLoop">
            <summary>
            Indicates the grouped continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.GroupedAic">
            <summary>
            Indicates the grouped AIC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.NishioFc">
            <summary>
            Indicates the nishio FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.RegionFc">
            <summary>
            Indicates the region FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.CellFc">
            <summary>
            Indicates the cell FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.DynamicFc">
            <summary>
            Indicates the dynamic FCs.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Erip">
            <summary>
            Indicates the ERIP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Esp">
            <summary>
            Indicates the ESP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SinglyLinkedAlsXz">
            <summary>
            Indicates the singly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.DoublyLinkedAlsXz">
            <summary>
            Indicates the doubly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlsXyWing">
            <summary>
            Indicates the ALS-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.AlsWWing">
            <summary>
            Indicates the ALS-W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.DeathBlossom">
            <summary>
            Indicates the death blossom.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Gsp">
            <summary>
            Indicates the GSP.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Je">
            <summary>
            Indicates the JE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Se">
            <summary>
            Indicates the SE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.ComplexSe">
            <summary>
            Indicates the complex SE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseJe">
            <summary>
            Indicates the siamese JE. 
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SiameseSe">
            <summary>
            Indicates the siamese SE.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.SkLoop">
            <summary>
            Indicates the SK-Loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Msls">
            <summary>
            Indicates the multi-sector locked sets.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.Pom">
            <summary>
            Indicates the POM.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TemplateSet">
            <summary>
            Indicates the template set.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.TemplateDelete">
            <summary>
            Indicates the template delete.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BowmanBingo">
            <summary>
            Indicates the bowman's bingo.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCode.BruteForce">
            <summary>
            Indicates the brute force.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.TechniqueCodeFilter">
            <summary>
            Encapsulates a technique code filter that contains some of technique codes.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.TechniqueCodeFilter._internalList">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.#ctor">
            <inheritdoc cref="T:Sudoku.DocComments.DefaultConstructor"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.#ctor(Sudoku.Solving.Manual.TechniqueCode[])">
            <summary>
            Initializes an instance with the specified technique codes.
            </summary>
            <param name="techniqueCodes">(<see langword="params"/> parameter) The technique codes.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.#ctor(System.Collections.BitArray)">
            <summary>
            Initializes an instance with the specified bit array.
            </summary>
            <param name="bitArray">The bit array.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.TechniqueCodeFilter.Count">
            <summary>
            The total number of techniques.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Add(Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            To add a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.TechniqueCode})">
            <summary>
            Add a serial of technique codes to this list.
            </summary>
            <param name="techniqueCodes">The codes.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Remove(Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            To remove a technique code.
            </summary>
            <param name="techniqueCode">The technique code.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Contains(Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            To determine whether the specified filter contains the technique.
            </summary>
            <param name="techniqueCode">The technique code to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.op_Addition(Sudoku.Solving.Manual.TechniqueCodeFilter,Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            Add the specified technique into the list, and return the reference same as <paramref name="list"/>.
            </summary>
            <param name="list">The list.</param>
            <param name="technique">The technique to add.</param>
            <returns>The reference same as <paramref name="list"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.TechniqueCodeFilter.op_Subtraction(Sudoku.Solving.Manual.TechniqueCodeFilter,Sudoku.Solving.Manual.TechniqueCode)">
            <summary>
            Remove the specified technique in the list, and return the reference same as <paramref name="list"/>.
            </summary>
            <param name="list">The list.</param>
            <param name="technique">The technique to add.</param>
            <returns>The reference same as <paramref name="list"/>.</returns>
        </member>
        <member name="T:Sudoku.Windows.Resources">
            <summary>
            Indicates the resources used later but not in the namespace <see cref="N:Sudoku.Windows"/>.
            </summary>
            <seealso cref="N:Sudoku.Windows"/>
        </member>
        <member name="F:Sudoku.Windows.Resources._dicPointer">
            <summary>
            Indicates the current source.
            </summary>
        </member>
        <member name="P:Sudoku.Windows.Resources.CountryCode">
            <summary>
            Indicates the current country code.
            </summary>
        </member>
        <member name="M:Sudoku.Windows.Resources.ChangeLanguage(Sudoku.Globalization.CountryCode)">
            <summary>
            To change the current language with the specified country code.
            </summary>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="M:Sudoku.Windows.Resources.GetValue(System.String)">
            <summary>
            Get the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Throws when the key can't be found in neither the current language dictionary
            nor the default dictionary.
            </exception>
        </member>
        <member name="M:Sudoku.Windows.Resources.GetValueWithoutExceptions(System.String)">
            <summary>
            Get the value with the specified key, without any exception throws.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The value. If the key can't be found in neither the current language dictionary
            nor the default dictionary, the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Windows.Resources.GetDictionary(Sudoku.Globalization.CountryCode)">
            <summary>
            Get the dictionary with the specified globalization string.
            </summary>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="F:Sudoku.Windows.Resources.LangSourceEnUs">
            <summary>
            The language source for the globalization string "<c>en-us</c>".
            </summary>
            <remarks>
            This field is not <see langword="readonly"/> because it can be initialized by the
            module initializer.
            </remarks>
        </member>
        <member name="F:Sudoku.Windows.Resources.LangSourceZhCn">
            <summary>
            The language source for the globalization string "<c>zh-cn</c>".
            </summary>
            <remarks>
            This field is not <see langword="readonly"/> because it can be initialized by the
            module initializer.
            </remarks>
        </member>
        <member name="T:Sudoku.Models.GridProgressResult">
            <summary>
            Encapsulates a progress result used for report the current state.
            </summary>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.#ctor(System.Int32,System.Int32,System.Int32,Sudoku.Globalization.CountryCode)">
            <summary>
            Initializes an instance with the specified current point and the total point.
            </summary>
            <param name="currentCandidatesCount">The current point.</param>
            <param name="currentCellsCount">The number of unsolved cells.</param>
            <param name="initialCandidatesCount">The number of unsolved candidates in the initial grid.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.CurrentCellsCount">
            <summary>
            Indicates the number of unsolved cells.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.CurrentCandidatesCount">
            <summary>
            Indicates the number of unsolved candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.InitialCandidatesCount">
            <summary>
            Indicates the number of unsolved candidates in the initial grid.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.CountryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="P:Sudoku.Models.GridProgressResult.Percentage">
            <summary>
            Indicates the current percentage.
            </summary>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Deconstruct(System.Int32@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="current">(<see langword="out"/> parameter) The number of unsolved candidates.</param>
            <param name="unsolvedCells">(<see langword="out"/> parameter) The number of unsolved cells.</param>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="currentCandidatesCount">
            (<see langword="out"/> parameter) The number of unsolved candidates.
            </param>
            <param name="currentCellsCount">
            (<see langword="out"/> parameter) The number of unsolved cells.
            </param>
            <param name="initialCandidatesCount">
            (<see langword="out"/> parameter) The number of unsolved candidates in the initial grid.
            </param>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.Equals(Sudoku.Models.GridProgressResult@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.op_Equality(Sudoku.Models.GridProgressResult@,Sudoku.Models.GridProgressResult@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:Sudoku.Models.GridProgressResult.op_Inequality(Sudoku.Models.GridProgressResult@,Sudoku.Models.GridProgressResult@)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:Sudoku.Models.IProgressResult">
            <summary>
            Encapsulates and provides with a progress result instance.
            </summary>
        </member>
        <member name="P:Sudoku.Models.IProgressResult.Percentage">
            <summary>
            Indicates the current percentage.
            </summary>
        </member>
        <member name="P:Sudoku.Models.IProgressResult.CountryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="M:Sudoku.Models.IProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Models.PuzzleGeneratingProgressResult">
            <summary>
            Indicates a puzzle generating progress result.
            </summary>
        </member>
        <member name="M:Sudoku.Models.PuzzleGeneratingProgressResult.#ctor(System.Int32,Sudoku.Globalization.CountryCode)">
            <summary>
            Initializes an instance with the specified trial times and globalization string.
            </summary>
            <param name="generatingTrial">The number of the trial times.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:Sudoku.Models.PuzzleGeneratingProgressResult.GeneratingTrial">
            <summary>
            Indicates how many trials of the specified generator generates.
            </summary>
        </member>
        <member name="P:Sudoku.Models.PuzzleGeneratingProgressResult.Percentage">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Models.PuzzleGeneratingProgressResult.CountryCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Models.PuzzleGeneratingProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Models.TechniqueProgressResult">
            <summary>
            Indicates a technique progress result.
            </summary>
        </member>
        <member name="M:Sudoku.Models.TechniqueProgressResult.#ctor(System.Int32,Sudoku.Globalization.CountryCode)">
            <summary>
            Initializes an instance with the specified technique count.
            </summary>
            <param name="totalSearchers">The total number of searchers.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.Percentage">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.CurrentTechnique">
            <summary>
            Indicates the current technique.
            </summary>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.CurrentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.CountryCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Models.TechniqueProgressResult.TotalSearchers">
            <summary>
            The total number of searchers.
            </summary>
        </member>
        <member name="M:Sudoku.Models.TechniqueProgressResult.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.NameAttribute">
            <summary>
            Mark on a field of an enumeration type to set a custom name to output.
            </summary>
        </member>
        <member name="M:Sudoku.NameAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Sudoku.NameAttribute.Name">
            <summary>
            Indicates the name.
            </summary>
        </member>
        <member name="M:Sudoku.NameAttribute.GetName``1(``0)">
            <summary>
            Get the name of the specified enum field which has marked this attribute.
            </summary>
            <typeparam name="TEnum">The type of the enum field.</typeparam>
            <param name="enumField">The enum field.</param>
            <returns>
            The name. Return <see langword="null"/> when the specified field doesn't mark this attribute.
            </returns>
        </member>
        <member name="T:Sudoku.Runtime.MultipleSolutionsException">
            <summary>
            Represents an error that the puzzle has multiple solutions while solving.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.SudokuGrid@,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.SudokuGrid@,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.Runtime.MultipleSolutionsException.#ctor(Sudoku.Data.SudokuGrid@,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.Runtime.MultipleSolutionsException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.MultipleSolutionsException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.NoSolutionException">
            <summary>
            Represents an error that the puzzle has no solution while solving.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.SudokuGrid@,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.SudokuGrid@,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.Runtime.NoSolutionException.#ctor(Sudoku.Data.SudokuGrid@,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.Runtime.NoSolutionException.Message">
            <summary>
            Indicates the error message.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.NoSolutionException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.SudokuRuntimeException">
            <summary>
            Represents an error that the puzzle has no solution while solving.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.SudokuRuntimeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Runtime.SudokuRuntimeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Runtime.SudokuRuntimeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Runtime.SudokuRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Runtime.SudokuRuntimeException.Message">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Runtime.WrongHandlingException">
            <summary>
            Represents an error that the puzzle has wrong handling while solving with
            manual logic tools.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.WrongHandlingException.#ctor(Sudoku.Data.SudokuGrid@)">
            <summary>
            Initializes an instance with a grid.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
        </member>
        <member name="M:Sudoku.Runtime.WrongHandlingException.#ctor(Sudoku.Data.SudokuGrid@,System.String)">
            <summary>
            Initializes an instance with a grid and an error message.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="wrongInfo">The error message.</param>
        </member>
        <member name="M:Sudoku.Runtime.WrongHandlingException.#ctor(Sudoku.Data.SudokuGrid@,System.String,System.Exception)">
            <summary>
            Initializes an instance with a grid, an error message and an inner exception.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="wrongInfo">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Sudoku.Runtime.WrongHandlingException.#ctor(Sudoku.Data.SudokuGrid@,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance with a grid, a serialization information instance and
            a streaming context instance.
            </summary>
            <param name="grid">(<see langword="in"/> parameter) The grid.</param>
            <param name="info">The streaming information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Sudoku.Runtime.WrongHandlingException.WrongInfo">
            <summary>
            Indicates the wrong information.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.WrongHandlingException.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.WrongHandlingException.Message">
            <inheritdoc/>
        </member>
        <member name="T:System.Algorithms">
            <summary>
            Provides all algorithm processing methods.
            </summary>
        </member>
        <member name="M:System.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            To swap the two variables.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="left">The left variable.</param>
            <param name="right">The right variable.</param>
        </member>
        <member name="M:System.Algorithms.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the minimal one of three values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="c">The third value.</param>
            <returns>Which is the most minimal one.</returns>
        </member>
        <member name="T:System.Collections.Generic.Set`1">
            <summary>
            Indicates a set which contains the different elements.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.Set`1._list">
            <summary>
            The inner list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Set`1.#ctor">
            <inheritdoc cref="T:Sudoku.DocComments.DefaultConstructor"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a series of elements.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:System.Collections.Generic.Set`1.Count">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Set`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Set`1.Item(`0)">
            <summary>
            Get the first element that is equal to the specified parameter.
            </summary>
            <param name="element">The element.</param>
            <returns>The first element to satisfy the condition.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Sort">
            <summary>
            Sort the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Sort(System.Comparison{`0})">
            <summary>
            Sort the list with the specified comparsion.
            </summary>
            <param name="comparison">The comparsion.</param>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Add(`0)">
            <summary>
            Add an element into the set.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Remove">
            <summary>
            Remove the last element out of the list.
            </summary>
            <returns>The element removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.RemoveAt(System.Index)">
            <summary>
            Remove the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Equals(System.Collections.Generic.Set{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.InternalEquals(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <summary>
            The internal equality determination.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.SetEquals(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <summary>
            Determine whether two <see cref="T:System.Collections.Generic.Set`1"/>s contain the same elements.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_Equality(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_Inequality(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_BitwiseAnd(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The intersection result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_BitwiseOr(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.UnionWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The union result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.UnionWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_ExclusiveOr(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The symmetric exception result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_Subtraction(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The exception result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="T:System.Collections.Generic.TreeNode`1">
            <summary>
            Encapsulates a tree node.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Id">
            <summary>
            Indicates the current ID.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.ParentId">
            <summary>
            Indicates the parent ID of this instance.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.IsLeaf">
            <summary>
            Indicates whether the current node is the left node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Content">
            <summary>
            Indicates the content.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Children">
            <summary>
            Indicates its children nodes.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.Equals(System.Collections.Generic.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.CompareTo(System.Collections.Generic.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.InternalCompare(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <summary>
            The internal comparsion.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_Equality(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_Inequality(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_GreaterThan(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_GreaterThan(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_GreaterThanOrEqual(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_GreaterThanOrEqual(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_LessThan(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_LessThan(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_LessThanOrEqual(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_LessThanOrEqual(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:System.ICloneable`1">
            <inheritdoc cref="T:System.ICloneable"/>
            <typeparam name="T">
            The type of this instance. This type should be only a class because the cloning
            operation is needed only in reference types, while the value types will be passed
            by value, at this time all value members (fields and properties) will be copied
            one by one.
            </typeparam>
            <remarks>
            Different with <see cref="T:System.ICloneable"/>, the cloneation
            has the same type with this existing instance.
            </remarks>
            <seealso cref="T:System.ICloneable"/>
        </member>
        <member name="M:System.ICloneable`1.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:System.ICloneable`1.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:System.IValueComparable`1">
            <inheritdoc cref="T:System.IComparable`1"/>
            <typeparam name="TStruct">
            The type of objects to compare. Here it should be a <see langword="struct"/>.
            </typeparam>
        </member>
        <member name="M:System.IValueComparable`1.CompareTo(`0@)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">(<see langword="in"/> parameter) An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes
            other in the sort order. Zero This instance occurs in the same position in the
            sort order as other. Greater than zero This instance follows other in the sort
            order.
            </returns>
        </member>
        <member name="M:System.IValueComparable`1.System#IComparable{TStruct}#CompareTo(`0)">
            <inheritdoc/>
        </member>
        <member name="T:System.IValueEquatable`1">
            <inheritdoc cref="T:System.IEquatable`1"/>
            <typeparam name="TStruct">
            The type of objects to compare. Here it should be a <see langword="struct"/>.
            </typeparam>
        </member>
        <member name="M:System.IValueEquatable`1.Equals(`0@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">(<see langword="in"/> parameter) An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IValueEquatable`1.System#IEquatable{TStruct}#Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="T:System.KeyedTuple`2">
            <summary>
            Provides a tuple with a primary element, which means the tuple contains multiple items,
            but the only specified item can be output as <see cref="T:System.String"/> text.
            </summary>
            <typeparam name="T1">The type of the property <see cref="P:System.KeyedTuple`2.Item1"/>.</typeparam>
            <typeparam name="T2">The type of the property <see cref="P:System.KeyedTuple`2.Item2"/>.</typeparam>
            <param name="PriorKey">The prior key.</param>
        </member>
        <member name="M:System.KeyedTuple`2.#ctor(`0,`1,System.Int32)">
            <summary>
            Provides a tuple with a primary element, which means the tuple contains multiple items,
            but the only specified item can be output as <see cref="T:System.String"/> text.
            </summary>
            <typeparam name="T1">The type of the property <see cref="P:System.KeyedTuple`2.Item1"/>.</typeparam>
            <typeparam name="T2">The type of the property <see cref="P:System.KeyedTuple`2.Item2"/>.</typeparam>
            <param name="PriorKey">The prior key.</param>
        </member>
        <member name="M:System.KeyedTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes an instance with the specified 2 items, and the first one is the prior key.
            </summary>
            <param name="item1">The item 1.</param>
            <param name="item2">The item 2.</param>
        </member>
        <member name="P:System.KeyedTuple`2.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.KeyedTuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.KeyedTuple`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:System.KeyedTuple`3">
            <summary>
            Provides a tuple with a primary element, which means the tuple contains multiple items,
            but the only specified item can be output as <see cref="T:System.String"/> text.
            </summary>
            <typeparam name="T1">The type of the property <see cref="P:System.KeyedTuple`3.Item1"/>.</typeparam>
            <typeparam name="T2">The type of the property <see cref="P:System.KeyedTuple`3.Item2"/>.</typeparam>
            <typeparam name="T3">The type of the property <see cref="P:System.KeyedTuple`3.Item3"/>.</typeparam>
            <param name="PriorKey">The prior key.</param>
        </member>
        <member name="M:System.KeyedTuple`3.#ctor(`0,`1,`2,System.Int32)">
            <summary>
            Provides a tuple with a primary element, which means the tuple contains multiple items,
            but the only specified item can be output as <see cref="T:System.String"/> text.
            </summary>
            <typeparam name="T1">The type of the property <see cref="P:System.KeyedTuple`3.Item1"/>.</typeparam>
            <typeparam name="T2">The type of the property <see cref="P:System.KeyedTuple`3.Item2"/>.</typeparam>
            <typeparam name="T3">The type of the property <see cref="P:System.KeyedTuple`3.Item3"/>.</typeparam>
            <param name="PriorKey">The prior key.</param>
        </member>
        <member name="M:System.KeyedTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes an instance with the specified 3 items, and the first one is the prior key.
            </summary>
            <param name="item1">The item 1.</param>
            <param name="item2">The item 2.</param>
            <param name="item3">The item 3.</param>
        </member>
        <member name="P:System.KeyedTuple`3.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.KeyedTuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.KeyedTuple`3.ToString">
            <inheritdoc/>
        </member>
        <member name="T:System.KeyedTuple`4">
            <summary>
            Provides a tuple with a primary element, which means the tuple contains multiple items,
            but the only specified item can be output as <see cref="T:System.String"/> text.
            </summary>
            <typeparam name="T1">The type of the property <see cref="P:System.KeyedTuple`4.Item1"/>.</typeparam>
            <typeparam name="T2">The type of the property <see cref="P:System.KeyedTuple`4.Item2"/>.</typeparam>
            <typeparam name="T3">The type of the property <see cref="P:System.KeyedTuple`4.Item3"/>.</typeparam>
            <typeparam name="T4">The type of the property <see cref="P:System.KeyedTuple`4.Item4"/>.</typeparam>
            <param name="PriorKey">The prior key.</param>
        </member>
        <member name="M:System.KeyedTuple`4.#ctor(`0,`1,`2,`3,System.Int32)">
            <summary>
            Provides a tuple with a primary element, which means the tuple contains multiple items,
            but the only specified item can be output as <see cref="T:System.String"/> text.
            </summary>
            <typeparam name="T1">The type of the property <see cref="P:System.KeyedTuple`4.Item1"/>.</typeparam>
            <typeparam name="T2">The type of the property <see cref="P:System.KeyedTuple`4.Item2"/>.</typeparam>
            <typeparam name="T3">The type of the property <see cref="P:System.KeyedTuple`4.Item3"/>.</typeparam>
            <typeparam name="T4">The type of the property <see cref="P:System.KeyedTuple`4.Item4"/>.</typeparam>
            <param name="PriorKey">The prior key.</param>
        </member>
        <member name="M:System.KeyedTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes an instance with the specified 4 items, and the first one is the prior key.
            </summary>
            <param name="item1">The item 1.</param>
            <param name="item2">The item 2.</param>
            <param name="item3">The item 3.</param>
            <param name="item4">The item 4.</param>
        </member>
        <member name="P:System.KeyedTuple`4.System#Runtime#CompilerServices#ITuple#Length">
            <inheritdoc/>
        </member>
        <member name="P:System.KeyedTuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.KeyedTuple`4.ToString">
            <inheritdoc/>
        </member>
        <member name="T:System.Text.RegularExpressions.InvalidRegexStringException">
            <summary>
            Indicates an error for reporting a string is an invalid regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:System.Text.RegularExpressions.InvalidRegexStringException.Message">
            <inheritdoc/>
        </member>
    </members>
</doc>
