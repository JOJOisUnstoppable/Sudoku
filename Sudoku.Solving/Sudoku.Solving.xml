<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Solving</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Solving.AnalysisResult">
            <summary>
            Provides an analysis result after a puzzle solved.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.#ctor(Sudoku.Data.Meta.Grid,System.String,System.Boolean,Sudoku.Data.Meta.Grid,System.TimeSpan,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo},System.String)">
            <summary>
            Initializes an instance with some information.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solverName">The name of the solver.</param>
            <param name="hasSolved">Indicates whether the puzzle has been solved.</param>
            <param name="solution">The solution grid.</param>
            <param name="elapsedTime">The elapsed time while solving.</param>
            <param name="solvingList">All steps produced in solving.</param>
            <param name="additional">The additional message.</param>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.HasSolved">
            <summary>
            <para>Indicates whether the puzzle has been solved.</para>
            <para>
            If the puzzle has multiple solutions or no solution,
            this value will be always <see langword="false"/>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.MaxDifficulty">
            <summary>
            <para>Indicates the maximum difficulty of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the maximum value among all difficulty
            ratings in solving steps. If the puzzle has not been solved,
            or else the puzzle is solved by other solvers, this value will
            be always <c>20.0m</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.TotalDifficulty">
            <summary>
            <para>Indicates the total difficulty rating of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the sum of all difficulty ratings of steps. If
            the puzzle has not been solved, the value will be the sum of all
            difficulty ratings of steps recorded in <see cref="P:Sudoku.Solving.AnalysisResult.SolvingSteps"/>.
            However, if the puzzle is solved by other solvers, this value will
            be <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.SolvingSteps"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.PearlDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first solving step. If the puzzle has not solved or
            the puzzle is solved by other solvers, this value will be always <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.DiamondDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first step before the first one whose conclusion is
            <see cref="F:Sudoku.Solving.ConclusionType.Assignment"/>. If the puzzle has not solved
            or solved by other solvers, this value will be <c>20.0m</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="T:Sudoku.Solving.ConclusionType"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolvingStepsCount">
            <summary>
            Indicates the number of all solving steps recorded.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolverName">
            <summary>
            Indicates the solver's name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Additional">
            <summary>
            Indicates the additional message during solving, which
            can be the message from an exception, or the debugging information.
            If this instance does not need to have this one, the value
            will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.ElapsedTime">
            <summary>
            Indicates the solving elapsed time.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.DifficultyLevel">
            <summary>
            Indicates the difficulty level of the puzzle.
            If the puzzle has not solved or solved by other
            solvers, this value will be <see cref="F:Sudoku.Solving.DifficultyLevel.Unknown"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Puzzle">
            <summary>
            Indicates the initial puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Solution">
            <summary>
            Indicates the solution grid. If and only if the puzzle
            is not solved, this value will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.BottleNeck">
            <summary>
            Indicates the bottle neck during the whole grid solving.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolvingSteps">
            <summary>
            Indicates the solving steps during solving. If the puzzle is not
            solved and the manual solver cannot find out any steps, or else
            the puzzle is solved by other solvers, this value will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.BottleNeckData">
            <summary>
            The bottleneck data.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolvingStepsGrouped">
            <summary>
            Indicates all groups that grouped by solving steps during solving.
            If and only if <see cref="P:Sudoku.Solving.AnalysisResult.SolvingSteps"/> is <see langword="null"/>, this value
            will be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.String@,System.Boolean@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="solverName">
            (<see langword="out"/> parameter) The solver's name.
            </param>
            <param name="hasSolved">
            (<see langword="out"/> parameter) Indicates whether the puzzle has been solved.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.Boolean@,System.Int32@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo}@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="hasSolved">
            (<see langword="out"/> parameter) Indicates whether the puzzle has been solved.
            </param>
            <param name="solvingStepsCount">
            (<see langword="out"/> parameter) The total number of all solving steps.
            </param>
            <param name="solvingSteps">
            (<see langword="out"/> parameter) The all solving steps.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.Nullable{System.Decimal}@,System.Decimal@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="total">
            (<see langword="out"/> parameter) The total difficulty.
            </param>
            <param name="max">
            (<see langword="out"/> parameter) The maximum difficulty.
            </param>
            <param name="pearl">
            (<see langword="out"/> parameter) The pearl difficulty.
            </param>
            <param name="diamond">
            (<see langword="out"/> parameter) The diamond difficulty.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(Sudoku.Data.Meta.Grid@,System.Boolean@,System.TimeSpan@,Sudoku.Data.Meta.Grid@,Sudoku.Solving.DifficultyLevel@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="puzzle">
            (<see langword="out"/> parameter) The initial puzzle.
            </param>
            <param name="hasSolved">
            (<see langword="out"/> parameter) Indicates whether the puzzle has been solved.
            </param>
            <param name="elapsedTime">
            (<see langword="out"/> parameter) The elapsed time during solving.
            </param>
            <param name="solution">
            (<see langword="out"/> parameter) The solution.
            </param>
            <param name="difficultyLevel">
            (<see langword="out"/> parameter) The difficulty level.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(Sudoku.Data.Meta.Grid@,System.Boolean@,Sudoku.Data.Meta.Grid@,Sudoku.Solving.DifficultyLevel@,Sudoku.Solving.TechniqueInfo@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo}@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="puzzle">
            (<see langword="out"/> parameter) The initial puzzle.
            </param>
            <param name="hasSolved">
            (<see langword="out"/> parameter) Indicates whether the grid has been solved.
            </param>
            <param name="solution">
            (<see langword="out"/> parameter) The solution.
            </param>
            <param name="difficultyLevel">
            (<see langword="out"/> parameter) The difficulty level.
            </param>
            <param name="bottleNeck">
            (<see langword="out"/> parameter) The bottleneck.
            </param>
            <param name="solvingSteps">
            (<see langword="out"/> parameter) All steps.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(Sudoku.Data.Meta.Grid@,System.Boolean@,System.TimeSpan@,Sudoku.Data.Meta.Grid@,Sudoku.Solving.DifficultyLevel@,System.Int32@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo}@,System.String@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="puzzle">
            (<see langword="out"/> parameter) The initial puzzle.
            </param>
            <param name="hasSolved">
            (<see langword="out"/> parameter) Indicates whether the puzzle has solved.
            </param>
            <param name="elapsedTime">
            (<see langword="out"/> parameter) The elapsed time during solving.
            </param>
            <param name="solution">
            (<see langword="out"/> parameter) The solution.
            </param>
            <param name="difficultyLevel">
            (<see langword="out"/> parameter) The difficulty level.
            </param>
            <param name="solvingStepsCount">
            (<see langword="out"/> parameter) The number of solving steps recorded.
            </param>
            <param name="solvingSteps">
            (<see langword="out"/> parameter) All solving steps.
            </param>
            <param name="additionalMessage">
            (<see langword="out"/> parameter) The additional message.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the collection.</para>
            <para>Note that this method will not return <see langword="null"/> anytime.</para>
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with a specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver">
            <summary>
            Provides a solver using backtracking method.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver._grid">
            <summary>
            The temporary grid to solve.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver.Solve(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver.BacktrackinglySolve(System.Int32@,System.Int32[]@,System.Int32[],System.Int32)">
            <summary>
            Solve backtrackingly.
            </summary>
            <param name="solutionsCount">
            (<see langword="ref"/> parameter) The number of solutions.
            </param>
            <param name="result">
            (<see langword="ref"/> parameter) The result array.
            </param>
            <param name="gridValues">All grid values.</param>
            <param name="finishedCellsCount">The number of cells had finished.</param>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver">
            <summary>
            Provides a solver using bitwise method.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.Solve(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.Solve32(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The core function of solving the puzzle based on x86 platform.
            </summary>
            <param name="puzzle">The puzzle Susser format string.</param>
            <param name="solution">The solution.</param>
            <param name="limit">
            The limit count in solving the puzzle.
            You should pass the value by a positive integer at least 1.
            </param>
            <returns>The solution count of the puzzle.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.Solve64(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The core function of solving the puzzle based on x64 platform.
            </summary>
            <param name="puzzle">The puzzle Susser format string.</param>
            <param name="solution">The solution.</param>
            <param name="limit">
            The limit count in solving the puzzle.
            You should pass the value by a positive integer at least 1.
            </param>
            <returns>The solution count of the puzzle.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1">
            <summary>
            Provides a column node.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1.#ctor(System.Int32)">
            <summary>
            Initializes an instance with an ID.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1.Id">
            <summary>
            The ID.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1.Size">
            <summary>
            The size of this column.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1.IncSize">
            <summary>
            Increase the property <see cref="P:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1.Size"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1.DecSize">
            <summary>
            Decrease the property <see cref="P:Sudoku.Solving.BruteForces.DancingLinks.ColumnNode`1.Size"/>.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.DancingLinks.DancingLinksSolver">
            <summary>
            Provides a solver using dancing links (DLX) algorithm.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.DancingLinksSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.DancingLinksSolver.Solve(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.DancingLinksSolver.Solve(System.Int32[])">
            <summary>
            Solves the specified grid.
            </summary>
            <param name="gridValues">The grid values.</param>
            <returns>The analysis result.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.DancingLinks.Node`1">
            <summary>
            Provides a node in a torodial doubly linked list.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.Node`1.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.Node`1.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.Node`1.Value">
            <summary>
            The data.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.Node`1.Left">
            <summary>
            The left node of this current node.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.Node`1.Right">
            <summary>
            The right node of this current node.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.Node`1.Up">
            <summary>
            The up node of this current node.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.Node`1.Down">
            <summary>
            The down node of this current node.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.Node`1.ColumnNode">
            <summary>
            The column node.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.Node`1.RemoveVertical">
            <summary>
            Remove the vertical node.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.Node`1.RemoveHorizontal">
            <summary>
            Remove the horizontal node.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.Node`1.ReplaceVertical">
            <summary>
            Replace the vertical node with 'this'.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.Node`1.ReplaceHorizontal">
            <summary>
            Replace the horizontal node with 'this'.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.DancingLinks.SudokuValueList">
            <summary>
            Provides a sudoku value list.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.SudokuValueList.#ctor">
            <summary>
            Initializes an instance in a default way.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.SudokuValueList.Values">
            <summary>
            The values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.SudokuValueList.SetRow(System.Int32[],System.Int32)">
            <summary>
            Add a row into this instance.
            </summary>
            <param name="row">The row.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.SudokuValueList.CalculateMatrix">
            <summary>
            Calculate the matrix.
            </summary>
            <returns>The pair of matrix information.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.SudokuValueList.SetMatrixValues(System.Boolean[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Set values in the specified matrix row.
            </summary>
            <param name="matrixRow">The matrix row.</param>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The digit.</param>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1">
            <summary>
            Provides a torodial doubly linked list (also called
            circular doubly linked list).
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1._columns">
            <summary>
            All columns.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.#ctor(System.Int32)">
            <summary>
            Initializes an instance with column number.
            </summary>
            <param name="noColumns">The column number.</param>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.Head">
            <summary>
            Indicates the head node.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.ProcessMatrix(System.Boolean[0:,0:])">
            <summary>
            Process the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.ProcessMatrix(System.Collections.Generic.List{System.Boolean[]})">
            <summary>
            Process the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.AddToColumn(System.Int32,Sudoku.Solving.BruteForces.DancingLinks.Node{`0})">
            <summary>
            Add the specified node to the specified index in column.
            </summary>
            <param name="index">The index.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.InsertAt(System.Int32,System.Collections.Generic.IList{System.Byte},System.Byte)">
            <summary>
            Insert the specified value into the list.
            </summary>
            <param name="index">The index.</param>
            <param name="list">The list.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.ProcessMatrixRow(System.Collections.Generic.List{System.ValueTuple{System.Int32,Sudoku.Solving.BruteForces.DancingLinks.Node{`0}}})">
            <summary>
            Process the matrix row.
            </summary>
            <param name="nodes">All nodes.</param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.DancingLinks.TorodialDoublyLinkedList`1.WrapIndex(System.Int32,System.Int32)">
            <summary>
            Wraps the index.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <returns>The new index.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.Linqing.OneLineLinqSolver">
            <summary>
            Provides a solver using LINQ method.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.Linqing.OneLineLinqSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Linqing.OneLineLinqSolver.Solve(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Checking.BackdoorSearcher">
            <summary>
            Provides a backdoor searcher.
            </summary>
            <remarks>
            <b>Backdoor</b>s are <see cref="T:Sudoku.Solving.Conclusion"/>s making the difficulty of
            a puzzle decrease sharply after they are applied to a grid.
            </remarks>
            <seealso cref="T:Sudoku.Solving.Conclusion"/>
        </member>
        <member name="F:Sudoku.Solving.Checking.BackdoorSearcher._result">
            <summary>
            The result list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.BackdoorSearcher.TestSolver">
            <summary>
            The temporary test solver used in this searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.#ctor(Sudoku.Data.Meta.Grid,System.Int32)">
            <summary>
            Initializes an instance with a grid and searching depth.
            </summary>
            <param name="grid">The sudoku grid to search backdoors.</param>
            <param name="depth">The maximum depth to search. No more than 3.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when <paramref name="depth"/> is greater than 3.
            </exception>
            <seealso cref="P:Sudoku.Solving.Checking.BackdoorSearcher.Depth"/>
        </member>
        <member name="P:Sudoku.Solving.Checking.BackdoorSearcher.Depth">
            <summary>
            The maximum depth to search.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.FindBackdoors(Sudoku.Data.Meta.Grid)">
            <summary>
            To find all backdoors in a sudoku grid.
            </summary>
            <param name="grid">A sudoku grid to search backdoors.</param>
        </member>
        <member name="T:Sudoku.Solving.Checking.BugChecker">
            <summary>
            Encapsulates a BUG technique checker.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.BugChecker._emptyCellsDistribution">
            <summary>
            The distribution of all empty cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.BugChecker._bivalueCellsDistribution">
            <summary>
            The distribution of all bivalue cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.BugChecker._digitsDistributions">
            <summary>
            The distribution of all digits.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.#ctor(Sudoku.Data.Meta.Grid)">
            <summary>
            Initializes an instance with the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.IsBugPattern">
            <summary>
            Indicates the current grid is a BUG+n pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.TrueCandidates">
            <summary>
            Indicates all true candidates (non-BUG candidates).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllTrueCandidates">
            <summary>
            Get all true candidates.
            </summary>
            <returns>All true candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllCombinations(System.Int16,System.Int32)">
            <summary>
            Get all combinations of a specified mask.
            </summary>
            <param name="mask">The mask.</param>
            <param name="oneCount">
            The number of <see langword="true"/> bits.
            </param>
            <returns>All combinations.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllRegionMaps">
            <summary>
            Get all grid maps about all regions (all cells lie on
            specified region will be set <see langword="true"/>).
            </summary>
            <returns>The grid maps.</returns>
        </member>
        <member name="T:Sudoku.Solving.Checking.PuzzleAttributeChecker">
            <summary>
            Provides some puzzle attributes validation operations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsUnique(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.Grid@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <param name="solutionIfUnique">
            (<see langword="out"/> parameter) The solution if the puzzle is unique;
            otherwise, <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsMinimal(Sudoku.Data.Meta.Grid)">
            <summary>
            To check if the puzzle is minimal or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsPearl(Sudoku.Data.Meta.Grid)">
            <summary>
            To check if the puzzle is pearl or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsDiamond(Sudoku.Data.Meta.Grid)">
            <summary>
            To check if the puzzle is diamond or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.CanBeSolvedUsingOnlySsts(Sudoku.Data.Meta.Grid)">
            <summary>
            To check whether the puzzle can be solved using only simple sudoku technique set.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Conclusion">
            <summary>
            Encapsulates a conclusion representation while solving in logic.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.#ctor(Sudoku.Solving.ConclusionType,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with a conclusion type, a cell offset and a digit.
            </summary>
            <param name="conclusionType">The conclusion type.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.#ctor(Sudoku.Solving.ConclusionType,System.Int32)">
            <summary>
            Initializes an instance with a conclusion type and a candidate offset.
            </summary>
            <param name="conclusionType">The conclusion type.</param>
            <param name="candidateOffset">The candidate offset.</param>
        </member>
        <member name="P:Sudoku.Solving.Conclusion.CellOffset">
            <summary>
            The cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Conclusion.Digit">
            <summary>
            The digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Conclusion.ConclusionType">
            <summary>
            The conclusion type to control the action of applying.
            If the type is <see cref="F:Sudoku.Solving.ConclusionType.Assignment"/>,
            this conclusion will be set value (Set a digit into a cell);
            otherwise, a candidate will be removed.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.ApplyTo(Sudoku.Data.Meta.Grid)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.Deconstruct(Sudoku.Solving.ConclusionType@,System.Int32@)">
            <summary>
            Deconstruct an instance.
            </summary>
            <param name="conclusionType">(<see langword="out"/> parameter) The type of this conclusion.</param>
            <param name="candidate">(<see langword="out"/> parameter) The candidate.</param>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.Deconstruct(Sudoku.Solving.ConclusionType@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct an instance.
            </summary>
            <param name="conclusionType">(<see langword="out"/> parameter) The type of this conclusion.</param>
            <param name="cell">(<see langword="out"/> parameter) The cell.</param>
            <param name="digit">(<see langword="out"/> parameter) The digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.Equals(Sudoku.Solving.Conclusion)">
            <summary>
            Indicates whether the current object has the same value with the other one.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>
            The result of this comparsion. <see langword="true"/> if two instances hold a same
            value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.op_Equality(Sudoku.Solving.Conclusion,Sudoku.Solving.Conclusion)">
            <summary>
            Indicates whether two instances have a same value.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Conclusion.op_Inequality(Sudoku.Solving.Conclusion,Sudoku.Solving.Conclusion)">
            <summary>
            Indicates whether two instances have two different values.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.ConclusionType">
            <summary>
            Provides a conclusion type.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.ConclusionType.Assignment">
            <summary>
            Indicates the conclusion is a value filling into a cell.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.ConclusionType.Elimination">
            <summary>
            Indicates the conclusion is a candidate being remove from a cell.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.ConjugatePair">
            <summary>
            Encapsulates a conjugate pair.
            </summary>
            <remarks>
            <b>Conjugate pair</b> is a candidate pair (two candidates),
            these two candidates is in the same region where all cells has only
            two position can fill this candidate.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.ConjugatePair._map">
            <summary>
            The inner data structure.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with from and to cell offset
            and a digit.
            </summary>
            <param name="from">The from cell.</param>
            <param name="to">The to cell.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.From">
            <summary>
            Indicates the 'from' cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.To">
            <summary>
            Indicates the 'to' cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.Equals(Sudoku.Solving.ConjugatePair)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.op_Equality(Sudoku.Solving.ConjugatePair,Sudoku.Solving.ConjugatePair)">
            <summary>
            Indicates whether two instances have a same value.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.op_Inequality(Sudoku.Solving.ConjugatePair,Sudoku.Solving.ConjugatePair)">
            <summary>
            Indicates whether two instances have two different values.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.DifficultyLevel">
            <summary>
            Provides a difficulty kind for a puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Unknown">
            <summary>
            Indicates the difficulty level is unknown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.VeryEasy">
            <summary>
            Indicates the difficulty is very easy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Easy">
            <summary>
            Indicates the difficulty is easy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Moderate">
            <summary>
            Indicates the difficulty is moderate.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Advanced">
            <summary>
            Indicates the difficulty is advanced.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Hard">
            <summary>
            Indicates the difficulty is hard.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.VeryHard">
            <summary>
            Indicates the difficulty is very hard.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Fiendish">
            <summary>
            Indicates the difficulty is fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Diabolical">
            <summary>
            Indicates the difficulty is diabolical.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Crazy">
            <summary>
            Indicates the difficulty is crazy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Nightmare">
            <summary>
            Indicates the difficulty is nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.BeyondNightmare">
            <summary>
            Indicates the difficulty is beyond nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.LastResort">
            <summary>
            Indicates the puzzle cannot be solved
            unless using last resort methods.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Extensions.GridEx">
            <summary>
            Provides extension methods on <see cref="T:Sudoku.Data.Meta.Grid"/>.
            </summary>
            <seealso cref="T:Sudoku.Data.Meta.Grid"/>
        </member>
        <member name="M:Sudoku.Solving.Extensions.GridEx.Deconstruct(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.GridMap@,Sudoku.Data.Meta.GridMap@,Sudoku.Data.Meta.GridMap[]@)">
            <summary>
            Deconstruct the grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="emptyCells">
            (<see langword="out"/> parameter) The distribution of all empty cells.
            </param>
            <param name="bivalueCells">
            (<see langword="out"/> parameter) The distributions of all bivalue cells.
            </param>
            <param name="digitsDistributions">
            (<see langword="out"/> parameter) The distributions of all digits.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Extensions.GridEx.GetBivalueCellsMap(Sudoku.Data.Meta.Grid)">
            <summary>
            Get the grid map instance with all bivalue cells
            set <see langword="true"/>.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Extensions.GridEx.GetEmptyCellsGridMap(Sudoku.Data.Meta.Grid)">
            <summary>
            Get the grid map instance with all empty cells set
            <see langword="true"/>.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Extensions.GridEx.GetAllDigitDistributionMaps(Sudoku.Data.Meta.Grid)">
            <summary>
            Get 9 grid maps representing all digits' distributions.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All grid maps.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlmostLockedSetTechniqueInfo">
            <summary>
            Provides a usage of almost locked set (ALS) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlmostLockedSetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlmostLockedSetTechniqueSearcher">
            <summary>
            Encapsulates an almost locked set (ALS) technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo">
            <summary>
            Provides a usage of sue de coq (SdC) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="als1Cells">ALS 1 cells.</param>
            <param name="als1Digits">ALS 1 digits.</param>
            <param name="als2Cells">ALS 2 cells.</param>
            <param name="als2Digits">ALS 2 digits.</param>
            <param name="interCells">Intersection cells.</param>
            <param name="interDigits">Intersection digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.Als1Cells">
            <summary>
            Indicates all cells in ALS 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.Als2Cells">
            <summary>
            Indicates all cells in ALS 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.Als1Digits">
            <summary>
            Indicates all digits in ALS 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.Als2Digits">
            <summary>
            Indicates all digits in ALS 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.IntersectionCells">
            <summary>
            Indicates all intersection cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.IntersectionDigits">
            <summary>
            Indicates all intersection digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher">
            <summary>
            Encapsulates a sue de coq (SdC) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher.TraversingSeries">
            <summary>
            The corresponding line regions to iterate on.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher._regionMaps">
            <summary>
            All region maps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher.#ctor(Sudoku.Data.Meta.GridMap[])">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="regionMaps">All regions grid maps.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher.SearchSdcRecursively(System.Collections.Generic.IList{Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap,System.Int32)">
            <summary>
            Search SdC recursively.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="takingCellsCount">The number of cells to take.</param>
            <param name="restCellsToTakeCount">The rest number of cells to take.</param>
            <param name="nonBlock">The index of non-block region.</param>
            <param name="block">The index of block region.</param>
            <param name="takenCellsMap">The map of taken cells.</param>
            <param name="restMap">The map of rest.</param>
            <param name="emptyMap">The map of empty cells.</param>
            <param name="unionMap">The map of union map.</param>
            <param name="interCells">The map of intersection cells.</param>
            <param name="curIndexOfArray">The current index.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.SueDeCoqTechniqueSearcher.CheckSdC(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.GridMap,System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32}}}@)">
            <summary>
            Check whether the structure is an SdC or not.
            </summary>
            <param name="grid">The grid.</param>
            <param name="takenCellsMap">The map of cells to take.</param>
            <param name="nonBlock">The index of non-block region.</param>
            <param name="block">The index of block-region.</param>
            <param name="digitRegions">
            (<see langword="out"/> parameter) All digit regions.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo">
            <summary>
            Provides a usage of normal fish technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes an instance with information.
            </summary>
            <param name="conclusions">The concluisons.</param>
            <param name="views">The views.</param>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
            <param name="finCellOffsets">All candidate offsets of fins' position.</param>
            <param name="isSashimi">
            Indicates whether the fish instance is sashimi.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo.IsSashimi">
            <summary>
            Indicates whether the fish instance is sashimi.
            The value can be:
            <list type="table">
            <item>
            <term><see langword="true"/></term><description>Sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term><description>Normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term><description>Normal fish.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo.FinCellOffsets">
            <summary>
            Indicates all fin candidates in this fish information instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueSearcher">
            <summary>
            Encapsulates a normal fish technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueSearcher.TakeAllBySize(Sudoku.Data.Meta.Grid,System.Int32,System.Boolean)">
            <summary>
            Searches all basic fish of the specified size.
            </summary>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="searchRow">
            Indicates the solver will searching rows or columns.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.Basic.NormalFishTechniqueSearcher.GetGridMap(Sudoku.Data.Meta.GridMap@,System.Int32[])">
            <summary>
            Record all cells in the all regions to a <see cref="T:Sudoku.Data.Meta.GridMap"/> instance.
            </summary>
            <param name="map">(<see langword="ref"/> parameter) The map.</param>
            <param name="regionOffsets">All region offsets.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo">
            <summary>
            Provides a usage of fish technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views of this solving step.</param>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.Digit">
            <summary>
            Indicates the digit of this fish instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.Size">
            <summary>
            Indicates the size of this fish instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.Rank">
            <summary>
            Indicates the rank of the fish.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.BaseSets">
            <summary>
            All base sets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.CoverSets">
            <summary>
            All cover sets.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.FishTechniqueSearcher">
            <summary>
            Encapsulates a fish technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo">
            <summary>
            Provides a usage of almost locked candidates (ALC) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="digits">The digits.</param>
            <param name="baseCells">The base cells.</param>
            <param name="targetCells">The target cells.</param>
            <param name="hasValueCell">
            Indicates whether the structure has the value cell.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.Digits">
            <summary>
            Indicates the digits the technique used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.BaseCells">
            <summary>
            Indicates the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.TargetCells">
            <summary>
            Indicates the target cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.HasValueCell">
            <summary>
            Indicates whether the structure has a value cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueSearcher">
            <summary>
            Encapsulates an almost locked candidates (ALC) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueSearcher._intersection">
            <summary>
            All intersection series.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueSearcher.#ctor(System.ValueTuple{System.Int32,System.Int32,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap}[0:,0:])">
            <summary>
            Initializes an instance with the intersection table.
            </summary>
            <param name="intersection">The intersection table.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueSearcher.TakeAllBySize(Sudoku.Data.Meta.Grid,System.Int32)">
            <summary>
            Take all by size.
            </summary>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueSearcher.Process(Sudoku.Data.Meta.Grid,System.Collections.Generic.IList{Sudoku.Solving.Manual.Intersections.AlmostLockedCandidatesTechniqueInfo},System.Int32,System.Int32,System.Int32,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap)">
            <summary>
            Process the calculation.
            </summary>
            <param name="grid">The grid.</param>
            <param name="result">The result.</param>
            <param name="size">The size.</param>
            <param name="baseSet">The base set.</param>
            <param name="coverSet">The cover set.</param>
            <param name="left">The left grid map.</param>
            <param name="right">The right grid map.</param>
            <param name="intersection">The intersection.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.IntersectionTechniqueInfo">
            <summary>
            Provides a usage of intersection technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.IntersectionTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.IntersectionTechniqueSearcher">
            <summary>
            Encapsulates an intersection technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo">
            <summary>
            Provides a usage of locked candidates technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="digit">The digit.</param>
            <param name="baseSet">The base set.</param>
            <param name="coverSet">The cover set.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.BaseSet">
            <summary>
            Indicates the base set.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.CoverSet">
            <summary>
            Indicates the cover set.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueSearcher">
            <summary>
            Encapsulates a locked candidates technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueSearcher._intersection">
            <summary>
            All intersection series.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueSearcher.#ctor(System.ValueTuple{System.Int32,System.Int32,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap}[0:,0:])">
            <summary>
            Initializes an instance with the specified intersection table.
            </summary>
            <param name="intersection">The intersection table.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LockedCandidatesTechniqueSearcher.BitwiseAndMasks(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.GridMap)">
            <summary>
            Bitwise and all masks.
            </summary>
            <param name="grid">The grid.</param>
            <param name="map">The grid map.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo">
            <summary>
            Provides a usage of bowman bingo technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="contradictionSeries">The contradiction series.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.ContradictionSeries">
            <summary>
            Indicates all conclusions that occurs a contradict.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher">
            <summary>
            Encapsulates a bowman bingo technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher._length">
            <summary>
            Indicates the length to find.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher._searcher">
            <summary>
            The singles searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher._tempConclusions">
            <summary>
            All temporary conclusions.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified length.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.RecordUndoInfo(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)">
            <summary>
            Record all information to be used in undo grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.UndoGrid(Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Int16)">
            <summary>
            Undo the grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="list">The list.</param>
            <param name="cell">The cell.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.IsValidGrid(Sudoku.Data.Meta.Grid,System.Int32)">
            <summary>
            To check the specified cell has a same digit filled in a cell
            which is same region with the current one.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo">
            <summary>
            Provides a usage of brute force technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher">
            <summary>
            Encapsulates a brute force technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher._solution">
            <summary>
            The solution.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.TryAndErrorOrder">
            <summary>
            The order of cell offsets to get values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.#ctor(Sudoku.Data.Meta.Grid)">
            <summary>
            A trick. Initializes an instance with the solution grid.
            This searcher will try to extract a value from the
            solution.
            </summary>
            <param name="solution">The solution.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.LastResortTechniqueInfo">
            <summary>
            Provides a usage of last resort.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.LastResortTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.LastResortTechniqueSearcher">
            <summary>
            Encapsulates a last resort technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueInfo">
            <summary>
            Provides a usage of pattern overlay method (POM) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueSearcher">
            <summary>
            Encapsulates a pattern overlay method (POM) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PatternOverlayMethodTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo">
            <summary>
            Provides a usage of template technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="isTemplateDeletion">
            Indicates whether this technique is template deletion.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.IsTemplateDeletion">
            <summary>
            Indicates whether this technique is template deletion.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher">
            <summary>
            Encapsulates a template technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher._templateDeleteOnly">
            <summary>
            Indicates whether the seacher checks template deletes.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.#ctor(System.Boolean)">
            <summary>
            Initalizes an instance with the specified <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="templateDeleteOnly">
            Indicates whether the technique searcher checks template deletes.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
            <exception cref="T:Sudoku.Runtime.WrongHandlingException">
            Throws when the puzzle is not unique.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.GetAllTemplateSet(System.Collections.Generic.IList{Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo},Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.GridMap[])">
            <summary>
            Get all template sets.
            </summary>
            <param name="result">The result.</param>
            <param name="solution">The solution.</param>
            <param name="digitDistributions">All digit distributions.</param>
            <returns>All template sets.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.GetAllTemplateDelete(System.Collections.Generic.IList{Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo},Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.GridMap[])">
            <summary>
            Get all template deletes.
            </summary>
            <param name="result">The result.</param>
            <param name="solution">The solution.</param>
            <param name="digitDistributions">All digit distributions.</param>
            <returns>All template deletes.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolver">
            <summary>
            Provides a solver that use logical methods to solve a specified sudoku puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveWithStrictDifficultyRating(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.Grid,System.Collections.Generic.List{Sudoku.Solving.TechniqueInfo},Sudoku.Data.Meta.Grid,System.ValueTuple{System.Int32,System.Int32,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap}[0:,0:],Sudoku.Data.Meta.GridMap[])">
            <summary>
            Solve the puzzle with <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> option.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation grid to calculate.</param>
            <param name="steps">All steps found.</param>
            <param name="solution">The solution.</param>
            <param name="intersection">The intersection table.</param>
            <param name="regionMaps">All region maps.</param>
            <returns>The analysis result.</returns>
            <exception cref="T:Sudoku.Runtime.WrongHandlingException">
            Throws when the solver cannot solved due to wrong handling.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveNaively(Sudoku.Data.Meta.Grid,Sudoku.Data.Meta.Grid,System.Collections.Generic.List{Sudoku.Solving.TechniqueInfo},Sudoku.Data.Meta.Grid,System.ValueTuple{System.Int32,System.Int32,Sudoku.Data.Meta.GridMap,Sudoku.Data.Meta.GridMap}[0:,0:],Sudoku.Data.Meta.GridMap[])">
            <summary>
            Solve naively.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation grid to calculate.</param>
            <param name="steps">All steps found.</param>
            <param name="solution">The solution.</param>
            <param name="intersection">Intersection table.</param>
            <param name="regionMaps">All region maps.</param>
            <returns>The analysis result.</returns>
            <exception cref="T:Sudoku.Runtime.WrongHandlingException">
            Throws when the solver cannot solved due to wrong handling.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.CheckEliminations(Sudoku.Data.Meta.Grid,System.Collections.Generic.IEnumerable{Sudoku.Solving.Conclusion})">
            <summary>
            To check the validity of all conclusions.
            </summary>
            <param name="solution">The solution.</param>
            <param name="conclusions">The conclusions.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly">
            <summary>
            <para>
            Indicates whether the solver should check all technique
            information using the strict technique searchers order.
            </para>
            <para>
            If the value is <see langword="true"/>, all technique searchers
            will be enabled calculation in order. It ensures the strictness
            of difficulty rating that the maximum difficulty searched in
            one searcher should be no more than the minimum one searched in
            the searcher behind the previous one.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if this value is <see langword="true"/>, the option
            <see cref="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder"/> will be disabled. In other
            words, this option does not work while solving when the condition
            is satisfied. However, the time of calculation with this value
            <see langword="true"/> will be <b>much slower</b> than that with the
            value is <see langword="false"/>.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.ManualSolver._bowmanBingoMaximumLength">
            <summary>
            The field bound with <see cref="P:Sudoku.Solving.Manual.ManualSolver.BowmanBingoMaximumLength"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.BowmanBingoMaximumLength"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.BowmanBingoMaximumLength">
            <summary>
            <para>
            Indicates the number of nodes to be searched for in bowman bingos.
            </para>
            <para>The value is <c>10</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckGurthSymmetricalPlacement">
            <summary>
            <para>
            Indicates whether the solver should check Gurth's symmetrical placement
            at the initial grid.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if the value is <see langword="true"/>, the solver will check the symmetry
            of the grid at initial. If the grid is symmetrical grid, the solver
            will give you a hint about the technique of symmetrical placement. However,
            the hint will influence the difficulty rating during solving the puzzle.
            If the puzzle is so easy (in other words, the grid does not need check
            it), this option will make the difficulty rating of the puzzle much more
            higher than that when the option is <see langword="false"/>. In addtion,
            if the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> is <see langword="true"/>,
            this option will be ignored.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckIncompletedUniquenessPatterns">
            <summary>
            <para>
            Indicates whether the solver should check
            incompleted uniqueness patterns.
            </para>
            <para>The value is <see langword="false"/> in default case.</para>
            </summary>
            <example>
            For example, An basic UR pattern should be
            <code>
            ab ab
            ab abc
            </code>
            But sometimes, some digits will be missed in the pattern
            like this:
            <code>
            ab ab
            ab ac
            </code>
            The candidate <c>a</c> is also can be eliminated.
            </example>
        </member>
        <member name="F:Sudoku.Solving.Manual.ManualSolver._checkRegularWingSize">
            <summary>
            The field bound with <see cref="P:Sudoku.Solving.Manual.ManualSolver.CheckRegularWingSize"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.CheckRegularWingSize"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckRegularWingSize">
            <summary>
            <para>
            Indicates all regular wings with the size less than
            or equals to this specified value. This value should
            be between 3 and 5.
            </para>
            <para>The value is <c>5</c> in default case.</para>
            </summary>
            <remarks>
            In fact this value can be 9 at most (i.e. <c>value &gt;&#61; 3
            &amp;&amp; value &lt;&#61; 9</c>) theoretically, however the searching
            is too low so I do not allow them.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableBowmanBingo">
            <summary>
            <para>
            Indicates whether the solver should check all bowman bingos.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableBruteForce">
            <summary>
            <para>
            Indicates whether the solver should add brute force technique information
            when the puzzle has a unique solution but cannot be found any manual
            techniques.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableFullHouse">
            <summary>
            <para>
            Indicates whether the solver will record the step
            whose name or kind is full house.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
            <remarks>
            <b>Full house</b>s are the techniques that used in a single
            region. When the specified region has only one empty cell,
            the full house will be found at this empty cell (the last
            value in this region).
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableLastDigit">
            <summary>
            <para>
            Indicates whether the solver will record the step
            whose name or kind is last digit.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
            <remarks>
            <b>Last digit</b>s are the techniques that used in a single
            digit. When the whole grid has 8 same digits, the last
            one will be always found and set in the last position,
            which is last digit.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnablePatternOverlayMethod">
            <summary>
            <para>
            Indicates whether the solver will record all pattern overlay
            method technique steps.
            </para>
            <para>
            The value is <see langword="false"/> in default case. Note that
            this option makes the solver search single-digit patterns
            <c>much more slower</c> because it will use enumeration to iterate on
            all possible patterns of a single digit (46656 patterns in total).
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableTemplate">
            <summary>
            <para>
            Indicates whether the solver will record template techniques
            if worth.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if the value is <see langword="true"/>, the option
            <see cref="P:Sudoku.Solving.Manual.ManualSolver.OnlyRecordTemplateDelete"/> will be disabled.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.OnlyRecordTemplateDelete"/>.
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OnlyRecordTemplateDelete">
            <summary>
            <para>
            Indicates whether the step accumulator only records templete delete,
            and template set will not be in this collection (if necessary).
            </para>
            <para>
            If the value is <see langword="true"/>, and the solver has checked
            all template steps, only template deletes in these steps will be
            recorded into the step accumulator.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder">
            <summary>
            <para>Indicates the solver will optimizes the applying order.</para>
            <para>
            When the value is <see langword="true"/>, the result to apply to
            the grid will be the one which has the minimum difficulty
            rating; otherwise, the applying step will be the first one
            of all steps being searched.
            </para>
            <para>
            The value is <see langword="false"/> in default case. If the value
            is <see langword="true"/>, the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
            will be disabled.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.UseCalculationPriority">
            <summary>
            <para>
            Indicates whether the solver should order all technique searchers
            by its priority.
            </para>
            <para>
            The value is <see langword="true"/> in default case. In addition,
            if you enable the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>,
            this option will be disabled because the solver will enable the
            function of count on all steps and get one with the <b>minimum</b>
            difficulty of them.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.UseExtendedBugSearcher">
            <summary>
            <para>
            Indicates whether the solver should use extended BUG checker
            to searcher for all true candidates no matter how difficult
            the true candidates looking for.
            </para>
            <para>The value is <see langword="false"/> in default case.</para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo">
            <summary>
            Provides a usage of empty rectangle technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Solving.ConjugatePair)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="digit">The digit.</param>
            <param name="block">The block.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.Block">
            <summary>
            The block.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher">
            <summary>
            Encapsulates an empty rectangle technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.LinkIds">
            <summary>
            Indicates all regions iterating on the specified block
            forming an empty rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher._digitDistributions">
            <summary>
            All digit distributions.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher._regionMaps">
            <summary>
            All region grid maps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.#ctor(Sudoku.Data.Meta.GridMap[])">
            <summary>
            Initializes an instance with the specified grid.
            </summary>
            <param name="regionMaps">All region maps.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.IsEmptyRectangle(Sudoku.Data.Meta.GridMap,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Check whether the cells form an empty cell.
            </summary>
            <param name="blockMap">The empty cell grid map.</param>
            <param name="block">The block.</param>
            <param name="row">(<see langword="out"/> parameter) The row.</param>
            <param name="column">(<see langword="out"/> parameter) The column.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.SingleDigitPatternTechniqueInfo">
            <summary>
            Provides a usage of single-digit pattern technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.SingleDigitPatternTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.SingleDigitPatternTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.SingleDigitPatternTechniqueSearcher">
            <summary>
            Encapsulates a single-digit pattern technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo">
            <summary>
            Provides a usage of two strong links technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="digit">The digit.</param>
            <param name="baseRegion">The base region.</param>
            <param name="targetRegion">The target region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.BaseRegion">
            <summary>
            Indicates the base region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.TargetRegion">
            <summary>
            Indicates the target region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueSearcher">
            <summary>
            Encapsulates a two strong links technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo">
            <summary>
            Indicates a usage of full house technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <summary>
            Initializes an instance with information.
            </summary>
            <param name="conclusions">The conclusion.</param>
            <param name="views">The views.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo">
            <summary>
            Indicates a using of hidden single technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="regionOffset">The region offset.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
            <param name="enableAndIsLastDigit">
            Indicates whether the solver enables last digit.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.RegionOffset">
            <summary>
            Indicates the region offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.EnableAndIsLastDigit">
            <summary>
            Indicates whether the solver enables last digit technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo">
            <summary>
            Indicates a usage of naked single technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <summary>
            Initializes an instance with information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo">
            <summary>
            Provides a usage of single technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views of this solving step.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.CellOffset">
            <summary>
            Indicates the cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.DifficultyLevel">
            <summary>
            Indicates the difficulty level.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher">
            <summary>
            Encapsulates a single technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher._enableFullHouse">
            <summary>
            Indicates the solver enables these options.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher._enableLastDigit">
            <summary>
            Indicates the solver enables these options.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance with enable options.
            </summary>
            <param name="enableFullHouse">
            Indicates whether the solver enables full house.
            </param>
            <param name="enableLastDigit">
            Indicates whether the solver enables last digit.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo">
            <summary>
            Provides a usage of hidden subset technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.Size">
            <summary>
            Indicates the size of this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo">
            <summary>
            Provides a usage of naked subset technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views of this solving step.</param>
            <param name="regionOffset">The region offset.</param>
            <param name="cellOffsets">The cell offsets.</param>
            <param name="digits">The digits.</param>
            <param name="isLocked">Indicates whether the technique is locked. </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.IsLocked">
            <summary>
            Represents a value for this technique is a locked,
            partial locked or normal subset.
            The technique is one when the value is:
            <list type="table">
            <item><term><see langword="true"/></term><description>Locked subset,</description></item>
            <item><term><see langword="false"/></term><description>Partial locked subset,</description></item>
            <item><term><see langword="null"/></term><description>Normal subset.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.Size">
            <summary>
            Indicates the size of this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo">
            <summary>
            Provides a usage of subset technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views of this solving step.</param>
            <param name="regionOffset">The region offset.</param>
            <param name="cellOffsets">The cell offsets.</param>
            <param name="digits">The digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.RegionOffset">
            <summary>
            The region offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.Digits">
            <summary>
            All digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.CellOffsets">
            <summary>
            All cell offsets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher">
            <summary>
            Encapsulates a subset technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.TakeAllNakedSubsetsBySize(Sudoku.Data.Meta.Grid,System.Int32)">
            <summary>
            Get all naked subsets technique information, for searching the specified size.
            </summary>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <returns>All technique information searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.GatherConclusion(Sudoku.Data.Meta.Grid,System.Collections.Generic.IList{Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Nullable{System.Boolean})">
            <summary>
            To gather a conclusion with essential information.
            </summary>
            <param name="grid">The grid.</param>
            <param name="result">The information instances searched.</param>
            <param name="region">The region offset.</param>
            <param name="digits">All digits.</param>
            <param name="offsets">The cell offsets.</param>
            <param name="conclusions">All conclusions.</param>
            <param name="isLocked">Indicates whether the subset is locked.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.GetNakedSubsetConclusions(Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Nullable{System.Boolean}@)">
            <summary>
            Get conclusions after searched a subset technique.
            </summary>
            <param name="grid">The grid.</param>
            <param name="offsets">All cell offsets.</param>
            <param name="digits">All digits.</param>
            <param name="isLocked">
            (<see langword="out"/> parameter) Indicates whether the subset is locked.
            </param>
            <returns>All conclusions.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.GetNakedSubsetsHighlightedCandidateOffsets(Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Get all candidate offsets highlight in a specified naked subset technique.
            </summary>
            <param name="grid">The grid.</param>
            <param name="offsets">All cell offsets.</param>
            <param name="digits">All digits.</param>
            <returns>All candidate offsets and its ID.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.TakeAllHiddenSubsetsBySize(Sudoku.Data.Meta.Grid,System.Int32)">
            <summary>
            Get all hidden subsets technique information, for searching the specified size.
            </summary>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <returns>All technique information searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.GetHiddenSubsetsConclusions(Sudoku.Data.Meta.Grid,System.Int32,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32}@,System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}}@)">
            <summary>
            Get conclusions after a hidden subset searched.
            </summary>
            <param name="grid">The grid.</param>
            <param name="region">The region offset.</param>
            <param name="mask">
            The mask that calculated in <see cref="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.TakeAllHiddenSubsetsBySize(Sudoku.Data.Meta.Grid,System.Int32)"/>.
            </param>
            <param name="digits">All digits.</param>
            <param name="cellOffsetList">(<see langword="out"/> parameter) All cell offsets.</param>
            <param name="highlightedCandidates">
            (<see langword="out"/> parameter) All highlight candidate offsets.
            </param>
            <returns>All conclusions.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo">
            <summary>
            Provides a usage of Gurth's symmetrical placement.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.Meta.SymmetricalType,System.Nullable{System.Int32}[])">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="symmetricalType">The symmetrical type.</param>
            <param name="mappingTable">The mapping table.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.SymmetricalType">
            <summary>
            Indicates the symmetrical type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.MappingTable">
            <summary>
            Indicates the mapping table.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher">
            <summary>
            Encapsulates a Gurth's symmetrical placement technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher.CheckX(System.Collections.Generic.IList{Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo},Sudoku.Data.Meta.Grid)">
            <summary>
            Check x-axis symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher.CheckY(System.Collections.Generic.IList{Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo},Sudoku.Data.Meta.Grid)">
            <summary>
            Check y-axis symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher.CheckDiagonal(System.Collections.Generic.IList{Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo},Sudoku.Data.Meta.Grid)">
            <summary>
            Check diagonal symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher.CheckAntiDiagonal(System.Collections.Generic.IList{Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo},Sudoku.Data.Meta.Grid)">
            <summary>
            Check anti-diagonal symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueSearcher.CheckCentral(System.Collections.Generic.IList{Sudoku.Solving.Manual.Symmetry.GurthSymmetricalPlacementTechniqueInfo},Sudoku.Data.Meta.Grid)">
            <summary>
            Check central symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.SymmetryTechniqueInfo">
            <summary>
            Provides a usage of symmetry technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.SymmetryTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.SymmetryTechniqueSearcher">
            <summary>
            Encapsulates a symmetry technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo">
            <summary>
            Provides a usage of BUG+n technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo.DifficultyExtra">
            <summary>
            The table of extra difficulty values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo.Candidates">
            <summary>
            Indicates all candidates used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveMultipleTrueCandidatesTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueInfo">
            <summary>
            Provides a usage of bivalue universal grave (BUG) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher">
            <summary>
            Encapsulates a bivalue universal grave (BUG) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher._extended">
            <summary>
            Indicates whether the searcher should call the extended BUG checker
            to find all true candidates.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher._regionMaps">
            <summary>
            All region maps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.#ctor(Sudoku.Data.Meta.GridMap[],System.Boolean)">
            <summary>
            Initializes an instance with the region maps.
            </summary>
            <param name="regionMaps">The region map.</param>
            <param name="extended">
            A <see cref="T:System.Boolean"/> value indicating whether the searcher should call
            the extended BUG checker to search for all true candidates no matter how
            difficult searching.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
            <exception cref="T:Sudoku.Runtime.WrongHandlingException">
            Throws when the number of true candidates is naught.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.CheckType3Naked(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo},Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Check type 3 (with naked subsets).
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo},Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 4.
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.CheckMultiple(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo},Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check BUG+n.
            </summary>
            <param name="result">The result list.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo},Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 2.
            </summary>
            <param name="result">The result list.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.GetTrueCandidatesSimply(Sudoku.Data.Meta.Grid)">
            <summary>
            To get true candidates (but simple mode).
            </summary>
            <param name="grid">The grid.</param>
            <returns>All true candidates searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveTechniqueSearcher.CheckSingleDigit(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check whether all candidates in the list has same digit value.
            </summary>
            <param name="list">The list of all true candidates.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo">
            <summary>
            Provides a usage of bivalue universal grave (BUG) type 2 technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.DifficultyExtra">
            <summary>
            The table of extra difficulty values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="digit">The digit.</param>
            <param name="cells">All cell offsets.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.Cells">
            <summary>
            Indicates the cell offsets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType2TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo">
            <summary>
            Provides a usage of bivalue universal grave (BUG) type 3 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="trueCandidates">All true candidates.</param>
            <param name="digits">All digits.</param>
            <param name="cells">All cells.</param>
            <param name="isNaked">Indicates whether the subset is naked.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.TrueCandidates">
            <summary>
            Indicates all true candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.Digits">
            <summary>
            Indicates all digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.Cells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.IsNaked">
            <summary>
            Indicates whether the technique is with naked subsets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType3TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo">
            <summary>
            Provides a usage of bivalue universal grave (BUG) type 4 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Solving.ConjugatePair)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="digits">All digits.</param>
            <param name="cells">All cells.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.Digits">
            <summary>
            Indicates all digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.Cells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BivalueUniversalGraveType4TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData">
            <summary>
            Provides all data for unique loops (basic and extended types).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.Type">
            <summary>
            <para>
            Indicates the type of the unique loop,
            where the value is between 1 to 4.
            </para>
            <para>
            You can find all types in detail in 'remarks' part of this page.
            </para>
            </summary>
            <remarks>
            All types:
            <list type="table">
            <item>Type 1<term></term>
            <description>Basic type.</description>
            </item>
            <item>Type 2<term></term>
            <description>Generalized locked candidates type.</description>
            </item>
            <item>Type 3<term></term>
            <description>
            Generalized subset type (+ naked or hidden subset).
            </description>
            </item>
            <item>Type 4<term></term>
            <description>Conjugate pair type.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.Cells">
            <summary>
            Indicates all cells used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.Digits">
            <summary>
            Indicates all digits used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.Equals(Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.op_Equality(Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData,Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData)">
            <summary>
            Indicates whether two instances have a same value.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData.op_Inequality(Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData,Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData)">
            <summary>
            Indicates whether two instances have two different values.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo">
            <summary>
            Provides a usage of unique loop technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.DifficultyExtra">
            <summary>
            The difficulty extra.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData)">
            <summary>
            Initializes an instance with the information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="detailData">The data of details.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.DetailData">
            <summary>
            The data of the specified unique rectangle type.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.Equals(Sudoku.Solving.TechniqueInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher">
            <summary>
            Encapsulates a unique loop technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.CheckType2(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32[],System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check for type 2 (with two extra cells).
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="extraDigit">The extra digit.</param>
            <param name="extraCells">All extra cells.</param>
            <param name="digits">All digits.</param>
            <param name="loop">The loop.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.CheckType3Naked(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int16,System.Int32[],System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32[],System.Int32)">
            <summary>
            Check type 3 (with naked subsets).
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="extraDigits">The extra digits.</param>
            <param name="digits">All digits.</param>
            <param name="loop">The loop.</param>
            <param name="regions">All regions.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.CheckType3Hidden(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo},Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32[],System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32[],System.Int32)">
            <summary>
            Check type 3 (with hidden subsets).
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="extraCells">The extra cells.</param>
            <param name="digits">All digits.</param>
            <param name="loop">The loop.</param>
            <param name="regions">All regions.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueInfo},Sudoku.Data.Meta.Grid,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32[],System.Int32[],System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 4.
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="extraCells">The extra cells.</param>
            <param name="digits">The digits.</param>
            <param name="regions">All regions.</param>
            <param name="loop">The loop.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.IsValidLoop(Sudoku.Data.Meta.Grid,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Check whether the loop is valid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="loop">The loop to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopTechniqueSearcher.CheckForLoopsRecursively(Sudoku.Data.Meta.Grid,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int16,System.Int32,System.Collections.Generic.IList{System.Collections.Generic.List{System.Int32}})">
            <summary>
            Check the validity of the unique loop recursively.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell to check.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="allowedExtraCellsCount">The number of allowed extra cells.</param>
            <param name="exDigitsMask">The extra digits mask.</param>
            <param name="lastRegionType">The last region type.</param>
            <param name="loops">All loops.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType1DetailData">
            <summary>
            Indicates the detail data of UL type 1.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType1DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType1DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType1DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType2DetailData">
            <summary>
            Indicates the detail data of UL type 2.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType2DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType2DetailData.ExtraDigit">
            <summary>
            Indicates the extra digit in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType2DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType2DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType3DetailData">
            <summary>
            Indicates the detail data of UL type 3.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType3DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="subsetDigits">All subset digits.</param>
            <param name="subsetCells">All subset cells.</param>
            <param name="isNaked">Indicates whether the subset is naked or not.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType3DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType3DetailData.SubsetDigits">
            <summary>
            Indicates all subset digits in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType3DetailData.SubsetCells">
            <summary>
            Indicates all subset cells in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType3DetailData.IsNaked">
            <summary>
            Indicates whether this subset is naked or not.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType3DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType4DetailData">
            <summary>
            Indicates the detail data of UL type 4.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType4DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Solving.ConjugatePair)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType4DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType4DetailData.ConjugatePair">
            <summary>
            Indicates the conjugate pair used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType4DetailData.Equals(Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopDetailData)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UniqueLoopType4DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternDetailData">
            <summary>
            Provides all data for Borescoper's deadly pattern (BDP) (basic and extended types).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternDetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternDetailData.Type">
            <summary>
            <para>
            Indicates the type of the Borescoper's deadly pattern.
            where the value is between 1 and 4.
            </para>
            <para>
            You can find all types in detail in 'remarks' part of this page.
            </para>
            </summary>
            <remarks>
            All types:
            <list type="table">
            <item>Type 1<term></term>
            <description>Basic type.</description>
            </item>
            <item>Type 2<term></term>
            <description>Generalized locked candidates type.</description>
            </item>
            <item>Type 3<term></term>
            <description>
            Generalized subset type (+ naked or hidden subset).
            </description>
            </item>
            <item>Type 4<term></term>
            <description>Conjugate pair type.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternDetailData.Digits">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternDetailData.Cells">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternDetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo">
            <summary>
            Provides a usage of Borescoper's deadly pattern (BDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternDetailData)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="detailData">The detail data.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo.DetailData">
            <summary>
            The detail data of the technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo.Size">
            <summary>
            Indicates the size.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueSearcher">
            <summary>
            Encapsulates a Borescoper's deadly pattern technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternTechniqueSearcher.Quads">
            <summary>
            All combinations in a block.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType1DetailData">
            <summary>
            Indicates the detail data of BDP type 1.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType1DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes an instance with cells.
            </summary>
            <param name="cells">Cells.</param>
            <param name="digits">Digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType1DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType1DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType2DetailData">
            <summary>
            Indicates the detail data of BDP type 2.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType2DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType2DetailData.ExtraDigit">
            <summary>
            Indicates the extra digit in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType2DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType2DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType3DetailData">
            <summary>
            Indicates the detail data of BDP type 3.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType3DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="subsetDigits">All subset digits.</param>
            <param name="subsetCells">All subset cells.</param>
            <param name="isNaked">Indicates whether the subset is naked or not.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType3DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType3DetailData.SubsetDigits">
            <summary>
            Indicates all subset digits in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType3DetailData.SubsetCells">
            <summary>
            Indicates all subset cells in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType3DetailData.IsNaked">
            <summary>
            Indicates whether this subset is naked or not.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType3DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType4DetailData">
            <summary>
            Indicates the detail data of UR type 4.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType4DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Solving.ConjugatePair)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType4DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType4DetailData.ConjugatePair">
            <summary>
            Indicates the conjugate pair used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BorescoperDeadlyPatternType4DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleDetailData">
            <summary>
            Provides all data for unique rectangles (basic and extended types).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleDetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleDetailData.Type">
            <summary>
            <para>
            Indicates the type of the avoidable rectangle,
            where the value is between 1 and 3.
            </para>
            <para>
            You can find all types in detail in 'remarks' part of this page.
            </para>
            </summary>
            <remarks>
            All types:
            <list type="table">
            <item>Type 1<term></term>
            <description>Basic type.</description>
            </item>
            <item>Type 2<term></term>
            <description>Generalized locked candidates type.</description>
            </item>
            <item>Type 3<term></term>
            <description>
            Generalized subset type (+ naked or hidden subset).
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleDetailData.Digits">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleDetailData.Cells">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleDetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleTechniqueInfo">
            <summary>
            Provides a usage of avoidable rectangle (AR) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData)">
            <summary>
            Initializes an instance with the information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="detailData">The data of details.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType1DetailData">
            <summary>
            Indicates the detail data of AR type 1.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType1DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes an instance with cells.
            </summary>
            <param name="cells">Cells.</param>
            <param name="digits">Digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType1DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType1DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType2DetailData">
            <summary>
            Indicates the detail data of AR type 2.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType2DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType2DetailData.ExtraDigit">
            <summary>
            Indicates the extra digit in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType2DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType2DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType3DetailData">
            <summary>
            Indicates the detail data of UR type 3.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType3DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="subsetDigits">All subset digits.</param>
            <param name="subsetCells">All subset cells.</param>
            <param name="isNaked">Indicates whether the subset is naked or not.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType3DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType3DetailData.SubsetDigits">
            <summary>
            Indicates all subset digits in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType3DetailData.SubsetCells">
            <summary>
            Indicates all subset cells in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType3DetailData.IsNaked">
            <summary>
            Indicates whether this subset is naked or not.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.AvoidableRectangleType3DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo">
            <summary>
            Provides a usage of hidden avoidable rectangle technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{Sudoku.Solving.ConjugatePair})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="conjugatePairs">All conjugate pairs.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.Cells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.Digits">
            <summary>
            Indicates all digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.Digit">
            <summary>
            Indicates the digit used in all conjugate pairs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.ConjugatePairs">
            <summary>
            Indicates all conjugate pairs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenAvoidableRectangleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo">
            <summary>
            Provides a usage of hidden rectangle technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{Sudoku.Solving.ConjugatePair})">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">All conclusions.</param>
            <param name="views">All views.</param>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="conjugatePairs">All conjugate pairs.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.Cells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.Digits">
            <summary>
            Indicates all digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.Digit">
            <summary>
            Indicates the digit used in all conjugate pairs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.ConjugatePairs">
            <summary>
            Indicates all conjugate pairs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.HiddenRectangleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData">
            <summary>
            Provides a rectangle detail data model.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData.Type">
            <summary>
            Indicates the type of the rectangle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData.Cells">
            <summary>
            Indicates all cells that forms a UR or an AR.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData.Digits">
            <summary>
            Indicates all digits that forms a UR or an AR.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo">
            <summary>
            Provides a usage of rectangle technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData)">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views of this solving step.</param>
            <param name="detailData">The detail data.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo.DetailData">
            <summary>
            The detail data of the technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueSearcher">
            <summary>
            Encapsulates a rectangle technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleDetailData">
            <summary>
            Provides all data for unique rectangles (basic and extended types).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleDetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleDetailData.Type">
            <summary>
            <para>
            Indicates the type of the unique rectangle,
            where the value is between 1 and 6.
            </para>
            <para>
            You can find all types in detail in 'remarks' part of this page.
            </para>
            </summary>
            <remarks>
            All types:
            <list type="table">
            <item>Type 1<term></term>
            <description>Basic type.</description>
            </item>
            <item>Type 2<term></term>
            <description>Generalized locked candidates type.</description>
            </item>
            <item>Type 3<term></term>
            <description>
            Generalized subset type (+ naked or hidden subset).
            </description>
            </item>
            <item>Type 4<term></term>
            <description>Conjugate pair type.</description>
            </item>
            <item>Type 5<term></term>
            <description>
            Type-2 extended type (with three additional same digit).
            </description>
            </item>
            <item>Type 6<term></term>
            <description>
            Type-4 extended type (with two parallel conjugate pairs,
            and they hold a same digit).
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleDetailData.Digits">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleDetailData.Cells">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleDetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueInfo">
            <summary>
            Provides a usage of unique rectangle technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rectangles.IRectangleDetailData)">
            <summary>
            Initializes an instance with the information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="detailData">The data of details.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher">
            <summary>
            Encapsulates a unique rectangle technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher._checkIncompleted">
            <summary>
            Indicates whether the solver should check incompleted URs.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with the checking option.
            </summary>
            <param name="checkIncompletedUniquenessPatterns">
            Indicates whether the solver should check incompleted URs.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.CheckType15AndHidden(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Int32[][],System.Boolean)">
            <summary>
            Check basic type and generalized locked candidates type.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="cells">All UR cells.</param>
            <param name="cellTriplets">Cell triplets to use.</param>
            <param name="urMode">
            Indicates whether the current searching is for UR. <see langword="true"/>
            is for UR, <see langword="false"/> is for AR.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.CheckHiddenRectangle(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Span{System.Int32},System.Int32,System.Int32[],System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Check hidden rectangle.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="regions">All regions used.</param>
            <param name="conjugatePairsSeries">All conjugate pairs used.</param>
            <param name="elimCell">The cell whose candidate will be eliminated.</param>
            <param name="cellTriple">Cell triple.</param>
            <param name="extraCell">The extra cell.</param>
            <param name="cells">All cells.</param>
            <param name="urMode">
            Indicates whether the current searching is for UR. <see langword="true"/>
            is for UR, <see langword="false"/> is for AR.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.CheckType23456(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Int32[][],System.Boolean)">
            <summary>
            Check type 2 to 6.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="cells">All cells.</param>
            <param name="cellPairs">Cell pairs.</param>
            <param name="urMode">
            Indicates whether the current searching is for UR. <see langword="true"/>
            is for UR, <see langword="false"/> is for AR.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.CheckType3Naked(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Collections.Generic.IEnumerable{System.Int32},System.Int32[],System.Int32,System.Boolean)">
            <summary>
            Check type 3 (with naked subset).
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="regions">All regions.</param>
            <param name="size">The size to check.</param>
            <param name="urMode">
            Indicates whether the current searching is for UR. <see langword="true"/>
            is for UR, <see langword="false"/> is for AR.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.CheckType3Hidden(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Int32[],System.Collections.Generic.IEnumerable{System.Int32},System.Int32[],System.Int32,System.Boolean)">
            <summary>
            Check type 3 (with hidden subset).
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="cells">All cells.</param>
            <param name="extraCells">All extra cells.</param>
            <param name="digits">All digits.</param>
            <param name="regions">All regions.</param>
            <param name="size">The size to check.</param>
            <param name="urMode">
            Indicates whether the current searching is for UR. <see langword="true"/>
            is for UR, <see langword="false"/> is for AR.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.CheckType6(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Int32[],System.Int32[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Check type 6.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="cells">All cells.</param>
            <param name="cellPair">The cell pair.</param>
            <param name="extraCells">All extra cells.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.CheckType4(System.Collections.Generic.IList{Sudoku.Solving.Manual.Uniqueness.Rectangles.RectangleTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Int32[],System.Int32[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Check type 4.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="cells">All cells.</param>
            <param name="cellPair">The cell pair.</param>
            <param name="extraCells">All extra cells.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.GetOtherDigitMask(Sudoku.Data.Meta.Grid,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Int16@)">
            <summary>
            Get other digit mask used in type 3 with naked subset.
            </summary>
            <param name="grid">The grid.</param>
            <param name="allCells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="digitKindsMask">(<see langword="out"/> parameter) The digit kind mask.</param>
            <returns>The result mask.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.GetRegionAppearingMask(System.Int32,System.Int32[])">
            <summary>
            Get the appearing mask in a region.
            </summary>
            <param name="region">The region.</param>
            <param name="cells">All cells to check.</param>
            <returns>The result mask.</returns>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleTechniqueSearcher.TraversingTable">
            <summary>
            UR (or AR) traversing table.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType1DetailData">
            <summary>
            Indicates the detail data of UR type 1.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType1DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes an instance with cells.
            </summary>
            <param name="cells">Cells.</param>
            <param name="digits">Digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType1DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType1DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType2DetailData">
            <summary>
            Indicates the detail data of UR type 2.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType2DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="extraDigit">The extra digit.</param>
            <param name="isType5">
            Indicates whether this type is the variant of type 2.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType2DetailData.ExtraDigit">
            <summary>
            Indicates the extra digit in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType2DetailData.IsType5">
            <summary>
            Indicates whether this type is the variant of type 2
            (pattern with diagonal extra digits).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType2DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType2DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType3DetailData">
            <summary>
            Indicates the detail data of UR type 3.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType3DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="subsetDigits">All subset digits.</param>
            <param name="subsetCells">All subset cells.</param>
            <param name="isNaked">Indicates whether the subset is naked or not.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType3DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType3DetailData.SubsetDigits">
            <summary>
            Indicates all subset digits in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType3DetailData.SubsetCells">
            <summary>
            Indicates all subset cells in this pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType3DetailData.IsNaked">
            <summary>
            Indicates whether this subset is naked or not.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType3DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType4DetailData">
            <summary>
            Indicates the detail data of UR type 4.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType4DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Solving.ConjugatePair)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType4DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType4DetailData.ConjugatePair">
            <summary>
            Indicates the conjugate pair used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType4DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType6DetailData">
            <summary>
            Indicates the detail data of UR type 6.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType6DetailData.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Solving.ConjugatePair[])">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="conjugatePairs">The conjugate pairs.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType6DetailData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType6DetailData.ConjugatePairs">
            <summary>
            Indicates all conjugate pairs.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rectangles.UniqueRectangleType6DetailData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo">
            <summary>
            Provides a usage of uniqueness technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueSearcher">
            <summary>
            Encapsulates a uniqueness technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueInfo">
            <summary>
            Encapsulates a usage of irregular wing technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher">
            <summary>
            Encapsulates an irregular wing technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher.TakeAllWWings(Sudoku.Data.Meta.Grid,System.ValueTuple{Sudoku.Data.Meta.GridMap,System.Int32}@)">
            <summary>
            Search for all W-Wings.
            </summary>
            <param name="grid">The grid.</param>
            <param name="pair">(<see langword="in"/> parameter) bivalue cell information pair.</param>
            <returns>All technique information instances.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher.SearchWWingByRegions(System.Collections.Generic.IList{Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo},Sudoku.Data.Meta.Grid,System.Int32[],System.Int32,System.Int32,System.Int32,System.ValueTuple{System.Int32,System.Int32,System.Int32}@,System.ValueTuple{System.Int32,System.Int32,System.Int32}@,Sudoku.Data.Meta.GridMap)">
            <summary>
            Searches W-Wing technique by region.
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="digits">The digits.</param>
            <param name="region">The region.</param>
            <param name="c1">Cell 1.</param>
            <param name="c2">Cell 2.</param>
            <param name="triplet1">(<see langword="in"/> parameter) The triplet 1.</param>
            <param name="triplet2">(<see langword="in"/> parameter) The triplet 2.</param>
            <param name="intersection">The intersection.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo">
            <summary>
            Provides a usage of W-Wing technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Solving.ConjugatePair)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="startCellOffset">Start cell offset.</param>
            <param name="endCellOffset">End cell offsets.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.StartCellOffset">
            <summary>
            Indicates the start cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.EndCellOffset">
            <summary>
            Indicates the end cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo">
            <summary>
            Provides a usage of regular wing technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes an instance with the information.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views.</param>
            <param name="pivot">The pivot cell offset.</param>
            <param name="pivotCandidatesCount">
            The number of candidates in pivot cell.
            </param>
            <param name="digits">The digits used.</param>
            <param name="cellOffsets">The cell offsets used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.Size">
            <summary>
            Indicates the size of this regular wing.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.PivotCellOffset">
            <summary>
            Indicates the pivot cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.PivotCellCandidatesCount">
            <summary>
            Indicates the number of candidates in the pivot cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.Digits">
            <summary>
            Indicates all digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.CellOffsets">
            <summary>
            Indicates all cell offsets used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher">
            <summary>
            Encapsulates a regular wing technique solver.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher._size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.TakeAllBySize(Sudoku.Data.Meta.Grid,System.ValueTuple{Sudoku.Data.Meta.GridMap,System.Int32}@,System.Int32)">
            <summary>
            Take all technique steps by the specified size.
            </summary>
            <param name="grid">The grid.</param>
            <param name="bivalueCellsMap">
            (<see langword="in"/> parameter) bivalue cell information pair.
            </param>
            <param name="size">The size.</param>
            <returns>All technique steps.</returns>
            <remarks>
            Parameter <paramref name="bivalueCellsMap"/> is passed by reference and cannot 
            be modified because the instance is a pair of values, passed by
            reference can make the value passing more simple.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.CheckWhetherBivalueCellsAreSame(Sudoku.Data.Meta.Grid,System.Int32[])">
            <summary>
            Check whether the two of all bivalue cells has whole same candidates.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cells">The cells to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.CheckAndSearchEliminations(Sudoku.Data.Meta.GridMap,System.Int32[],System.Int32,System.Boolean,Sudoku.Data.Meta.GridMap@)">
            <summary>
            Check and search eliminations.
            </summary>
            <param name="pivotPeersMap">
            The grid map for the peers of the pivot cell.
            </param>
            <param name="cells">All body cells.</param>
            <param name="pivot">The pivot cell.</param>
            <param name="isIncompleted">
            (<see langword="out"/> parameter) Indicates whether the technique is incompleted.
            </param>
            <param name="map">
            (<see langword="out"/> parameter) The result grid intersection map.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.GatherConclusion(Sudoku.Data.Meta.Grid,System.Collections.Generic.IList{Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo},System.Int32,System.Int32[],System.Int16,System.Int16,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion})">
            <summary>
            Gather the conclusion.
            </summary>
            <param name="grid">The grid.</param>
            <param name="result">The result.</param>
            <param name="pivot">The pivot cell.</param>
            <param name="cells">All body cells.</param>
            <param name="pivotMask">The mask of the pivot cell.</param>
            <param name="inter">The intersection mask.</param>
            <param name="conclusions">The conclusions.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.GetConclusions(Sudoku.Data.Meta.Grid,System.Int16,System.Int16,System.Boolean,Sudoku.Data.Meta.GridMap)">
            <summary>
            Get all conclusions.
            </summary>
            <param name="grid">The grid.</param>
            <param name="union">The union mask.</param>
            <param name="unionWithoutPivot">The union mask without using pivot mask.</param>
            <param name="isIncompleted">
            Indicates whether the technique is incompleted.
            </param>
            <param name="map">The intersection grid map.</param>
            <returns>The conclusions.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.RecordValues(Sudoku.Data.Meta.Grid,System.Int32,System.Int32[],System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Record all values.
            </summary>
            <param name="grid">The grid.</param>
            <param name="pivot">The pivot cell.</param>
            <param name="cells">All body cells.</param>
            <param name="pivotMask">
            (<see langword="out"/> parameter) The mask of the pivot cell.
            </param>
            <param name="inter">(<see langword="out"/> parameter) The intersection mask.</param>
            <param name="union">(<see langword="out"/> parameter) The union mask.</param>
            <param name="interWithoutPivot">
            (<see langword="out"/> parameter) The intersection mask without pivot mask.
            </param>
            <param name="unionWithoutPivot">
            (<see langword="out"/> parameter) The union mask without pivot mask.
            </param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.WingTechniqueInfo">
            <summary>
            Provides a usage of wing technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.WingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.WingTechniqueSearcher">
            <summary>
            Encapsulates a wing technique solver.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Solver">
            <summary>
            Indicates an instance used for solving a sudoku puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Solver.SolverName">
            <summary>
            The name of this solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Solver.Solve(Sudoku.Data.Meta.Grid)">
            <summary>
            Solves the specified puzzle.
            </summary>
            <param name="grid">The puzzle.</param>
            <returns>
            An <see cref="T:Sudoku.Solving.AnalysisResult"/> displaying all information of solving.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Solver.SolveAsync(Sudoku.Data.Meta.Grid,System.Boolean)">
            <summary>
            Solves the specified puzzle asynchronizedly.
            </summary>
            <param name="grid">The puzzle.</param>
            <param name="continueOnCapturedContext">
            <see langword="true"/> to attempt to marshal the continuation back to
            the original context captured; otherwise, <see langword="false"/>.
            </param>
            <returns>The solving task.</returns>
        </member>
        <member name="T:Sudoku.Solving.TechniqueInfo">
            <summary>
            Encapsulates all information after searched a solving step,
            which include the conclusion, the difficulty and so on.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <summary>
            Provides passing data when initializing an instance of derived types.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="views">The views of this solving step.</param>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.ShowDifficulty">
            <summary>
            Indicates whether the difficulty rating of this technique should be
            shown in the output screen.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Name">
            <summary>
            Indicates the technique name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Difficulty">
            <summary>
            The difficulty or this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.DifficultyLevel">
            <summary>
            The difficulty level of this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Conclusions">
            <summary>
            All conclusions found in this technique step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Views">
            <summary>
            All views to display on the GUI.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="name">(<see langword="out"/> parameter) The name.</param>
            <param name="difficulty">(<see langword="out"/> parameter) The difficulty.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.DifficultyLevel@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="name">(<see langword="out"/> parameter) The name.</param>
            <param name="difficulty">(<see langword="out"/> parameter) The difficulty.</param>
            <param name="difficultyLevel">(<see langword="out"/> parameter) The difficulty level.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.DifficultyLevel@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion}@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="name">(<see langword="out"/> parameter) The name.</param>
            <param name="difficulty">(<see langword="out"/> parameter) The difficulty.</param>
            <param name="difficultyLevel">(<see langword="out"/> parameter) The difficulty level.</param>
            <param name="conclusions">(<see langword="out"/> parameter) All conclusions.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.DifficultyLevel@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Conclusion}@,System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View}@)">
            <summary>
            Deconstruct this instance.
            </summary>
            <param name="name">(<see langword="out"/> parameter) The name.</param>
            <param name="difficulty">(<see langword="out"/> parameter) The difficulty.</param>
            <param name="difficultyLevel">(<see langword="out"/> parameter) The difficulty level.</param>
            <param name="conclusions">(<see langword="out"/> parameter) All conclusions.</param>
            <param name="views">(<see langword="out"/> parameter) All views.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.ApplyTo(Sudoku.Data.Meta.Grid)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Equals(Sudoku.Solving.TechniqueInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.ToSimpleString">
            <summary>
            Returns a string that only contains the name and the conclusions.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.op_Equality(Sudoku.Solving.TechniqueInfo,Sudoku.Solving.TechniqueInfo)">
            <summary>
            Indicates whether two instances have a same value.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.op_Inequality(Sudoku.Solving.TechniqueInfo,Sudoku.Solving.TechniqueInfo)">
            <summary>
            Indicates whether two instances have two different values.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.TechniqueSearcher">
            <summary>
            Encapsulates a step finder that used in solving in
            <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.TakeOne(Sudoku.Data.Meta.Grid)">
            <summary>
            Take a step after searched all solving steps.
            </summary>
            <param name="grid">The grid to search steps.</param>
            <returns>A technique information.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.Take(Sudoku.Data.Meta.Grid,System.Int32)">
            <summary>
            Take the specified number of steps.
            </summary>
            <param name="grid">The grid.</param>
            <param name="count">The number of steps you want to take.</param>
            <returns>The specified number of technique information instances.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.TakeAll(Sudoku.Data.Meta.Grid)">
            <summary>
            Take all technique steps after searched.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The list of all steps found.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.CompareTo(Sudoku.Solving.TechniqueSearcher)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.Equals(Sudoku.Solving.TechniqueSearcher)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_Equality(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <summary>
            Indicates whether two instances have a same value.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_Inequality(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <summary>
            Indicates whether two instances have two different values.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_GreaterThan(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <summary>
            Indicates whether the priority value of the <paramref name="left"/>
            technique searcher is greater than the <paramref name="right"/> one.
            </summary>
            <param name="left">The left comparer.</param>
            <param name="right">The right comparer.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_GreaterThanOrEqual(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <summary>
            Indicates whether the priority value of <paramref name="left"/>
            technique searcher is greater than or equals to the <paramref name="right"/> one.
            </summary>
            <param name="left">The left comparer.</param>
            <param name="right">The right comparer.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_LessThan(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <summary>
            Indicates whether the priority value of <paramref name="left"/>
            technique searcher is less than the <paramref name="right"/> one.
            </summary>
            <param name="left">The left comparer.</param>
            <param name="right">The right comparer.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_LessThanOrEqual(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <summary>
            Indicates whether the priority value of <paramref name="left"/>
            technique searcher is less than or equals to the <paramref name="right"/> one.
            </summary>
            <param name="left">The left comparer.</param>
            <param name="right">The right comparer.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.BitCombinationGenerator">
            <summary>
            Encapsulates a bit combination generator.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Utils.BitCombinationGenerator._mask">
            <summary>
            The mask.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Utils.BitCombinationGenerator._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Utils.BitCombinationGenerator._isLast">
            <summary>
            Indicates whether that the value is the last one.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.BitCombinationGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="P:Sudoku.Solving.Utils.BitCombinationGenerator.BitCount">
            <summary>
            Indicates how many bits should be generated.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Utils.BitCombinationGenerator.OneCount">
            <summary>
            Indicates how many <see langword="true"/> bits (1) are in
            the number.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.BitCombinationGenerator.HasNext">
            <summary>
            Indicates whether the generator has the next combination number to iterate.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.BitCombinationGenerator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Utils.BitCombinationGenerator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Utils.BitCombinationGenerator.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Utils.BitCombinationGenerator.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Utils.BitCombinationGenerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Utils.CandidateCollection">
            <summary>
            Provides extension methods of candidate collection.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.CandidateCollection.ToString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get a string consists of all candidate text.
            </summary>
            <param name="candidateOffsets">The candidate offsets.</param>
            <returns>A string.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.CandidateUtils">
            <summary>
            Provides extension methods for candidates.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.CandidateUtils.ToString(System.Int32)">
            <summary>
            Get a candidate text representation.
            </summary>
            <param name="candidateOffset">The candidate offset.</param>
            <returns>A string text.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.CellCollection">
            <summary>
            Provides extension methods of cell collection.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.CellCollection.ToString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get a string consists of all cell text.
            </summary>
            <param name="cellOffsets">The cell offsets.</param>
            <returns>The string.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.CellUtils">
            <summary>
            Provides extension method used for cell offsets.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.CellUtils.GetOffset(System.Int32,System.Int32)">
            <summary>
            Get the cell offset with specified row and column index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The cell offset.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.CellUtils.ToString(System.Int32)">
            <summary>
            Get the output string of the specified cell offset.
            </summary>
            <param name="cellOffset">The cell offset.</param>
            <returns>The output string described as 'r_c_'.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.CellUtils.ToFullString(System.Int32)">
            <summary>
            Get the full string of the specified cell offset.
            </summary>
            <param name="cellOffset">The cell offset.</param>
            <returns>The output string described as 'r_c_b_'.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.CellUtils.GetRegion(System.Int32)">
            <summary>
            <para>Get the row, column and block index of the specified cell.</para>
            <para>
            Note that all row, column and block indices are always between 0 and 8.
            </para>
            </summary>
            <param name="cellOffset">The cell offset.</param>
            <returns>
            The row, column and block index triplet.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.CellUtils.IsSameRegion(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Check two cells have different row, column and block.
            </summary>
            <param name="cell1">The cell offset 1.</param>
            <param name="cell2">The cell offset 2.</param>
            <param name="sameRegions">(<see langword="out"/> parameter) All same regions of two cells.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.ChainingDifficultyRatingUtils">
            <summary>
            Provides extension methods of rating a chain.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.ChainingDifficultyRatingUtils.GetExtraDifficultyByLength(System.Int32)">
            <summary>
            Get extra difficulty rating.
            </summary>
            <param name="length">The length.</param>
            <returns>The difficulty.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.ConclusionCollection">
            <summary>
            Provides extension methods of conclusion collection.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.ConclusionCollection.ToString(System.Collections.Generic.IEnumerable{Sudoku.Solving.Conclusion})">
            <summary>
            Get a string consists of all conclusion text.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.ConclusionCollection.ToSimpleString(System.Collections.Generic.IEnumerable{Sudoku.Solving.Conclusion},System.String)">
            <summary>
            Get a simple string consists of all conclusion text.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <param name="separator">The string separator.</param>
            <returns>The string.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.DigitCollection">
            <summary>
            Provides extension methods of digit collection.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.DigitCollection.ToString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get a string consists of digits' text.
            </summary>
            <param name="digits">The digits.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.DigitCollection.ToSimpleString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get a simple string consists of digits' text.
            </summary>
            <param name="digits">The digits.</param>
            <returns>The string.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.FishUtils">
            <summary>
            Provides extension method used for fish technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Utils.FishUtils.FishNames">
            <summary>
            All fish names.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.FishUtils.GetNameBy(System.Int32)">
            <summary>
            Get the fish by its size.
            </summary>
            <param name="size">The size.</param>
            <returns>The name.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.GridUtils">
            <summary>
            Provides extension method used for grid calculating.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.IsBivalueCell(Sudoku.Data.Meta.Grid,System.Int32)">
            <summary>
            <para>Indicates whether the specified cell is a bivalue cell.</para>
            <para>
            Note that given and modifiable values always make this method
            return <see langword="false"/>.
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="cellOffset">The cell offset.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.CandidateExists(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)">
            <summary>
            <para>
            Indicates whether the specified grid contains the candidate.
            </para>
            <para>
            If you want to check the reversal case, please use the method
            <see cref="M:Sudoku.Solving.Utils.GridUtils.CandidateDoesNotExist(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)"/> instead
            of '<c>!grid.CandidateExists</c>'.
            Note that given and modifiable values always make this method
            return <see langword="false"/>.
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="M:Sudoku.Solving.Utils.GridUtils.CandidateDoesNotExist(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.CandidateDoesNotExist(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)">
            <summary>
            <para>
            Indicates whether the specified grid <b>does not</b> contain the candidate.
            </para>
            <para>
            If you want to check the reversal case, please use the method
            <see cref="M:Sudoku.Solving.Utils.GridUtils.CandidateExists(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)"/> instead
            of '<c>!grid.CandidateDoesNotExist</c>'.
            Note that given and modifiable values always make this method
            return <see langword="false"/>.
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <seealso cref="M:Sudoku.Solving.Utils.GridUtils.CandidateExists(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.HasDigitValue(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)">
            <summary>
            Checks whether the specified digit has given or modifiable values in
            the specified region.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="digit">The digit.</param>
            <param name="regionOffset">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.GetDigitAppearingMask(Sudoku.Data.Meta.Grid,System.Int32,System.Int32)">
            <summary>
            <para>
            Gets a mask of digit appearing in the specified region offset.
            </para>
            <para>
            Note that given and modifiable values always make this method
            return <see langword="false"/>.
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="digit">The digit.</param>
            <param name="regionOffset">The region.</param>
            <returns>
            The mask. This value consists of 9 bits, which represents all nine cells
            in a specified region. The mask uses 1 to make the cell 'have this digit',
            and 0 to make the cell 'does not have this digit'.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.GetDigitAppearingMask(Sudoku.Data.Meta.Grid,System.Int32,System.Int32,Sudoku.Data.Meta.GridMap)">
            <summary>
            <para>
            Gets a mask of digit appearing in the specified region offset.
            If the cell is not in <paramref name="map"/>, its mask will
            not calculated to the result.
            </para>
            <para>
            Note that given and modifiable values always make this method
            return <see langword="false"/>.
            </para>
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="digit">The digit.</param>
            <param name="regionOffset">The region offset.</param>
            <param name="map">The grid map.</param>
            <returns>
            The mask. This value consists of 9 bits, which represents all nine cells
            in a specified region. The mask uses 1 to make the cell 'have this digit',
            and 0 to make the cell 'does not have this digit'.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.GetBivalueCellsMap(Sudoku.Data.Meta.Grid,System.Int32@)">
            <summary>
            Find all bivalue cells displaying with a <see cref="T:Sudoku.Data.Meta.GridMap"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <param name="count">
            (<see langword="out"/> parameter) The number of bivalue cells.
            This parameter is only used for quickening the code running.
            </param>
            <returns>The grid map.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.GridUtils.GetAllConjugatePairs(Sudoku.Data.Meta.Grid)">
            <summary>
            Find all conjugate pairs in a grid.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The grid.</param>
            <returns>All conjugate pairs.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.LinkMaskUtils">
            <summary>
            Provides extension method used for link masks.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.LinkMaskUtils.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a link mask value with the specified cell offsets
            and a type.
            </summary>
            <param name="c1">The cell offset 1.</param>
            <param name="digit1">The candidate digit 1.</param>
            <param name="c2">The cell offset 2.</param>
            <param name="digit2">The candidate digit 2.</param>
            <param name="type">
            The type of this link.
            This value should be in range 0 to 3.
            </param>
            <returns>The link mask.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.MaskDeconstruction">
            <summary>
            Provides a deconstruction method for grid mask (<see cref="T:System.Int16"/> value).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.MaskDeconstruction.Deconstruct(System.Int16,Sudoku.Data.Meta.CellStatus@,System.Int16@)">
            <summary>
            Deconstruct the value to candidates and the cell status.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="cellStatus">(<see langword="out"/> parameter) The cell status.</param>
            <param name="candidatesMask">(<see langword="out"/> parameter) The candidate mask.</param>
        </member>
        <member name="T:Sudoku.Solving.Utils.PatternOverlayMethodUtils">
            <summary>
            Provides extension method used for pattern overlay method (POM).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Utils.PatternOverlayMethodUtils.Templates">
            <summary>
            The templates of all placement cases of a single digit.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.PatternOverlayMethodUtils.GenerateMapsRecursively(System.Collections.Generic.IList{Sudoku.Data.Meta.GridMap},Sudoku.Data.Meta.GridMap,System.Int32)">
            <summary>
            Generate maps recursively.
            </summary>
            <param name="templates">All templates.</param>
            <param name="template">The current template.</param>
            <param name="count">The current count.</param>
        </member>
        <member name="T:Sudoku.Solving.Utils.RegionCollection">
            <summary>
            Provides extension methods of region collection.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.RegionCollection.ToString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get a string consists of all texts of region offsets.
            </summary>
            <param name="regionOffsets">The region offsets.</param>
            <returns>The string text.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.RegionUtils">
            <summary>
            Provides extension method used for region offsets.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.RegionUtils.GetRegionLabel(System.Int32)">
            <summary>
            Gets the label ('r', 'c' or 'b') of the specified region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>The label.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.RegionUtils.ToString(System.Int32)">
            <summary>
            Gets a string of a region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.RegionUtils.GetRegionName(System.Int32)">
            <summary>
            Get the region name ('row', 'column' or 'block') of the specified
            region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.RegionUtils.GetCellOffset(System.Int32,System.Int32)">
            <summary>
            Get the cell offset of the relative position in the specified
            region.
            </summary>
            <param name="regionOffset">The region offset.</param>
            <param name="relativePos">The relative position.</param>
            <returns>The cell offset.</returns>
        </member>
        <member name="M:Sudoku.Solving.Utils.RegionUtils.GetRegionOffset(System.String)">
            <summary>
            Get the region offset from a string text.
            </summary>
            <param name="regionString">The text of region.</param>
            <returns>The region offset.</returns>
        </member>
        <member name="T:Sudoku.Solving.Utils.SubsetUtils">
            <summary>
            Provides extension method used for subset (hidden or naked) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Utils.SubsetUtils.SubsetNames">
            <summary>
            All subset names.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Utils.SubsetUtils.GetNameBy(System.Int32)">
            <summary>
            Gets the name by its size.
            </summary>
            <param name="size">The size.</param>
            <returns>The name.</returns>
        </member>
    </members>
</doc>
