<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Solving</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Solving.AnalysisResult">
            <summary>
            Provides an analysis result after a puzzle solved.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.#ctor(Sudoku.Data.IReadOnlyGrid,System.String,System.Boolean,Sudoku.Data.IReadOnlyGrid,System.TimeSpan,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo},System.String,System.Collections.Generic.IBag{Sudoku.Data.IReadOnlyGrid})">
            <summary>
            Initializes an instance with some information.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solverName">The name of the solver.</param>
            <param name="hasSolved">Indicates whether the puzzle has been solved.</param>
            <param name="solution">The solution grid.</param>
            <param name="elapsedTime">The elapsed time while solving.</param>
            <param name="solvingList">All steps produced in solving.</param>
            <param name="additional">The additional message.</param>
            <param name="stepGrids">All intermediate grids.</param>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.HasSolved">
            <summary>
            <para>Indicates whether the puzzle has been solved.</para>
            <para>
            If the puzzle has multiple solutions or no solution,
            this value will be always <see langword="false"/>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.MaxDifficulty">
            <summary>
            <para>Indicates the maximum difficulty of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the maximum value among all difficulty
            ratings in solving steps. If the puzzle has not been solved,
            or else the puzzle is solved by other solvers, this value will
            be always <c>20M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.TotalDifficulty">
            <summary>
            <para>Indicates the total difficulty rating of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>,
            the value will be the sum of all difficulty ratings of steps. If
            the puzzle has not been solved, the value will be the sum of all
            difficulty ratings of steps recorded in <see cref="P:Sudoku.Solving.AnalysisResult.SolvingSteps"/>.
            However, if the puzzle is solved by other solvers, this value will
            be <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.SolvingSteps"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.PearlDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first solving step. If the puzzle has not solved or
            the puzzle is solved by other solvers, this value will be always <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.DiamondDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first step before the first one whose conclusion is
            <see cref="F:Sudoku.Data.ConclusionType.Assignment"/>. If the puzzle has not solved
            or solved by other solvers, this value will be <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
            <seealso cref="T:Sudoku.Data.ConclusionType"/>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolvingStepsCount">
            <summary>
            Indicates the number of all solving steps recorded.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolverName">
            <summary>
            Indicates the solver's name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Additional">
            <summary>
            Indicates the additional message during solving, which
            can be the message from an exception, or the debugging information.
            If this instance does not need to have this one, the value
            will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.ElapsedTime">
            <summary>
            Indicates the solving elapsed time.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.DifficultyLevel">
            <summary>
            Indicates the difficulty level of the puzzle.
            If the puzzle has not solved or solved by other
            solvers, this value will be <see cref="F:Sudoku.Solving.DifficultyLevel.Unknown"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Puzzle">
            <summary>
            Indicates the initial puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Solution">
            <summary>
            Indicates the solution grid. If and only if the puzzle
            is not solved, this value will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.Bottleneck">
            <summary>
            Indicates the bottle neck during the whole grid solving.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.StepGrids">
            <summary>
            Indicates the intermediate grids while solving.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResult.SolvingSteps">
            <summary>
            Indicates the solving steps during solving. If the puzzle is not
            solved and the manual solver cannot find out any steps, or else
            the puzzle is solved by other solvers, this value will be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.String@,System.Boolean@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="solverName">
            (<see langword="out" /> parameter) The solver's name.
            </param>
            <param name="hasSolved">
            (<see langword="out" /> parameter) Indicates whether the puzzle has been solved.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.Boolean@,System.Int32@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo}@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="hasSolved">
            (<see langword="out" /> parameter) Indicates whether the puzzle has been solved.
            </param>
            <param name="solvingStepsCount">
            (<see langword="out" /> parameter) The total number of all solving steps.
            </param>
            <param name="solvingSteps">
            (<see langword="out" /> parameter) The all solving steps.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(System.Nullable{System.Decimal}@,System.Decimal@,System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="total">
            (<see langword="out" /> parameter) The total difficulty.
            </param>
            <param name="max">
            (<see langword="out" /> parameter) The maximum difficulty.
            </param>
            <param name="pearl">
            (<see langword="out" /> parameter) The pearl difficulty.
            </param>
            <param name="diamond">
            (<see langword="out" /> parameter) The diamond difficulty.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(Sudoku.Data.IReadOnlyGrid@,System.Boolean@,System.TimeSpan@,Sudoku.Data.IReadOnlyGrid@,Sudoku.Solving.DifficultyLevel@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="puzzle">
            (<see langword="out" /> parameter) The initial puzzle.
            </param>
            <param name="hasSolved">
            (<see langword="out" /> parameter) Indicates whether the puzzle has been solved.
            </param>
            <param name="elapsedTime">
            (<see langword="out" /> parameter) The elapsed time during solving.
            </param>
            <param name="solution">
            (<see langword="out" /> parameter) The solution.
            </param>
            <param name="difficultyLevel">
            (<see langword="out" /> parameter) The difficulty level.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(Sudoku.Data.IReadOnlyGrid@,System.Boolean@,Sudoku.Data.IReadOnlyGrid@,Sudoku.Solving.DifficultyLevel@,Sudoku.Solving.TechniqueInfo@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo}@,System.Collections.Generic.IBag{Sudoku.Data.IReadOnlyGrid}@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="puzzle">
            (<see langword="out" /> parameter) The initial puzzle.
            </param>
            <param name="hasSolved">
            (<see langword="out" /> parameter) Indicates whether the grid has been solved.
            </param>
            <param name="solution">
            (<see langword="out" /> parameter) The solution.
            </param>
            <param name="difficultyLevel">
            (<see langword="out" /> parameter) The difficulty level.
            </param>
            <param name="bottleneck">
            (<see langword="out" /> parameter) The bottleneck.
            </param>
            <param name="solvingSteps">
            (<see langword="out" /> parameter) All steps.
            </param>
            <param name="stepGrids">
            (<see langword="out" /> parameter) All intermediate grids.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.Deconstruct(Sudoku.Data.IReadOnlyGrid@,System.Boolean@,System.TimeSpan@,Sudoku.Data.IReadOnlyGrid@,Sudoku.Solving.DifficultyLevel@,System.Int32@,System.Collections.Generic.IReadOnlyList{Sudoku.Solving.TechniqueInfo}@,System.String@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="puzzle">
            (<see langword="out" /> parameter) The initial puzzle.
            </param>
            <param name="hasSolved">
            (<see langword="out" /> parameter) Indicates whether the puzzle has solved.
            </param>
            <param name="elapsedTime">
            (<see langword="out" /> parameter) The elapsed time during solving.
            </param>
            <param name="solution">
            (<see langword="out" /> parameter) The solution.
            </param>
            <param name="difficultyLevel">
            (<see langword="out" /> parameter) The difficulty level.
            </param>
            <param name="solvingStepsCount">
            (<see langword="out" /> parameter) The number of solving steps recorded.
            </param>
            <param name="solvingSteps">
            (<see langword="out" /> parameter) All solving steps.
            </param>
            <param name="additionalMessage">
            (<see langword="out" /> parameter) The additional message.
            </param>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the collection.</para>
            <para>Note that this method will not return <see langword="null"/> anytime.</para>
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(System.String)">
            <method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResult.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.AnalysisResultFormatter">
            <summary>
            Provides operations for analysis result formatting.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResultFormatter.#ctor(Sudoku.Solving.AnalysisResult)">
            <summary>
            Initializes an instance with the specified analysis result and format.
            </summary>
            <param name="result">The analysis result.</param>
        </member>
        <member name="P:Sudoku.Solving.AnalysisResultFormatter.Result">
            <summary>
            Indicates the analysis result.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResultFormatter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResultFormatter.ToString(System.String)">
            <method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResultFormatter.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            Throws when the specified format is <see langword="null"/> and the format provider
            cannot work.
            </exception>
            <exception cref="T:System.FormatException">
            Throws when the specified format contains other invalid characters
            and the format provider cannot work.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResultFormatter.GetSolvingStepsGrouped">
            <summary>
            Indicates all groups that grouped by solving steps during solving.
            If and only if <see cref="P:Sudoku.Solving.AnalysisResult.SolvingSteps"/> is <see langword="null"/>, this value
            will be <see langword="null"/>.
            </summary>
            <returns>The list grouped and ordered.</returns>
            <seealso cref="P:Sudoku.Solving.AnalysisResult.SolvingSteps"/>
        </member>
        <member name="M:Sudoku.Solving.AnalysisResultFormatter.GetBottleneckData">
            <summary>
            Get the data of bottleneck.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:Sudoku.Solving.Annotations.HasBugAttribute">
            <summary>
            Indicates the <see cref="T:Sudoku.Solving.TechniqueSearcher"/> contains any bug.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Annotations.HasBugAttribute.#ctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="M:Sudoku.Solving.Annotations.HasBugAttribute.#ctor(System.String)">
            <summary>
            Intializes an instance with the specified information.
            </summary>
            <param name="bugInfo">The bug information.</param>
        </member>
        <member name="P:Sudoku.Solving.Annotations.HasBugAttribute.BugInfo">
            <summary>
            Indicates the bug information.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Annotations.HighAllocationAttribute">
            <summary>
            Represents a mark on a searcher which should allocate
            extremely-high temporary memory.
            If so, the manual solver will enable garbage collection forcedly
            after finished. 
            </summary>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver">
            <summary>
            Provides a solver using backtracking method.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver._grid">
            <summary>
            The temporary grid to solve.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver.Solve(Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver.BacktrackinglySolve(System.Int32@,System.Int32[]@,System.Int32[],System.Int32)">
            <summary>
            Solve backtrackingly.
            </summary>
            <param name="solutionsCount">
            (<see langword="ref"/> parameter) The number of solutions.
            </param>
            <param name="result">
            (<see langword="ref"/> parameter) The result array.
            </param>
            <param name="gridValues">All grid values.</param>
            <param name="finishedCellsCount">The number of cells had finished.</param>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Backtracking.BacktrackingSolver.IsValid(System.Int32[],System.Int32,System.Int32)">
            <summary>
            To decide the current row and column index is valid.
            </summary>
            <param name="gridValues">The grid values.</param>
            <param name="r">The current row index.</param>
            <param name="c">The current column index.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver">
            <summary>
            Provides a solver using bitwise method.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.Solve(Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.CheckValidity(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.IReadOnlyGrid@)">
            <summary>
            Check the validity of the puzzle.
            </summary>
            <param name="grid">The grid.</param>
            <param name="solutionIfUnique">
            (<see langword="out"/> parameter) The solution.
            </param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.CheckValidity(System.String,System.String@)">
            <summary>
            Check the validity of the puzzle.
            </summary>
            <param name="grid">The grid.</param>
            <param name="solutionIfUnique">
            (<see langword="out"/> parameter) The solution.
            </param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.Solve(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution. <see langword="null"/> if you does not want to use this result.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.Solve32(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The core function of solving the puzzle based on x86 platform.
            </summary>
            <param name="puzzle">The puzzle Susser format string.</param>
            <param name="solution">The solution.</param>
            <param name="limit">
            The limit count in solving the puzzle.
            You should pass the value by a positive integer at least 1.
            </param>
            <returns>The solution count of the puzzle.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.BitwiseSolver.Solve64(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The core function of solving the puzzle based on x64 platform.
            </summary>
            <param name="puzzle">The puzzle Susser format string.</param>
            <param name="solution">The solution.</param>
            <param name="limit">
            The limit count in solving the puzzle.
            You should pass the value by a positive integer at least 1.
            </param>
            <returns>The solution count of the puzzle.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver">
            <summary>
            Provides a sukaku solver using bitwise method.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver.Solve(Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver.CheckValidity(Sudoku.Data.IReadOnlyGrid,System.String@)">
            <summary>
            Check the validity of the puzzle.
            </summary>
            <param name="grid">The grid.</param>
            <param name="solutionIfUnique">
            (<see langword="out"/> parameter) The solution.
            </param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver.CheckValidity(System.String,System.String@)">
            <summary>
            Check the validity of the puzzle.
            </summary>
            <param name="grid">The grid.</param>
            <param name="solutionIfUnique">
            (<see langword="out"/> parameter) The solution.
            </param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver.Solve(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The inner solver.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="solution">
            The solution. <see langword="null"/> if you does not want to use this result.
            </param>
            <param name="limit">The limit.</param>
            <returns>The number of all solutions.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver.Solve32(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The core function of solving the puzzle based on x86 platform.
            </summary>
            <param name="puzzle">The puzzle Susser format string.</param>
            <param name="solution">The solution.</param>
            <param name="limit">
            The limit count in solving the puzzle.
            You should pass the value by a positive integer at least 1.
            </param>
            <returns>The solution count of the puzzle.</returns>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Bitwise.SukakuBitwiseSolver.Solve64(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            The core function of solving the puzzle based on x64 platform.
            </summary>
            <param name="puzzle">The puzzle Susser format string.</param>
            <param name="solution">The solution.</param>
            <param name="limit">
            The limit count in solving the puzzle.
            You should pass the value by a positive integer at least 1.
            </param>
            <returns>The solution count of the puzzle.</returns>
        </member>
        <member name="T:Sudoku.Solving.BruteForces.Linqing.OneLineLinqSolver">
            <summary>
            Provides a solver using LINQ method.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.BruteForces.Linqing.OneLineLinqSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Linqing.OneLineLinqSolver.Solve(Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.BruteForces.Linqing.OneLineLinqSolver.SolveStrings(System.String)">
            <summary>
            Internal solving method.
            </summary>
            <param name="puzzle">The puzzle string, with placeholder character '0'.</param>
            <returns>The result strings (i.e. All solutions).</returns>
        </member>
        <member name="T:Sudoku.Solving.Checking.BackdoorSearcher">
            <summary>
            Provides a backdoor searcher.
            </summary>
            <remarks>
            <b>Backdoor</b>s are <see cref="T:Sudoku.Data.Conclusion"/>s making the difficulty of
            a puzzle decrease sharply after they are applied to a grid.
            </remarks>
            <seealso cref="T:Sudoku.Data.Conclusion"/>
        </member>
        <member name="F:Sudoku.Solving.Checking.BackdoorSearcher.TestSolver">
            <summary>
            The temporary test solver used in this searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.SearchForBackdoors(Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            Search all backdoors whose level is lower or equals than the
            specified depth.
            </summary>
            <param name="grid">The grid.</param>
            <param name="depth">
            The depth you want to search for. The depth value must be between 0 and 3.
            where value 0 is for searching for assignments.
            </param>
            <returns>All backdoors.</returns>
            <exception cref="T:Sudoku.SudokuRuntimeException">
            Throws when the specified grid is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.SearchForBackdoorsExact(Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            Search all backdoors whose depth is exactly same as the argument.
            </summary>
            <param name="grid">The grid.</param>
            <param name="depth">
            The depth you want to search for. The depth value must be between 0 and 3.
            where value 0 is for searching for assignments.
            </param>
            <returns>All backdoors.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BackdoorSearcher.SearchForBackdoors(System.Collections.Generic.IList{System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion}},Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            To find all backdoors in a sudoku grid.
            </summary>
            <param name="result">The result list.</param>
            <param name="grid">A sudoku grid to search backdoors.</param>
            <param name="depth">The depth to search.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the grid is invalid (has no solution or multiple solutions).
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Checking.BugChecker">
            <summary>
            Encapsulates a BUG technique checker.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.BugChecker._emptyMap">
            <summary>
            The distribution of all empty cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.BugChecker._bivalueMap">
            <summary>
            The distribution of all bivalue cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Checking.BugChecker._candMaps">
            <summary>
            The distribution of all digits.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initializes an instance with the specified grid.
            </summary>
            <param name="puzzle">The current puzzle grid.</param>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.IsBugPattern">
            <summary>
            Indicates the current grid is a BUG+n pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.Puzzle">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.TrueCandidates">
            <summary>
            Indicates all true candidates (non-BUG candidates).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Checking.BugChecker.DefaultList">
            <summary>
            The default list used for return.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllTrueCandidates(System.Int32)">
            <summary>
            Get all true candidates when the number of empty cells
            is below than the argument.
            </summary>
            <param name="maximumEmptyCells">The maximum number of the empty cells.</param>
            <returns>All true candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllTrueCandidates">
            <summary>
            Get all true candidates.
            </summary>
            <returns>All true candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.BugChecker.GetAllCombinations(System.Int16,System.Int32)">
            <summary>
            Get all combinations of a specified mask.
            </summary>
            <param name="mask">The mask.</param>
            <param name="oneCount">
            The number of <see langword="true"/> bits.
            </param>
            <returns>All combinations.</returns>
        </member>
        <member name="T:Sudoku.Solving.Checking.PuzzleAttributeChecker">
            <summary>
            Provides some puzzle attributes validation operations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.IReadOnlyGrid@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <param name="solutionIfValid">
            (<see langword="out"/> parameter) The solution if the puzzle is valid;
            otherwise, <see langword="null"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsValid(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.IReadOnlyGrid@,System.Nullable{System.Boolean}@)">
            <summary>
            To check if a puzzle has only one solution or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <param name="solutionIfValid">
            (<see langword="out"/> parameter) The solution if the puzzle is valid;
            otherwise, <see langword="null"/>.
            </param>
            <param name="sukaku">
            (<see langword="out"/> parameter) Indicates whether the current mode is sukaku mode.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsMinimal(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To check if the puzzle is minimal or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsPearl(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To check if the puzzle is pearl or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.IsDiamond(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To check if the puzzle is diamond or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Checking.PuzzleAttributeChecker.CanBeSolvedUsingOnlySsts(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To check whether the puzzle can be solved using only simple sudoku technique set.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The puzzle.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.ConjugatePair">
            <summary>
            Encapsulates a conjugate pair.
            </summary>
            <remarks>
            <b>Conjugate pair</b> is a candidate pair (two candidates),
            these two candidates is in the same region where all cells has only
            two position can fill this candidate.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with from and to cell offset
            and a digit.
            </summary>
            <param name="from">The from cell.</param>
            <param name="to">The to cell.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.#ctor(Sudoku.Data.GridMap,System.Int32)">
            <summary>
            Initializes an instance with the map and the digit.
            </summary>
            <param name="map">The map.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.From">
            <summary>
            Indicates the 'from' cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.To">
            <summary>
            Indicates the 'to' cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.Line">
            <summary>
            Indicates the line that two cells lie in.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.Region">
            <summary>
            Indicates the region that two cells lie in.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.ConjugatePair.Map">
            <summary>
            Indicates the inner map.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.Equals(Sudoku.Solving.ConjugatePair)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.op_Equality(Sudoku.Solving.ConjugatePair,Sudoku.Solving.ConjugatePair)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.ConjugatePair.op_Inequality(Sudoku.Solving.ConjugatePair,Sudoku.Solving.ConjugatePair)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.Constants.Processings">
            <summary>
            Provides the constants and read-only values in the current project.
            Of course, the class will also provides you with some method to get the results
            such as the chain length rating calculation.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Constants.Processings.SubsetNames">
            <summary>
            The names of all subsets by their sizes.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Constants.Processings.FishNames">
            <summary>
            The names of all fishes by their sizes.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Constants.Processings.RegularWingNames">
            <summary>
            The names of all regular wings by their sizes.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Constants.Processings.BitwiseOrMasks(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.GridMap)">
            <summary>
            Get the mask that is a result after the bitwise or operation processed all cells
            in the specified map.
            </summary>
            <param name="grid">The grid.</param>
            <param name="map">The map.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Constants.Processings.GetExtraDifficultyByLength(System.Int32)">
            <summary>
            Get extra difficulty rating for a chain node sequence.
            </summary>
            <param name="length">The length.</param>
            <returns>The difficulty.</returns>
        </member>
        <member name="M:Sudoku.Solving.Constants.Processings.GetCandidateOffsets(Sudoku.Data.Node)">
            <summary>
            Get highlight candidate offsets through the specified target node.
            </summary>
            <param name="target">The target node.</param>
            <returns>The candidate offsets.</returns>
        </member>
        <member name="M:Sudoku.Solving.Constants.Processings.GetLinks(Sudoku.Data.Node)">
            <summary>
            Get the links through the specified target node.
            </summary>
            <returns>The link.</returns>
        </member>
        <member name="T:Sudoku.Solving.DifficultyLevel">
            <summary>
            Provides a difficulty kind for a puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Unknown">
            <summary>
            Indicates the difficulty level is unknown.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.VeryEasy">
            <summary>
            Indicates the difficulty is very easy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Easy">
            <summary>
            Indicates the difficulty is easy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Moderate">
            <summary>
            Indicates the difficulty is moderate.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Advanced">
            <summary>
            Indicates the difficulty is advanced.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Hard">
            <summary>
            Indicates the difficulty is hard.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.VeryHard">
            <summary>
            Indicates the difficulty is very hard.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Fiendish">
            <summary>
            Indicates the difficulty is fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Diabolical">
            <summary>
            Indicates the difficulty is diabolical.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Crazy">
            <summary>
            Indicates the difficulty is crazy.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.Nightmare">
            <summary>
            Indicates the difficulty is nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.BeyondNightmare">
            <summary>
            Indicates the difficulty is beyond nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.DifficultyLevel.LastResort">
            <summary>
            Indicates the puzzle cannot be solved
            unless using last resort methods.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Generating.BasicPuzzleGenerator">
            <summary>
            Encapsulates a puzzle generator, which provides the symmetry type constraint
            and the maximum clues constraint.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Generating.BasicPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Generating.BasicPuzzleGenerator.Generate(System.Int32,Sudoku.Data.SymmetryType)">
            <summary>
            Generate a puzzle with the specified information.
            </summary>
            <param name="max">The maximum hints of the puzzle.</param>
            <param name="symmetricalType">
            The symmetry type flags. The <see cref="T:Sudoku.Data.SymmetryType"/> is
            a flag type, you can use bit operators to accumulate multiple
            symmetrical types such as <c><see cref="F:Sudoku.Data.SymmetryType.AntiDiagonal"/> | <see cref="F:Sudoku.Data.SymmetryType.Diagonal"/></c>,
            which means that the solver will generate anti-diagonal type or
            diagonal type puzzles.
            </param>
            <returns>The grid.</returns>
            <seealso cref="T:Sudoku.Data.SymmetryType"/>
        </member>
        <member name="M:Sudoku.Solving.Generating.BasicPuzzleGenerator.CreatePattern(System.Int32[])">
            <inheritdoc/>
            <exception cref="T:System.NotImplementedException">
            Throws always.
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Generating.DiggingPuzzleGenerator">
            <summary>
            Encapsulates a puzzle generator, whose basic algorithm is digging
            some values out of a random answer grid.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Generating.DiggingPuzzleGenerator.FastSolver">
            <summary>
            The fast solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Generating.DiggingPuzzleGenerator.GenerateAnswerGrid(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            To generate an answer grid.
            </summary>
            <param name="puzzle">The puzzle string.</param>
            <param name="solution">The solution string.</param>
        </member>
        <member name="M:Sudoku.Solving.Generating.DiggingPuzzleGenerator.CreatePattern(System.Int32[])">
            <summary>
            To create the pattern.
            </summary>
            <param name="pattern">The pattern array.</param>
        </member>
        <member name="M:Sudoku.Solving.Generating.DiggingPuzzleGenerator.CheckDuplicate(System.Text.StringBuilder,System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="gridArray">The grid array.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Generating.HardPatternPuzzleGenerator">
            <summary>
            Provides an extended puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Generating.HardPatternPuzzleGenerator.BackdoorSearcher">
            <summary>
            The backdoor searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Generating.HardPatternPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Generating.HardPatternPuzzleGenerator.CreatePattern(System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Generating.HardPatternPuzzleGenerator.Generate(System.Int32)">
            <summary>
            To generate a sudoku grid with a backdoor filter depth.
            </summary>
            <param name="backdoorFilterDepth">
            The backdoor filter depth. When the value is -1, the generator will not check
            any backdoors.
            </param>
            <returns>The grid.</returns>
        </member>
        <member name="M:Sudoku.Solving.Generating.HardPatternPuzzleGenerator.RecreatePattern(System.Int32[])">
            <summary>
            To re-create the pattern.
            </summary>
            <param name="pattern">The pattern array.</param>
        </member>
        <member name="T:Sudoku.Solving.Generating.PuzzleGenerator">
            <summary>
            Provides data for all derived puzzle generators.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Generating.PuzzleGenerator.Rng">
            <summary>
            The random number generator.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Generating.PuzzleGenerator.Generate">
            <summary>
            Generates a puzzle.
            </summary>
            <returns>The puzzle.</returns>
        </member>
        <member name="T:Sudoku.Solving.Generating.TechniqueFilteringPuzzleGenerator">
            <summary>
            Provides a puzzle generator with the technique filter.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Generating.TechniqueFilteringPuzzleGenerator.DefaultFilter">
            <summary>
            Indicates the default filter.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Generating.TechniqueFilteringPuzzleGenerator.ManualSolver">
            <summary>
            The default manual solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Generating.TechniqueFilteringPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Generating.TechniqueFilteringPuzzleGenerator.Generate(Sudoku.Solving.Manual.TechniqueCodeFilter)">
            <summary>
            To generate a puzzle that contains the specified technique code.
            </summary>
            <param name="techniqueCodeFilter">
            The technique codes to filter. If the parameter is <see langword="null"/>,
            the process will use the default filter.
            </param>
            <returns>The puzzle.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Als">
            <summary>
            Provides an ALS with specified digits in a specified region.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.Als._mask">
            <summary>
            The internal mask of this data structure.
            </summary>
            <remarks>
            The mask consists of 23 bits.
            The lower 9 bits is used for representing all digits used. for example,
            the mask 259 (or in binary <c>0b100_000_011</c>) represents an ALS holds
            digits { <c>1, 2, 9 </c> }; the middle 9 bits means the relative positions
            in a region, while the higher 5 bits means which region this ALS
            lies on (Region indices 0..27 is no more than 5 bits used in binary).
            The last 9 bits are reserved for future considerations.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified mask.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an instance with the specified region, relative positions
            and digits.
            </summary>
            <param name="region">The region.</param>
            <param name="relativePos">All relative positions.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.IsBivalueCellAls">
            <summary>
            Indicates whether the current ALS is a bi-value cell ALS.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.Region">
            <summary>
            Indicates the region .
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.RelativePosMask">
            <summary>
            Indicates the relative positions mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.DigitsMask">
            <summary>
            Indicates the digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.Map">
            <summary>
            Indicates the cells used in this ALS.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.Digits">
            <summary>
            Indicates all digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.RelativePos">
            <summary>
            Indicates the relative positions (offsets) in a region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.StrongLinksMask">
            <summary>
            Indicates all strong links in this ALS. The result will be represented
            as a <see cref="T:System.Int16"/> mask of 9 bits indicating which bits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Als.Cells">
            <summary>
            Indicates all cells used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.Deconstruct(System.Int32@,System.Collections.Generic.IEnumerable{System.Int32}@,System.Collections.Generic.IEnumerable{System.Int32}@,Sudoku.Data.GridMap@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="region">(<see langword="out" /> parameter) The region.</param>
            <param name="relativePos">
            (<see langword="out" /> parameter) The relative positions.
            </param>
            <param name="digits">(<see langword="out" /> parameter) The digits.</param>
            <param name="map">
            (<see langword="out" /> parameter) The map of all cells used.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.Deconstruct(System.Int32@,System.Int16@,System.Int16@,System.Collections.Generic.IEnumerable{System.Int32}@,System.Collections.Generic.IEnumerable{System.Int32}@,System.Collections.Generic.IEnumerable{System.Int32}@,Sudoku.Data.GridMap@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="region">(<see langword="out" /> parameter) The region.</param>
            <param name="digitsMask">
            (<see langword="out" /> parameter) The mask of all digits used.
            </param>
            <param name="relativePosMask">
            (<see langword="out" /> parameter) The mask of all relative positions used.
            </param>
            <param name="relativePos">
            (<see langword="out" /> parameter) The relative positions.
            </param>
            <param name="digits">(<see langword="out" /> parameter) The digits.</param>
            <param name="cells">(<see langword="out" /> parameter) The cells.</param>
            <param name="map">
            (<see langword="out" /> parameter) The map of all cells used.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.Equals(Sudoku.Solving.Manual.Alses.Als)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.ContainsDigit(Sudoku.Data.IReadOnlyGrid,System.Int32,Sudoku.Data.GridMap@)">
            <summary>
            Indicates whether the specified grid contains the digit.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="result">(<see langword="out"/> parameter) The result.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.GetAllAlses(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To search for all ALSes in the specified grid.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All ALSes searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.GetCombinations(System.Int32,System.Int32)">
            <summary>
            Get combinations.
            </summary>
            <param name="count">The number of cells in total.</param>
            <param name="size">The number of cells you want to take.</param>
            <returns>All masks.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.op_Equality(Sudoku.Solving.Manual.Alses.Als,Sudoku.Solving.Manual.Alses.Als)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Als.op_Inequality(Sudoku.Solving.Manual.Alses.Als,Sudoku.Solving.Manual.Alses.Als)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsTechniqueInfo">
            <summary>
            Provides a usage of <b>almost locked set</b> (ALS) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher">
            <summary>
            Encapsulates an <b>almost locked set</b> (ALS) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher._allowOverlapping">
            <summary>
            Indicates whether the ALSes can be overlapped with each other.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher._alsShowRegions">
            <summary>
            Indicates whether the ALSes shows their regions rather than cells.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher._allowAlsCycles">
            <summary>
            Indicates whether the solver will check ALS cycles.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher.#ctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="allowOverlapping">Indicates whether the ALSes can be overlapped with each other.</param>
            <param name="alsShowRegions">Indicates whether the ALSes shows their regions rather than cells.</param>
            <param name="allowAlsCycles">Indicates whether the solver will check ALS cycles.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.Als">
            <summary>
            Encapsulates a normal ALS.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.#ctor(System.Int16,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified digit mask and the map of cells.
            </summary>
            <param name="digitMask">The digit mask.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.#ctor(System.Int16,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified digit mask and the map of cells.
            </summary>
            <param name="digitMask">The digit mask.</param>
            <param name="map">The map.</param>
            <param name="possibleEliminationSet">The possible elimination set.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.Als.IsBivalueCell">
            <summary>
            Indicates whether this instance is a bi-value-cell ALS.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.Als.Region">
            <summary>
            Indicates the region that the instance lies on.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.Als.DigitsMask">
            <summary>
            Indicates the mask of each digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.Als.Map">
            <summary>
            Indicates the map that ALS lying on.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.Als.PossibleEliminationSet">
            <summary>
            Indicates the possible elimination set.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.Als.StrongLinksMask">
            <summary>
            Indicates all strong links in this ALS. The result will be represented
            as a <see cref="T:System.Int16"/> mask of 9 bits indicating which bits used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.Deconstruct(System.Int32@,System.Int16@,Sudoku.Data.GridMap@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="region">(<see langword="out" /> parameter) The region.</param>
            <param name="digitsMask">(<see langword="out" /> parameter) The digits mask.</param>
            <param name="map">(<see langword="out" /> parameter) The map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.Deconstruct(System.Boolean@,System.Int32@,System.Int16@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,System.Collections.Generic.IEnumerable{System.Int16}@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="isBivalueCell">
            (<see langword="out" /> parameter) Indicates whether the specified ALS is bi-value.
            </param>
            <param name="region">(<see langword="out" /> parameter) The region.</param>
            <param name="digitsMask">(<see langword="out" /> parameter) The digits mask.</param>
            <param name="map">(<see langword="out" /> parameter) The map.</param>
            <param name="possibleEliminations">(<see langword="out" /> parameter) The possible eliminations.</param>
            <param name="strongLinksMask">(<see langword="out" /> parameter) The strong links mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.ContainsDigit(Sudoku.Data.IReadOnlyGrid,System.Int32,Sudoku.Data.GridMap@)">
            <summary>
            Indicates whether the specified grid contains the digit.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="result">(<see langword="out"/> parameter) The result.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.Equals(Sudoku.Solving.Manual.Alses.Basic.Als)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
            <remarks>
            If you want to determine the equality of two instance, I recommend you
            <b>should</b> use method <see cref="M:Sudoku.Solving.Manual.Alses.Basic.Als.Equals(Sudoku.Solving.Manual.Alses.Basic.Als)" /> instead of this method.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.GetAllAlses(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To search for all ALSes in the specified grid.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All ALSes searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.op_Equality(Sudoku.Solving.Manual.Alses.Basic.Als,Sudoku.Solving.Manual.Alses.Basic.Als)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.Als.op_Inequality(Sudoku.Solving.Manual.Alses.Basic.Als,Sudoku.Solving.Manual.Alses.Basic.Als)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo">
            <summary>
            Provides a usage of <b>almost locked sets W-Wing</b> (ALS-W-Wing) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Alses.Basic.Als,Sudoku.Solving.Manual.Alses.Basic.Als,Sudoku.Solving.ConjugatePair,System.Int16,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="als1">The ALS 1.</param>
            <param name="als2">The ALS 2.</param>
            <param name="conjugatePair">The conjugate pair.</param>
            <param name="wDigitsMask">The W digits mask.</param>
            <param name="x">The X digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.Als1">
            <summary>
            Indicates the ALS 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.Als2">
            <summary>
            Indicates the ALS 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.WDigitsMask">
            <summary>
            Indicates the W digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.XDigit">
            <summary>
            Indicates the X digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueSearcher">
            <summary>
            Encapsulates an <b>almost locked sets W-Wing</b> (ALS-W-Wing) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueSearcher.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsWWingTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo">
            <summary>
            Provides a usage of <b>almost locked sets XY-Wing</b> (ALS-XY-Wing) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Alses.Basic.Als,Sudoku.Solving.Manual.Alses.Basic.Als,Sudoku.Solving.Manual.Alses.Basic.Als,System.Int16,System.Int16,System.Int16)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="als1">The ALS 1.</param>
            <param name="als2">The ALS 2.</param>
            <param name="bridgeAls">The bridge ALS.</param>
            <param name="xDigitsMask">The X digits mask.</param>
            <param name="yDigitsMask">The Y digits mask.</param>
            <param name="zDigitsMask">The Z digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.Als1">
            <summary>
            The ALS 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.Als2">
            <summary>
            The ALS 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.BridgeAls">
            <summary>
            The bridge ALS.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.XDigitsMask">
            <summary>
            The X digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.YDigitsMask">
            <summary>
            The Y digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.ZDigitsMask">
            <summary>
            The Z digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueSearcher">
            <summary>
            Encapsulates an <b>almost locked sets XY-Wing</b> (ALS-XY-Wing) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueSearcher.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXyWingTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo">
            <summary>
            Provides a usage of <b>almost locked sets XZ rule</b> (ALS-XZ)
            or <b>extended subset principle</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Alses.Basic.Als,Sudoku.Solving.Manual.Alses.Basic.Als,System.Int16,System.Int16,System.Nullable{System.Boolean})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="als1">The ALS 1 used.</param>
            <param name="als2">The ALS 2 used.</param>
            <param name="xDigitsMask">The X digits mask.</param>
            <param name="zDigitsMask">The Z digits mask.</param>
            <param name="isDoublyLinked">Indicates whether the instance is a doubly linked ALS-XZ.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.Als1">
            <summary>
            The ALS 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.Als2">
            <summary>
            The ALS 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.XDigitsMask">
            <summary>
            The X digits mask (RCC digits).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.ZDigitsMask">
            <summary>
            The Z digits mask (target digits).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.IsDoublyLinked">
            <summary>
            <para>Indicates whether the instance is a doubly linked ALS-XZ.</para>
            <para>
            The property contains three different values:
            <list type="table">
            <item>
            <term><c><see langword="true"/></c></term>
            <description>The current instance is a Doubly Linked ALS-XZ.</description>
            </item>
            <item>
            <term><c><see langword="false"/></c></term>
            <description>The current instance is a Singly Linked ALS-XZ.</description>
            </item>
            <item>
            <term><c><see langword="null"/></c></term>
            <description>The current instance is a Extended Subset Principle.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueSearcher">
            <summary>
            Encapsulates an <b>almost locked set XZ rule</b> (ALS-XZ) technique searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueSearcher.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.AlsXzTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo">
            <summary>
            Provides a usage of <b>death blossom</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Int32,Sudoku.Solving.Manual.Alses.Basic.Als})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pivot">The pivot cell.</param>
            <param name="alses">All ALSes used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.PetalsCount">
            <summary>
            Indicates how many petals used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.Pivot">
            <summary>
            Indicates the pivot cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.Alses">
            <summary>
            Indicates all ALSes used sorted by digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher">
            <summary>
            Encapsulates a <b>death blossom</b> technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher._maxPetals">
            <summary>
            Indicates the max petals to search.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initialize an instance with the specified information.
            </summary>
            <param name="allowOverlapping">
            Indicates whether the ALSes can be overlapped with each other.
            </param>
            <param name="alsShowRegions">
            Indicates whether all ALSes shows their regions rather than cells.
            </param>
            <param name="maxPetals">
            Indicates the max petals of instance to search.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher.ProcessDeathAlsInfo(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.GridMap[],System.Int16[],System.Int32[0:,0:],System.Collections.Generic.IReadOnlyList{Sudoku.Solving.Manual.Alses.Basic.Als})">
            <summary>
            Process death ALSes information.
            </summary>
            <param name="grid">The grid.</param>
            <param name="candMaps">The digit distributions.</param>
            <param name="checkedCandidates">All checked candidates.</param>
            <param name="death">The death table.</param>
            <param name="alses">The ALS list.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Basic.DeathBlossomTechniqueSearcher.PreprocessAndRecordAlses(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.GridMap)">
            <summary>
            To preprocess and record all ALSes.
            </summary>
            <param name="grid">The grid.</param>
            <param name="emptyMap">The map of all empty cells.</param>
            <returns>All ALSes.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo">
            <summary>
            Provides a usage of <b>empty rectangle intersection pair</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="startCell">The start cell.</param>
            <param name="endCell">The end cell.</param>
            <param name="region">The region that empty rectangle forms.</param>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.Region">
            <summary>
            Indicates the region that empty rectangle forms.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.StartCell">
            <summary>
            Indicates the start cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.EndCell">
            <summary>
            Indicates the end cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.Digit1">
            <summary>
            Indicates the digit 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.Digit2">
            <summary>
            Indicates the digit 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueSearcher">
            <summary>
            Encapsulates an <b>empty rectangle intersection pair</b> technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.ErIntersectionPairTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueInfo">
            <summary>
            Provides a usage of <b>almost locked sets net</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">The cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueInfo.Cells">
            <summary>
            Indicates the cells used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueSearcher">
            <summary>
            Encapsulates a <b>multi-sector locked sets</b> (MSLS) technique. This searcher is
            the real technique, different with the abstract class <see cref="T:Sudoku.Solving.Manual.Alses.Mslses.MslsTechniqueSearcher"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.Alses.Mslses.MslsTechniqueSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueSearcher.Patterns">
            <summary>
            Indicates the list initialized with the static constructor.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.AlsNetTechniqueSearcher.#cctor">
            <staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor><staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.MslsTechniqueInfo">
            <summary>
            Provides a usage of <b>multi-sector locked set</b> (MSLS) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.MslsTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.MslsTechniqueSearcher">
            <summary>
            Encapsulates a <b>multi-sector locked sets</b> (MSLS) technique.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo">
            <summary>
            Provides a usage of <b>3-dimension sue de coq</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int16,System.Int16,System.Int16,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="rowDigitsMask">The row digits mask.</param>
            <param name="columnDigitsMask">The column digits mask.</param>
            <param name="blockDigitsMask">The block digits mask.</param>
            <param name="rowCells">The row cells map.</param>
            <param name="columnCells">The column cells map.</param>
            <param name="blockCells">The block cells map.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.RowDigitsMask">
            <summary>
            Indicates the row digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.ColumnDigitsMask">
            <summary>
            Indicates the column digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.BlockDigitsMask">
            <summary>
            Indicates the block digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.RowCells">
            <summary>
            Indicates the row cells map.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.ColumnCells">
            <summary>
            Indicates the column cells map.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.BlockCells">
            <summary>
            Indicates the block cells map.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueSearcher">
            <summary>
            Encapsulates a <b>3-dimension sue de coq</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueSearcher.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
            <remarks>
            The fields <see cref="F:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher._allowAlsCycles"/> and
            <see cref="F:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher._allowOverlapping"/> will not be used here.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.Sdc3dTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo">
            <summary>
            Provides a usage of <b>sue de coq</b> (SdC) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int16,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="block">The block.</param>
            <param name="line">The line.</param>
            <param name="blockMask">The block mask.</param>
            <param name="lineMask">The line mask.</param>
            <param name="intersectionMask">The intersection mask.</param>
            <param name="isCannibalistic">Indicates whether the SdC is cannibalistic.</param>
            <param name="isolatedDigitsMask">The isolated digits mask.</param>
            <param name="blockCells">The map of block cells.</param>
            <param name="lineCells">The map of line cells.</param>
            <param name="intersectionCells">The map of intersection cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.Block">
            <summary>
            Indicates the block.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.Line">
            <summary>
            Indicates the line.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.BlockMask">
            <summary>
            Indicates the block mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.LineMask">
            <summary>
            Indicates the line mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.IntersectionMask">
            <summary>
            Indicates the intersection mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.IsCannibalistic">
            <summary>
            Indicates whether the specified SdC is cannibalistic.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.IsolatedDigitsMask">
            <summary>
            Indicates the isolated digit mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.BlockCells">
            <summary>
            Indicates the block cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.LineCells">
            <summary>
            Indicates the line cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.IntersectionCells">
            <summary>
            Indicates the intersection cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueSearcher">
            <summary>
            Encapsulates a <b>sue de coq</b> (SdC) technique searcher.
            Cannibalistic SdCs can be found also.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueSearcher.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
            <remarks>
            The fields <see cref="F:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher._allowAlsCycles"/> and
            <see cref="F:Sudoku.Solving.Manual.Alses.AlsTechniqueSearcher._allowOverlapping"/> will not be used here.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SdcTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueInfo">
            <summary>
            Provides a usage of <b>domino loop</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">All cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueInfo.Cells">
            <summary>
            The cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher">
            <summary>
            Encapsulates a <b>domino loop</b> technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher.GetCombinations(System.Int16)">
            <summary>
            Get all combinations that contains all set bits from the specified number.
            </summary>
            <param name="seed">The specified number.</param>
            <returns>All combinations.</returns>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher.SkLoopTable">
            <summary>
            The position table of all SK-loops.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher.RegionMaps">
            <summary>
            The region maps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Mslses.SkLoopTechniqueSearcher.#cctor">
            <staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor><staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
        </member>
        <member name="T:Sudoku.Solving.Manual.Alses.Rcc">
            <summary>
            Encapsulates a data structure for restricted common candidates (RCC).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.#ctor(Sudoku.Solving.Manual.Alses.Als,Sudoku.Solving.Manual.Alses.Als,System.Int32,System.Int32)">
            <summary>
            Initializes an instance with two ALSes and their common digit.
            </summary>
            <param name="als1">The ALS 1.</param>
            <param name="als2">The ALS 2.</param>
            <param name="commonDigit">The common digit.</param>
            <param name="commonRegion">The common region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Rcc.Als1">
            <summary>
            Indicates the ALS 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Rcc.Als2">
            <summary>
            Indicates the ALS 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Rcc.CommonDigit">
            <summary>
            Indicates the digit that two ALSes share.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Alses.Rcc.CommonRegion">
            <summary>
            Indicates the common region.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.Deconstruct(Sudoku.Solving.Manual.Alses.Als@,Sudoku.Solving.Manual.Alses.Als@,System.Int32@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="als1">(<see langword="out" /> parameter) The ALS 1.</param>
            <param name="als2">(<see langword="out" /> parameter) The ALS 2.</param>
            <param name="commonDigit">
            (<see langword="out" /> parameter) The common digit.
            </param>
            <param name="commonRegion">
            (<see langword="out" /> parameter) The common region.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.Equals(Sudoku.Solving.Manual.Alses.Rcc)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.GetAllRccs(Sudoku.Data.IReadOnlyGrid,System.Boolean)">
            <summary>
            Get all RCCs in the specified grid.
            </summary>
            <param name="grid">The grid to check.</param>
            <param name="allowOverlap">
            Indicates whether the specified searcher allows ALSes overlapping.
            </param>
            <returns>All RCCs searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.GetCommonDigits(Sudoku.Data.IReadOnlyGrid,Sudoku.Solving.Manual.Alses.Als,Sudoku.Solving.Manual.Alses.Als,System.Int16@)">
            <summary>
            Get the common digit that two ALSes share.
            </summary>
            <param name="grid">The grid.</param>
            <param name="als1">The ALS 1.</param>
            <param name="als2">The ALS 2.</param>
            <param name="digitsMask">
            (<see langword="out"/> parameter) The mask of appearing digits.
            </param>
            <returns>
            The digit. If the method cannot find out a digit,
            it will return <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.DigitAppears(Sudoku.Data.IReadOnlyGrid,Sudoku.Solving.Manual.Alses.Als,System.Int32,Sudoku.Data.GridMap@)">
            <summary>
            Check whether the digit appears at least once in the specified ALS.
            </summary>
            <param name="grid">The grid.</param>
            <param name="als">The ALS.</param>
            <param name="digit">The digit.</param>
            <param name="map">
            (<see langword="out"/> parameter) The map of cells.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.op_Equality(Sudoku.Solving.Manual.Alses.Rcc,Sudoku.Solving.Manual.Alses.Rcc)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Alses.Rcc.op_Inequality(Sudoku.Solving.Manual.Alses.Rcc,Sudoku.Solving.Manual.Alses.Rcc)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo">
            <summary>
            Provides a usage of <b>(grouped) alternating inference chain</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean,System.Boolean,Sudoku.Data.Node)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="xEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="yEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo.Target">
            <summary>
            The target node.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.AicTechniqueSearcher">
            <summary>
            Encapsulates an <b>(grouped) alternating inference chain</b> (<b>(grouped) AIC</b>) 
            or <b>(grouped) continuous nice loop</b> (<b>(grouped) CNL</b>) technique searcher.
            </summary>
            <remarks>
            I want to use BFS (breadth-first searching) to search for chains, which can avoid
            the redundant backtracking.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.AicTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Boolean,System.Boolean)">
            <summary>
            Search for chains of each type.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">Thr grid.</param>
            <param name="xEnabled">
            Indicates whether the strong links in regions are enabled to search for.
            </param>
            <param name="yEnabled">
            Indicates whether the strong links in cells are enabled to search for.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.AicTechniqueSearcher.DoUnaryChaining(System.Collections.Generic.IBag{Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo},Sudoku.Data.IReadOnlyGrid,Sudoku.Data.Node,System.Boolean,System.Boolean)">
            <summary>
            Do unary chaining.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">Thr grid.</param>
            <param name="pOn">The node set on.</param>
            <param name="xEnabled">
            Indicates whether the strong links in regions are enabled to search for.
            </param>
            <param name="yEnabled">
            Indicates whether the strong links in cells are enabled to search for.
            </param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo">
            <summary>
            Provides a usage of <b>chain</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="xEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="yEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="isNishio">Indicates whether the chain is a nishio forcing chains (X-Forcing chains).</param>
            <param name="isMultiple">
            Indicates whether the chain is a multiple forcing chains (Cell forcing chains and Region forcing chains).
            </param>
            <param name="isDynamic">Indicates whether the chain is a dynamic forcng chains.</param>
            <param name="level">The dynamic searching level.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.XEnabled">
            <summary>
            Indicates whether the chain is enabled X strong relations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.YEnabled">
            <summary>
            Indicates whether the chain is enabled Y strong relations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.IsNishio">
            <summary>
            Indicates whether the chain is a nishio forcing chains (X-Forcing chains).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.IsMultiple">
            <summary>
            Indicates whether the chain is a multiple forcing chains (Cell forcing chains and Region forcing chains).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.IsDynamic">
            <summary>
            Indicates whether the chain is a dynamic forcng chains.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Level">
            <summary>
            Indicates the dynamic searching level.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.SortKey">
            <summary>
            The sort key.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.FlatComplexity">
            <summary>
            The flat complexity.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.BaseDifficulty">
            <summary>
            The base difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.LengthDifficulty">
            <summary>
            The length difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Complexity">
            <summary>
            The total complexity.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.NestedComplexity">
            <summary>
            The nested complexity.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Prefix">
            <summary>
            The prefix.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Suffix">
            <summary>
            The suffix.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.NestedSuffix">
            <summary>
            The nested suffix.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Equals(Sudoku.Solving.TechniqueInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.Equals(Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.GetNestedSuffix(System.Int32)">
            <summary>
            Get the nested suffix with the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns>The name suffix.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.InternalEquals(Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo,Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo)">
            <summary>
            Determine whether two <see cref="T:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo"/> instances are same.
            </summary>
            <param name="left">The left one.</param>
            <param name="right">The right one.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.op_Equality(Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo,Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo.op_Inequality(Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo,Sudoku.Solving.Manual.Chaining.ChainingTechniqueInfo)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.ChainingTechniqueSearcher">
            <summary>
            Encapsulates a <b>chain</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo">
            <summary>
            Provides a usage of <b>(grouped) continuous nice loop</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean,System.Boolean,Sudoku.Data.Node)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="xEnabled">Indicates whether the chain is enabled X strong relations.</param>
            <param name="yEnabled">Indicates whether the chain is enabled Y strong relations.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo.Target">
            <summary>
            The target.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo.FlatComplexity">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Chaining.LoopTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations">
            <summary>
            Indicates the Bi-bi pattern eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.#ctor(System.Collections.Generic.IList{Sudoku.Data.Conclusion})">
            <constructor type="IEliminations">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.Count">
            <property name="Count" type="IEliminations">
		<summary>
			Indicates the number of all conclusions.
		</summary>
	</property>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.Conclusions">
            <property name="Conclusions" type="IEliminations">
		<summary>
			Indicates the conclusions.
		</summary>
	</property>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.Add(Sudoku.Data.Conclusion)">
            <method name="Add" type="IEliminations">
		<summary>
			Add the conclusion into the collection.
		</summary>
		<param name="conclusion">The conclusion.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <method name="AddRange" type="IEliminations">
		<summary>
			Add a serial of conclusions into this collection.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.Merge(System.Nullable{Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations}[])">
            <method name="Merge" type="IEliminations">
		<summary>
			Merge all eliminations.
		</summary>
		<param name="eliminations">All instances to merge.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.MergeAll(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations})">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations.MergeAll(Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations[])">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations">
            <summary>
            Indicates the compatibility test eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.#ctor(System.Collections.Generic.IList{Sudoku.Data.Conclusion})">
            <constructor type="IEliminations">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.Count">
            <property name="Count" type="IEliminations">
		<summary>
			Indicates the number of all conclusions.
		</summary>
	</property>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.Conclusions">
            <property name="Conclusions" type="IEliminations">
		<summary>
			Indicates the conclusions.
		</summary>
	</property>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.Add(Sudoku.Data.Conclusion)">
            <method name="Add" type="IEliminations">
		<summary>
			Add the conclusion into the collection.
		</summary>
		<param name="conclusion">The conclusion.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <method name="AddRange" type="IEliminations">
		<summary>
			Add a serial of conclusions into this collection.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.Merge(System.Nullable{Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations}[])">
            <method name="Merge" type="IEliminations">
		<summary>
			Merge all eliminations.
		</summary>
		<param name="eliminations">All instances to merge.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.MergeAll(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations})">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations.MergeAll(Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations[])">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations">
            <summary>
            Indicates the mirror cell eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.#ctor(System.Collections.Generic.IList{Sudoku.Data.Conclusion})">
            <constructor type="IEliminations">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.Count">
            <property name="Count" type="IEliminations">
		<summary>
			Indicates the number of all conclusions.
		</summary>
	</property>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.Conclusions">
            <property name="Conclusions" type="IEliminations">
		<summary>
			Indicates the conclusions.
		</summary>
	</property>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.Add(Sudoku.Data.Conclusion)">
            <method name="Add" type="IEliminations">
		<summary>
			Add the conclusion into the collection.
		</summary>
		<param name="conclusion">The conclusion.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <method name="AddRange" type="IEliminations">
		<summary>
			Add a serial of conclusions into this collection.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.Merge(System.Nullable{Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations}[])">
            <method name="Merge" type="IEliminations">
		<summary>
			Merge all eliminations.
		</summary>
		<param name="eliminations">All instances to merge.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.MergeAll(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations})">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations.MergeAll(Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations[])">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations">
            <summary>
            Indicates the swordfish pattern eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.#ctor(System.Collections.Generic.IList{Sudoku.Data.Conclusion})">
            <constructor type="IEliminations">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.Count">
            <property name="Count" type="IEliminations">
		<summary>
			Indicates the number of all conclusions.
		</summary>
	</property>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.Conclusions">
            <property name="Conclusions" type="IEliminations">
		<summary>
			Indicates the conclusions.
		</summary>
	</property>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.Add(Sudoku.Data.Conclusion)">
            <method name="Add" type="IEliminations">
		<summary>
			Add the conclusion into the collection.
		</summary>
		<param name="conclusion">The conclusion.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <method name="AddRange" type="IEliminations">
		<summary>
			Add a serial of conclusions into this collection.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.Merge(System.Nullable{Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations}[])">
            <method name="Merge" type="IEliminations">
		<summary>
			Merge all eliminations.
		</summary>
		<param name="eliminations">All instances to merge.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.MergeAll(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations})">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations.MergeAll(Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations[])">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations">
            <summary>
            Indicates the target eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.#ctor(System.Collections.Generic.IList{Sudoku.Data.Conclusion})">
            <constructor type="IEliminations">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.Count">
            <property name="Count" type="IEliminations">
		<summary>
			Indicates the number of all conclusions.
		</summary>
	</property>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.Conclusions">
            <property name="Conclusions" type="IEliminations">
		<summary>
			Indicates the conclusions.
		</summary>
	</property>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.Add(Sudoku.Data.Conclusion)">
            <method name="Add" type="IEliminations">
		<summary>
			Add the conclusion into the collection.
		</summary>
		<param name="conclusion">The conclusion.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <method name="AddRange" type="IEliminations">
		<summary>
			Add a serial of conclusions into this collection.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.Merge(System.Nullable{Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations}[])">
            <method name="Merge" type="IEliminations">
		<summary>
			Merge all eliminations.
		</summary>
		<param name="eliminations">All instances to merge.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.MergeAll(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations})">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations.MergeAll(Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations[])">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations">
            <summary>
            Indicates the target pair eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.#ctor(System.Collections.Generic.IList{Sudoku.Data.Conclusion})">
            <constructor type="IEliminations">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.Count">
            <property name="Count" type="IEliminations">
		<summary>
			Indicates the number of all conclusions.
		</summary>
	</property>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.Conclusions">
            <property name="Conclusions" type="IEliminations">
		<summary>
			Indicates the conclusions.
		</summary>
	</property>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.Add(Sudoku.Data.Conclusion)">
            <method name="Add" type="IEliminations">
		<summary>
			Add the conclusion into the collection.
		</summary>
		<param name="conclusion">The conclusion.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <method name="AddRange" type="IEliminations">
		<summary>
			Add a serial of conclusions into this collection.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.Merge(System.Nullable{Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations}[])">
            <method name="Merge" type="IEliminations">
		<summary>
			Merge all eliminations.
		</summary>
		<param name="eliminations">All instances to merge.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.MergeAll(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations})">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations.MergeAll(Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations[])">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations">
            <summary>
            Indicates the true base eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.#ctor(System.Collections.Generic.IList{Sudoku.Data.Conclusion})">
            <constructor type="IEliminations">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.Count">
            <property name="Count" type="IEliminations">
		<summary>
			Indicates the number of all conclusions.
		</summary>
	</property>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.Conclusions">
            <property name="Conclusions" type="IEliminations">
		<summary>
			Indicates the conclusions.
		</summary>
	</property>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.Add(Sudoku.Data.Conclusion)">
            <method name="Add" type="IEliminations">
		<summary>
			Add the conclusion into the collection.
		</summary>
		<param name="conclusion">The conclusion.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.AddRange(System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <method name="AddRange" type="IEliminations">
		<summary>
			Add a serial of conclusions into this collection.
		</summary>
		<param name="conclusions">All conclusions.</param>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.Merge(System.Nullable{Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations}[])">
            <method name="Merge" type="IEliminations">
		<summary>
			Merge all eliminations.
		</summary>
		<param name="eliminations">All instances to merge.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.MergeAll(System.Collections.Generic.IEnumerable{Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations})">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations.MergeAll(Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations[])">
            <method name="MergeAll" type="IEliminations">
		<summary>
			Merge all conclusions.
		</summary>
		<param name="list">The list.</param>
		<returns>The merged result.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo">
            <summary>
            Provides a usage of <b>exocet</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Exocets.Pattern,System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Solving.Manual.TechniqueCode,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="exocet">The exocet.</param>
            <param name="digits">All digits.</param>
            <param name="techniqueCode">The technique code.</param>
            <param name="lockedMemberQ">The locked member Q.</param>
            <param name="lockedMemberR">The locked member R.</param>
            <param name="targetEliminations">The target eliminations.</param>
            <param name="mirrorEliminations">The mirror eliminations.</param>
            <param name="bibiEliminations">
            The Bi-bi pattern eliminations (only used for junior exocets).
            </param>
            <param name="targetPairEliminations">
            The target pair eliminations (only used for junior exocets).
            </param>
            <param name="swordfishEliminations">
            The swordfish pattern eliminations (only used for junior exocets).
            </param>
            <param name="trueBaseEliminations">
            The true base eliminations (only used for senior exocets).
            </param>
            <param name="compatibilityEliminations">
            The compatibility test eliminations (only used for senior exocets).
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.LockedMemberQ">
            <summary>
            The locked member Q.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.LockedMemberR">
            <summary>
            The locked member R.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.Digits">
            <summary>
            Indicates all digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.Exocet">
            <summary>
            The exocet.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.TargetEliminations">
            <summary>
            The target eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.MirrorEliminations">
            <summary>
            The mirror eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.BibiEliminations">
            <summary>
            The Bi-bi pattern eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.TargetPairEliminations">
            <summary>
            The target pair eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.SwordfishEliminations">
            <summary>
            The swordfish eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.TrueBaseEliminations">
            <summary>
            The true base eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.CompatibilityTestEliminations">
            <summary>
            The compatibility test eliminations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.ToFullString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo.GetAdditional">
            <summary>
            Get the additional message.
            </summary>
            <returns>The additional message.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher">
            <summary>
            <para>
            Encapsulates an <b>exocet</b> technique searcher. The pattern will be like:
            <code>
            .-------.-------.-------.<br/>
            | B B E | E . . | E . . |<br/>
            | . . E | Q . . | R . . |<br/>
            | . . E | Q . . | R . . |<br/>
            :-------+-------+-------:<br/>
            | . . S | S . . | S . . |<br/>
            | . . S | S . . | S . . |<br/>
            | . . S | S . . | S . . |<br/>
            :-------+-------+-------:<br/>
            | . . S | S . . | S . . |<br/>
            | . . S | S . . | S . . |<br/>
            | . . S | S . . | S . . |<br/>
            '-------'-------'-------'
            </code>
            Where:
            <list type="table">
            <item><term>B</term><description>Base Cells.</description></item>
            <item><term>Q</term><description>1st Object Pair (Target cells pair 1).</description></item>
            <item><term>R</term><description>2nd Object Pair (Target cells pair 2).</description></item>
            <item><term>S</term><description>Cross-line Cells.</description></item>
            <item><term>E</term><description>Escape Cells.</description></item>
            </list>
            </para>
            <para>
            In the data structure, all letters will be used as the same one in this exemplar.
            In addition, if senior exocet, one of two target cells will lie on cross-line cells,
            and the lines of two target cells lying on cannot contain any base digits.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.Patterns">
            <summary>
            Indicates all patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.SIter">
            <summary>
            The cross line cells iterator.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.BIter">
            <summary>
            The base cells iterator.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.RqIter">
            <summary>
            The Q or R cells iterator.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.M">
            <summary>
            The mirror list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.B">
            <summary>
            The base list.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.BC">
            <summary>
            The combinations for base list <see cref="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.B"/>.
            </summary>
            <seealso cref="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.B"/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher._checkAdvanced">
            <summary>
            Indicates whether the searcher will find advanced eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with the specified region maps.
            </summary>
            <param name="checkAdvanced">
            Indicates whether the searcher will find advanced eliminations.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.#cctor">
            <staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor><staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.CheckMirror(Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32,System.Int16,System.Int16,Sudoku.Data.GridMap,System.Int32,System.Int32,System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Check mirror eliminations.
            </summary>
            <param name="grid">The grid.</param>
            <param name="target">The target cell.</param>
            <param name="target2">
            The another target cell that is adjacent with <paramref name="target"/>.
            </param>
            <param name="lockedNonTarget">The locked member that is non-target digits.</param>
            <param name="baseCandidateMask">The base candidate mask.</param>
            <param name="mirror">The mirror map.</param>
            <param name="x">The x.</param>
            <param name="onlyOne">The only one cell.</param>
            <param name="cellOffsets">The cell offsets.</param>
            <param name="candidateOffsets">The candidate offsets.</param>
            <returns>All mirror eliminations.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.ExocetTechniqueSearcher.GetCombinations(System.Int16)">
            <summary>
            Get all combinations that contains all set bits from the specified number.
            </summary>
            <param name="seed">The specified number.</param>
            <returns>All combinations.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueInfo">
            <summary>
            Provides a usage of <b>junior exocet</b> (JE) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Exocets.Pattern,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="exocet">The exocet.</param>
            <param name="digits">All digits.</param>
            <param name="lockedMemberQ">The locked member Q.</param>
            <param name="lockedMemberR">The locked member R.</param>
            <param name="targetEliminations">The target eliminations.</param>
            <param name="mirrorEliminations">The mirror eliminations.</param>
            <param name="bibiEliminations">The Bi-bi pattern eliminations.</param>
            <param name="targetPairEliminations">The target pair eliminations.</param>
            <param name="swordfishEliminations">The swordfish pattern eliminations.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher">
            <summary>
            Encapsulates a <b>junior exocet</b> (JE) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.BibiIter">
            <summary>
            The iterator for Bi-bi pattern.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.#ctor(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.GatheringMirrorEliminations(System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int16,System.Int32,Sudoku.Data.IReadOnlyGrid,System.Int16,System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Int32}},System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Gathering mirror eliminations. This method is an entry for the method check mirror in base class.
            </summary>
            <param name="tq1">The target Q1 cell.</param>
            <param name="tq2">The target Q2 cell.</param>
            <param name="tr1">The target R1 cell.</param>
            <param name="tr2">The target R2 cell.</param>
            <param name="m1">The mirror 1 cell.</param>
            <param name="m2">The mirror 2 cell.</param>
            <param name="lockedNonTarget">The locked digits that is not the target digits.</param>
            <param name="x">The X digit.</param>
            <param name="grid">The grid.</param>
            <param name="baseCandidatesMask">The base candidates mask.</param>
            <param name="cellOffsets">The highlight cells.</param>
            <param name="candidateOffsets">The highliht candidates.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.GatheringTargetEliminations(System.Int32,Sudoku.Data.IReadOnlyGrid,System.Int16,System.Int16,Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations@)">
            <summary>
            The method for gathering target eliminations.
            </summary>
            <param name="cell">The cell.</param>
            <param name="grid">The grid.</param>
            <param name="baseCandidatesMask">The base candidates mask.</param>
            <param name="temp">The temp mask.</param>
            <param name="targetElims">(<see langword="ref"/> parameter) The target eliminations.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether this method has been found eliminations.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.CheckCrossline(Sudoku.Data.GridMap,System.Int16)">
            <summary>
            Check the cross-line cells.
            </summary>
            <param name="crossline">The cross line cells.</param>
            <param name="digitsNeedChecking">The digits that need checking.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the structure passed the validation.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.CheckTarget(Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32,System.Int32,System.Int16@,System.Int32@)">
            <summary>
            Check the target cells.
            </summary>
            <param name="grid">The grid.</param>
            <param name="pos1">The cell 1 to determine.</param>
            <param name="pos2">The cell 2 to determine.</param>
            <param name="baseCandidatesMask">The base candidate mask.</param>
            <param name="otherCandidatesMask">
            (<see langword="out"/> parameter) The other candidate mask.
            </param>
            <param name="otherRegion">(<see langword="out"/> parameter) The other region.</param>
            <returns>The <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.JuniorExocetTechniqueSearcher.CheckBibiPattern(Sudoku.Data.IReadOnlyGrid,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.GridMap,System.Boolean,System.Int16,System.Int16,Sudoku.Data.GridMap,Sudoku.Solving.Manual.Exocets.Eliminations.BibiPatternEliminations@,Sudoku.Solving.Manual.Exocets.Eliminations.TargetPairEliminations@,Sudoku.Solving.Manual.Exocets.Eliminations.SwordfishEliminations@)">
            <summary>
            Check Bi-bi pattern eliminations.
            </summary>
            <param name="grid">The grid.</param>
            <param name="baseCandidatesMask">The base candidate mask.</param>
            <param name="b1">The base cell 1.</param>
            <param name="b2">The base cell 2.</param>
            <param name="tq1">The target Q1 cell.</param>
            <param name="tq2">The target Q2 cell.</param>
            <param name="tr1">The target R1 cell.</param>
            <param name="tr2">The target R2 cell.</param>
            <param name="crossline">The cross-line cells.</param>
            <param name="isRow">
            Indicates whether the specified exocet is in the horizontal direction.
            </param>
            <param name="lockedQ">The locked member Q.</param>
            <param name="lockedR">The locked member R.</param>
            <param name="targetMap">The target map.</param>
            <param name="bibiElims">
            (<see langword="out"/> parameter) The Bi-bi pattern eliminations.
            </param>
            <param name="targetPairElims">
            (<see langword="out"/> parameter) The target pair eliminations.
            </param>
            <param name="swordfishElims">
            (<see langword="out"/> parameter) The swordfish eliminations.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether the pattern exists.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.Pattern">
            <summary>
            Indicates an exocet pattern.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified cells.
            </summary>
            <param name="base1">The base cell 1.</param>
            <param name="base2">The base cell 2.</param>
            <param name="tq1">The target Q1 cell.</param>
            <param name="tq2">The target Q2 cell.</param>
            <param name="tr1">The target R1 cell.</param>
            <param name="tr2">The target R2 cell.</param>
            <param name="crossline">The cross line cells.</param>
            <param name="mq1">The mirror Q1 cell.</param>
            <param name="mq2">The mirror Q2 cell.</param>
            <param name="mr1">The mirror R1 cell.</param>
            <param name="mr2">The mirror R2 cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.Base1">
            <summary>
            Indicates the base cell 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.Base2">
            <summary>
            Indicates the base cell 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetQ1">
            <summary>
            Indicates the target Q1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetQ2">
            <summary>
            Indicates the target Q2 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetR1">
            <summary>
            Indicates the target R1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.TargetR2">
            <summary>
            Indicates the target R2 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.CrossLine">
            <summary>
            Indicates the cross line cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorQ1">
            <summary>
            Indicates the mirror Q1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorQ2">
            <summary>
            Indicates the mirror Q2 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorR1">
            <summary>
            Indicates the mirror R1 cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.Pattern.MirrorR2">
            <summary>
            Indicates the mirror R2 cell.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Deconstruct(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="baseCellsMap">(<see langword="out" /> parameter) The base cells.</param>
            <param name="targetCellsMap">(<see langword="out" /> parameter) The target cells.</param>
            <param name="crosslineMap">(<see langword="out" /> parameter) The cross-line cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="base1">(<see langword="out" /> parameter) The base cell 1.</param>
            <param name="base2">(<see langword="out" /> parameter) The base cell 2.</param>
            <param name="tq1">(<see langword="out" /> parameter) The target Q1 cell.</param>
            <param name="tq2">(<see langword="out" /> parameter) The target Q2 cell.</param>
            <param name="tr1">(<see langword="out" /> parameter) The target R1 cell.</param>
            <param name="tr2">(<see langword="out" /> parameter) The target R2 cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="base1">(<see langword="out" /> parameter) The base cell 1.</param>
            <param name="base2">(<see langword="out" /> parameter) The base cell 2.</param>
            <param name="tq1">(<see langword="out" /> parameter) The target Q1 cell.</param>
            <param name="tq2">(<see langword="out" /> parameter) The target Q2 cell.</param>
            <param name="tr1">(<see langword="out" /> parameter) The target R1 cell.</param>
            <param name="tr2">(<see langword="out" /> parameter) The target R2 cell.</param>
            <param name="crossline">(<see langword="out" /> parameter) The cross line cells.</param>
            <param name="mq1">(<see langword="out" /> parameter) The mirror Q1 cell.</param>
            <param name="mq2">(<see langword="out" /> parameter) The mirror Q2 cell.</param>
            <param name="mr1">(<see langword="out" /> parameter) The mirror R1 cell.</param>
            <param name="mr2">(<see langword="out" /> parameter) The mirror R2 cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.Equals(Sudoku.Solving.Manual.Exocets.Pattern)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.op_Equality(Sudoku.Solving.Manual.Exocets.Pattern,Sudoku.Solving.Manual.Exocets.Pattern)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.Pattern.op_Inequality(Sudoku.Solving.Manual.Exocets.Pattern,Sudoku.Solving.Manual.Exocets.Pattern)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo">
            <summary>
            Provides a usage of <b>senior exocet</b> (SE) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Exocets.Pattern,System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32[],Sudoku.Solving.Manual.Exocets.Eliminations.TargetEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.TrueBaseEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.MirrorEliminations,Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="exocet">The exocet.</param>
            <param name="digits">All digits.</param>
            <param name="endoTargetCell">The endo target cell.</param>
            <param name="extraRegionsMask">The extra regions mask.</param>
            <param name="targetEliminations">The target eliminations.</param>
            <param name="trueBaseEliminations">The true base eliminations.</param>
            <param name="mirrorEliminations">The mirror eliminations.</param>
            <param name="compatibilityEliminations">The compatibility eliminations.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo.ContainsExtraRegions">
            <summary>
            Indicates whether the specified instance contains any extra regions.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo.ExtraRegionsMask">
            <summary>
            Indicates the extra regions mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo.EndoTargetCell">
            <summary>
            Indicates the target cell that lies on the cross-line.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher">
            <summary>
            Encapsulates a <b>senior exocet</b> (SE) technique searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.#ctor(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.CheckCrossline(Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int16,System.Int32,System.Int32,System.Boolean,System.Int32[]@)">
            <summary>
            Check the cross-line cells.
            </summary>
            <param name="baseMap">The base cells map.</param>
            <param name="tempCrossline">The cross-line map.</param>
            <param name="baseCandidatesMask">The base candidate mask.</param>
            <param name="t1">The target cell 1.</param>
            <param name="t2">The target cell 2.</param>
            <param name="isRow">Indicates whether the specified computation is for rows.</param>
            <param name="extraRegionsMask">
            (<see langword="out"/> parameter) The extra region to add
            (used for franken/mutant exocets). If normal, the value will be an array with 9 elements
            representing 9 different digits.
            </param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.DeepCrosslineCheck(System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int32[])">
            <summary>
            Deeply check of cross-line cells (franken/mutant exocets can be searched here).
            </summary>
            <param name="digit">The digit.</param>
            <param name="baseElimMap">The base elimination map.</param>
            <param name="tempCrossline">The cross-line map.</param>
            <param name="extraRegionsMask">The extra regions.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.CompatibilityTest(System.Int16,Sudoku.Data.GridMap[],Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int32,System.Int32)">
            <summary>
            Compatibility test.
            </summary>
            <param name="baseCandidatesMask">The base candidates mask.</param>
            <param name="digitMaps">The digit distributions.</param>
            <param name="tempCrossline">The cross-line map.</param>
            <param name="baseCellsMap">The base cells map.</param>
            <param name="t1">The target cell 1.</param>
            <param name="t2">The target cell 2.</param>
            <returns>The mask of all incompatible values.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.CompatibilityTest2(Sudoku.Data.IReadOnlyGrid,Sudoku.Solving.Manual.Exocets.Eliminations.CompatibilityTestEliminations@,Sudoku.Data.GridMap,System.Int16,System.Int32,System.Int32)">
            <summary>
            The compatibility testing after the method
            <see cref="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.CompatibilityTest(System.Int16,Sudoku.Data.GridMap[],Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int32,System.Int32)"/>.
            </summary>
            <param name="grid">The grid.</param>
            <param name="compatibilityElims">The compatibility eliminations.</param>
            <param name="baseCellsMap">The base cells map.</param>
            <param name="baseCandidatesMask">The base candidates mask.</param>
            <param name="t1">The target cell 1.</param>
            <param name="t2">The target cell 2.</param>
            <seealso cref="M:Sudoku.Solving.Manual.Exocets.SeniorExocetTechniqueSearcher.CompatibilityTest(System.Int16,Sudoku.Data.GridMap[],Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int32,System.Int32)"/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo">
            <summary>
            Provides a usage of <b>fish</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.Digit">
            <summary>
            Indicates the digit of this fish instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.Size">
            <summary>
            Indicates the size of this fish instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.Rank">
            <summary>
            Indicates the rank of the fish.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.BaseSets">
            <summary>
            All base sets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.FishTechniqueInfo.CoverSets">
            <summary>
            All cover sets.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.FishTechniqueSearcher">
            <summary>
            Encapsulates a <b>fish</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo">
            <summary>
            Provides a usage of <b>Hobiwan's fish</b> technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.BasicDiff">
            <summary>
            The basic difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.FinnedDiff">
            <summary>
            The finned difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.SashimiDiff">
            <summary>
            The sashimi difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.FrankenShapeDiffExtra">
            <summary>
            The Franken shape extra difficulty rating table.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.MutantShapeDiffExtra">
            <summary>
            The mutant shape extra difficulty rating table.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Nullable{System.Boolean})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
            <param name="exofins">The exo-fins.</param>
            <param name="endofins">The endo-fins.</param>
            <param name="isSashimi">Indicates the sashimi fish.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.IsSashimi">
            <summary>
            Indicates whether the fish instance is sashimi.
            The value can be:
            <list type="table">
            <item>
            <term><see langword="true"/></term><description>Sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term><description>Normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term><description>Normal fish.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.ExofinCells">
            <summary>
            Indicates all exo-fins.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.EndofinCells">
            <summary>
            Indicates all endo-fins.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.InternalName">
            <summary>
            The internal name.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.IsBasic">
            <summary>
            To check whether the specified structure is basic.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueInfo.IsFranken">
            <summary>
            To check whether the specified structure is Franken.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher">
            <summary>
            Encapsulates a <b>Hobiwan's fish</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher._exofinCount">
            <summary>
            Indicates the maximum number of exo-fins will be found.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher._endofinCount">
            <summary>
            Indicates the maximum number of endo-fins will be found.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher._size">
            <summary>
            Indicates the maximum size will be found. The maximum value supporting is 7.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher._checkPom">
            <summary>
            Indicates whether the puzzle will check POM first.
            If so and the digit does not have any eliminations, this digit
            will be skipped rather than do empty and useless loops.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the specified information.
            </summary>
            <param name="size">The size.</param>
            <param name="exofinCount">The maximum number of exo-fins.</param>
            <param name="endofinCount">The maximum number of endo-fins.</param>
            <param name="checkPom">
            Indicates whether the puzzle will check POM first.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.HobiwanFishTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            Accumulate all technique information instances into the specified accumulator by size.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size to iterate on.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo">
            <summary>
            Provides a usage of <b>normal fish</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Nullable{System.Boolean})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
            <param name="finCellOffsets">All candidate offsets of fins' position.</param>
            <param name="isSashimi">
            Indicates whether the fish instance is sashimi.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.IsSashimi">
            <summary>
            Indicates whether the fish instance is sashimi.
            The value can be:
            <list type="table">
            <item>
            <term><see langword="true"/></term><description>Sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term><description>Normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term><description>Normal fish.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.FinCellOffsets">
            <summary>
            Indicates all fin candidates in this fish information instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueSearcher">
            <summary>
            Encapsulates a <b>normal fish</b> technique searcher. Fins can also be found.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueSearcher.AccumulateAllBySize(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32,System.Boolean)">
            <summary>
            Searches all basic fish of the specified size.
            </summary>
            <param name="accumulator">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="searchRow">
            Indicates the solver will searching rows or columns.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.NormalFishTechniqueSearcher.GetGridMap(Sudoku.Data.GridMap@,System.ReadOnlySpan{System.Int32},Sudoku.Data.GridMap)">
            <summary>
            Record all cells in the all regions to a <see cref="T:Sudoku.Data.GridMap"/> instance.
            </summary>
            <param name="map">(<see langword="ref"/> parameter) The map.</param>
            <param name="regionOffsets">All region offsets.</param>
            <param name="candMap">The candidate map.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Fishes.RegionMap">
            <summary>
            Provides a region map that contains 27 bits indicating whether the corresponding region is used now.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified mask.
            </summary>
            <param name="mask">The specified mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.#ctor(System.Int32[])">
            <summary>
            Initializes a map with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Initializes a map with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a map with the specified regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.RegionMap.Mask">
            <summary>
            The mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.RegionMap.Count">
            <summary>
            Indicates how many regions are used now.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.RegionMap.Regions">
            <summary>
            Indicates all regions used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Fishes.RegionMap.Item(System.Int32)">
            <summary>
            Get whether the specified region is in this collection.
            </summary>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.Equals(Sudoku.Solving.Manual.Fishes.RegionMap)">
            <method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="T:System.Boolean" /> value indicating that.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.ToArray">
            <summary>
            Get all regions, and copy them into an array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.Add(System.Int32)">
            <summary>
            Add a region.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add regions.
            </summary>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.Remove(System.Int32)">
            <summary>
            Remove a region.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.op_Equality(Sudoku.Solving.Manual.Fishes.RegionMap,Sudoku.Solving.Manual.Fishes.RegionMap)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.op_Inequality(Sudoku.Solving.Manual.Fishes.RegionMap,Sudoku.Solving.Manual.Fishes.RegionMap)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.op_OnesComplement(Sudoku.Solving.Manual.Fishes.RegionMap)">
            <summary>
            Negate the map.
            </summary>
            <param name="map"> The map.</param>
            <returns>The map after being negated.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.op_BitwiseAnd(Sudoku.Solving.Manual.Fishes.RegionMap,Sudoku.Solving.Manual.Fishes.RegionMap)">
            <summary>
            Get the regions that two maps both contain.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>The result map.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.op_BitwiseOr(Sudoku.Solving.Manual.Fishes.RegionMap,Sudoku.Solving.Manual.Fishes.RegionMap)">
            <summary>
            Get all regions that comes from two maps.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>The result map.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.op_ExclusiveOr(Sudoku.Solving.Manual.Fishes.RegionMap,Sudoku.Solving.Manual.Fishes.RegionMap)">
            <summary>
            Get the regions that two maps contain but don't overlap with each other.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>The result map.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Fishes.RegionMap.op_Subtraction(Sudoku.Solving.Manual.Fishes.RegionMap,Sudoku.Solving.Manual.Fishes.RegionMap)">
            <summary>
            Get the regions that <paramref name="left"/> contains but the <paramref name="right"/> does not contain.
            </summary>
            <param name="left">The left map.</param>
            <param name="right">The right map.</param>
            <returns>The result map.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo">
            <summary>
            Provides a usage of <b>almost locked candidates</b> (ALC) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int16,Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digits">The digits.</param>
            <param name="baseCells">The base cells.</param>
            <param name="targetCells">The target cells.</param>
            <param name="hasValueCell">
            Indicates whether the structure has the value cell.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.Digits">
            <summary>
            Indicates the digits the technique used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.BaseCells">
            <summary>
            Indicates the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.TargetCells">
            <summary>
            Indicates the target cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.HasValueCell">
            <summary>
            Indicates whether the structure has a value cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.Size">
            <summary>
            Indicates the size.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher">
            <summary>
            Encapsulates an <b>almost locked candidates</b> (ALC) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher._checkAlq">
            <summary>
            Indicates the searcher will check almost locked quadruple (ALQ).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with the intersection table.
            </summary>
            <param name="checkAlq">
            Indicates whether the searcher should check almost locked quadruple.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            Get all technique information instances by size.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.AlcTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Process the calculation.
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="baseSet">The base set.</param>
            <param name="coverSet">The cover set.</param>
            <param name="a">The left grid map.</param>
            <param name="b">The right grid map.</param>
            <param name="c">The intersection.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.IntersectionTechniqueInfo">
            <summary>
            Provides a usage of <b>intersection</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.IntersectionTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.IntersectionTechniqueSearcher">
            <summary>
            Encapsulates an <b>intersection</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo">
            <summary>
            Provides a usage of <b>locked candidates</b> (LC) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="baseSet">The base set.</param>
            <param name="coverSet">The cover set.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.BaseSet">
            <summary>
            Indicates the base set.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.CoverSet">
            <summary>
            Indicates the cover set.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LcTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Intersections.LcTechniqueSearcher">
            <summary>
            Encapsulates a <b>locked candidates</b> (LC) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Intersections.LcTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Intersections.LcTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo">
            <summary>
            Provides a usage of <b>Bowman's bingo</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="contradictionSeries">The contradiction series.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.ContradictionSeries">
            <summary>
            Indicates all conclusions that occurs a contradict.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher">
            <summary>
            Encapsulates a <b>Bowman's bingo</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher._length">
            <summary>
            Indicates the length to find.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher._searcher">
            <summary>
            The singles searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher._tempConclusions">
            <summary>
            All temporary conclusions.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified length.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.TakeAllRecursively(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.Grid,System.Int32,System.Int32)">
            <summary>
            Take all information recursively.
            </summary>
            <param name="result">The result.</param>
            <param name="grid">The grid.</param>
            <param name="startCandidate">The start candidate.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.GetLinks">
            <summary>
            Get links.
            </summary>
            <returns>The links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.RecordUndoInfo(Sudoku.Data.Grid,System.Int32,System.Int32)">
            <summary>
            Record all information to be used in undo grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.UndoGrid(Sudoku.Data.Grid,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Int16)">
            <summary>
            Undo the grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="list">The list.</param>
            <param name="cell">The cell.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BowmanBingoTechniqueSearcher.IsValidGrid(Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            To check the specified cell has a same digit filled in a cell
            which is same region with the current one.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo">
            <summary>
            Provides a usage of <b>brute force</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher">
            <summary>
            Encapsulates a <b>brute force</b> technique searcher.
            The searcher is not executed until all searchers whose priority
            is higher than this one cannot find out any technique steps.
            </summary>
            <remarks>
            This searcher is a trick, because it will check the assignments on
            the terminal grid (I mean, the answer grid).
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.TryAndErrorOrder">
            <summary>
            The order of cell offsets to get values.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher._solution">
            <summary>
            The solution.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.#ctor(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            A trick. Initializes an instance with the solution grid.
            This searcher will try to extract a value from the
            solution.
            </summary>
            <param name="solution">The solution.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.BruteForceTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.LastResortTechniqueInfo">
            <summary>
            Provides a usage of <b>last resort</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.LastResortTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.LastResortTechniqueSearcher">
            <summary>
            Encapsulates a <b>last resort</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.PomTechniqueInfo">
            <summary>
            Provides a usage of <b>pattern overlay method</b> (POM) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.PomTechniqueSearcher">
            <summary>
            Encapsulates a <b>pattern overlay method</b> (POM) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.PomTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomTechniqueSearcher.GetInvalidPos(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get all invalid positions.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The 9 maps for invalid positions of each digit.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.PomTechniqueSearcher.GetTemplates">
            <summary>
            Get templates.
            </summary>
            <returns>The templates.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo">
            <summary>
            Provides a usage of <b>template</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="isTemplateDeletion">
            Indicates whether this technique is template deletion.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.IsTemplateDeletion">
            <summary>
            Indicates whether this technique is template deletion.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher">
            <summary>
            Encapsulates a <b>template</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher._templateDeleteOnly">
            <summary>
            Indicates whether the searcher checks template deletes.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with the specified <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="templateDeleteOnly">
            Indicates whether the technique searcher checks template deletes only.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
            <exception cref="T:Sudoku.WrongHandlingException">
            Throws when the puzzle is not unique.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.GetAllTemplateSet(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get all template sets.
            </summary>
            <param name="result">The result.</param>
            <param name="solution">The solution.</param>
            <returns>All template sets.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.GetAllTemplateDelete(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get all template deletes.
            </summary>
            <param name="result">The result.</param>
            <param name="solution">The solution.</param>
            <returns>All template deletes.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LastResorts.TemplateTechniqueSearcher.CreateInstance(Sudoku.Data.IReadOnlyGrid,System.Int32)">
            <summary>
            Create a <see cref="T:Sudoku.Data.GridMap"/> instance with the specified solution.
            If the puzzle has been solved, this method will create a grid map of
            distribution of a single digit in this solution.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit to search.</param>
            <returns>
            The grid map that contains all cells of a digit appearing
            in the solution.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws when the puzzle has not been solved.
            </exception>
        </member>
        <member name="T:Sudoku.Solving.Manual.LightManualSolver">
            <summary>
            Provides a light manual solver used for testing and checking backdoors.
            This solver will use mankind logic to solve a puzzle, but only
            <b>Hidden Single</b>s and <b>Naked Single</b>s will be used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.LightManualSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LightManualSolver.Solve(Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
            <remarks>
            You should use the simple version of the solving method <see cref="M:Sudoku.Solving.Manual.LightManualSolver.CanSolve(Sudoku.Data.IReadOnlyGrid)"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
            <seealso cref="M:Sudoku.Solving.Manual.LightManualSolver.CanSolve(Sudoku.Data.IReadOnlyGrid)"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.LightManualSolver.CanSolve(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To check whether the specified solver can solve the puzzle.
            </summary>
            <param name="grid">The puzzle.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the solver
            solved the puzzle successfully.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.LightManualSolver.SaveTechnique(System.Collections.Generic.ICollection{Sudoku.Solving.TechniqueInfo},Sudoku.Solving.TechniqueInfo,Sudoku.Data.Grid)">
            <summary>
            To record the current technique step.
            </summary>
            <param name="steps">The steps have been found.</param>
            <param name="step">The current step.</param>
            <param name="cloneation">The cloneation of the grid.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.ManualSolver">
            <summary>
            Provides a solver that use logical methods to solve a specified sudoku puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.SolverName">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.TempList">
            <summary>
            Indicates the list that used as a cache.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve(Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.Solve(Sudoku.Data.IReadOnlyGrid,System.IProgress{Sudoku.ComponentModel.IProgressResult},System.String)">
            <summary>
            To solve the puzzle.
            </summary>
            <param name="grid">The puzzle.</param>
            <param name="progress">The progress instance to report the state.</param>
            <param name="globalizationString">
            The globalization string. The default value is <see langword="null"/>.
            </param>
            <returns>The analysis result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveNaively(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.Grid,System.Collections.Generic.List{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Boolean,Sudoku.ComponentModel.GridProgressResult@,System.IProgress{Sudoku.ComponentModel.IProgressResult})">
            <summary>
            Solve naively.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation grid to calculate.</param>
            <param name="steps">All steps found.</param>
            <param name="solution">The solution.</param>
            <param name="sukaku">Indicates whether the current mode is sukaku.</param>
            <param name="progressResult">
            (<see langword="ref"/> parameter)
            The progress result. This parameter is used for modify the state of UI controls.
            The current argument will not be used until <paramref name="progress"/> isn't <see langword="null"/>.
            In the default case, this parameter is <see langword="default"/>(<see cref="T:Sudoku.ComponentModel.GridProgressResult"/>) is okay.
            </param>
            <param name="progress">
            The progress used for report the current state. If we don't need, the value should
            be assigned <see langword="null"/>.
            </param>
            <returns>The analysis result.</returns>
            <exception cref="T:Sudoku.WrongHandlingException">
            Throws when the solver cannot solved due to wrong handling.
            </exception>
            <seealso cref="T:Sudoku.ComponentModel.GridProgressResult"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.SolveSeMode(Sudoku.Data.IReadOnlyGrid,Sudoku.Data.Grid,System.Collections.Generic.List{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Boolean,Sudoku.ComponentModel.GridProgressResult@,System.IProgress{Sudoku.ComponentModel.IProgressResult})">
            <summary>
            Solve the puzzle with <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> option.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation grid to calculate.</param>
            <param name="steps">All steps found.</param>
            <param name="solution">The solution.</param>
            <param name="sukaku">Indicates whether the current mode is sukaku mode.</param>
            <param name="progressResult">
            (<see langword="ref"/> parameter)
            The progress result. This parameter is used for modify the state of UI controls.
            The current argument will not be used until <paramref name="progress"/> isn't <see langword="null"/>.
            In the default case, this parameter is <see langword="default"/>(<see cref="T:Sudoku.ComponentModel.GridProgressResult"/>) is okay.
            </param>
            <param name="progress">
            The progress used for report the current state. If we don't need, the value should
            be assigned <see langword="null"/>.
            </param>
            <returns>The analysis result.</returns>
            <exception cref="T:Sudoku.WrongHandlingException">
            Throws when the solver cannot solved due to wrong handling.
            </exception>
            <seealso cref="T:Sudoku.ComponentModel.GridProgressResult"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AllowAlsCycles">
            <summary>
            <para>Indicates whether the solver should check ALS cycles.</para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AllowOverlappingAlses">
            <summary>
            <para>
            Indicates whether two ALSes can be overlapped with each other.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AlsHighlightRegionInsteadOfCell">
            <summary>
            <para>
            Indicates whether all ALSes shows highlight regions
            instead of cells.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly">
            <summary>
            <para>
            Indicates whether the solver should check all technique
            information using the strict technique searchers order.
            </para>
            <para>
            If the value is <see langword="true"/>, all technique searchers
            will be enabled calculation in order. It ensures the strictness
            of difficulty rating that the maximum difficulty searched in
            one searcher should be no more than the minimum one searched in
            the searcher behind the previous one.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if this value is <see langword="true"/>, the option
            <see cref="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder"/> will be disabled. In other
            words, this option does not work while solving when the condition
            is satisfied. However, the time of calculation with this value
            <see langword="true"/> will be <b>much slower</b> than that with the
            value is <see langword="false"/>.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckAlmostLockedQuadruple">
            <summary>
            <para>
            Indicates whether the solver should check the technique Almost
            Locked Quadruple (ALQ).
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckConclusionValidityAfterSearched">
            <summary>
            <para>
            Indicates whether the solver will check the validity of the conclusions
            after searched them. If the conclusions eliminate the wrong digits or
            assign to the wrong cells, it will report the error
            (i.e. throw a <see cref="T:Sudoku.WrongHandlingException"/>).
            </para>
            <para>
            The value is <see langword="true"/> in default case. If the value is
            <see langword="true"/>, all conclusions will be checked before applying
            to the grid. The comparer is the solution grid. Computer does not know
            which conclusions are correct and which ones are incorrect. Therefore,
            the best plan is to compare to the solution grid. If not, the solver
            will not check the validity of all conclusions. In other words, the solver
            does not stop the searching until the grid is totally invalid (None of
            eliminations or assignments can be searched). However, unfortunately,
            the grid has no solution at present.
            </para>
            </summary>
            <seealso cref="T:Sudoku.WrongHandlingException"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckContinuousNiceLoop">
            <summary>
            <para>
            Indicates whether the solver will check the chain finally forms a
            continuous nice loop. If so, the structure may eliminate more candidates
            than those of normal AICs.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckGurthSymmetricalPlacement">
            <summary>
            <para>
            Indicates whether the solver should check Gurth's symmetrical placement
            at the initial grid.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if the value is <see langword="true"/>, the solver will check the symmetry
            of the grid at initial. If the grid is symmetrical grid, the solver
            will give you a hint about the technique of symmetrical placement. However,
            the hint will influence the difficulty rating during solving the puzzle.
            If the puzzle is so easy (in other words, the grid does not need check
            it), this option will make the difficulty rating of the puzzle much more
            higher than that when the option is <see langword="false"/>. In addition,
            if the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> is <see langword="true"/>,
            this option will be ignored.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckHeadCollision">
            <summary>
            <para>
            Indicates whether the solver will check head collision in searching for
            AICs.
            </para>
            <para>
            If the value is <see langword="true"/>, the searcher will search for
            AICs whose head nodes are same as tail nodes. In this case, the AIC
            will raise a conclusion that the head node is absolutely true.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckIncompleteUniquenessPatterns">
            <summary>
            <para>
            Indicates whether the solver should check incomplete uniqueness patterns.
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.SearchExtendedUniqueRectangles">
            <summary>
            <para>
            Indicates whether the solver should search for extended
            unique rectangles.
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableFullHouse">
            <summary>
            <para>
            Indicates whether the solver will record the step
            whose name or kind is full house.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
            <remarks>
            <b>Full house</b>s are the techniques that used in a single
            region. When the specified region has only one empty cell,
            the full house will be found at this empty cell (the last
            value in this region).
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableGarbageCollectionForcedly">
            <summary>
            <para>
            Indicates whether the solver enables the garbage collection
            after finished searching a technique whose searcher is
            high space-complexity.
            </para>
            <para>This value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.EnableLastDigit">
            <summary>
            <para>
            Indicates whether the solver will record the step
            whose name or kind is last digit.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
            <remarks>
            <b>Last digit</b>s are the techniques that used in a single
            digit. When the whole grid has 8 same digits, the last
            one will be always found and set in the last position,
            which is last digit.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.FastSearch">
            <summary>
            <para>
            Indicates whether the solver will apply multiple technique usages
            at the same time if searched more than one technique.
            As for the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/> is
            <see langword="true"/>, when searched more than one technique
            instance which holds a same difficulty, the searcher will apply
            them at the same time; however if the value is <see langword="false"/>,
            the solver will apply all same techniques searched at the same time.
            </para>
            <para>
            The value is <see langword="false"/> in default case. If the value
            is <see langword="true"/>, the solver will enable this mode to
            accelerate the running, but the applied techniques will be added much
            more than when the value is <see langword="false"/>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.HobiwanFishCheckTemplates">
            <summary>
            <para>
            Indicates whether the solver will check templates before searching
            Hobiwan's fish.
            </para>
            <para>
            The value is <see langword="true"/> in default case. If the value
            is <see langword="true"/>, the solver will check templates first,
            and get all possible eliminations for each digit. If the digit does
            not contain any elimination, the digit will not exist any fish.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OnlyRecordTemplateDelete">
            <summary>
            <para>
            Indicates whether the step accumulator only records template delete,
            and template set will not be in this collection (if necessary).
            </para>
            <para>
            If the value is <see langword="true"/>, and the solver has checked
            all template steps, only template deletes in these steps will be
            recorded into the step accumulator.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OnlySaveShortestPathAic">
            <summary>
            <para>
            Indicates whether the searcher will save the shortest path in AICs only.
            </para>
            <para>
            The value is <see langword="false"/> in default case. If the value
            is <see langword="true"/>, the searcher will check all chains had stored
            in the list and get the shortest one, but the speed is slow.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.OptimizedApplyingOrder">
            <summary>
            <para>Indicates whether the solver will optimizes the applying order.</para>
            <para>
            When the value is <see langword="true"/>, the result to apply to
            the grid will be the one which has the minimum difficulty
            rating; otherwise, the applying step will be the first one
            of all steps being searched.
            </para>
            <para>
            The value is <see langword="false"/> in default case. If the value
            is <see langword="true"/>, the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
            will be disabled.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.ReductDifferentPathAic">
            <summary>
            <para>
            Indicates whether the solver will record only one AIC
            when searched AICs that contain same head node and tail node,
            but different path.
            </para>
            <para>
            The value is <see langword="true"/> in default case. If the value
            is <see langword="true"/>, the solver will save only one chain with
            the condition above, but the length of the chain may not be the shortest
            one.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.UseCalculationPriority">
            <summary>
            <para>
            Indicates whether the solver should order all technique searchers
            by its priority.
            </para>
            <para>
            The value is <see langword="false"/> in default case. In addition,
            if you enable the option <see cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>,
            this option will be disabled because the solver will enable the
            function of count on all steps and get one with the <b>minimum</b>
            difficulty of them.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.ManualSolver.AnalyzeDifficultyStrictly"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.UseExtendedBugSearcher">
            <summary>
            <para>
            Indicates whether the solver should use extended BUG checker
            to searcher for all true candidates no matter how difficult
            the true candidates looking for.
            </para>
            <para>
            The value is <see langword="true"/> in debug environment,
            and <see langword="false"/> in release environment.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckAdvancedInExocet">
            <summary>
            <para>
            Indicates whether the solver should check advanced eliminations
            during finding exocets.
            </para>
            <para>The value is <see langword="true"/> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.HobiwanFishMaximumSize">
            <summary>
            <para>
            Indicates what size of the Hobiwan's fish will be searched for.
            </para>
            <para>
            The value is <c>3</c> in default case. The maximum value supporting
            is <c>7</c>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.HobiwanFishMaximumExofinsCount">
            <summary>
            <para>
            Indicates how many exo-fins in Hobiwan's fish will be searched for.
            </para>
            <para>The value is <c>3</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.HobiwanFishMaximumEndofinsCount">
            <summary>
            <para>
            Indicates how many endo-fins in Hobiwan's fish will be searched for.
            </para>
            <para>The value is <c>1</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.BowmanBingoMaximumLength">
            <summary>
            <para>
            Indicates the number of nodes to be searched for in bowman bingos.
            </para>
            <para>
            The value is <c>32</c> in default case. You can let this value
            be higher because this value take a little influence on the solver.
            However, each unique solution has more than 17 hints (given digits),
            which means you cannot set this value more than <c>64</c> (81 - 17 = 64).
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.AicMaximumLength">
            <summary>
            <para>
            Indicates the maximum length of a chain to search.
            </para>
            <para>The value is <c>10</c> in default case.</para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.CheckRegularWingSize">
            <summary>
            <para>
            Indicates all regular wings with the size less than
            or equals to this specified value. This value should
            be between 3 and 5.
            </para>
            <para>The value is <c>5</c> in default case.</para>
            </summary>
            <remarks>
            In fact this value can be 9 at most (i.e. <c>value &gt;&#61; 3
            &amp;&amp; value &lt;&#61; 9</c>) theoretically.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.ManualSolver.MaxPetalsOfDeathBlossom">
            <summary>
            <para>Indicates the max petals of death blossom to search.</para>
            <para>The value is <c>5</c> in default case.</para>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.GetSearchersHodokuMode(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get all searchers using in Hodoku-like mode.
            </summary>
            <param name="solution">The solution used for brute forces.</param>
            <returns>The searchers.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.GetSearchersSeMode(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Get all searchers using in Sudoku Explainer-like mode.
            </summary>
            <param name="solution">The solution used for brute forces.</param>
            <returns>The searchers.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.RecordTechnique(System.Collections.Generic.List{Sudoku.Solving.TechniqueInfo},Sudoku.Solving.TechniqueInfo,Sudoku.Data.IReadOnlyGrid,Sudoku.Data.Grid,System.Diagnostics.Stopwatch,System.Collections.Generic.IBag{Sudoku.Data.IReadOnlyGrid},Sudoku.Solving.AnalysisResult@)">
            <summary>
            Bound with on-solving methods returns the solving state.
            </summary>
            <param name="steps">The steps.</param>
            <param name="step">The step.</param>
            <param name="grid">The grid.</param>
            <param name="cloneation">The cloneation (playground).</param>
            <param name="stopwatch">The stopwatch.</param>
            <param name="stepGrids">The step grids.</param>
            <param name="result">(<see langword="out"/> parameter) The analysis result.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.CheckConclusionsValidity(Sudoku.Data.IReadOnlyGrid,System.Collections.Generic.IEnumerable{Sudoku.Data.Conclusion})">
            <summary>
            To check the validity of all conclusions.
            </summary>
            <param name="solution">The solution.</param>
            <param name="conclusions">The conclusions.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.ManualSolver.ReportProgress(Sudoku.Data.IReadOnlyGrid,System.IProgress{Sudoku.ComponentModel.IProgressResult},Sudoku.ComponentModel.GridProgressResult@)">
            <summary>
            To report the progress.
            </summary>
            <param name="cloneation">The cloneation grid.</param>
            <param name="progress">The progress reporter.</param>
            <param name="progressResult">(<see langword="ref"/> parameter) The progress result.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo">
            <summary>
            Provides a usage of empty rectangle technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Solving.ConjugatePair)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="block">The block.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.Block">
            <summary>
            The block.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher">
            <summary>
            Encapsulates an empty rectangle technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.LinkIds">
            <summary>
            Indicates all regions iterating on the specified block
            forming an empty rectangle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.EmptyRectangleTechniqueSearcher.IsEmptyRectangle(Sudoku.Data.GridMap,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Check whether the cells form an empty cell.
            </summary>
            <param name="blockMap">The empty cell grid map.</param>
            <param name="block">The block.</param>
            <param name="row">(<see langword="out"/> parameter) The row.</param>
            <param name="column">(<see langword="out"/> parameter) The column.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo">
            <summary>
            Provides a usage of guardian technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="loop">The loop.</param>
            <param name="guardians">The guardians.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo.Loop">
            <summary>
            Indicates the loop.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo.Guardians">
            <summary>
            Indicates the guardians.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.GuardianTechniqueSearcher">
            <summary>
            Encapsulates a <b>guardian</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.GuardianTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.GuardianTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.SdpTechniqueInfo">
            <summary>
            Provides a usage of <b>single-digit pattern</b> (SDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.SdpTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.SdpTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.SdpTechniqueSearcher">
            <summary>
            Encapsulates a <b>single-digit pattern</b> (SDP) technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo">
            <summary>
            Provides a usage of two strong links technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="baseRegion">The base region.</param>
            <param name="targetRegion">The target region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.BaseRegion">
            <summary>
            Indicates the base region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.TargetRegion">
            <summary>
            Indicates the target region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueSearcher">
            <summary>
            Encapsulates a two strong links technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Sdps.TwoStrongLinksTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo">
            <summary>
            Indicates a usage of <b>full house</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.FullHouseTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo">
            <summary>
            Indicates a using of <b>hidden single</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="regionOffset">The region offset.</param>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
            <param name="enableAndIsLastDigit">
            Indicates whether the solver enables last digit.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.RegionOffset">
            <summary>
            Indicates the region offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.EnableAndIsLastDigit">
            <summary>
            Indicates whether the solver enables last digit technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.HiddenSingleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo">
            <summary>
            Indicates a usage of <b>naked single</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cellOffset">The cell offset.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.NakedSingleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo">
            <summary>
            Provides a usage of <b>single</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.Cell">
            <summary>
            Indicates the cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueInfo.DifficultyLevel">
            <summary>
            Indicates the difficulty level.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher">
            <summary>
            Encapsulates a <b>single</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher._enableFullHouse">
            <summary>
            Indicates the solver enables these options.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher._enableLastDigit">
            <summary>
            Indicates the solver enables these options.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance with enable options.
            </summary>
            <param name="enableFullHouse">
            Indicates whether the solver enables full house.
            </param>
            <param name="enableLastDigit">
            Indicates whether the solver enables last digit.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
            <remarks>
            Note that this technique searcher will be used in other functions,
            so we should not use base maps like 'EmptyMap'.
            Those maps will be initialized in the special cases.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo">
            <summary>
            Provides a usage of <b>hidden subset</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.Size">
            <summary>
            Indicates the size of this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.HiddenSubsetTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo">
            <summary>
            Provides a usage of <b>naked subset</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Nullable{System.Boolean})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="regionOffset">The region offset.</param>
            <param name="cellOffsets">The cell offsets.</param>
            <param name="digits">The digits.</param>
            <param name="isLocked">Indicates whether the technique is locked. </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.IsLocked">
            <summary>
            Represents a value for this technique is a locked,
            partial locked or normal subset.
            The technique is one when the value is:
            <list type="table">
            <item><term><see langword="true"/></term><description>Locked subset,</description></item>
            <item><term><see langword="false"/></term><description>Partial locked subset,</description></item>
            <item><term><see langword="null"/></term><description>Normal subset.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.Size">
            <summary>
            Indicates the size.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.NakedSubsetTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo">
            <summary>
            Provides a usage of <b>subset</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="regionOffset">The region offset.</param>
            <param name="cellOffsets">The cell offsets.</param>
            <param name="digits">The digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.RegionOffset">
            <summary>
            The region offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.Digits">
            <summary>
            All digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.CellOffsets">
            <summary>
            All cell offsets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher">
            <summary>
            Encapsulates a <b>subset</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Subsets.SubsetTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo">
            <summary>
            Provides a usage of <b>Gurth's symmetrical placement</b> (GSP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.SymmetryType,System.Nullable{System.Int32}[])">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="symmetryType">The symmetry type.</param>
            <param name="mappingTable">The mapping table.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.SymmetryType">
            <summary>
            Indicates the symmetry type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.MappingTable">
            <summary>
            Indicates the mapping table.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.GspTechniqueSearcher">
            <summary>
            Encapsulates a <b>Gurth's symmetrical placement</b> (GSP) technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Symmetry.GspTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspTechniqueSearcher.CheckDiagonal(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Check diagonal symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspTechniqueSearcher.CheckAntiDiagonal(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Check anti-diagonal symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.GspTechniqueSearcher.CheckCentral(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Check central symmetry.
            </summary>
            <param name="result">The result accumulator.</param>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.SymmetryTechniqueInfo">
            <summary>
            Provides a usage of <b>symmetry</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Symmetry.SymmetryTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Symmetry.SymmetryTechniqueSearcher">
            <summary>
            Encapsulates a <b>symmetry</b> technique searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo">
            <summary>
            Provides a usage of <b>BUG + n</b> technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.DifficultyExtra">
            <summary>
            The table of extra difficulty values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="candidates">All candidates.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.Candidates">
            <summary>
            Indicates all candidates used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugMultipleTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher">
            <summary>
            Encapsulates a <b>bivalue universal grave</b> (BUG) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher._extended">
            <summary>
            Indicates whether the searcher should call the extended BUG checker
            to find all true candidates.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.#ctor(System.Boolean)">
            <summary>
            Initializes an instance with the region maps.
            </summary>
            <param name="extended">
            A <see cref="T:System.Boolean"/> value indicating whether the searcher should call
            the extended BUG checker to search for all true candidates no matter how
            difficult searching.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.CheckType2(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The result list.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.CheckType3Naked(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 3 (with naked subsets).
            </summary>
            <param name="accumulator">The result.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.CheckType4(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The result.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.CheckMultiple(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check BUG + n.
            </summary>
            <param name="accumulator">The result list.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.CheckXz(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check BUG-XZ.
            </summary>
            <param name="accumulator">The result list.</param>
            <param name="grid">The grid.</param>
            <param name="trueCandidates">All true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.GetTrueCandidatesSimply(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To get true candidates (but simple mode).
            </summary>
            <param name="grid">The grid.</param>
            <returns>All true candidates searched.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugTechniqueSearcher.CheckSingleDigit(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check whether all candidates in the list has same digit value.
            </summary>
            <param name="list">The list of all true candidates.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1TechniqueInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 1 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType1TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 2 technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.DifficultyExtra">
            <summary>
            The table of extra difficulty values.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit">The digit.</param>
            <param name="cells">All cell offsets.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.Cells">
            <summary>
            Indicates the cell offsets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType2TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 3 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="trueCandidates">All true candidates.</param>
            <param name="digits">All digits.</param>
            <param name="cells">All cells.</param>
            <param name="isNaked">Indicates whether the subset is naked.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.TrueCandidates">
            <summary>
            Indicates all true candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.Digits">
            <summary>
            Indicates all digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.Cells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.IsNaked">
            <summary>
            Indicates whether the technique is with naked subsets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType3TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave</b> (BUG) type 4 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},Sudoku.Solving.ConjugatePair)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digits">All digits.</param>
            <param name="cells">All cells.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.Digits">
            <summary>
            Indicates all digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.Cells">
            <summary>
            Indicates all cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugType4TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo">
            <summary>
            Provides a usage of <b>bivalue universal grave XZ rule</b> (BUG-XZ) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digitMask">The digits mask.</param>
            <param name="cells">All cell offsets.</param>
            <param name="extraCell">The extra cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.DigitsMask">
            <summary>
            Indicates the digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.Cells">
            <summary>
            Indicates the cell offsets.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.ExtraCell">
            <summary>
            Indicates the extra cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Bugs.BugXzTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.DifficultyExtra">
            <summary>
            The difficulty extra.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.Cells">
            <summary>
            Indicates the cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.Digits">
            <summary>
            Indicates all digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.Size">
            <summary>
            Indicates the size of the instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueInfo.GetAdditional">
            <summary>
            Get additional string.
            </summary>
            <returns>The additional string.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher">
            <summary>
            Encapsulates an <b>extended rectangle</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.Regions">
            <summary>
            The table of regions to traverse.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.FitTableRow">
            <summary>
            The fit type XRs table (row direction).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.FitTableColumn">
            <summary>
            The fit type XRs table (column direction).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.Combinations">
            <summary>
            All combinations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrTechniqueSearcher.#cctor">
            <staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor><staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1TechniqueInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 1 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType1TechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2TechniqueInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 2 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2TechniqueInfo.ExtraDigit">
            <summary>
            Indicates the extra digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType2TechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 3 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int16,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="extraCells">All extra cells.</param>
            <param name="extraDigits">All extra digits.</param>
            <param name="region">The region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.ExtraCells">
            <summary>
            Indicates the extra cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.ExtraDigits">
            <summary>
            Indicates the extra digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.Region">
            <summary>
            Indicates the region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType3TechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4TechniqueInfo">
            <summary>
            Provides a usage of <b>extended rectangle</b> (XR) type 4 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,Sudoku.Solving.ConjugatePair)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">All cells.</param>
            <param name="digits">All digits.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4TechniqueInfo.ConjugatePair">
            <summary>
            The conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Extended.XrType4TechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo">
            <summary>
            Provides a usage of <b>unique loop</b> (UL) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.DifficultyExtra">
            <summary>
            The difficulty extra.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.GridMap)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.Digit1">
            <summary>
            Indicates the digit 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.Digit2">
            <summary>
            Indicates the digit 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.Loop">
            <summary>
            Indicates the loop.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.Type">
            <summary>
            Indicates the type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher">
            <summary>
            Encapsulates a <b>unique loop</b> (UL) technique searcher.
            In fact the unique loop can also search for URs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.CheckType1(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.CheckType2(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int16)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c>1 &lt;&lt; d1 | 1 &lt;&lt; d2</c>).</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.CheckType3(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int16)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c>1 &lt;&lt; d1 | 1 &lt;&lt; d2</c>).</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.CheckType4(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Data.GridMap,System.Int16)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c>1 &lt;&lt; d1 | 1 &lt;&lt; d2</c>).</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlTechniqueSearcher.LoopIsValid(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            To check whether the specified loop is valid.
            </summary>
            <param name="loop">The loop.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1TechniqueInfo">
            <summary>
            Provides a usage of <b>unique loop type 1</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.GridMap)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1TechniqueInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType1TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2TechniqueInfo">
            <summary>
            Provides a usage of <b>unique loop type 2</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.GridMap,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2TechniqueInfo.ExtraDigit">
            <summary>
            Indicates the extra digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2TechniqueInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType2TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3TechniqueInfo">
            <summary>
            Provides a usage of <b>unique loop type 3</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.GridMap,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="subsetDigitsMask">The subset digits mask.</param>
            <param name="subsetCells">The subset cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3TechniqueInfo.SubsetDigitsMask">
            <summary>
            Indicates the extra digit mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3TechniqueInfo.SubsetCells">
            <summary>
            Indicates the subset cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3TechniqueInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType3TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4TechniqueInfo">
            <summary>
            Provides a usage of <b>unique loop type 4</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Data.GridMap,Sudoku.Solving.ConjugatePair)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4TechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4TechniqueInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Loops.UlType4TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern</b> (BDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digitsMask">The digits mask.</param>
            <param name="map">The cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.Map">
            <summary>
            Indicates the cells used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.DigitsMask">
            <summary>
            Indicates the digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher">
            <summary>
            Encapsulates a <b>Borescoper's deadly pattern</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.Patterns">
            <summary>
            All different patterns.
            </summary>
            <remarks>
            All possible heptagons and octagons are in here.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.Quads">
            <summary>
            All combinations in a block.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.#cctor">
            <staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor><staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType1TechniqueInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 1</b> (BDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType1TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType1TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType1TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2TechniqueInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 2</b> (BDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="map">The cells used.</param>
            <param name="digitsMask">The digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2TechniqueInfo.ExtraDigit">
            <summary>
            Indicates the extra digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType2TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3TechniqueInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 3</b> (BDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,Sudoku.Data.GridMap,System.Int16)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="map">The cells used.</param>
            <param name="digitsMask">The digits mask.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="extraDigitsMask">The extra digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3TechniqueInfo.ExtraCells">
            <summary>
            Indicates the extra cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3TechniqueInfo.ExtraDigitsMask">
            <summary>
            Indicates the extra digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType3TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4TechniqueInfo">
            <summary>
            Provides a usage of <b>Borescoper's deadly pattern type 4</b> (BDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,Sudoku.Data.GridMap,System.Int16)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="map">The cells used.</param>
            <param name="digitsMask">The digits mask.</param>
            <param name="conjugateRegion">The conjugate region.</param>
            <param name="extraMask">The extra mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4TechniqueInfo.ExtraMask">
            <summary>
            Indicates the mask of digits that is the combination.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4TechniqueInfo.ConjugateRegion">
            <summary>
            The so-called conjugate region. If you do not know what is a "conjugate region",
            please read the comments in the method <see cref="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.CheckType4(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern,System.Int16,System.Int16,System.Int16,Sudoku.Data.GridMap)"/> for more details.
            </summary>
            <seealso cref="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpTechniqueSearcher.CheckType4(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern,System.Int16,System.Int16,System.Int16,Sudoku.Data.GridMap)"/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.BdpType4TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern">
            <summary>
            Indicates the borescoper's deadly pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern._mask">
            <summary>
            Indicates the internal structure.
            </summary>
            <remarks>
            <para>
            This mask is of type <see cref="T:System.Int64"/>:
            <code>
            0      7     14     21     28     35     42     49     56<br/>
            ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓<br/>
            |-------|-------|-------|-------|-------|-------|-------|-------|<br/>
            </code>
            where the bit [0..56] is for 8 cells, the last 7 bits determine the pattern is a
            heptagon or a octagon. If the value is 127 (not available), the pattern will be a heptagon.
            </para>
            <para>
            Due to the rendering engine, you have to check this file rather than the tip window.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.#ctor(System.Int64)">
            <summary>
            Initializes an instance with the specified mask.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair1">
            <summary>
            Indicates the pair 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair2">
            <summary>
            Indicates the pair 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.CenterCells">
            <summary>
            Indicates the other three (or four) cells.
            </summary>
            <remarks>
            <b>If and only if</b> the fourth value in the returned quadruple is available.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.IsHeptagon">
            <summary>
            Indicates whether the specified pattern is a heptagon.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair1Map">
            <summary>
            Indicates the map of pair 1 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Pair2Map">
            <summary>
            Indicates the map of pair 2 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.CenterCellsMap">
            <summary>
            The map of other three (or four) cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Map">
            <summary>
            The map.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Equals(System.Object)">
            <method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true" /> if the specified object is equal to the
			current object; otherwise, <see langword="false" />.
		</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.Equals(Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.GetHashCode">
            <method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.op_Equality(Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern.op_Inequality(Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern,Sudoku.Solving.Manual.Uniqueness.Polygons.Pattern)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern">
            <summary>
            Encapsulates a pattern for Qiu's deadly pattern (QDP).
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.#ctor(Sudoku.Data.GridMap,Sudoku.Data.GridMap,Sudoku.Data.GridMap)">
            <summary>
            Initializes an instance with the specified maps.
            </summary>
            <param name="square">The square.</param>
            <param name="baseLine">The base line.</param>
            <param name="pair">The pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Square">
            <summary>
            Indicates the square.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.BaseLine">
            <summary>
            Indicates the base line.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Pair">
            <summary>
            Indicates the pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.FullMap">
            <summary>
            Indicates the full map.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Deconstruct(Sudoku.Data.GridMap@,Sudoku.Data.GridMap@,Sudoku.Data.GridMap@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="pair">(<see langword="out" /> parameter) The pair map.</param>
            <param name="square">(<see langword="out" /> parameter) The square map.</param>
            <param name="baseLine">(<see langword="out" /> parameter) The base line map.</param>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.ToString">
            <method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeTechniqueInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern locked type</b> (QDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pattern">The pattern.</param>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeTechniqueInfo.Candidates">
            <summary>
            Indicates the candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpLockedTypeTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern</b> (QDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.Pattern">
            <summary>
            Indicates the pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher">
            <summary>
            Encapsulates a <b>Qiu's deadly pattern</b> technique searcher.
            <code>
            .-------.-------.-------.<br/>
            | . . . | . . . | . . . |<br/>
            | . . . | . . . | . . . |<br/>
            | P P . | . . . | . . . |<br/>
            :-------+-------+-------:<br/>
            | S S B | B B B | B B B |<br/>
            | S S B | B B B | B B B |<br/>
            | . . . | . . . | . . . |<br/>
            :-------+-------+-------:<br/>
            | . . . | . . . | . . . |<br/>
            | . . . | . . . | . . . |<br/>
            | . . . | . . . | . . . |<br/>
            '-------'-------'-------'
            </code>
            Where:
            <list type="table">
            <item><term>P</term><description>Pair Cells.</description></item>
            <item><term>S</term><description>Square Cells.</description></item>
            <item><term>B</term><description>Base Line Cells.</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher.Patterns">
            <summary>
            All different patterns.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher.BaseLineIterator">
            <summary>
            The base line iterator.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher.StartCells">
            <summary>
            The start cells iterator (used as a <see cref="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Pair"/>).
            </summary>
            <seealso cref="P:Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern.Pair"/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpTechniqueSearcher.#cctor">
            <defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1TechniqueInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 1</b> (QDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pattern">The pattern.</param>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1TechniqueInfo.Candidate">
            <summary>
            Indicates the candidate.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType1TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2TechniqueInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 2</b> (QDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pattern">The pattern.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2TechniqueInfo.ExtraDigit">
            <summary>
            Indicates the extra digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType2TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3TechniqueInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 3</b> (QDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pattern">The pattern.</param>
            <param name="extraDigitsMask">The extra digits mask.</param>
            <param name="extraCells">The extra cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3TechniqueInfo.ExtraDigitsMask">
            <summary>
            Indicates the extra digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3TechniqueInfo.ExtraCells">
            <summary>
            Indicates the extra cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType3TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4TechniqueInfo">
            <summary>
            Provides a usage of <b>Qiu's deadly pattern type 4</b> (QDP) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Qiu.Pattern,Sudoku.Solving.ConjugatePair)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pattern">The pattern.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4TechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Qiu.QdpType4TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.HiddenUrTechniqueInfo">
            <summary>
            Provides a usage of <b>hidden unique rectangle</b> (HUR) or
            <b>hidden avoidable rectangle</b> (HAR) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.HiddenUrTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Collections.Generic.IReadOnlyList{Sudoku.Solving.ConjugatePair},System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All cells.</param>
            <param name="conjugatePairs">The conjugate pairs.</param>
            <param name="isAr">Indicates whether the specified structure is an AR.</param>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo">
            <summary>
            Provides a usage of <b>unique rectangle + 2D (or 3X)</b> or
            <b>avoidable rectangle + 2D (or 3X)</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="typeCode">The type code.</param>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All cells.</param>
            <param name="x">The X digit.</param>
            <param name="y">The Y digit.</param>
            <param name="xyCell">The cell that only contains X and Y digit.</param>
            <param name="isAr">Indicates whether the specified structure forms an AR.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo.X">
            <summary>
            Indicates the X digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo.Y">
            <summary>
            Indicates the Y digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo.XyCell">
            <summary>
            Indicates the cell that only contains X and Y digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.Ur2DOr3XTechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusTechniqueInfo">
            <summary>
            Provides a usage of <b>unique rectangle plus</b> (UR+) or
            <b>avoidable rectangle plus</b> (AR+) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode,System.Int32,System.Int32,System.Int32[],System.Collections.Generic.IReadOnlyList{Sudoku.Solving.ConjugatePair},System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="typeCode">The type code.</param>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All UR cells.</param>
            <param name="conjugatePairs">All conjugate pairs.</param>
            <param name="isAr">Indicates whether the specified structure is an AR.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusTechniqueInfo.ConjugatePairs">
            <summary>
            Indicates all conjugate pairs used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrPlusTechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode,System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="typeCode">The type code.</param>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All cells.</param>
            <param name="isAr">Indicates whether the structure is an AR.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.TypeCode">
            <summary>
            Indicates the UR type code.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.Digit1">
            <summary>
            Indicates the digit 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.Digit2">
            <summary>
            Indicates the digit 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.Cells">
            <summary>
            Indicates the cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.IsAr">
            <summary>
            Indicates the current structure is UR or AR.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.GetAdditional">
            <summary>
            Get additional string.
            </summary>
            <returns>The additional string.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo.System#IComparable{Sudoku#Solving#Manual#Uniqueness#Rects#UrTechniqueInfo}#CompareTo(Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher">
            <summary>
            Encapsulates an <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher._allowIncompleteUr">
            <summary>
            Indicates whether the UR can be incomplete. In other words,
            some of UR candidates can be removed before the pattern forms.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher._searchExtended">
            <summary>
            Indicates whether the searcher can search for extended URs.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance with the specified value indicating
            whether the structure can be incomplete, and a value indicating
            whether the searcher can search for extended URs.
            </summary>
            <param name="allowIncomplete">
            A <see cref="T:System.Boolean"/> value indicating that.
            </param>
            <param name="searchExtended">A <see cref="T:System.Boolean"/> value indicating that.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.IsConjugatePair(System.Int32,Sudoku.Data.GridMap,System.Int32)">
            <summary>
            To determine whether the specified region forms a conjugate pair
            of the specified digit, and the cells where they contain the digit
            is same as the given map contains.
            </summary>
            <param name="digit">The digit.</param>
            <param name="map">The map.</param>
            <param name="region">The region.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.CheckHighlightType(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Check highlight type.
            </summary>
            <param name="pair">The pair.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.GetDiagonalCell(System.Int32[],System.Int32)">
            <summary>
            Get a cell that cannot see each other.
            </summary>
            <param name="urCells">The UR cells.</param>
            <param name="cell">The current cell.</param>
            <returns>The diagonal cell.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the specified argument <paramref name="cell"/> is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.GetSameRegionCell(System.Int32,Sudoku.Data.GridMap,System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            Get a cell that is in the same region of the specified cell lies in.
            </summary>
            <param name="currentCell">The current cell.</param>
            <param name="otherCellsMap">The map of other cells.</param>
            <param name="region">
            (<see langword="out"/> parameter) The result regions that both cells lie in.
            If the cell cannot be found, the parameter will be an empty array of type <see cref="T:System.Int32"/>.
            </param>
            <returns>The cell.</returns>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrTechniqueSearcher.GetHighlightCells(System.Int32[])">
            <summary>
            Get all highlight cells.
            </summary>
            <param name="urCells">The all UR cells used.</param>
            <returns>The list of highlight cells.</returns>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1TechniqueInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 1 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All cells.</param>
            <param name="isAr">Indicates whether the instance is an AR.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType1TechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2TechniqueInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 2 (or type 5) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode,System.Int32,System.Int32,System.Int32[],System.Boolean,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="typeCode">The type code.</param>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All cells.</param>
            <param name="isAr">Indicates whether the instance is an AR.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2TechniqueInfo.ExtraDigit">
            <summary>
            Indicates the extra digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType2TechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) type 3 technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int32[],System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All cells.</param>
            <param name="extraDigits">All extra digits.</param>
            <param name="extraCells">All extra cells.</param>
            <param name="region">The region.</param>
            <param name="isNaked">Indicates whether the subset is naked.</param>
            <param name="isAr">Indicates whether the specified structure is an AR.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.ExtraDigits">
            <summary>
            Indicates the extra digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.ExtraCells">
            <summary>
            Indicates the extra cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.IsNaked">
            <summary>
            Indicates whether the specified subset is naked.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.Region">
            <summary>
            Indicates the current region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrType3TechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode">
            <summary>
            Indicates the type code for each UR type. Some types have the another name,
            which have been listed also.
            </summary>
            <remarks>
            All types can be found in
            <a href="https://github.com/Sunnie-Shine/Sudoku/wiki/The-gallery-of-Unique-Rectangles">this link</a>.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus1">
            <summary>
            Indicates the type 1 (UR + 1).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Type1">
            <summary>
            Indicates the type 1 (UR + 1).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus2x">
            <summary>
            Indicates the type 2 (UR + 2x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Type2">
            <summary>
            Indicates the type 2 (UR + 2x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus2X">
            <summary>
            Indicates the type 3 (UR + 2X).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Type3">
            <summary>
            Indicates the type 3 (UR + 2X).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus2X1SL">
            <summary>
            Indicates the type 4 (UR + 2X / 1SL).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Type4">
            <summary>
            Indicates the type 4 (UR + 2X / 1SL).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus2d">
            <summary>
            Indicates the type 5 (UR + 2d).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3x">
            <summary>
            Indicates the type 5 (UR + 3x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Type5">
            <summary>
            Indicates the type 5 (UR + 2d or UR + 3x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Type6">
            <summary>
            Indicates the type 6.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Hidden">
            <summary>
            Indicates the hidden UR (UR + 3C / 2SL).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3C2SL">
            <summary>
            Indicates the hidden UR (UR + 3C / 2SL).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus2D">
            <summary>
            Indicates the UR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus2B1SL">
            <summary>
            Indicates the UR + 2B / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus2D1SL">
            <summary>
            Indicates the UR + 2D / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3X">
            <summary>
            Indicates the UR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3x1SL">
            <summary>
            Indicates the UR + 3x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3X1SL">
            <summary>
            Indicates the UR + 3X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3X2SL">
            <summary>
            Indicates the UR + 3X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3N2SL">
            <summary>
            Indicates the UR + 3N / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3U2SL">
            <summary>
            Indicates the UR + 3U / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus3E2SL">
            <summary>
            Indicates the UR + 3E / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus4x1SL">
            <summary>
            Indicates the UR + 4x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus4X1SL">
            <summary>
            Indicates the UR + 4X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus4x2SL">
            <summary>
            Indicates the UR + 4x / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus4X2SL">
            <summary>
            Indicates the UR + 4X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus4X3SL">
            <summary>
            Indicates the UR + 4X / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Plus4C3SL">
            <summary>
            Indicates the UR + 4C / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.XyWing">
            <summary>
            Indicates the UR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.XyzWing">
            <summary>
            Indicates the UR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.WxyzWing">
            <summary>
            Indicates the UR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.Sdc">
            <summary>
            Indicates the UR-SdC.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus1">
            <summary>
            Indicates the type 1 (AR + 1).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AType1">
            <summary>
            Indicates the type 1 (AR + 1).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus2x">
            <summary>
            Indicates the type 2 (AR + 2x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AType2">
            <summary>
            Indicates the type 2 (AR + 2x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus2X">
            <summary>
            Indicates the type 3 (AR + 2X).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AType3">
            <summary>
            Indicates the type 3 (AR + 2X).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus2d">
            <summary>
            Indicates the type 5 (AR + 2d).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus3x">
            <summary>
            Indicates the type 5 (AR + 3x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AType5">
            <summary>
            Indicates the type 5 (AR + 2d or AR + 3x).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AHidden">
            <summary>
            Indicates the hidden AR (AR + 3C / 2SL).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus3C2SL">
            <summary>
            Indicates the hidden AR (AR + 3C / 2SL).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus2D">
            <summary>
            Indicates the AR + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.APlus3X">
            <summary>
            Indicates the AR + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AXyWing">
            <summary>
            Indicates the AR-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AXyzWing">
            <summary>
            Indicates the AR-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.AWxyzWing">
            <summary>
            Indicates the AR-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode.ASdc">
            <summary>
            Indicates the AR-SdC.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo">
            <summary>
            Provides a usage of <b>unique rectangle</b> (UR) or
            <b>avoidable rectangle</b> (AR) with wings technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.DifficultyExtra">
            <summary>
            Indicates the difficulty rating extra.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Solving.Manual.Uniqueness.Rects.UrTypeCode,System.Int32,System.Int32,System.Int32[],System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="typeCode">The type code.</param>
            <param name="digit1">The digit 1.</param>
            <param name="digit2">The digit 2.</param>
            <param name="cells">All cells.</param>
            <param name="extraCells">The extra cells.</param>
            <param name="extraDigits">The extra digits.</param>
            <param name="pivots">The pivot cells.</param>
            <param name="isAr">Indicates whether the specified structure forms an AR.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.ExtraCells">
            <summary>
            Indicates the extra cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.ExtraDigits">
            <summary>
            Indicates the extra digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.Pivots">
            <summary>
            Indicates the pivot cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Rects.UrWithWingTechniqueInfo.GetAdditional">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo">
            <summary>
            Provides a usage of <b>unique square</b> (US) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">The cells.</param>
            <param name="digitsMask">The digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.Cells">
            <summary>
            Indicates the cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.DigitsMask">
            <summary>
            Indicates the digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.ShowDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueSearcher">
            <summary>
            Encapsulates a <b>uniqueness square</b> (US) technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueSearcher.Patterns">
            <summary>
            Indicates the patterns.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueSearcher.ChuteIterator">
            <summary>
            The chute iterator.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsTechniqueSearcher.#cctor">
            <staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor><staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType1TechniqueInfo">
            <summary>
            Provides a usage of <b>unique square type 1</b> (US) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType1TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">The cells.</param>
            <param name="digitsMask">The digits mask.</param>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType1TechniqueInfo.Candidate">
            <summary>
            Indicates the true candidate.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType1TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType1TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType2TechniqueInfo">
            <summary>
            Provides a usage of <b>unique square type 2</b> (US) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType2TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,System.Int32)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">The cells.</param>
            <param name="digitsMask">The digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType2TechniqueInfo.ExtraDigit">
            <summary>
            Indicates the extra digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType2TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType2TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType3TechniqueInfo">
            <summary>
            Provides a usage of <b>unique square type 3</b> (US) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType3TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">The cells.</param>
            <param name="digitsMask">The digits mask.</param>
            <param name="extraDigitsMask">The extra digits mask.</param>
            <param name="extraCells">The extra cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType3TechniqueInfo.ExtraDigitsMask">
            <summary>
            Indicates the extra digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType3TechniqueInfo.ExtraCells">
            <summary>
            Indicates the extra cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType3TechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType3TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType3TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.Square.UsType4TechniqueInfo">
            <summary>
            Provides a usage of <b>unique square type 4</b> (US) technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType4TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},Sudoku.Data.GridMap,System.Int16,System.Int32,System.Int32,Sudoku.Data.GridMap)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="cells">The cells.</param>
            <param name="digitsMask">The digits mask.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="conjugateRegion">The so-called conjugate region.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType4TechniqueInfo.Digit1">
            <summary>
            Indicates the digit 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType4TechniqueInfo.Digit2">
            <summary>
            Indicates the digit 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType4TechniqueInfo.ConjugateRegion">
            <summary>
            Indicates the so-called conjugate region.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Uniqueness.Square.UsType4TechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.Square.UsType4TechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo">
            <summary>
            Provides a usage of <b>uniqueness</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueSearcher">
            <summary>
            Encapsulates a <b>uniqueness</b> technique searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Uniqueness.UniquenessTechniqueSearcher.UrCellsList">
            <summary>
            <para>The table of all UR cells.</para>
            <para>I strongly recommend you <b>should not</b> modify any values in this table.</para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueInfo">
            <summary>
            Encapsulates a usage of <b>irregular wing</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher">
            <summary>
            Encapsulates an <b>irregular wing</b> technique searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.IrregularWingTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
            <remarks>
            In fact, <c>Hybrid-Wing</c>s, <c>Local-Wing</c>s, <c>Split-Wing</c>s and <c>M-Wing</c>s can
            be found in another searcher. In addition, these wings are not elementary and necessary techniques
            so we does not need to list them.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo">
            <summary>
            Provides a usage of <b>W-Wing</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,Sudoku.Solving.ConjugatePair)">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="startCellOffset">Start cell offset.</param>
            <param name="endCellOffset">End cell offsets.</param>
            <param name="conjugatePair">The conjugate pair.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.StartCell">
            <summary>
            Indicates the start cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.EndCell">
            <summary>
            Indicates the end cell offset.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.ConjugatePair">
            <summary>
            Indicates the conjugate pair.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Irregular.WWingTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo">
            <summary>
            Provides a usage of <b>regular wing</b> technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.DifficultyRating">
            <summary>
            The difficulty rating.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View},System.Int32,System.Int32,System.Int16,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
            <param name="pivot">The pivot cell offset.</param>
            <param name="pivotCandidatesCount">
            The number of candidates in pivot cell.
            </param>
            <param name="digitsMask">The digits mask.</param>
            <param name="cellOffsets">The cell offsets used.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.Size">
            <summary>
            Indicates the size of this regular wing.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.Pivot">
            <summary>
            Indicates the pivot cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.PivotCellCandidatesCount">
            <summary>
            Indicates the number of candidates in the pivot cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.DigitsMask">
            <summary>
            Indicates the digits mask.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.CellOffsets">
            <summary>
            Indicates all cell offsets used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.Difficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher">
            <summary>
            Encapsulates a <b>regular wing</b> technique solver.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher._size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.Priority">
            <summary>
            Indicates the priority of this technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.IsEnabled">
            <summary>
            Indicates whether the technique is enabled.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.Regular.RegularWingTechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.WingTechniqueInfo">
            <summary>
            Provides a usage of <b>wing</b> technique.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Manual.Wings.WingTechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Manual.Wings.WingTechniqueSearcher">
            <summary>
            Encapsulates a <b>wing</b> technique solver.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Solver">
            <summary>
            Indicates an instance used for solving a sudoku puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Solver.SolverName">
            <summary>
            Indicates the name of this solver.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Solver.Solve(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            To solve the specified puzzle.
            </summary>
            <param name="grid">The puzzle.</param>
            <returns>
            An <see cref="T:Sudoku.Solving.AnalysisResult"/> displaying all information of solving.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.TechniqueInfo">
            <summary>
            Encapsulates all information after searched a solving step,
            which include the conclusion, the difficulty and so on.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.#ctor(System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion},System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View})">
            <constructor type="TechniqueInfo">
		<summary>
			Initializes an instance with the specified information.
		</summary>
		<param name="conclusions">The conclusions.</param>
		<param name="views">The views of this solving step.</param>
	</constructor>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.ShowDifficulty">
            <summary>
            <para>
            Indicates whether the difficulty rating of this technique should be
            shown in the output screen. Some techniques such as <b>Gurth's symmetrical placement</b>
            does not need to show the difficulty (because the difficulty of this technique
            is unstable).
            </para>
            <para>
            If the value is <see langword="true"/>, the analysis result will not show the difficulty
            of this instance.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Name">
            <summary>
            Indicates the technique name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Difficulty">
            <summary>
            The difficulty or this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.TechniqueCode">
            <summary>
            The technique code of this instance used for comparison
            (e.g. search for specified puzzle that contains this technique).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.DifficultyLevel">
            <summary>
            The difficulty level of this step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Conclusions">
            <summary>
            All conclusions found in this technique step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.TechniqueInfo.Views">
            <summary>
            All views to display on the GUI.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="name">(<see langword="out" /> parameter) The name.</param>
            <param name="difficulty">(<see langword="out" /> parameter) The difficulty.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.DifficultyLevel@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="name">(<see langword="out" /> parameter) The name.</param>
            <param name="difficulty">(<see langword="out" /> parameter) The difficulty.</param>
            <param name="difficultyLevel">(<see langword="out" /> parameter) The difficulty level.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.DifficultyLevel@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion}@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="name">(<see langword="out" /> parameter) The name.</param>
            <param name="difficulty">(<see langword="out" /> parameter) The difficulty.</param>
            <param name="difficultyLevel">(<see langword="out" /> parameter) The difficulty level.</param>
            <param name="conclusions">(<see langword="out" /> parameter) All conclusions.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Deconstruct(System.String@,System.Decimal@,Sudoku.Solving.DifficultyLevel@,System.Collections.Generic.IReadOnlyList{Sudoku.Data.Conclusion}@,System.Collections.Generic.IReadOnlyList{Sudoku.Drawing.View}@)">
            <method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
            <param name="name">(<see langword="out" /> parameter) The name.</param>
            <param name="difficulty">(<see langword="out" /> parameter) The difficulty.</param>
            <param name="difficultyLevel">(<see langword="out" /> parameter) The difficulty level.</param>
            <param name="conclusions">(<see langword="out" /> parameter) All conclusions.</param>
            <param name="views">(<see langword="out" /> parameter) All views.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.ApplyTo(Sudoku.Data.Grid)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.Equals(Sudoku.Solving.TechniqueInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.ToString">
            <summary>
            Returns a string that only contains the name and the basic information. Different with
            <see cref="M:Sudoku.Solving.TechniqueInfo.ToFullString"/>, the method will only contains the basic introduction about the technique.
            For example, in the <see cref="T:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo"/>, the detail will contain the several special
            eliminations, in this method, those will not be displayed, But the method <see cref="M:Sudoku.Solving.TechniqueInfo.ToFullString"/>
            will.
            </summary>
            <returns>The string instance.</returns>
            <seealso cref="T:Sudoku.Solving.Manual.Exocets.ExocetTechniqueInfo"/>
            <seealso cref="M:Sudoku.Solving.TechniqueInfo.ToFullString"/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.ToSimpleString">
            <summary>
            Returns a string that only contains the name and the conclusions.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.ToFullString">
            <summary>
            Returns a string that contains the name, the conclusions and its all details.
            This method is used for displaying details in text box control.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.op_Equality(Sudoku.Solving.TechniqueInfo,Sudoku.Solving.TechniqueInfo)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.TechniqueInfo.op_Inequality(Sudoku.Solving.TechniqueInfo,Sudoku.Solving.TechniqueInfo)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="T:Sudoku.Solving.TechniqueSearcher">
            <summary>
            Encapsulates a step finder that used in solving in
            <see cref="T:Sudoku.Solving.Manual.ManualSolver"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Manual.ManualSolver"/>
        </member>
        <member name="P:Sudoku.Solving.TechniqueSearcher.EmptyMap">
            <summary>
            The empty cells map.
            </summary>
            <property name="IMaps">
		<remarks>
			This map <b>should</b> be used after <see cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" /> called, and you<b>'d better</b>
			not use this field on <see cref="T:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher" /> instance.
		</remarks>
	</property>
            <seealso cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" />
        </member>
        <member name="P:Sudoku.Solving.TechniqueSearcher.BivalueMap">
            <summary>
            The bi-value cells map.
            </summary>
            <property name="IMaps">
		<remarks>
			This map <b>should</b> be used after <see cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" /> called, and you<b>'d better</b>
			not use this field on <see cref="T:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher" /> instance.
		</remarks>
	</property>
            <seealso cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" />
        </member>
        <member name="P:Sudoku.Solving.TechniqueSearcher.CandMaps">
            <summary>
            The candidate maps.
            </summary>
            <property name="IMaps">
		<remarks>
			This map <b>should</b> be used after <see cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" /> called, and you<b>'d better</b>
			not use this field on <see cref="T:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher" /> instance.
		</remarks>
	</property>
            <seealso cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" />
        </member>
        <member name="P:Sudoku.Solving.TechniqueSearcher.DigitMaps">
            <summary>
            The digit maps.
            </summary>
            <property name="IMaps">
		<remarks>
			This map <b>should</b> be used after <see cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" /> called, and you<b>'d better</b>
			not use this field on <see cref="T:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher" /> instance.
		</remarks>
	</property>
            <seealso cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" />
        </member>
        <member name="P:Sudoku.Solving.TechniqueSearcher.ValueMaps">
            <summary>
            The value maps.
            </summary>
            <property name="IMaps">
		<remarks>
			This map <b>should</b> be used after <see cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" /> called, and you<b>'d better</b>
			not use this field on <see cref="T:Sudoku.Solving.Manual.Singles.SingleTechniqueSearcher" /> instance.
		</remarks>
	</property>
            <seealso cref="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)" />
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.GetOne(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Take a technique step after searched all solving steps.
            </summary>
            <param name="grid">The grid to search steps.</param>
            <returns>A technique information.</returns>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.GetAll(System.Collections.Generic.IBag{Sudoku.Solving.TechniqueInfo},Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Accumulate all technique information instances into the specified accumulator.
            </summary>
            <param name="accumulator">The accumulator to store technique information.</param>
            <param name="grid">The grid to search for techniques.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.CompareTo(Sudoku.Solving.TechniqueSearcher)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.Equals(Sudoku.Solving.TechniqueSearcher)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.InitializeMaps(Sudoku.Data.IReadOnlyGrid)">
            <summary>
            Initialize the maps that used later.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.GetPriority(Sudoku.Solving.TechniqueSearcher)">
            <summary>
            To get the priority of the technique searcher.
            </summary>
            <param name="instance">The technique searcher.</param>
            <returns>The priority.</returns>
            <remarks>
            This method uses reflection to get the specified value.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_Equality(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_Inequality(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_GreaterThan(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <operator name="op_GreaterThan">
		<summary>Indicates whether the left value is greater than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_GreaterThanOrEqual(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <operator name="op_GreaterThanOrEqual">
		<summary>
			Indicates whether the left value is greater than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_LessThan(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <operator name="op_LessThan">
		<summary>Indicates whether the left value is less than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
        <member name="M:Sudoku.Solving.TechniqueSearcher.op_LessThanOrEqual(Sudoku.Solving.TechniqueSearcher,Sudoku.Solving.TechniqueSearcher)">
            <operator name="op_LessThanOrEqual">
		<summary>
			Indicates whether the left value is less than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="T:System.Boolean" /> result indicating that.</returns>
	</operator>
        </member>
    </members>
</doc>
