<?xml version="1.0" encoding="utf-8"?>
<comments>
	<!--constructors-->
	<defaultConstructor>
		<summary>Create an instance with default initialization.</summary>
	</defaultConstructor>

	<staticConstructor>
		<summary>The static constructor of this class.</summary>
	</staticConstructor>
	<staticConstructor aimTo="struct">
		<summary>The static constructor of this struct.</summary>
	</staticConstructor>
	
	<!--methods-->
	<method name="ToString" paramType="__noparam">
		<summary>Returns a string that represents the current object.</summary>
		<returns>A string that represents the current object.</returns>
	</method>
	<method name="ToString" paramType="string">
		<summary>
			Returns a string that represents the current object with the
			specified format string.
		</summary>
		<param name="format">The format.</param>
		<returns>The string result.</returns>
	</method>
	<method name="Deconstruct">
		<summary>Deconstruct this instance.</summary>
	</method>
	<method name="GetHashCode">
		<summary>
			Serves as the default hash function.
		</summary>
		<returns>The hash code.</returns>
	</method>
	<method name="Equals" paramType="object">
		<summary>
			Determines whether the specified object is equal to the current object.
		</summary>
		<param name="obj">The object to compare with the current object.</param>
		<returns>
			<see langword="true"/> if the specified object is equal to the
			current object; otherwise, <see langword="false"/>.
		</returns>
	</method>
	<method name="Equals" paramType="__any">
		<summary>
			Determine whether the current instance contains the same information with
			hat from the specified parameter.
		</summary>
		<param name="other">The other instance to determine.</param>
		<returns>A <see cref="bool"/> value indicating that.</returns>
	</method>
	
	<!--operators-->
	<operator name="op_Equality">
		<summary>Indicates whether two instances have a same value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="bool"/> result indicating that.</returns>
	</operator>
	<operator name="op_Inequality">
		<summary>Indicates whether two instances have two different values.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="bool"/> result indicating that.</returns>
	</operator>
	<operator name="op_GreaterThan">
		<summary>Indicates whether the left value is greater than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="bool"/> result indicating that.</returns>
	</operator>
	<operator name="op_LessThan">
		<summary>Indicates whether the left value is less than the right value.</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="bool"/> result indicating that.</returns>
	</operator>
	<operator name="op_GreaterThanOrEqual">
		<summary>
			Indicates whether the left value is greater than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="bool"/> result indicating that.</returns>
	</operator>
	<operator name="op_LessThanOrEqual">
		<summary>
			Indicates whether the left value is less than or equals to the right value.
		</summary>
		<param name="left">The left instance.</param>
		<param name="right">The right instance.</param>
		<returns>A <see cref="bool"/> result indicating that.</returns>
	</operator>
</comments>
