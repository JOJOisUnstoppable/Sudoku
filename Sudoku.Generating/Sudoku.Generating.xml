<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Generating</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Generating.BasicPuzzleGenerator">
            <summary>
            Provides a basic puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.BasicPuzzleGenerator.Rng">
            <summary>
            The random number generator (RNG).
            </summary>
        </member>
        <member name="F:Sudoku.Generating.BasicPuzzleGenerator.Solver">
            <summary>
            The solver when checking whether the puzzle is unique.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.BasicPuzzleGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.ExtendedGenerator">
            <summary>
            Encapsulates an extended puzzle generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.ExtendedGenerator.Rng">
            <summary>
            The random number generator.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.ExtendedGenerator.Solver">
            <summary>
            The dancing links solver.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.ExtendedGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.ExtendedGenerator.Generate(System.Int32,Sudoku.Data.SymmetricalType)">
            <summary>
            Generate a puzzle with the specified information.
            </summary>
            <param name="max">The maximum hints of the puzzle.</param>
            <param name="symmetricalType">
            The symmetrical type flags. The <see cref="T:Sudoku.Data.SymmetricalType"/> is
            a flag type, you can use bit operators to accumulate multiple
            symmetrical types such as <c><see cref="F:Sudoku.Data.SymmetricalType.AntiDiagonal"/> | <see cref="F:Sudoku.Data.SymmetricalType.Diagonal"/></c>,
            which means that the solver will generate anti-diagonal type or
            diagonal type puzzles.
            </param>
            <returns>The grid.</returns>
            <seealso cref="T:Sudoku.Data.SymmetricalType"/>
        </member>
        <member name="T:Sudoku.Generating.PuzzleGenerator">
            <summary>
            Provides data for all derived puzzle generators.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.PuzzleGenerator.Generate">
            <summary>
            Generates a puzzle.
            </summary>
            <returns>The puzzle.</returns>
        </member>
        <member name="M:Sudoku.Generating.PuzzleGenerator.GenerateAsync(System.Boolean)">
            <summary>
            Generate a puzzle asynchronizedly.
            </summary>
            <param name="continueOnCapturedContext">
            <see langword="true"/> to attempt to marshal the continuation back to
            the original context captured; otherwise, <see langword="false"/>.
            </param>
            <returns>The task of generating puzzle.</returns>
        </member>
    </members>
</doc>
