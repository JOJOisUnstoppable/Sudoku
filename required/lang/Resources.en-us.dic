{
  "Ellipsis": "......",
  "Colon": ":",
  "Space": " ",
  "GoesTo": " => ",
  "Equals": " = ",
  "Backslash": "\\",
  "ClosedBracket": ") ",
  "UnsolvedCells": "Unsolved cells: ",
  "UnsolvedCandidates": ", candidates: ",
  "Manual": "Manual",
  "ManualLight": "Manual (Light)",
  "Backtracking": "Backtracking",
  "Bitwise": "Bitwise (Unsafe)",
  "OneLineLinq": "One line LINQ",
  "ProgressAlsWWing": "Almost Locked Sets W-Wing",
  "ProgressAlsXyWing": "Almost Locked Sets XY-Wing",
  "ProgressSinglyLinkedAlsXz": "Almost Locked Sets XZ Rule",
  "ProgressDeathBlossom": "Death Blossom",
  "ProgressNishioFc": "Nishio Forcing Chains",
  "ProgressRegionFc": "(Dynamic) Forcing Chains",
  "ProgressDynamicRegionFc": "(Dynamic) Forcing Chains (+)",
  "ProgressErip": "Empty Rectangle Intersection Pair",
  "ProgressMsls": "Multi-sector Locked Sets",
  "ProgressSdc3d": "3-Dimension Sue de Coq",
  "ProgressSdc": "Sue de Coq",
  "ProgressSkLoop": "SK-Loop",
  "ProgressAic": "(Grouped) Alternating Inference Chain",
  "ProgressJe": "Junior Exocet",
  "ProgressSe": "Senior Exocet",
  "ProgressFrankenSwordfish": "Hobiwan's Fish",
  "ProgressXWing": "(Finned, Sashimi) Fish",
  "ProgressAlmostLockedPair": "Almost Locked Candidates",
  "ProgressPointing": "Locked Candidates",
  "ProgressBowmanBingo": "Bowman's Bingo",
  "ProgressBruteForce": "Brute Force",
  "ProgressPom": "Pattern Overlay",
  "ProgressTemplateSet": "Template",
  "ProgressEmptyRectangle": "Empty Rectangle",
  "ProgressGuardian": "Guardian",
  "ProgressBivalueOddagonType1": "Bivalue Oddagon",
  "ProgressGroupedBivalueOddagon": "Extended Bivalue Oddagon",
  "ProgressTurbotFish": "Two Strong Links",
  "ProgressNakedSingle": "Singles",
  "ProgressNakedPair": "Subsets",
  "ProgressGsp": "Gurth's Symmetrical Placement",
  "ProgressGsp2": "Gurth's Symmetrical Placement (+)",
  "ProgressBugType1": "Bivalue Universal Grave",
  "ProgressXrType1": "Extended Rectangle",
  "ProgressUlType1": "Unique Loop",
  "ProgressBdpType1": "Borescoper's Deadly Pattern",
  "ProgressQdpType1": "Qiu's Deadly Pattern",
  "ProgressUrType1": "Unique / Avoidable Rectangle",
  "ProgressUsType1": "Unique Square",
  "ProgressReverseUrType1": "Reverse Bivalue Universal Grave",
  "ProgressWWing": "Irregular Wing",
  "ProgressXyWing": "Regular Wing",
  "ProgressBugMultipleFc": "Bivalue Universal Grave with Forcing Chains",
  "Summary": "Summary...",
  "GeneratingProgressSingular": "1 time tried",
  "GeneratingProgressPlural": "times tried",
  "Petal": "Petals",
  "Grouped": "Grouped ",
  "Bug": "Bivalue Universal Grave",
  "Rectangle": "Rectangle ",
  "Avoidable": "Avoidable ",
  "Unique": "Unique",
  "Hidden": "Hidden ",
  "Category": "Category: ",
  "AnalysisResultPuzzle": "Puzzle: ",
  "AnalysisResultSolvingTool": "Solving tool: ",
  "AnalysisResultSolvingSteps": "Solving steps:",
  "AnalysisResultBottleneckStep": "Bottleneck step:",
  "AnalysisResultInStep": " In step ",
  "AnalysisResultTechniqueUsed": "Technique used:",
  "AnalysisResultMin": "min",
  "AnalysisResultTotal": "total",
  "AnalysisResultTechniqueUsing": "  technique using",
  "AnalysisResultStepSingular": "step",
  "AnalysisResultStepPlural": "steps",
  "AnalysisResultPuzzleRating": "Puzzle rating: ",
  "AnalysisResultPuzzleSolution": "Puzzle solution: ",
  "AnalysisResultPuzzleHas": "Puzzle has ",
  "AnalysisResultNot": "not ",
  "AnalysisResultBeenSolved": "been solved.",
  "AnalysisResultTimeElapsed": "Time elapsed: ",
  "AnalysisResultAttributes": "Attributes:",
  "AnalysisResultBackdoors": "Backdoors:",
  "LockedMemberQSnippet": ", locked member 1: ",
  "LockedMemberRSnippet": ", locked member 2: ",
  "EndoTaragetSnippet": "endo-target: ",
  "IncludedExtraRegionSnippet": ". Extra regions will be included: ",
  "ExocetBasicEliminationName": "Target",
  "ExocetTargetInferenceEliminationName": "Target Inference",
  "ExocetMirrorEliminationName": "Mirror",
  "ExocetBiBiPatternEliminationName": "Bi-bi Pattern",
  "ExocetTargetPairEliminationName": "Target Pair",
  "ExocetGeneralizedSwordfishEliminationName": "Generalized Swordfish",
  "ExocetTrueBaseEliminationName": "True Base",
  "ExocetCompatibilityTestEliminationName": "Compatibility Test",
  "ExocetEliminationSnippet": " elimination: ",
  "SymmetryTypeSnippet": "Symmetry type: ",
  "MappingRelationSnippet": ", mapping relations: ",
  "SymmetryTypeCentral": "central",
  "SymmetryTypeDiagnoal": "diagonal",
  "SymmetryTypeAntiDiagonal": "anti-diagonal",
  "SymmetrySnippet": "We should swap region(s) ",
  "SymmetryThenWeGet": "then we'll get the symmetrical placement (",
  "SubsetNamesSize2": "pair",
  "SubsetNamesSize3": "triple",
  "SubsetNamesSize4": "quadruple",
  "SubsetNamesSize5": "quintuple",
  "SubsetNamesSize6": "sextuple",
  "SubsetNamesSize7": "septuple",
  "OrKeyword": " or ",
  "WithKeyword": " with ",
  "NakedKeyword": "naked",
  "HiddenKeyword": "hidden",
  "GuardianSingular": "a guardian",
  "GuardianPlural": "guardians",
  "FinSnippet": " f",
  "FullHouse": "Full House",
  "LastDigit": "Last Digit",
  "HiddenSingleRow": "Hidden Single in Row",
  "HiddenSingleRowAlias": "Pinned Digit in Row",
  "HiddenSingleColumn": "Hidden Single in Column",
  "HiddenSingleColumnAlias": "Pinned Digit in Column",
  "HiddenSingleBlock": "Hidden Single in Block",
  "HiddenSingleBlockAlias": "Pinned Digit in Block",
  "NakedSingle": "Naked Single",
  "NakedSingleAlias": "Forced Digit",
  "Pointing": "Pointing",
  "PointingAlias": "Locked Candidates Type 1;Pointing Multiple Type 1",
  "Claiming": "Claiming",
  "ClaimingAlias": "Locked Candidates Type 2;Pointing Multiple Type 2;Box-Line Reduction;Block-Block Interaction",
  "AlmostLockedPair": "Almost Locked Pair",
  "AlmostLockedTriple": "Almost Locked Triple",
  "AlmostLockedQuadruple": "Almost Locked Quadruple",
  "NakedPair": "Naked Pair",
  "NakedPairPlus": "Naked Pair (+)",
  "LockedPair": "Locked Pair",
  "HiddenPair": "Hidden Pair",
  "NakedTriple": "Naked Triple",
  "NakedTriplePlus": "Naked Triple (+)",
  "LockedTriple": "Locked Triple",
  "HiddenTriple": "Hidden Triple",
  "NakedQuadruple": "Naked Quadruple",
  "NakedQuadruplePlus": "Naked Quadruple (+)",
  "HiddenQuadruple": "Hidden Quadruple",
  "XWing": "X-Wing",
  "FinnedXWing": "Finned X-Wing",
  "SashimiXWing": "Sashimi X-Wing",
  "SiameseFinnedXWing": "Siamese Finned X-Wing",
  "SiameseSashimiXWing": "Siamese Sashimi X-Wing",
  "SiameseSashimiXWingAlias": "Skyscraper",
  "FrankenXWing": "Franken X-Wing",
  "FinnedFrankenXWing": "Finned Franken X-Wing",
  "SashimiFrankenXWing": "Sashimi Franken X-Wing",
  "SiameseFinnedFrankenXWing": "Siamese Finned Franken X-Wing",
  "SiameseSashimiFrankenXWing": "Siamese Sashimi Franken X-Wing",
  "MutantXWing": "Mutant X-Wing",
  "FinnedMutantXWing": "Finned Mutant X-Wing",
  "SashimiMutantXWing": "Sashimi Mutant X-Wing",
  "SiameseFinnedMutantXWing": "Siamese Finned Mutant X-Wing",
  "SiameseSashimiMutantXWing": "Siamese Sashimi Mutant X-Wing",
  "Swordfish": "Swordfish",
  "FinnedSwordfish": "Finned Swordfish",
  "SashimiSwordfish": "Sashimi Swordfish",
  "SiameseFinnedSwordfish": "Siamese Finned Swordfish",
  "SiameseSashimiSwordfish": "Siamese Sashimi Swordfish",
  "FrankenSwordfish": "Franken Swordfish",
  "FinnedFrankenSwordfish": "Finned Franken Swordfish",
  "SashimiFrankenSwordfish": "Sashimi Franken Swordfish",
  "SiameseFinnedFrankenSwordfish": "Siamese Finned Franken Swordfish",
  "SiameseSashimiFrankenSwordfish": "Siamese Sashimi Franken Swordfish",
  "MutantSwordfish": "Mutant Swordfish",
  "FinnedMutantSwordfish": "Finned Mutant Swordfish",
  "SashimiMutantSwordfish": "Sashimi Mutant Swordfish",
  "SiameseFinnedMutantSwordfish": "Siamese Finned Mutant Swordfish",
  "SiameseSashimiMutantSwordfish": "Siamese Sashimi Mutant Swordfish",
  "Jellyfish": "Jellyfish",
  "FinnedJellyfish": "Finned Jellyfish",
  "SashimiJellyfish": "Sashimi Jellyfish",
  "SiameseFinnedJellyfish": "Siamese Finned Jellyfish",
  "SiameseSashimiJellyfish": "Siamese Sashimi Jellyfish",
  "FrankenJellyfish": "Franken Jellyfish",
  "FinnedFrankenJellyfish": "Finned Franken Jellyfish",
  "SashimiFrankenJellyfish": "Sashimi Franken Jellyfish",
  "SiameseFinnedFrankenJellyfish": "Siamese Finned Franken Jellyfish",
  "SiameseSashimiFrankenJellyfish": "Siamese Sashimi Franken Jellyfish",
  "MutantJellyfish": "Mutant Jellyfish",
  "FinnedMutantJellyfish": "Finned Mutant Jellyfish",
  "SashimiMutantJellyfish": "Sashimi Mutant Jellyfish",
  "SiameseFinnedMutantJellyfish": "Siamese Finned Mutant Jellyfish",
  "SiameseSashimiMutantJellyfish": "Siamese Sashimi Mutant Jellyfish",
  "Squirmbag": "Squirmbag",
  "SquirmbagAlias": "Starfish",
  "FinnedSquirmbag": "Finned Squirmbag",
  "SashimiSquirmbag": "Sashimi Squirmbag",
  "SiameseFinnedSquirmbag": "Siamese Finned Squirmbag",
  "SiameseSashimiSquirmbag": "Siamese Sashimi Squirmbag",
  "FrankenSquirmbag": "Franken Squirmbag",
  "FinnedFrankenSquirmbag": "Finned Franken Squirmbag",
  "SashimiFrankenSquirmbag": "Sashimi Franken Squirmbag",
  "SiameseFinnedFrankenSquirmbag": "Siamese Finned Franken Squirmbag",
  "SiameseSashimiFrankenSquirmbag": "Siamese Sashimi Franken Squirmbag",
  "MutantSquirmbag": "Mutant Squirmbag",
  "FinnedMutantSquirmbag": "Finned Mutant Squirmbag",
  "SashimiMutantSquirmbag": "Sashimi Mutant Squirmbag",
  "SiameseFinnedMutantSquirmbag": "Siamese Finned Mutant Squirmbag",
  "SiameseSashimiMutantSquirmbag": "Siamese Sashimi Mutant Squirmbag",
  "FinnedSquirmbagAlias": "Finned Starfish",
  "SashimiSquirmbagAlias": "Sashimi Starfish",
  "SiameseFinnedSquirmbagAlias": "Siamese Finned Starfish",
  "SiameseSashimiSquirmbagAlias": "Siamese Sashimi Starfish",
  "FrankenSquirmbagAlias": "Franken Starfish",
  "FinnedFrankenSquirmbagAlias": "Finned Franken Starfish",
  "SashimiFrankenSquirmbagAlias": "Sashimi Franken Starfish",
  "SiameseFinnedFrankenSquirmbagAlias": "Siamese Finned Franken Starfish",
  "SiameseSashimiFrankenSquirmbagAlias": "Siamese Sashimi Franken Starfish",
  "MutantSquirmbagAlias": "Mutant Starfish",
  "FinnedMutantSquirmbagAlias": "Finned Mutant Starfish",
  "SashimiMutantSquirmbagAlias": "Sashimi Mutant Starfish",
  "SiameseFinnedMutantSquirmbagAlias": "Siamese Finned Mutant Starfish",
  "SiameseSashimiMutantSquirmbagAlias": "Siamese Sashimi Mutant Starfish",
  "Whale": "Whale",
  "FinnedWhale": "Finned Whale",
  "SashimiWhale": "Sashimi Whale",
  "SiameseFinnedWhale": "Siamese Finned Whale",
  "SiameseSashimiWhale": "Siamese Sashimi Whale",
  "FrankenWhale": "Franken Whale",
  "FinnedFrankenWhale": "Finned Franken Whale",
  "SashimiFrankenWhale": "Sashimi Franken Whale",
  "SiameseFinnedFrankenWhale": "Siamese Finned Franken Whale",
  "SiameseSashimiFrankenWhale": "Siamese Sashimi Franken Whale",
  "MutantWhale": "Mutant Whale",
  "FinnedMutantWhale": "Finned Mutant Whale",
  "SashimiMutantWhale": "Sashimi Mutant Whale",
  "SiameseFinnedMutantWhale": "Siamese Finned Mutant Whale",
  "SiameseSashimiMutantWhale": "Siamese Sashimi Mutant Whale",
  "Leviathan": "Leviathan",
  "FinnedLeviathan": "Finned Leviathan",
  "SashimiLeviathan": "Sashimi Leviathan",
  "SiameseFinnedLeviathan": "Siamese Finned Leviathan",
  "SiameseSashimiLeviathan": "Siamese Sashimi Leviathan",
  "FrankenLeviathan": "Franken Leviathan",
  "FinnedFrankenLeviathan": "Finned Franken Leviathan",
  "SashimiFrankenLeviathan": "Sashimi Franken Leviathan",
  "SiameseFinnedFrankenLeviathan": "Siamese Finned Franken Leviathan",
  "SiameseSashimiFrankenLeviathan": "Siamese Sashimi Franken Leviathan",
  "MutantLeviathan": "Mutant Leviathan",
  "FinnedMutantLeviathan": "Finned Mutant Leviathan",
  "SashimiMutantLeviathan": "Sashimi Mutant Leviathan",
  "SiameseFinnedMutantLeviathan": "Siamese Finned Mutant Leviathan",
  "SiameseSashimiMutantLeviathan": "Siamese Sashimi Mutant Leviathan",
  "XyWing": "XY-Wing",
  "XyzWing": "XYZ-Wing",
  "XyzWingAlias": "Finned XY-Wing",
  "WxyzWing": "WXYZ-Wing",
  "WxyzWingAlias": "XYZW-Wing",
  "VwxyzWing": "VWXYZ-Wing",
  "UvwxyzWing": "UVWXYZ-Wing",
  "TuvwxyzWing": "TUVWXYZ-Wing",
  "StuvwxyzWing": "STUVWXYZ-Wing",
  "RstuvwxyzWing": "RSTUVWXYZ-Wing",
  "IncompleteWxyzWing": "Incomplete WXYZ-Wing",
  "IncompleteVwxyzWing": "Incomplete VWXYZ-Wing",
  "IncompleteUvwxyzWing": "Incomplete UVWXYZ-Wing",
  "IncompleteTuvwxyzWing": "Incomplete TUVWXYZ-Wing",
  "IncompleteStuvwxyzWing": "Incomplete STUVWXYZ-Wing",
  "IncompleteRstuvwxyzWing": "Incomplete RSTUVWXYZ-Wing",
  "WWing": "W-Wing",
  "WWingAlias": "Y-Wing",
  "MWing": "M-Wing",
  "LocalWing": "Local Wing",
  "SplitWing": "Split Wing",
  "HybridWing": "Hybrid Wing",
  "GroupedXyWing": "Grouped Xy Wing",
  "GroupedWWing": "Grouped W-Wing",
  "GroupedMWing": "Grouped M-Wing",
  "GroupedLocalWing": "Grouped Local Wing",
  "GroupedSplitWing": "Grouped Split Wing",
  "GroupedHybridWing": "Grouped Hybrid Wing",
  "UrType1": "Unique Rectangle Type 1",
  "UrType2": "Unique Rectangle Type 2",
  "UrType3": "Unique Rectangle Type 3",
  "UrType4": "Unique Rectangle Type 4",
  "UrType5": "Unique Rectangle Type 5",
  "UrType6": "Unique Rectangle Type 6",
  "HiddenUr": "Hidden Unique Rectangle",
  "UrPlus2D": "Unique Rectangle + 2D",
  "UrPlus2B1SL": "Unique Rectangle + 2B / 1SL",
  "UrPlus2D1SL": "Unique Rectangle + 2D / 1SL",
  "UrPlus3X": "Unique Rectangle + 3X",
  "UrPlus3x1SL_Lower": "Unique Rectangle + 3x / 1SL",
  "UrPlus3X1SL_Upper": "Unique Rectangle + 3X / 1SL",
  "UrPlus3X2SL": "Unique Rectangle + 3X / 2SL",
  "UrPlus3N2SL": "Unique Rectangle + 3N / 2SL",
  "UrPlus3U2SL": "Unique Rectangle + 3U / 2SL",
  "UrPlus3E2SL": "Unique Rectangle + 3E / 2SL",
  "UrPlus4x1SL_Lower": "Unique Rectangle + 4x / 1SL",
  "UrPlus4X1SL_Upper": "Unique Rectangle + 4X / 1SL",
  "UrPlus4x2SL_Lower": "Unique Rectangle + 4x / 2SL",
  "UrPlus4X2SL_Upper": "Unique Rectangle + 4X / 2SL",
  "UrPlus4X3SL": "Unique Rectangle + 4X / 3SL",
  "UrPlus4C3SL": "Unique Rectangle + 4C / 3SL",
  "UrXyWing": "Unique Rectangle + XY-Wing",
  "UrXyzWing": "Unique Rectangle + XYZ-Wing",
  "UrWxyzWing": "Unique Rectangle + WXYZ-Wing",
  "UrSdc": "Unique Rectangle + Sue de Coq",
  "UrGuardian": "Unique Rectangle + Guardian",
  "UrUnknownCovering": "Unique Rectangle + Unknown Covering",
  "AdvancedUr": "Unique Rectangle (+)",
  "ArType1": "Avoidable Rectangle Type 1",
  "ArType2": "Avoidable Rectangle Type 2",
  "ArType3": "Avoidable Rectangle Type 3",
  "ArType5": "Avoidable Rectangle Type 5",
  "HiddenAr": "Hidden Avoidable Rectangle",
  "ArPlus2D": "Avoidable Rectangle + 2D",
  "ArPlus3X": "Avoidable Rectangle + 3X",
  "ArXyWing": "Avoidable Rectangle + XY-Wing",
  "ArXyzWing": "Avoidable Rectangle + XYZ-Wing",
  "ArWxyzWing": "Avoidable Rectangle + WXYZ-Wing",
  "ArSdc": "Avoidable Rectangle + Sue de Coq",
  "ArGuardian": "Avoidable Rectangle + Guardian",
  "ArHiddenSingleBlock": "Avoidable Rectangle + Hidden Single in Block",
  "ArHiddenSingleRow": "Avoidable Rectangle + Hidden Single in Row",
  "ArHiddenSingleColumn": "Avoidable Rectangle + Hidden Single in Column",
  "UlType1": "Unique Loop Type 1",
  "UlType2": "Unique Loop Type 2",
  "UlType3": "Unique Loop Type 3",
  "UlType4": "Unique Loop Type 4",
  "XrType1": "Extended Rectangle Type 1",
  "XrType2": "Extended Rectangle Type 2",
  "XrType3": "Extended Rectangle Type 3",
  "XrType4": "Extended Rectangle Type 4",
  "BugType1": "Bivalue Universal Grave Type 1",
  "BugType2": "Bivalue Universal Grave Type 2",
  "BugType3": "Bivalue Universal Grave Type 3",
  "BugType4": "Bivalue Universal Grave Type 4",
  "BugMultiple": "Bivalue Universal Grave + n",
  "BugMultipleFc": "Bivalue Universal Grave + n (+)",
  "BugXz": "Bivalue Universal Grave XZ Rule",
  "BugXyzWing": "Bivalue Universal Grave XYZ-Wing",
  "BdpType1": "Borescoper's Deadly Pattern Type 1",
  "BdpType2": "Borescoper's Deadly Pattern Type 2",
  "BdpType3": "Borescoper's Deadly Pattern Type 3",
  "BdpType4": "Borescoper's Deadly Pattern Type 4",
  "QdpType1": "Qiu's Deadly Pattern Type 1",
  "QdpType2": "Qiu's Deadly Pattern Type 2",
  "QdpType3": "Qiu's Deadly Pattern Type 3",
  "QdpType4": "Qiu's Deadly Pattern Type 4",
  "LockedQdp": "Locked Qiu's Deadly Pattern",
  "UsType1": "Unique Square Type 1",
  "UsType2": "Unique Square Type 2",
  "UsType3": "Unique Square Type 3",
  "UsType4": "Unique Square Type 4",
  "ReverseUrType1": "Reverse Unique Rectangle Type 1",
  "ReverseUrType2": "Reverse Unique Rectangle Type 2",
  "ReverseUrType3": "Reverse Unique Rectangle Type 3",
  "ReverseUrType4": "Reverse Unique Rectangle Type 4",
  "ReverseUlType1": "Reverse Unique Loop Type 1",
  "ReverseUlType2": "Reverse Unique Loop Type 2",
  "ReverseUlType3": "Reverse Unique Loop Type 3",
  "ReverseUlType4": "Reverse Unique Loop Type 4",
  "Sdc": "Sue de Coq",
  "SdcAlias": "Two-sector Locked Sets",
  "Sdc3d": "3 Dimension Sue de Coq",
  "Sdc3dAlias": "3 Dimension Two-sector Locked Sets",
  "CannibalizedSdc": "Cannibalized Sue de Coq",
  "CannibalizedSdcAlias": "Cannibalized Two-sector Locked Sets",
  "Skyscraper": "Skyscraper",
  "TwoStringKite": "Two-string Kite",
  "TurbotFish": "Turbot Fish",
  "EmptyRectangle": "Empty Rectangle",
  "Guardian": "Guardian",
  "GuardianAlias": "Broken Wing",
  "BivalueOddagonType1": "Bivalue Oddagon Type 1",
  "BivalueOddagonType2": "Bivalue Oddagon Type 2",
  "BivalueOddagonType3": "Bivalue Oddagon Type 3",
  "GroupedBivalueOddagon": "Extended Bivalue Oddagon",
  "XChain": "X-Chain",
  "YChain": "Y-Chain",
  "FishyCycle": "Fishy Cycle",
  "XyChain": "XY-Chain",
  "XyCycle": "XY-Cycle",
  "XyCycleAlias": "XY-Loop",
  "XyXChain": "XY-X-Chain",
  "PurpleCow": "Purple Cow",
  "DiscontinuousNiceLoop": "Discontinuous Nice Loop",
  "ContinuousNiceLoop": "Continuous Nice Loop",
  "ContinuousNiceLoopAlias": "Bidirectional Cycle",
  "Aic": "Alternating Inference Chain",
  "GroupedXChain": "Grouped X-Chain",
  "GroupedFishyCycle": "Grouped Fishy Cycle",
  "GroupedXyChain": "Grouped XY-Chain",
  "GroupedXyCycle": "Grouped XY-Cycle",
  "GroupedXyCycleAlias": "Grouped XY-Loop",
  "GroupedXyXChain": "Grouped XY-X-Chain",
  "GroupedPurpleCow": "Grouped Purple Cow",
  "GroupedDiscontinuousNiceLoop": "Grouped Discontinuous Nice Loop",
  "GroupedContinuousNiceLoop": "Grouped Continuous Nice Loop",
  "GroupedContinuousNiceLoopAlias": "Grouped Bidirectional Cycle",
  "GroupedAic": "Grouped Alternating Inference Chain",
  "NishioFc": "Nishio Forcing Chains",
  "RegionFc": "Region Forcing Chains",
  "CellFc": "Cell Forcing Chains",
  "DynamicRegionFc": "Dynamic Region Forcing Chains",
  "DynamicCellFc": "Dynamic Cell Forcing Chains",
  "DynamicContradictionFc": "Dynamic Contradiction Forcing Chains",
  "DynamicDoubleFc": "Dynamic Double Forcing Chains",
  "DynamicFc": "Dynamic Forcing Chains",
  "Erip": "Empty Rectangle Intersection Pair",
  "Esp": "Extended Subset Principle",
  "SinglyLinkedAlsXz": "Singly Linked Almost Locked Sets XZ Rule",
  "DoublyLinkedAlsXz": "Doubly Linked Almost Locked Sets XZ Rule",
  "AlsXyWing": "Almost Locked Sets XY-Wing",
  "AlsWWing": "Almost Locked Sets W-Wing",
  "DeathBlossom": "Death Blossom",
  "Gsp": "Gurth's Symmetrical Placement",
  "Gsp2": "Gurth's Symmetrical Placement 2",
  "Je": "Junior Exocet",
  "Se": "Senior Exocet",
  "ComplexSe": "Complex Senior Exocet",
  "SiameseJe": "Siamese Je",
  "SiameseSe": "Siamese Se",
  "SkLoop": "Stephen Kurzhal's Loop",
  "SkLoopAlias": "Domino Loop",
  "Msls": "Multi-sector Locked Sets",
  "MslsAlias": "Almost Locked Sets Net",
  "Pom": "Pattern Overlay",
  "TemplateSet": "Template Set",
  "TemplateDelete": "Template Delete",
  "BowmanBingo": "Bowman's Bingo",
  "BruteForce": "Brute Force",
  "TechniqueGroupNone": "Unknown Technique",
  "TechniqueGroupSingle": "Single",
  "TechniqueGroupLc": "Locked Candidates",
  "TechniqueGroupSubset": "Subset",
  "TechniqueGroupNormalFish": "Normal Fish",
  "TechniqueGroupComplexFish": "Complex Fish",
  "TechniqueGroupWing": "Wing",
  "TechniqueGroupEmptyRectangle": "Empty Rectangle",
  "TechniqueGroupSdp": "Single-digit Patterns",
  "TechniqueGroupErip": "Empty Rectangle Intersection Pair",
  "TechniqueGroupAlc": "Almost Locked Candidates",
  "TechniqueGroupAic": "Alternating Inference Chain",
  "TechniqueGroupFc": "Forcing Chains",
  "TechniqueGroupUr": "Unique Rectangle",
  "TechniqueGroupUrPlus": "Unique Rectangle (+)",
  "TechniqueGroupUl": "Unique Loop",
  "TechniqueGroupXr": "Extended Rectangle",
  "TechniqueGroupBug": "Bivalue Universal Grave",
  "TechniqueGroupReverseBug": "Reverse Bivalue Universal Grave",
  "TechniqueGroupDeadlyPattern": "Other Deadly Pattern",
  "TechniqueGroupBivalueOddagon": "Bivalue Oddagon",
  "TechniqueGroupGroupedBivalueOddagon": "Grouped Bivalue Oddagon",
  "TechniqueGroupSdc": "Sue de Coq",
  "TechniqueGroupGuardian": "Guardian",
  "TechniqueGroupAlsChainingLike": "Almost Locked Sets (+)",
  "TechniqueGroupSkLoop": "Stephen Kurzhal's Loop",
  "TechniqueGroupMsls": "Multi-sector Locked Sets",
  "TechniqueGroupExocet": "Exocet",
  "TechniqueGroupSymmetry": "Gurth's Symmetrical Placement",
  "TechniqueGroupRankTheory": "Rank-theory Techniques",
  "TechniqueGroupBowmanBingo": "Bowman's Bingo",
  "TechniqueGroupPom": "Pattern Overlay Method",
  "TechniqueGroupTemplating": "Templating",
  "TechniqueGroupBf": "Brute Force",
  "Format_AicStepInfo": "{Name}: {ChainStr} => {ElimStr}",
  "Format_AlcStepInfo": "{Name}: {DigitsStr} from {BaseCellsStr} to {TargetCellsStr} => {ElimStr}",
  "Format_AlsWWingStepInfo": "{Name}: Two ALSes {Als1Str}, {Als2Str} connected by {ConjStr}, W = {WStr}, X = {XStr} => {ElimStr}",
  "Format_AlsXyWingStepInfo": "{Name}: {Als1Str} -> {BridgeStr} -> {Als2Str}, X = {XStr}, Y = {YStr}, Z = {ZStr} => {ElimStr}",
  "Format_AlsXzStepInfo_1": "{Name}: All digits can't be duplicate in cells {CellsStr} => {ElimStr}",
  "Format_AlsXzStepInfo_2": "{Name}: Only the digit {EspDigitStr} can be duplicate in cells {CellsStr} => {ElimStr}",
  "Format_AlsXzStepInfo_3": "{Name}: ALS #1: {Als1Str}, ALS #2: {Als2Str}, X = {XStr}{ZResultStr} => {ElimStr}",
  "Format_UrStepInfo": "{Name}: Digits {D1Str} and {D2Str} in {CellsStr}{AdditionalFormat} => {ElimStr}",
  "Format_ArWithHiddenSingleStepInfo_Additional": "hidden single: if cell {BaseCellStr} is filled with the digit {Digit1Str}, region {RegionStr} will only contain a cell {TargetCellStr} can be filled with that digit, but will raise the deadly pattern",
  "Format_Ur2DOr3XStepInfo_Additional": "X = {XDigitStr}, Y = {YDigitStr} and a bi-value cell {XYCellsStr}",
  "Format_UrPlusStepInfo_Additional": "{Prefix}conjugate pair{Suffix} {ConjPairsStr}",
  "Format_UrType2StepInfo_Additional": "extra digit {ExtraDigitStr}",
  "Format_UrType3StepInfo_Additional": "{DigitsStr} in {OnlyKeyword}cells {CellsStr} in {RegionStr}",
  "Format_UrWithGuardianStepInfo_Additional": "guardian: digit {GuardianDigitStr} in cells {GuardianCellsStr}",
  "Format_UrWithSdcStepInfo_Additional": "a generalized Sue de Coq in cells {MergedCellsStr} of digits {DigitsStr}",
  "Format_UrWithUnknownCoveringStepInfo_Additional": "unknown covering: Suppose {TargetCellStr} is filled with the unknown digit X (X is {DigitsStr}), then 4 cells form a UR deadly pattern of digit X and {ExtraDigitStr}",
  "Format_UrWithWingStepInfo_Additional": "pivots: {PivotsStr}, with digits: {DigitsStr} in cells {CellsStr}",
  "Format_BdpType1StepInfo": "{Name}: {DigitsStr} in cells {CellsStr} => {ElimStr}",
  "Format_BdpType2StepInfo": "{Name}: {DigitsStr} in cells {CellsStr} with the extra digit {ExtraDigitStr} => {ElimStr}",
  "Format_BdpType3StepInfo": "{Name}: {DigitsStr} in cells {CellsStr} with the digits {ExtraDigitsStr} in cells {ExtraCellsStr} => {ElimStr}",
  "Format_BdpType4StepInfo": "{Name}: {DigitsStr} in cells {CellsStr} with the conjugate region {ConjRegionStr} of the extra digits {ExtraCombStr} => {ElimStr}",
  "Format_BfStepInfo": "{Name}: {AssignmentStr}",
  "Format_BinaryChainingStepInfo": "{Name}: It can be proved to be a contradiction if {AnchorIsTrueOrFalseStr} is {AnchorIsNotOnStr} => {ElimStr}",
  "Format_BivalueOddagonType1StepInfo": "{Name}: If the cell {CellStr} only contains the digits {Digit1Str} and {Digit2Str} (or one of those two), the loop {LoopStr} will form an error structure => {ElimStr}",
  "Format_BivalueOddagonType2StepInfo": "{Name}: If all digit {ExtraDigitStr} in cells {LoopStr} are removed, the loop will from an error structure => {ElimStr}",
  "Format_BivalueOddagonType3StepInfo": "{Name}: To avoid the structure {LoopStr} of digits {Digit1Str} and {Digit2Str} error, the only way is to form the subset (digits {DigitsStr} in cells {ExtraCellsStr}) => {ElimStr}",
  "Format_BowmanBingoStepInfo": "{Name}: Try {ContradictionSeriesStr} => {ElimStr}",
  "Format_BugMultipleStepInfo": "{Name}: True candidates: {CandidatesStr} => {ElimStr}",
  "Format_BugMultipleWithFcStepInfo": "{Name}: True candidates: {CandidatesStr} => {ElimStr}",
  "Format_BugType1StepInfo": "{Name}: {ElimStr}",
  "Format_BugType2StepInfo": "{Name}: {ExtraDigitStr} with cells {CellsStr} => {ElimStr}",
  "Format_BugType3StepInfo": "{Name}: True candidates {TrueCandidatesStr} with {SubsetTypeStr} {SizeStr} {ExtraDigitsStr} in cells {CellsStr} => {ElimStr}",
  "Format_BugType4StepInfo": "{Name}: {DigitsStr} in cells {CellsStr} with conjugate pair {ConjStr} => {ElimStr}",
  "Format_BugXzStepInfo": "{Name}: {DigitStr} with cells {CellsStr}, with extra cell {ExtraCellStr} => {ElimStr}",
  "Format_CellChainingStepInfo": "{Name}: It can be proved using chains that all digits are false from {SourceCellStr} => {ElimStr}",
  "Format_ComplexFishStepInfo": "{Name}: {DigitStr} in {BaseSetsStr}\\{CoverSetsStr} {ExofinsStr}{EndofinsStr}=> {ElimStr}",
  "Format_DbStepInfo": "{Name}: Cell {PivotStr} - {PetalsStr} => {ElimStr}",
  "Format_EripStepInfo": "{Name}: Digits {Digit1Str}, {Digit2Str} in bivalue cells {StartCellStr} and {EndCellStr} with empty rectangle in {RegionStr} => {ElimStr}",
  "Format_ErStepInfo": "{Name}: {DigitStr} in {RegionStr} with conjugate pair {ConjStr} => {ElimStr}",
  "Format_ExocetStepInfo": "{Name}: Digits {DigitsStr} in base cells {BaseMapStr}, target cells {TargetMapStr}{LockedMemberQStr}{LockedMemberRStr}{AdditionalFormat} => {ElimStr}",
  "Format_FullHouseStepInfo": "{Name}: {CellStr} = {DigitStr}",
  "Format_GroupedBivalueOddagonStepInfo": "The cells {LoopStr} about digits {Digit1Str} and {Digit2Str} will form an invalid bi-value oddagon structure to make the puzzle no solution when all positions about a digit in digits {ExtraDigitsStr} in this structure is removed => {ElimStr}",
  "Format_GspStepInfo": "{Name}: {SymmetryTypeSnippet}{SymmetryTypeName}{MappingRelations} => {ElimStr}",
  "Format_Gsp2StepInfo": "{Name}: {SwappingStr}{GspBaseInfo}{ClosedBracket} => {ElimStr}",
  "Format_GuardianStepInfo": "{Name}: Cells {CellsStr} with {GuardianSingularOrPlural} {GuardianStr} => {ElimStr}",
  "Format_HiddenSingleStepInfo_1": "{Name}: {CellStr} = {DigitStr}",
  "Format_HiddenSingleStepInfo_2": "{Name}: {CellStr} = {DigitStr} in {RegionStr}",
  "Format_HiddenSubsetStepInfo": "{Name}: {DigitStr} in {RegionStr} => {ElimStr}",
  "Format_LcStepInfo": "{Name}: {DigitStr} in {BaseSetStr}\\{CoverSetStr} => {ElimStr}",
  "Format_LoopStepInfo": "{Name}: {ChainStr} => {ElimStr}",
  "Format_MslsStepInfo": "{Name}: {CellsCountStr} cells {CellsStr} => {ElimStr}",
  "Format_NakedSingleStepInfo": "{Name}: {CellStr} = {DigitStr}",
  "Format_NakedSubsetStepInfo": "{Name}: {DigitsStr} in {RegionStr} => {ElimStr}",
  "Format_NormalFishStepInfo": "{Name}: {DigitStr} in {BaseSetStr}\\{CoverSetStr}{FinsStr} => {ElimStr}",
  "Format_PomStepInfo": "{Name}: Digit {DigitStr} => {ElimStr}",
  "Format_QdpLockedTypeStepInfo": "{Name}: Cells {PatternStr} will be a deadly pattern if{Quantifier}{Number} {SingularOrPlural} {CandidateStr} {BeVerb} false => {ElimStr}",
  "Format_QdpType1StepInfo": "{Name}: Cells {PatternStr} will be a deadly pattern if {CandidateStr} is false => {ElimStr}",
  "Format_QdpType2StepInfo": "{Name}: Cells {PatternStr} will be a deadly pattern if all the extra digits {ExtraDigitStr} in pair cells is false => {ElimStr}",
  "Format_QdpType3StepInfo": "{Name}: Cells {PatternStr} won't be a deadly pattern if and only if digits {DigitsStr} in cells {CellsStr} is a naked {SubsetName} => {ElimStr}",
  "Format_QdpType4StepInfo": "{Name}: Cells {PatternStr} will be a deadly pattern if another digit in either cells lying on the conjugate pair {ConjStr} is true => {ElimStr}",
  "Format_RegionChainingStepInfo": "{Name}: It can be proved using chains that digit {DigitStr} from {RegionStr} are false => {ElimStr}",
  "Format_RegularWingStepInfo": "{Name}: {DigitsStr} in {PivotCellStr} with {CellsStr} => {ElimStr}",
  "Format_ReverseBugType1StepInfo": "{Name}: Digits {DigitsStr} in all empty cells may form a deadly pattern when {AnchorStr} is only last the digit {AnchorDigitStr} => {ElimStr}",
  "Format_ReverseBugType2StepInfo": "{Name}: Digits {DigitsStr} in all empty cells may form a deadly pattern when {ExtraCellsStr} is only last the digit {ExtraDigitStr} => {ElimStr}",
  "Format_ReverseBugType3StepInfo": "{Name}: If {SubsetCellsStr}({SubsetDigitsStr}) don't form a naked {SubsetName}, the deadly pattern in cells {CellsStr} will be formed => {ElimStr}",
  "Format_ReverseBugType4StepInfo": "{Name}: We can't fill with the digit {DigitStr} bacause of the conjugate pair {ConjStr}, otherwise the deadly pattern in cells {CellsStr} will be formed => {ElimStr}",
  "Format_Sdc3dStepInfo": "{Name}: {Cells1Str}({Digits1Str}) + {Cells2Str}({Digits2Str}) + {Cells3Str}({Digits3Str}) => {ElimStr}",
  "Format_SdcStepInfo": "{Name}: {IntersectionCellsStr}({IntersectionDigitsStr}) - {BlockCellsStr}({BlockDigitsStr}) & {LineCellsStr}({LineDigitsStr}) => {ElimStr}",
  "Format_SkLoopStepInfo": "{Name}: {CellsCountStr} cells {CellsStr} => {ElimStr}",
  "Format_TemplateStepInfo": "{Name}: Digit {DigitStr} => {ElimStr}",
  "Format_TwoStringLinkStepInfo": "{Name}: {DigitStr} in {BaseRegionStr}\\{TargetRegionStr} => {ElimStr}",
  "Format_UlType1StepInfo": "{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} => {ElimStr}",
  "Format_UlType2StepInfo": "{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} with the extra digit {ExtraDigitStr} => {ElimStr}",
  "Format_UlType3StepInfo": "{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} with the naked {SubsetName} with extra digits {DigitsStr} in cells {SubsetCellsStr} => {ElimStr}",
  "Format_UlType4StepInfo": "{Name}: Digits {Digit1Str}, {Digit2Str} in cells {LoopStr} with the conjugate pair {ConjStr} => {ElimStr}",
  "Format_UsType1StepInfo": "{Name}: Digits {DigitsStr} in cells {CellsStr} will form a deadly pattern if the candidate {CandidateStr} is false => {ElimStr}",
  "Format_UsType2StepInfo": "{Name}: Digits {DigitsStr} in cells {CellsStr} will form a deadly pattern if the extra digit {ExtraDigitStr} is all false in the pattern => {ElimStr}",
  "Format_UsType3StepInfo": "{Name}: Digits {DigitsStr} in cells {CellsStr} can be avoid to form a deadly pattern if and only if the digits {ExtraDigitStr} in cells {ExtraCellsStr} form a naked {SubsetName} => {ElimStr}",
  "Format_UsType4StepInfo": "{Name}: Digits {DigitsStr} in cells {CellsStr} can avoid to form a deadly pattern if and only if the conjugate region {ConjStr} can't set the digit neither {Digit1Str} nor {Digit2Str} => {ElimStr}",
  "Format_WWingStepInfo": "{Name}: {StartCellStr} to {EndCellStr} with conjugate pair {ConjStr} => {ElimStr}",
  "Format_XrType1StepInfo": "{Name}: {DigitsStr} in {CellsStr} => {ElimStr}",
  "Format_XrType2StepInfo": "{Name}: {DigitsStr} in {CellsStr} with extra digit {ExtraDigitStr} => {ElimStr}",
  "Format_XrType3StepInfo": "{Name}: {DigitsStr} in {CellsStr} with {ExtraDigitsStr} in cells {ExtraCellsStr} in {RegionStr} => {ElimStr}",
  "Format_XrType4StepInfo": "{Name}: {DigitsStr} in {CellsStr} with the conjugate pair {ConjStr} => {ElimStr}"
}