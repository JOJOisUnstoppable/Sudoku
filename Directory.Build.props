<Project>

	<!--Basic information-->
	<PropertyGroup>
		<!--Project configuration-->
		<Authors>Sunnie</Authors>
		<Copyright>Copyright (c) Sunnie 2019-2022</Copyright>
		<Version>0.7</Version>

		<!--Syntax configuration-->
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<LangVersion>preview</LangVersion>

		<!--Temporary config-->
		<NoWarn>IDE0170</NoWarn>
	</PropertyGroup>

	<!--
	Select the posible configuration if:
	* The configuration is not set - Set to default case 'Debug'.
	* The configuration is 'Debug' - Set conditional compilation symbols that contain 'DEBUG'.
	* The configuration is 'Release' - Set condition compilation symbols that don't contain 'DEBUG'.
	-->
	<Choose>
		<When Condition="'$(Configuration)'==''">
			<PropertyGroup>
				<Configuration>Debug</Configuration>
			</PropertyGroup>
		</When>
		<When Condition="'$(Configuration)'=='Debug'">
			<PropertyGroup>
				<DefineConstants>DEBUG; AUTHOR_RESERVED</DefineConstants>
			</PropertyGroup>
		</When>
		<When Condition="'$(Configuration)'=='Release'">
			<PropertyGroup>
				<DefineConstants>AUTHOR_RESERVED</DefineConstants>
			</PropertyGroup>
		</When>
	</Choose>

	<!--
	Set the plug-in code analyzer if:
	* Sudoku.UI ('Nano' as its alias name) - 2-times step-out the directory and then reference the project.
	* GlobalConfiguration.CodeGen - Do nothing.
	* Sudoku.Diagnostics.CodeAnalysis.CodeGen - Do nothing.
	* Other C# projects that isn't itself - 1-time step-out the directory and then reference the project.
	* Other non-C# projects - Do nothing.
	-->
	<Choose>
		<When Condition="'$(MSBuildProjectFile)'=='Nano.csproj'">
			<ItemGroup>
				<ProjectReference
						Include="..\..\Sudoku.Diagnostics.CodeAnalysis\Sudoku.Diagnostics.CodeAnalysis.csproj"
						OutputItemType="Analyzer"
						ReferenceOutputAssembly="true" />
			</ItemGroup>
		</When>
		<When Condition="'$(MSBuildProjectFile)'=='Sudoku.Diagnostics.CodeAnalysis.CodeGen.csproj'" />
		<When Condition="'$(MSBuildProjectFile)'=='GlobalConfiguration.CodeGen.csproj'" />
		<When Condition="'$(MSBuildProjectFile.EndsWith(`.csproj`))'=='false'" />
		<When Condition="'$(MSBuildProjectFile)'!='Sudoku.Diagnostics.CodeAnalysis.csproj'">
			<ItemGroup>
				<ProjectReference
						Include="..\Sudoku.Diagnostics.CodeAnalysis\Sudoku.Diagnostics.CodeAnalysis.csproj"
						OutputItemType="Analyzer"
						ReferenceOutputAssembly="true" />
			</ItemGroup>
		</When>
	</Choose>

	<!--
	Set the langugage to preview one, and enable the preview features,
	such as the preview feature 'static abstracts in interfaces'.
	-->
	<PropertyGroup Condition="'$(LangVersion)'=='preview'">
		<EnablePreviewFeatures>true</EnablePreviewFeatures>
	</PropertyGroup>

	<!--
	Set the nullable is enable if the language version is greater than or equals 8.0 (i.e. C# 8).
	-->
	<PropertyGroup Condition="'$(LangVersion)'=='preview' Or '$(LangVersion)'=='latest' Or '$(LangVersion)'&gt;='8.0'">
		<Nullable>enable</Nullable>
	</PropertyGroup>

	<!--
	Set the root namespace 'Sudoku.Diagnostics.CodeGen' for the source projects, which end with '.CodeGen'.
	-->
	<PropertyGroup Condition="'$(MSBuildProjectFile.TrimEnd(`.csproj`).EndsWith(`.CodeGen`))'=='true'">
		<RootNamespace>Sudoku.Diagnostics.CodeGen</RootNamespace>
	</PropertyGroup>

	<!--
	Import Microsoft.CodeAnalysis Package when:
	* The project is 'Sudoku.Diagnostics.CodeAnalysis'.
	* The project is other ones which end with '.CodeGen'.
	-->
	<ItemGroup Condition="'$(MSBuildProjectFile.TrimEnd(`.csproj`).EndsWith(`.CodeGen`))'=='true' Or '$(MSBuildProjectFile)'=='Sudoku.Diagnostics.CodeAnalysis.csproj'">
		<PackageReference Include="Microsoft.CodeAnalysis.Common" Version="4.0.1" />
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.0.1" />
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.0.1" />
	</ItemGroup>

	<!--
	Import 'GlobalConfiguration.CodeGen' project into the source genrator projects.
	-->
	<ItemGroup Condition="'$(MSBuildProjectFile.TrimEnd(`.csproj`).EndsWith(`.CodeGen`))'=='true' And '$(MSBuildProjectFile)'!='GlobalConfiguration.CodeGen.csproj'">
		<AdditionalFiles Include="..\..\Directory.Build.props" />
		<ProjectReference
				Include="..\GlobalConfiguration.CodeGen\GlobalConfiguration.CodeGen.csproj"
				OutputItemType="Analyzer"
				ReferenceOutputAssembly="true" />
	</ItemGroup>

</Project>